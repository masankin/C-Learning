// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assistant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Assistant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_Assistant_2eproto() {
  delete AssistantInfo::default_instance_;
  delete CSAsSyncInfoReq::default_instance_;
  delete CSAsSyncInfoResp::default_instance_;
  delete CSAsNewAddReq::default_instance_;
  delete CSAsNewAddResp::default_instance_;
  delete CSAsOperateReq::default_instance_;
  delete CSAsOperateResp::default_instance_;
  delete CSAsUseCardReq::default_instance_;
  delete CSAsUseCardResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Assistant_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Assistant_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AssistantInfo::default_instance_ = new AssistantInfo();
  CSAsSyncInfoReq::default_instance_ = new CSAsSyncInfoReq();
  CSAsSyncInfoResp::default_instance_ = new CSAsSyncInfoResp();
  CSAsNewAddReq::default_instance_ = new CSAsNewAddReq();
  CSAsNewAddResp::default_instance_ = new CSAsNewAddResp();
  CSAsOperateReq::default_instance_ = new CSAsOperateReq();
  CSAsOperateResp::default_instance_ = new CSAsOperateResp();
  CSAsUseCardReq::default_instance_ = new CSAsUseCardReq();
  CSAsUseCardResp::default_instance_ = new CSAsUseCardResp();
  AssistantInfo::default_instance_->InitAsDefaultInstance();
  CSAsSyncInfoReq::default_instance_->InitAsDefaultInstance();
  CSAsSyncInfoResp::default_instance_->InitAsDefaultInstance();
  CSAsNewAddReq::default_instance_->InitAsDefaultInstance();
  CSAsNewAddResp::default_instance_->InitAsDefaultInstance();
  CSAsOperateReq::default_instance_->InitAsDefaultInstance();
  CSAsOperateResp::default_instance_->InitAsDefaultInstance();
  CSAsUseCardReq::default_instance_->InitAsDefaultInstance();
  CSAsUseCardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Assistant_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Assistant_2eproto_once_);
void protobuf_AddDesc_Assistant_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Assistant_2eproto_once_,
                 &protobuf_AddDesc_Assistant_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Assistant_2eproto {
  StaticDescriptorInitializer_Assistant_2eproto() {
    protobuf_AddDesc_Assistant_2eproto();
  }
} static_descriptor_initializer_Assistant_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AssistantInfo::kAssistantIdFieldNumber;
const int AssistantInfo::kLevelFieldNumber;
const int AssistantInfo::kQualityFieldNumber;
const int AssistantInfo::kIsInBattleFieldNumber;
const int AssistantInfo::kExpTimeFieldNumber;
const int AssistantInfo::kActiveSkillsFieldNumber;
const int AssistantInfo::kPassiveSkillsFieldNumber;
#endif  // !_MSC_VER

AssistantInfo::AssistantInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.AssistantInfo)
}

void AssistantInfo::InitAsDefaultInstance() {
}

AssistantInfo::AssistantInfo(const AssistantInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.AssistantInfo)
}

void AssistantInfo::SharedCtor() {
  _cached_size_ = 0;
  assistantid_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  isinbattle_ = false;
  exptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistantInfo::~AssistantInfo() {
  // @@protoc_insertion_point(destructor:fgame.AssistantInfo)
  SharedDtor();
}

void AssistantInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AssistantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AssistantInfo& AssistantInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

AssistantInfo* AssistantInfo::default_instance_ = NULL;

AssistantInfo* AssistantInfo::New() const {
  return new AssistantInfo;
}

void AssistantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AssistantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(assistantid_, isinbattle_);
    exptime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  activeskills_.Clear();
  passiveskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AssistantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.AssistantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AssistantId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistantid_)));
          set_has_assistantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // required uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Quality;
        break;
      }

      // required uint32 Quality = 3;
      case 3: {
        if (tag == 24) {
         parse_Quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsInBattle;
        break;
      }

      // required bool IsInBattle = 4;
      case 4: {
        if (tag == 32) {
         parse_IsInBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinbattle_)));
          set_has_isinbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ExpTime;
        break;
      }

      // required uint32 ExpTime = 5;
      case 5: {
        if (tag == 40) {
         parse_ExpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exptime_)));
          set_has_exptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ActiveSkills;
        break;
      }

      // repeated uint32 ActiveSkills = 6;
      case 6: {
        if (tag == 48) {
         parse_ActiveSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_activeskills())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activeskills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ActiveSkills;
        if (input->ExpectTag(56)) goto parse_PassiveSkills;
        break;
      }

      // repeated uint32 PassiveSkills = 7;
      case 7: {
        if (tag == 56) {
         parse_PassiveSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_passiveskills())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_passiveskills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PassiveSkills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.AssistantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.AssistantInfo)
  return false;
#undef DO_
}

void AssistantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.AssistantInfo)
  // required uint32 AssistantId = 1;
  if (has_assistantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistantid(), output);
  }

  // required uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 Quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // required bool IsInBattle = 4;
  if (has_isinbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isinbattle(), output);
  }

  // required uint32 ExpTime = 5;
  if (has_exptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exptime(), output);
  }

  // repeated uint32 ActiveSkills = 6;
  for (int i = 0; i < this->activeskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->activeskills(i), output);
  }

  // repeated uint32 PassiveSkills = 7;
  for (int i = 0; i < this->passiveskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->passiveskills(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.AssistantInfo)
}

int AssistantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AssistantId = 1;
    if (has_assistantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistantid());
    }

    // required uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 Quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required bool IsInBattle = 4;
    if (has_isinbattle()) {
      total_size += 1 + 1;
    }

    // required uint32 ExpTime = 5;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exptime());
    }

  }
  // repeated uint32 ActiveSkills = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->activeskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activeskills(i));
    }
    total_size += 1 * this->activeskills_size() + data_size;
  }

  // repeated uint32 PassiveSkills = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->passiveskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->passiveskills(i));
    }
    total_size += 1 * this->passiveskills_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistantInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AssistantInfo*>(&from));
}

void AssistantInfo::MergeFrom(const AssistantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activeskills_.MergeFrom(from.activeskills_);
  passiveskills_.MergeFrom(from.passiveskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistantid()) {
      set_assistantid(from.assistantid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_isinbattle()) {
      set_isinbattle(from.isinbattle());
    }
    if (from.has_exptime()) {
      set_exptime(from.exptime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AssistantInfo::CopyFrom(const AssistantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistantInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AssistantInfo::Swap(AssistantInfo* other) {
  if (other != this) {
    std::swap(assistantid_, other->assistantid_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(isinbattle_, other->isinbattle_);
    std::swap(exptime_, other->exptime_);
    activeskills_.Swap(&other->activeskills_);
    passiveskills_.Swap(&other->passiveskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AssistantInfo::GetTypeName() const {
  return "fgame.AssistantInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSAsSyncInfoReq::CSAsSyncInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsSyncInfoReq)
}

void CSAsSyncInfoReq::InitAsDefaultInstance() {
}

CSAsSyncInfoReq::CSAsSyncInfoReq(const CSAsSyncInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsSyncInfoReq)
}

void CSAsSyncInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsSyncInfoReq::~CSAsSyncInfoReq() {
  // @@protoc_insertion_point(destructor:fgame.CSAsSyncInfoReq)
  SharedDtor();
}

void CSAsSyncInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsSyncInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsSyncInfoReq& CSAsSyncInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsSyncInfoReq* CSAsSyncInfoReq::default_instance_ = NULL;

CSAsSyncInfoReq* CSAsSyncInfoReq::New() const {
  return new CSAsSyncInfoReq;
}

void CSAsSyncInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsSyncInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsSyncInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsSyncInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsSyncInfoReq)
  return false;
#undef DO_
}

void CSAsSyncInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsSyncInfoReq)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsSyncInfoReq)
}

int CSAsSyncInfoReq::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsSyncInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsSyncInfoReq*>(&from));
}

void CSAsSyncInfoReq::MergeFrom(const CSAsSyncInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsSyncInfoReq::CopyFrom(const CSAsSyncInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsSyncInfoReq::IsInitialized() const {

  return true;
}

void CSAsSyncInfoReq::Swap(CSAsSyncInfoReq* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsSyncInfoReq::GetTypeName() const {
  return "fgame.CSAsSyncInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsSyncInfoResp::kAssistantFieldNumber;
#endif  // !_MSC_VER

CSAsSyncInfoResp::CSAsSyncInfoResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsSyncInfoResp)
}

void CSAsSyncInfoResp::InitAsDefaultInstance() {
}

CSAsSyncInfoResp::CSAsSyncInfoResp(const CSAsSyncInfoResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsSyncInfoResp)
}

void CSAsSyncInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsSyncInfoResp::~CSAsSyncInfoResp() {
  // @@protoc_insertion_point(destructor:fgame.CSAsSyncInfoResp)
  SharedDtor();
}

void CSAsSyncInfoResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsSyncInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsSyncInfoResp& CSAsSyncInfoResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsSyncInfoResp* CSAsSyncInfoResp::default_instance_ = NULL;

CSAsSyncInfoResp* CSAsSyncInfoResp::New() const {
  return new CSAsSyncInfoResp;
}

void CSAsSyncInfoResp::Clear() {
  assistant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsSyncInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsSyncInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.AssistantInfo Assistant = 1;
      case 1: {
        if (tag == 10) {
         parse_Assistant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assistant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Assistant;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsSyncInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsSyncInfoResp)
  return false;
#undef DO_
}

void CSAsSyncInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsSyncInfoResp)
  // repeated .fgame.AssistantInfo Assistant = 1;
  for (int i = 0; i < this->assistant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->assistant(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsSyncInfoResp)
}

int CSAsSyncInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.AssistantInfo Assistant = 1;
  total_size += 1 * this->assistant_size();
  for (int i = 0; i < this->assistant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assistant(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsSyncInfoResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsSyncInfoResp*>(&from));
}

void CSAsSyncInfoResp::MergeFrom(const CSAsSyncInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  assistant_.MergeFrom(from.assistant_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsSyncInfoResp::CopyFrom(const CSAsSyncInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsSyncInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assistant())) return false;
  return true;
}

void CSAsSyncInfoResp::Swap(CSAsSyncInfoResp* other) {
  if (other != this) {
    assistant_.Swap(&other->assistant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsSyncInfoResp::GetTypeName() const {
  return "fgame.CSAsSyncInfoResp";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSAsNewAddReq::CSAsNewAddReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsNewAddReq)
}

void CSAsNewAddReq::InitAsDefaultInstance() {
}

CSAsNewAddReq::CSAsNewAddReq(const CSAsNewAddReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsNewAddReq)
}

void CSAsNewAddReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsNewAddReq::~CSAsNewAddReq() {
  // @@protoc_insertion_point(destructor:fgame.CSAsNewAddReq)
  SharedDtor();
}

void CSAsNewAddReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsNewAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsNewAddReq& CSAsNewAddReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsNewAddReq* CSAsNewAddReq::default_instance_ = NULL;

CSAsNewAddReq* CSAsNewAddReq::New() const {
  return new CSAsNewAddReq;
}

void CSAsNewAddReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsNewAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsNewAddReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsNewAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsNewAddReq)
  return false;
#undef DO_
}

void CSAsNewAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsNewAddReq)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsNewAddReq)
}

int CSAsNewAddReq::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsNewAddReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsNewAddReq*>(&from));
}

void CSAsNewAddReq::MergeFrom(const CSAsNewAddReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsNewAddReq::CopyFrom(const CSAsNewAddReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsNewAddReq::IsInitialized() const {

  return true;
}

void CSAsNewAddReq::Swap(CSAsNewAddReq* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsNewAddReq::GetTypeName() const {
  return "fgame.CSAsNewAddReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsNewAddResp::kNewAddAssistantFieldNumber;
#endif  // !_MSC_VER

CSAsNewAddResp::CSAsNewAddResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsNewAddResp)
}

void CSAsNewAddResp::InitAsDefaultInstance() {
}

CSAsNewAddResp::CSAsNewAddResp(const CSAsNewAddResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsNewAddResp)
}

void CSAsNewAddResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsNewAddResp::~CSAsNewAddResp() {
  // @@protoc_insertion_point(destructor:fgame.CSAsNewAddResp)
  SharedDtor();
}

void CSAsNewAddResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsNewAddResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsNewAddResp& CSAsNewAddResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsNewAddResp* CSAsNewAddResp::default_instance_ = NULL;

CSAsNewAddResp* CSAsNewAddResp::New() const {
  return new CSAsNewAddResp;
}

void CSAsNewAddResp::Clear() {
  newaddassistant_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsNewAddResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsNewAddResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.AssistantInfo NewAddAssistant = 1;
      case 1: {
        if (tag == 10) {
         parse_NewAddAssistant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newaddassistant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_NewAddAssistant;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsNewAddResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsNewAddResp)
  return false;
#undef DO_
}

void CSAsNewAddResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsNewAddResp)
  // repeated .fgame.AssistantInfo NewAddAssistant = 1;
  for (int i = 0; i < this->newaddassistant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->newaddassistant(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsNewAddResp)
}

int CSAsNewAddResp::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.AssistantInfo NewAddAssistant = 1;
  total_size += 1 * this->newaddassistant_size();
  for (int i = 0; i < this->newaddassistant_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newaddassistant(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsNewAddResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsNewAddResp*>(&from));
}

void CSAsNewAddResp::MergeFrom(const CSAsNewAddResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  newaddassistant_.MergeFrom(from.newaddassistant_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsNewAddResp::CopyFrom(const CSAsNewAddResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsNewAddResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->newaddassistant())) return false;
  return true;
}

void CSAsNewAddResp::Swap(CSAsNewAddResp* other) {
  if (other != this) {
    newaddassistant_.Swap(&other->newaddassistant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsNewAddResp::GetTypeName() const {
  return "fgame.CSAsNewAddResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsOperateReq::kAssistantIdFieldNumber;
const int CSAsOperateReq::kOperationFieldNumber;
#endif  // !_MSC_VER

CSAsOperateReq::CSAsOperateReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsOperateReq)
}

void CSAsOperateReq::InitAsDefaultInstance() {
}

CSAsOperateReq::CSAsOperateReq(const CSAsOperateReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsOperateReq)
}

void CSAsOperateReq::SharedCtor() {
  _cached_size_ = 0;
  assistantid_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsOperateReq::~CSAsOperateReq() {
  // @@protoc_insertion_point(destructor:fgame.CSAsOperateReq)
  SharedDtor();
}

void CSAsOperateReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsOperateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsOperateReq& CSAsOperateReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsOperateReq* CSAsOperateReq::default_instance_ = NULL;

CSAsOperateReq* CSAsOperateReq::New() const {
  return new CSAsOperateReq;
}

void CSAsOperateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSAsOperateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(assistantid_, operation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsOperateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsOperateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AssistantId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistantid_)));
          set_has_assistantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Operation;
        break;
      }

      // required uint32 Operation = 2;
      case 2: {
        if (tag == 16) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsOperateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsOperateReq)
  return false;
#undef DO_
}

void CSAsOperateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsOperateReq)
  // required uint32 AssistantId = 1;
  if (has_assistantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistantid(), output);
  }

  // required uint32 Operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsOperateReq)
}

int CSAsOperateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AssistantId = 1;
    if (has_assistantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistantid());
    }

    // required uint32 Operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsOperateReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsOperateReq*>(&from));
}

void CSAsOperateReq::MergeFrom(const CSAsOperateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistantid()) {
      set_assistantid(from.assistantid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsOperateReq::CopyFrom(const CSAsOperateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsOperateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAsOperateReq::Swap(CSAsOperateReq* other) {
  if (other != this) {
    std::swap(assistantid_, other->assistantid_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsOperateReq::GetTypeName() const {
  return "fgame.CSAsOperateReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsOperateResp::kAssistantIdFieldNumber;
const int CSAsOperateResp::kOperationFieldNumber;
const int CSAsOperateResp::kResFieldNumber;
#endif  // !_MSC_VER

CSAsOperateResp::CSAsOperateResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsOperateResp)
}

void CSAsOperateResp::InitAsDefaultInstance() {
}

CSAsOperateResp::CSAsOperateResp(const CSAsOperateResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsOperateResp)
}

void CSAsOperateResp::SharedCtor() {
  _cached_size_ = 0;
  assistantid_ = 0u;
  operation_ = 0u;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsOperateResp::~CSAsOperateResp() {
  // @@protoc_insertion_point(destructor:fgame.CSAsOperateResp)
  SharedDtor();
}

void CSAsOperateResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsOperateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsOperateResp& CSAsOperateResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsOperateResp* CSAsOperateResp::default_instance_ = NULL;

CSAsOperateResp* CSAsOperateResp::New() const {
  return new CSAsOperateResp;
}

void CSAsOperateResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSAsOperateResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(assistantid_, res_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsOperateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsOperateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AssistantId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistantid_)));
          set_has_assistantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Operation;
        break;
      }

      // required uint32 Operation = 2;
      case 2: {
        if (tag == 16) {
         parse_Operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Res;
        break;
      }

      // required bool Res = 3;
      case 3: {
        if (tag == 24) {
         parse_Res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsOperateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsOperateResp)
  return false;
#undef DO_
}

void CSAsOperateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsOperateResp)
  // required uint32 AssistantId = 1;
  if (has_assistantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistantid(), output);
  }

  // required uint32 Operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  // required bool Res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->res(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsOperateResp)
}

int CSAsOperateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AssistantId = 1;
    if (has_assistantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistantid());
    }

    // required uint32 Operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

    // required bool Res = 3;
    if (has_res()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsOperateResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsOperateResp*>(&from));
}

void CSAsOperateResp::MergeFrom(const CSAsOperateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistantid()) {
      set_assistantid(from.assistantid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsOperateResp::CopyFrom(const CSAsOperateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsOperateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAsOperateResp::Swap(CSAsOperateResp* other) {
  if (other != this) {
    std::swap(assistantid_, other->assistantid_);
    std::swap(operation_, other->operation_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsOperateResp::GetTypeName() const {
  return "fgame.CSAsOperateResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsUseCardReq::kAssistantIdFieldNumber;
const int CSAsUseCardReq::kCardIDFieldNumber;
#endif  // !_MSC_VER

CSAsUseCardReq::CSAsUseCardReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsUseCardReq)
}

void CSAsUseCardReq::InitAsDefaultInstance() {
}

CSAsUseCardReq::CSAsUseCardReq(const CSAsUseCardReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsUseCardReq)
}

void CSAsUseCardReq::SharedCtor() {
  _cached_size_ = 0;
  assistantid_ = 0u;
  cardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsUseCardReq::~CSAsUseCardReq() {
  // @@protoc_insertion_point(destructor:fgame.CSAsUseCardReq)
  SharedDtor();
}

void CSAsUseCardReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsUseCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsUseCardReq& CSAsUseCardReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsUseCardReq* CSAsUseCardReq::default_instance_ = NULL;

CSAsUseCardReq* CSAsUseCardReq::New() const {
  return new CSAsUseCardReq;
}

void CSAsUseCardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSAsUseCardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(assistantid_, cardid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsUseCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsUseCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AssistantId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistantid_)));
          set_has_assistantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CardID;
        break;
      }

      // required uint32 CardID = 2;
      case 2: {
        if (tag == 16) {
         parse_CardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsUseCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsUseCardReq)
  return false;
#undef DO_
}

void CSAsUseCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsUseCardReq)
  // required uint32 AssistantId = 1;
  if (has_assistantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistantid(), output);
  }

  // required uint32 CardID = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsUseCardReq)
}

int CSAsUseCardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AssistantId = 1;
    if (has_assistantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistantid());
    }

    // required uint32 CardID = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsUseCardReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsUseCardReq*>(&from));
}

void CSAsUseCardReq::MergeFrom(const CSAsUseCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistantid()) {
      set_assistantid(from.assistantid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsUseCardReq::CopyFrom(const CSAsUseCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsUseCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAsUseCardReq::Swap(CSAsUseCardReq* other) {
  if (other != this) {
    std::swap(assistantid_, other->assistantid_);
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsUseCardReq::GetTypeName() const {
  return "fgame.CSAsUseCardReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAsUseCardResp::kAssistantIdFieldNumber;
const int CSAsUseCardResp::kCardIDFieldNumber;
const int CSAsUseCardResp::kResFieldNumber;
#endif  // !_MSC_VER

CSAsUseCardResp::CSAsUseCardResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSAsUseCardResp)
}

void CSAsUseCardResp::InitAsDefaultInstance() {
}

CSAsUseCardResp::CSAsUseCardResp(const CSAsUseCardResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSAsUseCardResp)
}

void CSAsUseCardResp::SharedCtor() {
  _cached_size_ = 0;
  assistantid_ = 0u;
  cardid_ = 0u;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAsUseCardResp::~CSAsUseCardResp() {
  // @@protoc_insertion_point(destructor:fgame.CSAsUseCardResp)
  SharedDtor();
}

void CSAsUseCardResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAsUseCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAsUseCardResp& CSAsUseCardResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Assistant_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Assistant_2eproto();
#endif
  return *default_instance_;
}

CSAsUseCardResp* CSAsUseCardResp::default_instance_ = NULL;

CSAsUseCardResp* CSAsUseCardResp::New() const {
  return new CSAsUseCardResp;
}

void CSAsUseCardResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSAsUseCardResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(assistantid_, res_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSAsUseCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSAsUseCardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AssistantId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistantid_)));
          set_has_assistantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CardID;
        break;
      }

      // required uint32 CardID = 2;
      case 2: {
        if (tag == 16) {
         parse_CardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Res;
        break;
      }

      // required bool Res = 3;
      case 3: {
        if (tag == 24) {
         parse_Res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSAsUseCardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSAsUseCardResp)
  return false;
#undef DO_
}

void CSAsUseCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSAsUseCardResp)
  // required uint32 AssistantId = 1;
  if (has_assistantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistantid(), output);
  }

  // required uint32 CardID = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardid(), output);
  }

  // required bool Res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->res(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSAsUseCardResp)
}

int CSAsUseCardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AssistantId = 1;
    if (has_assistantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistantid());
    }

    // required uint32 CardID = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // required bool Res = 3;
    if (has_res()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAsUseCardResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAsUseCardResp*>(&from));
}

void CSAsUseCardResp::MergeFrom(const CSAsUseCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistantid()) {
      set_assistantid(from.assistantid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSAsUseCardResp::CopyFrom(const CSAsUseCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAsUseCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAsUseCardResp::Swap(CSAsUseCardResp* other) {
  if (other != this) {
    std::swap(assistantid_, other->assistantid_);
    std::swap(cardid_, other->cardid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAsUseCardResp::GetTypeName() const {
  return "fgame.CSAsUseCardResp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
