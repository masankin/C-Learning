// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleRecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_BattleRecord_2eproto() {
  delete BuildInfoRecord::default_instance_;
  delete BattleRecord::default_instance_;
  delete BattleRecords::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BattleRecord_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BattleRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BuildInfoRecord::default_instance_ = new BuildInfoRecord();
  BattleRecord::default_instance_ = new BattleRecord();
  BattleRecords::default_instance_ = new BattleRecords();
  BuildInfoRecord::default_instance_->InitAsDefaultInstance();
  BattleRecord::default_instance_->InitAsDefaultInstance();
  BattleRecords::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleRecord_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BattleRecord_2eproto_once_);
void protobuf_AddDesc_BattleRecord_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BattleRecord_2eproto_once_,
                 &protobuf_AddDesc_BattleRecord_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleRecord_2eproto {
  StaticDescriptorInitializer_BattleRecord_2eproto() {
    protobuf_AddDesc_BattleRecord_2eproto();
  }
} static_descriptor_initializer_BattleRecord_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int BuildInfoRecord::kMBuildIdFieldNumber;
const int BuildInfoRecord::kMCampFieldNumber;
const int BuildInfoRecord::kMLevelFieldNumber;
const int BuildInfoRecord::kMPeopleCountFieldNumber;
#endif  // !_MSC_VER

BuildInfoRecord::BuildInfoRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.BuildInfoRecord)
}

void BuildInfoRecord::InitAsDefaultInstance() {
}

BuildInfoRecord::BuildInfoRecord(const BuildInfoRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.BuildInfoRecord)
}

void BuildInfoRecord::SharedCtor() {
  _cached_size_ = 0;
  mbuildid_ = 0u;
  mcamp_ = 0u;
  mlevel_ = 0u;
  mpeoplecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildInfoRecord::~BuildInfoRecord() {
  // @@protoc_insertion_point(destructor:fgame.BuildInfoRecord)
  SharedDtor();
}

void BuildInfoRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BuildInfoRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BuildInfoRecord& BuildInfoRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleRecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleRecord_2eproto();
#endif
  return *default_instance_;
}

BuildInfoRecord* BuildInfoRecord::default_instance_ = NULL;

BuildInfoRecord* BuildInfoRecord::New() const {
  return new BuildInfoRecord;
}

void BuildInfoRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildInfoRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mbuildid_, mpeoplecount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BuildInfoRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.BuildInfoRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mBuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mbuildid_)));
          set_has_mbuildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mCamp;
        break;
      }

      // optional uint32 mCamp = 2;
      case 2: {
        if (tag == 16) {
         parse_mCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcamp_)));
          set_has_mcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mLevel;
        break;
      }

      // optional uint32 mLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_mLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mlevel_)));
          set_has_mlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mPeopleCount;
        break;
      }

      // optional uint32 mPeopleCount = 4;
      case 4: {
        if (tag == 32) {
         parse_mPeopleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpeoplecount_)));
          set_has_mpeoplecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.BuildInfoRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.BuildInfoRecord)
  return false;
#undef DO_
}

void BuildInfoRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.BuildInfoRecord)
  // optional uint32 mBuildId = 1;
  if (has_mbuildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mbuildid(), output);
  }

  // optional uint32 mCamp = 2;
  if (has_mcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcamp(), output);
  }

  // optional uint32 mLevel = 3;
  if (has_mlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mlevel(), output);
  }

  // optional uint32 mPeopleCount = 4;
  if (has_mpeoplecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mpeoplecount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.BuildInfoRecord)
}

int BuildInfoRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mBuildId = 1;
    if (has_mbuildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mbuildid());
    }

    // optional uint32 mCamp = 2;
    if (has_mcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcamp());
    }

    // optional uint32 mLevel = 3;
    if (has_mlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mlevel());
    }

    // optional uint32 mPeopleCount = 4;
    if (has_mpeoplecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpeoplecount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildInfoRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BuildInfoRecord*>(&from));
}

void BuildInfoRecord::MergeFrom(const BuildInfoRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mbuildid()) {
      set_mbuildid(from.mbuildid());
    }
    if (from.has_mcamp()) {
      set_mcamp(from.mcamp());
    }
    if (from.has_mlevel()) {
      set_mlevel(from.mlevel());
    }
    if (from.has_mpeoplecount()) {
      set_mpeoplecount(from.mpeoplecount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BuildInfoRecord::CopyFrom(const BuildInfoRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfoRecord::IsInitialized() const {

  return true;
}

void BuildInfoRecord::Swap(BuildInfoRecord* other) {
  if (other != this) {
    std::swap(mbuildid_, other->mbuildid_);
    std::swap(mcamp_, other->mcamp_);
    std::swap(mlevel_, other->mlevel_);
    std::swap(mpeoplecount_, other->mpeoplecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BuildInfoRecord::GetTypeName() const {
  return "fgame.BuildInfoRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRecord::kMTimeIntervalFieldNumber;
const int BattleRecord::kMCommondTypeFieldNumber;
const int BattleRecord::kMSrcFieldNumber;
const int BattleRecord::kMDestFieldNumber;
const int BattleRecord::kMNumTypeFieldNumber;
const int BattleRecord::kMNumFieldNumber;
const int BattleRecord::kMBuildIdFieldNumber;
const int BattleRecord::kMEnTypeFieldNumber;
const int BattleRecord::kMKeyIdFieldNumber;
const int BattleRecord::kMChangeTypeFieldNumber;
const int BattleRecord::kMIsNewFieldNumber;
const int BattleRecord::kMDurationFieldNumber;
const int BattleRecord::kMCampFieldNumber;
const int BattleRecord::kMXFieldNumber;
const int BattleRecord::kMYFieldNumber;
const int BattleRecord::kMCreepsIdFieldNumber;
const int BattleRecord::kMHittedCreepsIDFieldNumber;
const int BattleRecord::kMHitIndexFieldNumber;
const int BattleRecord::kMOutPercentFieldNumber;
const int BattleRecord::kMVectorBuildInfoFieldNumber;
const int BattleRecord::kMPropIdFieldNumber;
const int BattleRecord::kMPropParam1FieldNumber;
const int BattleRecord::kMTurretStepFieldNumber;
#endif  // !_MSC_VER

BattleRecord::BattleRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.BattleRecord)
}

void BattleRecord::InitAsDefaultInstance() {
}

BattleRecord::BattleRecord(const BattleRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.BattleRecord)
}

void BattleRecord::SharedCtor() {
  _cached_size_ = 0;
  mtimeinterval_ = 0;
  mcommondtype_ = 0u;
  msrc_ = 0u;
  mdest_ = 0u;
  mnumtype_ = 0u;
  mnum_ = 0u;
  mbuildid_ = 0u;
  mentype_ = 0u;
  mkeyid_ = 0u;
  mchangetype_ = 0u;
  misnew_ = 0u;
  mduration_ = 0;
  mcamp_ = 0u;
  mx_ = 0;
  my_ = 0;
  mcreepsid_ = 0u;
  mhittedcreepsid_ = 0u;
  mhitindex_ = 0u;
  moutpercent_ = 0u;
  mpropid_ = 0u;
  mpropparam1_ = 0u;
  mturretstep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRecord::~BattleRecord() {
  // @@protoc_insertion_point(destructor:fgame.BattleRecord)
  SharedDtor();
}

void BattleRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleRecord& BattleRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleRecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleRecord_2eproto();
#endif
  return *default_instance_;
}

BattleRecord* BattleRecord::default_instance_ = NULL;

BattleRecord* BattleRecord::New() const {
  return new BattleRecord;
}

void BattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mtimeinterval_, mentype_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mkeyid_, mcreepsid_);
  }
  if (_has_bits_[16 / 32] & 7798784) {
    ZR_(mhittedcreepsid_, mhitindex_);
    ZR_(moutpercent_, mturretstep_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mvectorbuildinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.BattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mTimeInterval = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mtimeinterval_)));
          set_has_mtimeinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mCommondType;
        break;
      }

      // optional uint32 mCommondType = 2;
      case 2: {
        if (tag == 16) {
         parse_mCommondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcommondtype_)));
          set_has_mcommondtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mSrc;
        break;
      }

      // optional uint32 mSrc = 3;
      case 3: {
        if (tag == 24) {
         parse_mSrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msrc_)));
          set_has_msrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mDest;
        break;
      }

      // optional uint32 mDest = 4;
      case 4: {
        if (tag == 32) {
         parse_mDest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdest_)));
          set_has_mdest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mNumType;
        break;
      }

      // optional uint32 mNumType = 5;
      case 5: {
        if (tag == 40) {
         parse_mNumType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnumtype_)));
          set_has_mnumtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mNum;
        break;
      }

      // optional uint32 mNum = 6;
      case 6: {
        if (tag == 48) {
         parse_mNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnum_)));
          set_has_mnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mBuildId;
        break;
      }

      // optional uint32 mBuildId = 7;
      case 7: {
        if (tag == 56) {
         parse_mBuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mbuildid_)));
          set_has_mbuildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mEnType;
        break;
      }

      // optional uint32 mEnType = 8;
      case 8: {
        if (tag == 64) {
         parse_mEnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentype_)));
          set_has_mentype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mKeyId;
        break;
      }

      // optional uint32 mKeyId = 9;
      case 9: {
        if (tag == 72) {
         parse_mKeyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mkeyid_)));
          set_has_mkeyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mChangeType;
        break;
      }

      // optional uint32 mChangeType = 10;
      case 10: {
        if (tag == 80) {
         parse_mChangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mchangetype_)));
          set_has_mchangetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mIsNew;
        break;
      }

      // optional uint32 mIsNew = 11;
      case 11: {
        if (tag == 88) {
         parse_mIsNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misnew_)));
          set_has_misnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_mDuration;
        break;
      }

      // optional float mDuration = 12;
      case 12: {
        if (tag == 101) {
         parse_mDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mduration_)));
          set_has_mduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mCamp;
        break;
      }

      // optional uint32 mCamp = 13;
      case 13: {
        if (tag == 104) {
         parse_mCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcamp_)));
          set_has_mcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_mX;
        break;
      }

      // optional float mX = 14;
      case 14: {
        if (tag == 117) {
         parse_mX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mx_)));
          set_has_mx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_mY;
        break;
      }

      // optional float mY = 15;
      case 15: {
        if (tag == 125) {
         parse_mY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &my_)));
          set_has_my();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mCreepsId;
        break;
      }

      // optional uint32 mCreepsId = 16;
      case 16: {
        if (tag == 128) {
         parse_mCreepsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcreepsid_)));
          set_has_mcreepsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mHittedCreepsID;
        break;
      }

      // optional uint32 mHittedCreepsID = 17;
      case 17: {
        if (tag == 136) {
         parse_mHittedCreepsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mhittedcreepsid_)));
          set_has_mhittedcreepsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mHitIndex;
        break;
      }

      // optional uint32 mHitIndex = 18;
      case 18: {
        if (tag == 144) {
         parse_mHitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mhitindex_)));
          set_has_mhitindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mOutPercent;
        break;
      }

      // optional uint32 mOutPercent = 19;
      case 19: {
        if (tag == 152) {
         parse_mOutPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moutpercent_)));
          set_has_moutpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_mVectorBuildInfo;
        break;
      }

      // repeated .fgame.BuildInfoRecord mVectorBuildInfo = 20;
      case 20: {
        if (tag == 162) {
         parse_mVectorBuildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvectorbuildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_mVectorBuildInfo;
        if (input->ExpectTag(168)) goto parse_mPropId;
        break;
      }

      // optional uint32 mPropId = 21;
      case 21: {
        if (tag == 168) {
         parse_mPropId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpropid_)));
          set_has_mpropid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mPropParam1;
        break;
      }

      // optional uint32 mPropParam1 = 22;
      case 22: {
        if (tag == 176) {
         parse_mPropParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpropparam1_)));
          set_has_mpropparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_mTurretStep;
        break;
      }

      // optional uint32 mTurretStep = 23;
      case 23: {
        if (tag == 184) {
         parse_mTurretStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mturretstep_)));
          set_has_mturretstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.BattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.BattleRecord)
  return false;
#undef DO_
}

void BattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.BattleRecord)
  // optional float mTimeInterval = 1;
  if (has_mtimeinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mtimeinterval(), output);
  }

  // optional uint32 mCommondType = 2;
  if (has_mcommondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcommondtype(), output);
  }

  // optional uint32 mSrc = 3;
  if (has_msrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msrc(), output);
  }

  // optional uint32 mDest = 4;
  if (has_mdest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mdest(), output);
  }

  // optional uint32 mNumType = 5;
  if (has_mnumtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mnumtype(), output);
  }

  // optional uint32 mNum = 6;
  if (has_mnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mnum(), output);
  }

  // optional uint32 mBuildId = 7;
  if (has_mbuildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mbuildid(), output);
  }

  // optional uint32 mEnType = 8;
  if (has_mentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mentype(), output);
  }

  // optional uint32 mKeyId = 9;
  if (has_mkeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mkeyid(), output);
  }

  // optional uint32 mChangeType = 10;
  if (has_mchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mchangetype(), output);
  }

  // optional uint32 mIsNew = 11;
  if (has_misnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->misnew(), output);
  }

  // optional float mDuration = 12;
  if (has_mduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->mduration(), output);
  }

  // optional uint32 mCamp = 13;
  if (has_mcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mcamp(), output);
  }

  // optional float mX = 14;
  if (has_mx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->mx(), output);
  }

  // optional float mY = 15;
  if (has_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->my(), output);
  }

  // optional uint32 mCreepsId = 16;
  if (has_mcreepsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->mcreepsid(), output);
  }

  // optional uint32 mHittedCreepsID = 17;
  if (has_mhittedcreepsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->mhittedcreepsid(), output);
  }

  // optional uint32 mHitIndex = 18;
  if (has_mhitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->mhitindex(), output);
  }

  // optional uint32 mOutPercent = 19;
  if (has_moutpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->moutpercent(), output);
  }

  // repeated .fgame.BuildInfoRecord mVectorBuildInfo = 20;
  for (int i = 0; i < this->mvectorbuildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->mvectorbuildinfo(i), output);
  }

  // optional uint32 mPropId = 21;
  if (has_mpropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->mpropid(), output);
  }

  // optional uint32 mPropParam1 = 22;
  if (has_mpropparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->mpropparam1(), output);
  }

  // optional uint32 mTurretStep = 23;
  if (has_mturretstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->mturretstep(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.BattleRecord)
}

int BattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float mTimeInterval = 1;
    if (has_mtimeinterval()) {
      total_size += 1 + 4;
    }

    // optional uint32 mCommondType = 2;
    if (has_mcommondtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcommondtype());
    }

    // optional uint32 mSrc = 3;
    if (has_msrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msrc());
    }

    // optional uint32 mDest = 4;
    if (has_mdest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdest());
    }

    // optional uint32 mNumType = 5;
    if (has_mnumtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mnumtype());
    }

    // optional uint32 mNum = 6;
    if (has_mnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mnum());
    }

    // optional uint32 mBuildId = 7;
    if (has_mbuildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mbuildid());
    }

    // optional uint32 mEnType = 8;
    if (has_mentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mKeyId = 9;
    if (has_mkeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mkeyid());
    }

    // optional uint32 mChangeType = 10;
    if (has_mchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mchangetype());
    }

    // optional uint32 mIsNew = 11;
    if (has_misnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misnew());
    }

    // optional float mDuration = 12;
    if (has_mduration()) {
      total_size += 1 + 4;
    }

    // optional uint32 mCamp = 13;
    if (has_mcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcamp());
    }

    // optional float mX = 14;
    if (has_mx()) {
      total_size += 1 + 4;
    }

    // optional float mY = 15;
    if (has_my()) {
      total_size += 1 + 4;
    }

    // optional uint32 mCreepsId = 16;
    if (has_mcreepsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcreepsid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 mHittedCreepsID = 17;
    if (has_mhittedcreepsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mhittedcreepsid());
    }

    // optional uint32 mHitIndex = 18;
    if (has_mhitindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mhitindex());
    }

    // optional uint32 mOutPercent = 19;
    if (has_moutpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moutpercent());
    }

    // optional uint32 mPropId = 21;
    if (has_mpropid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpropid());
    }

    // optional uint32 mPropParam1 = 22;
    if (has_mpropparam1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpropparam1());
    }

    // optional uint32 mTurretStep = 23;
    if (has_mturretstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mturretstep());
    }

  }
  // repeated .fgame.BuildInfoRecord mVectorBuildInfo = 20;
  total_size += 2 * this->mvectorbuildinfo_size();
  for (int i = 0; i < this->mvectorbuildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvectorbuildinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleRecord*>(&from));
}

void BattleRecord::MergeFrom(const BattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  mvectorbuildinfo_.MergeFrom(from.mvectorbuildinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtimeinterval()) {
      set_mtimeinterval(from.mtimeinterval());
    }
    if (from.has_mcommondtype()) {
      set_mcommondtype(from.mcommondtype());
    }
    if (from.has_msrc()) {
      set_msrc(from.msrc());
    }
    if (from.has_mdest()) {
      set_mdest(from.mdest());
    }
    if (from.has_mnumtype()) {
      set_mnumtype(from.mnumtype());
    }
    if (from.has_mnum()) {
      set_mnum(from.mnum());
    }
    if (from.has_mbuildid()) {
      set_mbuildid(from.mbuildid());
    }
    if (from.has_mentype()) {
      set_mentype(from.mentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mkeyid()) {
      set_mkeyid(from.mkeyid());
    }
    if (from.has_mchangetype()) {
      set_mchangetype(from.mchangetype());
    }
    if (from.has_misnew()) {
      set_misnew(from.misnew());
    }
    if (from.has_mduration()) {
      set_mduration(from.mduration());
    }
    if (from.has_mcamp()) {
      set_mcamp(from.mcamp());
    }
    if (from.has_mx()) {
      set_mx(from.mx());
    }
    if (from.has_my()) {
      set_my(from.my());
    }
    if (from.has_mcreepsid()) {
      set_mcreepsid(from.mcreepsid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mhittedcreepsid()) {
      set_mhittedcreepsid(from.mhittedcreepsid());
    }
    if (from.has_mhitindex()) {
      set_mhitindex(from.mhitindex());
    }
    if (from.has_moutpercent()) {
      set_moutpercent(from.moutpercent());
    }
    if (from.has_mpropid()) {
      set_mpropid(from.mpropid());
    }
    if (from.has_mpropparam1()) {
      set_mpropparam1(from.mpropparam1());
    }
    if (from.has_mturretstep()) {
      set_mturretstep(from.mturretstep());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleRecord::CopyFrom(const BattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRecord::IsInitialized() const {

  return true;
}

void BattleRecord::Swap(BattleRecord* other) {
  if (other != this) {
    std::swap(mtimeinterval_, other->mtimeinterval_);
    std::swap(mcommondtype_, other->mcommondtype_);
    std::swap(msrc_, other->msrc_);
    std::swap(mdest_, other->mdest_);
    std::swap(mnumtype_, other->mnumtype_);
    std::swap(mnum_, other->mnum_);
    std::swap(mbuildid_, other->mbuildid_);
    std::swap(mentype_, other->mentype_);
    std::swap(mkeyid_, other->mkeyid_);
    std::swap(mchangetype_, other->mchangetype_);
    std::swap(misnew_, other->misnew_);
    std::swap(mduration_, other->mduration_);
    std::swap(mcamp_, other->mcamp_);
    std::swap(mx_, other->mx_);
    std::swap(my_, other->my_);
    std::swap(mcreepsid_, other->mcreepsid_);
    std::swap(mhittedcreepsid_, other->mhittedcreepsid_);
    std::swap(mhitindex_, other->mhitindex_);
    std::swap(moutpercent_, other->moutpercent_);
    mvectorbuildinfo_.Swap(&other->mvectorbuildinfo_);
    std::swap(mpropid_, other->mpropid_);
    std::swap(mpropparam1_, other->mpropparam1_);
    std::swap(mturretstep_, other->mturretstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleRecord::GetTypeName() const {
  return "fgame.BattleRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRecords::kMItemIdLeftFieldNumber;
const int BattleRecords::kMItemIdMidFieldNumber;
const int BattleRecords::kMItemIdRightFieldNumber;
const int BattleRecords::kMVecBattleRecordsFieldNumber;
#endif  // !_MSC_VER

BattleRecords::BattleRecords()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.BattleRecords)
}

void BattleRecords::InitAsDefaultInstance() {
}

BattleRecords::BattleRecords(const BattleRecords& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.BattleRecords)
}

void BattleRecords::SharedCtor() {
  _cached_size_ = 0;
  mitemidleft_ = 0u;
  mitemidmid_ = 0u;
  mitemidright_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRecords::~BattleRecords() {
  // @@protoc_insertion_point(destructor:fgame.BattleRecords)
  SharedDtor();
}

void BattleRecords::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BattleRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattleRecords& BattleRecords::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BattleRecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BattleRecord_2eproto();
#endif
  return *default_instance_;
}

BattleRecords* BattleRecords::default_instance_ = NULL;

BattleRecords* BattleRecords::New() const {
  return new BattleRecords;
}

void BattleRecords::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleRecords*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mitemidleft_, mitemidmid_);
    mitemidright_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mvecbattlerecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BattleRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.BattleRecords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mItemIdLeft = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitemidleft_)));
          set_has_mitemidleft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mItemIdMid;
        break;
      }

      // optional uint32 mItemIdMid = 2;
      case 2: {
        if (tag == 16) {
         parse_mItemIdMid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitemidmid_)));
          set_has_mitemidmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mItemIdRight;
        break;
      }

      // optional uint32 mItemIdRight = 3;
      case 3: {
        if (tag == 24) {
         parse_mItemIdRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mitemidright_)));
          set_has_mitemidright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mVecBattleRecords;
        break;
      }

      // repeated .fgame.BattleRecord mVecBattleRecords = 4;
      case 4: {
        if (tag == 34) {
         parse_mVecBattleRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvecbattlerecords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mVecBattleRecords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.BattleRecords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.BattleRecords)
  return false;
#undef DO_
}

void BattleRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.BattleRecords)
  // optional uint32 mItemIdLeft = 1;
  if (has_mitemidleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mitemidleft(), output);
  }

  // optional uint32 mItemIdMid = 2;
  if (has_mitemidmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mitemidmid(), output);
  }

  // optional uint32 mItemIdRight = 3;
  if (has_mitemidright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mitemidright(), output);
  }

  // repeated .fgame.BattleRecord mVecBattleRecords = 4;
  for (int i = 0; i < this->mvecbattlerecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mvecbattlerecords(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.BattleRecords)
}

int BattleRecords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mItemIdLeft = 1;
    if (has_mitemidleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mitemidleft());
    }

    // optional uint32 mItemIdMid = 2;
    if (has_mitemidmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mitemidmid());
    }

    // optional uint32 mItemIdRight = 3;
    if (has_mitemidright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mitemidright());
    }

  }
  // repeated .fgame.BattleRecord mVecBattleRecords = 4;
  total_size += 1 * this->mvecbattlerecords_size();
  for (int i = 0; i < this->mvecbattlerecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvecbattlerecords(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRecords::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattleRecords*>(&from));
}

void BattleRecords::MergeFrom(const BattleRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  mvecbattlerecords_.MergeFrom(from.mvecbattlerecords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mitemidleft()) {
      set_mitemidleft(from.mitemidleft());
    }
    if (from.has_mitemidmid()) {
      set_mitemidmid(from.mitemidmid());
    }
    if (from.has_mitemidright()) {
      set_mitemidright(from.mitemidright());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BattleRecords::CopyFrom(const BattleRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRecords::IsInitialized() const {

  return true;
}

void BattleRecords::Swap(BattleRecords* other) {
  if (other != this) {
    std::swap(mitemidleft_, other->mitemidleft_);
    std::swap(mitemidmid_, other->mitemidmid_);
    std::swap(mitemidright_, other->mitemidright_);
    mvecbattlerecords_.Swap(&other->mvecbattlerecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattleRecords::GetTypeName() const {
  return "fgame.BattleRecords";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
