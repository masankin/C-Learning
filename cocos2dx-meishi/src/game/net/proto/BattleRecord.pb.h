// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleRecord.proto

#ifndef PROTOBUF_BattleRecord_2eproto__INCLUDED
#define PROTOBUF_BattleRecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace fgame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleRecord_2eproto();
void protobuf_AssignDesc_BattleRecord_2eproto();
void protobuf_ShutdownFile_BattleRecord_2eproto();

class BuildInfoRecord;
class BattleRecord;
class BattleRecords;

// ===================================================================

class BuildInfoRecord : public ::google::protobuf::MessageLite {
 public:
  BuildInfoRecord();
  virtual ~BuildInfoRecord();

  BuildInfoRecord(const BuildInfoRecord& from);

  inline BuildInfoRecord& operator=(const BuildInfoRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BuildInfoRecord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BuildInfoRecord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BuildInfoRecord* other);

  // implements Message ----------------------------------------------

  BuildInfoRecord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BuildInfoRecord& from);
  void MergeFrom(const BuildInfoRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mBuildId = 1;
  inline bool has_mbuildid() const;
  inline void clear_mbuildid();
  static const int kMBuildIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mbuildid() const;
  inline void set_mbuildid(::google::protobuf::uint32 value);

  // optional uint32 mCamp = 2;
  inline bool has_mcamp() const;
  inline void clear_mcamp();
  static const int kMCampFieldNumber = 2;
  inline ::google::protobuf::uint32 mcamp() const;
  inline void set_mcamp(::google::protobuf::uint32 value);

  // optional uint32 mLevel = 3;
  inline bool has_mlevel() const;
  inline void clear_mlevel();
  static const int kMLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 mlevel() const;
  inline void set_mlevel(::google::protobuf::uint32 value);

  // optional uint32 mPeopleCount = 4;
  inline bool has_mpeoplecount() const;
  inline void clear_mpeoplecount();
  static const int kMPeopleCountFieldNumber = 4;
  inline ::google::protobuf::uint32 mpeoplecount() const;
  inline void set_mpeoplecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.BuildInfoRecord)
 private:
  inline void set_has_mbuildid();
  inline void clear_has_mbuildid();
  inline void set_has_mcamp();
  inline void clear_has_mcamp();
  inline void set_has_mlevel();
  inline void clear_has_mlevel();
  inline void set_has_mpeoplecount();
  inline void clear_has_mpeoplecount();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mbuildid_;
  ::google::protobuf::uint32 mcamp_;
  ::google::protobuf::uint32 mlevel_;
  ::google::protobuf::uint32 mpeoplecount_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BattleRecord_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BattleRecord_2eproto();
  #endif
  friend void protobuf_AssignDesc_BattleRecord_2eproto();
  friend void protobuf_ShutdownFile_BattleRecord_2eproto();

  void InitAsDefaultInstance();
  static BuildInfoRecord* default_instance_;
};
// -------------------------------------------------------------------

class BattleRecord : public ::google::protobuf::MessageLite {
 public:
  BattleRecord();
  virtual ~BattleRecord();

  BattleRecord(const BattleRecord& from);

  inline BattleRecord& operator=(const BattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BattleRecord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BattleRecord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BattleRecord* other);

  // implements Message ----------------------------------------------

  BattleRecord* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BattleRecord& from);
  void MergeFrom(const BattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float mTimeInterval = 1;
  inline bool has_mtimeinterval() const;
  inline void clear_mtimeinterval();
  static const int kMTimeIntervalFieldNumber = 1;
  inline float mtimeinterval() const;
  inline void set_mtimeinterval(float value);

  // optional uint32 mCommondType = 2;
  inline bool has_mcommondtype() const;
  inline void clear_mcommondtype();
  static const int kMCommondTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 mcommondtype() const;
  inline void set_mcommondtype(::google::protobuf::uint32 value);

  // optional uint32 mSrc = 3;
  inline bool has_msrc() const;
  inline void clear_msrc();
  static const int kMSrcFieldNumber = 3;
  inline ::google::protobuf::uint32 msrc() const;
  inline void set_msrc(::google::protobuf::uint32 value);

  // optional uint32 mDest = 4;
  inline bool has_mdest() const;
  inline void clear_mdest();
  static const int kMDestFieldNumber = 4;
  inline ::google::protobuf::uint32 mdest() const;
  inline void set_mdest(::google::protobuf::uint32 value);

  // optional uint32 mNumType = 5;
  inline bool has_mnumtype() const;
  inline void clear_mnumtype();
  static const int kMNumTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 mnumtype() const;
  inline void set_mnumtype(::google::protobuf::uint32 value);

  // optional uint32 mNum = 6;
  inline bool has_mnum() const;
  inline void clear_mnum();
  static const int kMNumFieldNumber = 6;
  inline ::google::protobuf::uint32 mnum() const;
  inline void set_mnum(::google::protobuf::uint32 value);

  // optional uint32 mBuildId = 7;
  inline bool has_mbuildid() const;
  inline void clear_mbuildid();
  static const int kMBuildIdFieldNumber = 7;
  inline ::google::protobuf::uint32 mbuildid() const;
  inline void set_mbuildid(::google::protobuf::uint32 value);

  // optional uint32 mEnType = 8;
  inline bool has_mentype() const;
  inline void clear_mentype();
  static const int kMEnTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 mentype() const;
  inline void set_mentype(::google::protobuf::uint32 value);

  // optional uint32 mKeyId = 9;
  inline bool has_mkeyid() const;
  inline void clear_mkeyid();
  static const int kMKeyIdFieldNumber = 9;
  inline ::google::protobuf::uint32 mkeyid() const;
  inline void set_mkeyid(::google::protobuf::uint32 value);

  // optional uint32 mChangeType = 10;
  inline bool has_mchangetype() const;
  inline void clear_mchangetype();
  static const int kMChangeTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 mchangetype() const;
  inline void set_mchangetype(::google::protobuf::uint32 value);

  // optional uint32 mIsNew = 11;
  inline bool has_misnew() const;
  inline void clear_misnew();
  static const int kMIsNewFieldNumber = 11;
  inline ::google::protobuf::uint32 misnew() const;
  inline void set_misnew(::google::protobuf::uint32 value);

  // optional float mDuration = 12;
  inline bool has_mduration() const;
  inline void clear_mduration();
  static const int kMDurationFieldNumber = 12;
  inline float mduration() const;
  inline void set_mduration(float value);

  // optional uint32 mCamp = 13;
  inline bool has_mcamp() const;
  inline void clear_mcamp();
  static const int kMCampFieldNumber = 13;
  inline ::google::protobuf::uint32 mcamp() const;
  inline void set_mcamp(::google::protobuf::uint32 value);

  // optional float mX = 14;
  inline bool has_mx() const;
  inline void clear_mx();
  static const int kMXFieldNumber = 14;
  inline float mx() const;
  inline void set_mx(float value);

  // optional float mY = 15;
  inline bool has_my() const;
  inline void clear_my();
  static const int kMYFieldNumber = 15;
  inline float my() const;
  inline void set_my(float value);

  // optional uint32 mCreepsId = 16;
  inline bool has_mcreepsid() const;
  inline void clear_mcreepsid();
  static const int kMCreepsIdFieldNumber = 16;
  inline ::google::protobuf::uint32 mcreepsid() const;
  inline void set_mcreepsid(::google::protobuf::uint32 value);

  // optional uint32 mHittedCreepsID = 17;
  inline bool has_mhittedcreepsid() const;
  inline void clear_mhittedcreepsid();
  static const int kMHittedCreepsIDFieldNumber = 17;
  inline ::google::protobuf::uint32 mhittedcreepsid() const;
  inline void set_mhittedcreepsid(::google::protobuf::uint32 value);

  // optional uint32 mHitIndex = 18;
  inline bool has_mhitindex() const;
  inline void clear_mhitindex();
  static const int kMHitIndexFieldNumber = 18;
  inline ::google::protobuf::uint32 mhitindex() const;
  inline void set_mhitindex(::google::protobuf::uint32 value);

  // optional uint32 mOutPercent = 19;
  inline bool has_moutpercent() const;
  inline void clear_moutpercent();
  static const int kMOutPercentFieldNumber = 19;
  inline ::google::protobuf::uint32 moutpercent() const;
  inline void set_moutpercent(::google::protobuf::uint32 value);

  // repeated .fgame.BuildInfoRecord mVectorBuildInfo = 20;
  inline int mvectorbuildinfo_size() const;
  inline void clear_mvectorbuildinfo();
  static const int kMVectorBuildInfoFieldNumber = 20;
  inline const ::fgame::BuildInfoRecord& mvectorbuildinfo(int index) const;
  inline ::fgame::BuildInfoRecord* mutable_mvectorbuildinfo(int index);
  inline ::fgame::BuildInfoRecord* add_mvectorbuildinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::BuildInfoRecord >&
      mvectorbuildinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::BuildInfoRecord >*
      mutable_mvectorbuildinfo();

  // optional uint32 mPropId = 21;
  inline bool has_mpropid() const;
  inline void clear_mpropid();
  static const int kMPropIdFieldNumber = 21;
  inline ::google::protobuf::uint32 mpropid() const;
  inline void set_mpropid(::google::protobuf::uint32 value);

  // optional uint32 mPropParam1 = 22;
  inline bool has_mpropparam1() const;
  inline void clear_mpropparam1();
  static const int kMPropParam1FieldNumber = 22;
  inline ::google::protobuf::uint32 mpropparam1() const;
  inline void set_mpropparam1(::google::protobuf::uint32 value);

  // optional uint32 mTurretStep = 23;
  inline bool has_mturretstep() const;
  inline void clear_mturretstep();
  static const int kMTurretStepFieldNumber = 23;
  inline ::google::protobuf::uint32 mturretstep() const;
  inline void set_mturretstep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.BattleRecord)
 private:
  inline void set_has_mtimeinterval();
  inline void clear_has_mtimeinterval();
  inline void set_has_mcommondtype();
  inline void clear_has_mcommondtype();
  inline void set_has_msrc();
  inline void clear_has_msrc();
  inline void set_has_mdest();
  inline void clear_has_mdest();
  inline void set_has_mnumtype();
  inline void clear_has_mnumtype();
  inline void set_has_mnum();
  inline void clear_has_mnum();
  inline void set_has_mbuildid();
  inline void clear_has_mbuildid();
  inline void set_has_mentype();
  inline void clear_has_mentype();
  inline void set_has_mkeyid();
  inline void clear_has_mkeyid();
  inline void set_has_mchangetype();
  inline void clear_has_mchangetype();
  inline void set_has_misnew();
  inline void clear_has_misnew();
  inline void set_has_mduration();
  inline void clear_has_mduration();
  inline void set_has_mcamp();
  inline void clear_has_mcamp();
  inline void set_has_mx();
  inline void clear_has_mx();
  inline void set_has_my();
  inline void clear_has_my();
  inline void set_has_mcreepsid();
  inline void clear_has_mcreepsid();
  inline void set_has_mhittedcreepsid();
  inline void clear_has_mhittedcreepsid();
  inline void set_has_mhitindex();
  inline void clear_has_mhitindex();
  inline void set_has_moutpercent();
  inline void clear_has_moutpercent();
  inline void set_has_mpropid();
  inline void clear_has_mpropid();
  inline void set_has_mpropparam1();
  inline void clear_has_mpropparam1();
  inline void set_has_mturretstep();
  inline void clear_has_mturretstep();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mtimeinterval_;
  ::google::protobuf::uint32 mcommondtype_;
  ::google::protobuf::uint32 msrc_;
  ::google::protobuf::uint32 mdest_;
  ::google::protobuf::uint32 mnumtype_;
  ::google::protobuf::uint32 mnum_;
  ::google::protobuf::uint32 mbuildid_;
  ::google::protobuf::uint32 mentype_;
  ::google::protobuf::uint32 mkeyid_;
  ::google::protobuf::uint32 mchangetype_;
  ::google::protobuf::uint32 misnew_;
  float mduration_;
  ::google::protobuf::uint32 mcamp_;
  float mx_;
  float my_;
  ::google::protobuf::uint32 mcreepsid_;
  ::google::protobuf::uint32 mhittedcreepsid_;
  ::google::protobuf::uint32 mhitindex_;
  ::google::protobuf::RepeatedPtrField< ::fgame::BuildInfoRecord > mvectorbuildinfo_;
  ::google::protobuf::uint32 moutpercent_;
  ::google::protobuf::uint32 mpropid_;
  ::google::protobuf::uint32 mpropparam1_;
  ::google::protobuf::uint32 mturretstep_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BattleRecord_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BattleRecord_2eproto();
  #endif
  friend void protobuf_AssignDesc_BattleRecord_2eproto();
  friend void protobuf_ShutdownFile_BattleRecord_2eproto();

  void InitAsDefaultInstance();
  static BattleRecord* default_instance_;
};
// -------------------------------------------------------------------

class BattleRecords : public ::google::protobuf::MessageLite {
 public:
  BattleRecords();
  virtual ~BattleRecords();

  BattleRecords(const BattleRecords& from);

  inline BattleRecords& operator=(const BattleRecords& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BattleRecords& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BattleRecords* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BattleRecords* other);

  // implements Message ----------------------------------------------

  BattleRecords* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BattleRecords& from);
  void MergeFrom(const BattleRecords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mItemIdLeft = 1;
  inline bool has_mitemidleft() const;
  inline void clear_mitemidleft();
  static const int kMItemIdLeftFieldNumber = 1;
  inline ::google::protobuf::uint32 mitemidleft() const;
  inline void set_mitemidleft(::google::protobuf::uint32 value);

  // optional uint32 mItemIdMid = 2;
  inline bool has_mitemidmid() const;
  inline void clear_mitemidmid();
  static const int kMItemIdMidFieldNumber = 2;
  inline ::google::protobuf::uint32 mitemidmid() const;
  inline void set_mitemidmid(::google::protobuf::uint32 value);

  // optional uint32 mItemIdRight = 3;
  inline bool has_mitemidright() const;
  inline void clear_mitemidright();
  static const int kMItemIdRightFieldNumber = 3;
  inline ::google::protobuf::uint32 mitemidright() const;
  inline void set_mitemidright(::google::protobuf::uint32 value);

  // repeated .fgame.BattleRecord mVecBattleRecords = 4;
  inline int mvecbattlerecords_size() const;
  inline void clear_mvecbattlerecords();
  static const int kMVecBattleRecordsFieldNumber = 4;
  inline const ::fgame::BattleRecord& mvecbattlerecords(int index) const;
  inline ::fgame::BattleRecord* mutable_mvecbattlerecords(int index);
  inline ::fgame::BattleRecord* add_mvecbattlerecords();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::BattleRecord >&
      mvecbattlerecords() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::BattleRecord >*
      mutable_mvecbattlerecords();

  // @@protoc_insertion_point(class_scope:fgame.BattleRecords)
 private:
  inline void set_has_mitemidleft();
  inline void clear_has_mitemidleft();
  inline void set_has_mitemidmid();
  inline void clear_has_mitemidmid();
  inline void set_has_mitemidright();
  inline void clear_has_mitemidright();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mitemidleft_;
  ::google::protobuf::uint32 mitemidmid_;
  ::google::protobuf::RepeatedPtrField< ::fgame::BattleRecord > mvecbattlerecords_;
  ::google::protobuf::uint32 mitemidright_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BattleRecord_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BattleRecord_2eproto();
  #endif
  friend void protobuf_AssignDesc_BattleRecord_2eproto();
  friend void protobuf_ShutdownFile_BattleRecord_2eproto();

  void InitAsDefaultInstance();
  static BattleRecords* default_instance_;
};
// ===================================================================


// ===================================================================

// BuildInfoRecord

// optional uint32 mBuildId = 1;
inline bool BuildInfoRecord::has_mbuildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildInfoRecord::set_has_mbuildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildInfoRecord::clear_has_mbuildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildInfoRecord::clear_mbuildid() {
  mbuildid_ = 0u;
  clear_has_mbuildid();
}
inline ::google::protobuf::uint32 BuildInfoRecord::mbuildid() const {
  // @@protoc_insertion_point(field_get:fgame.BuildInfoRecord.mBuildId)
  return mbuildid_;
}
inline void BuildInfoRecord::set_mbuildid(::google::protobuf::uint32 value) {
  set_has_mbuildid();
  mbuildid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BuildInfoRecord.mBuildId)
}

// optional uint32 mCamp = 2;
inline bool BuildInfoRecord::has_mcamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildInfoRecord::set_has_mcamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildInfoRecord::clear_has_mcamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildInfoRecord::clear_mcamp() {
  mcamp_ = 0u;
  clear_has_mcamp();
}
inline ::google::protobuf::uint32 BuildInfoRecord::mcamp() const {
  // @@protoc_insertion_point(field_get:fgame.BuildInfoRecord.mCamp)
  return mcamp_;
}
inline void BuildInfoRecord::set_mcamp(::google::protobuf::uint32 value) {
  set_has_mcamp();
  mcamp_ = value;
  // @@protoc_insertion_point(field_set:fgame.BuildInfoRecord.mCamp)
}

// optional uint32 mLevel = 3;
inline bool BuildInfoRecord::has_mlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildInfoRecord::set_has_mlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildInfoRecord::clear_has_mlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildInfoRecord::clear_mlevel() {
  mlevel_ = 0u;
  clear_has_mlevel();
}
inline ::google::protobuf::uint32 BuildInfoRecord::mlevel() const {
  // @@protoc_insertion_point(field_get:fgame.BuildInfoRecord.mLevel)
  return mlevel_;
}
inline void BuildInfoRecord::set_mlevel(::google::protobuf::uint32 value) {
  set_has_mlevel();
  mlevel_ = value;
  // @@protoc_insertion_point(field_set:fgame.BuildInfoRecord.mLevel)
}

// optional uint32 mPeopleCount = 4;
inline bool BuildInfoRecord::has_mpeoplecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuildInfoRecord::set_has_mpeoplecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuildInfoRecord::clear_has_mpeoplecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuildInfoRecord::clear_mpeoplecount() {
  mpeoplecount_ = 0u;
  clear_has_mpeoplecount();
}
inline ::google::protobuf::uint32 BuildInfoRecord::mpeoplecount() const {
  // @@protoc_insertion_point(field_get:fgame.BuildInfoRecord.mPeopleCount)
  return mpeoplecount_;
}
inline void BuildInfoRecord::set_mpeoplecount(::google::protobuf::uint32 value) {
  set_has_mpeoplecount();
  mpeoplecount_ = value;
  // @@protoc_insertion_point(field_set:fgame.BuildInfoRecord.mPeopleCount)
}

// -------------------------------------------------------------------

// BattleRecord

// optional float mTimeInterval = 1;
inline bool BattleRecord::has_mtimeinterval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleRecord::set_has_mtimeinterval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleRecord::clear_has_mtimeinterval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleRecord::clear_mtimeinterval() {
  mtimeinterval_ = 0;
  clear_has_mtimeinterval();
}
inline float BattleRecord::mtimeinterval() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mTimeInterval)
  return mtimeinterval_;
}
inline void BattleRecord::set_mtimeinterval(float value) {
  set_has_mtimeinterval();
  mtimeinterval_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mTimeInterval)
}

// optional uint32 mCommondType = 2;
inline bool BattleRecord::has_mcommondtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleRecord::set_has_mcommondtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleRecord::clear_has_mcommondtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleRecord::clear_mcommondtype() {
  mcommondtype_ = 0u;
  clear_has_mcommondtype();
}
inline ::google::protobuf::uint32 BattleRecord::mcommondtype() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mCommondType)
  return mcommondtype_;
}
inline void BattleRecord::set_mcommondtype(::google::protobuf::uint32 value) {
  set_has_mcommondtype();
  mcommondtype_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mCommondType)
}

// optional uint32 mSrc = 3;
inline bool BattleRecord::has_msrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleRecord::set_has_msrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleRecord::clear_has_msrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleRecord::clear_msrc() {
  msrc_ = 0u;
  clear_has_msrc();
}
inline ::google::protobuf::uint32 BattleRecord::msrc() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mSrc)
  return msrc_;
}
inline void BattleRecord::set_msrc(::google::protobuf::uint32 value) {
  set_has_msrc();
  msrc_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mSrc)
}

// optional uint32 mDest = 4;
inline bool BattleRecord::has_mdest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleRecord::set_has_mdest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleRecord::clear_has_mdest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleRecord::clear_mdest() {
  mdest_ = 0u;
  clear_has_mdest();
}
inline ::google::protobuf::uint32 BattleRecord::mdest() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mDest)
  return mdest_;
}
inline void BattleRecord::set_mdest(::google::protobuf::uint32 value) {
  set_has_mdest();
  mdest_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mDest)
}

// optional uint32 mNumType = 5;
inline bool BattleRecord::has_mnumtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleRecord::set_has_mnumtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleRecord::clear_has_mnumtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleRecord::clear_mnumtype() {
  mnumtype_ = 0u;
  clear_has_mnumtype();
}
inline ::google::protobuf::uint32 BattleRecord::mnumtype() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mNumType)
  return mnumtype_;
}
inline void BattleRecord::set_mnumtype(::google::protobuf::uint32 value) {
  set_has_mnumtype();
  mnumtype_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mNumType)
}

// optional uint32 mNum = 6;
inline bool BattleRecord::has_mnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleRecord::set_has_mnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleRecord::clear_has_mnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleRecord::clear_mnum() {
  mnum_ = 0u;
  clear_has_mnum();
}
inline ::google::protobuf::uint32 BattleRecord::mnum() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mNum)
  return mnum_;
}
inline void BattleRecord::set_mnum(::google::protobuf::uint32 value) {
  set_has_mnum();
  mnum_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mNum)
}

// optional uint32 mBuildId = 7;
inline bool BattleRecord::has_mbuildid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleRecord::set_has_mbuildid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleRecord::clear_has_mbuildid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleRecord::clear_mbuildid() {
  mbuildid_ = 0u;
  clear_has_mbuildid();
}
inline ::google::protobuf::uint32 BattleRecord::mbuildid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mBuildId)
  return mbuildid_;
}
inline void BattleRecord::set_mbuildid(::google::protobuf::uint32 value) {
  set_has_mbuildid();
  mbuildid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mBuildId)
}

// optional uint32 mEnType = 8;
inline bool BattleRecord::has_mentype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleRecord::set_has_mentype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleRecord::clear_has_mentype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleRecord::clear_mentype() {
  mentype_ = 0u;
  clear_has_mentype();
}
inline ::google::protobuf::uint32 BattleRecord::mentype() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mEnType)
  return mentype_;
}
inline void BattleRecord::set_mentype(::google::protobuf::uint32 value) {
  set_has_mentype();
  mentype_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mEnType)
}

// optional uint32 mKeyId = 9;
inline bool BattleRecord::has_mkeyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleRecord::set_has_mkeyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleRecord::clear_has_mkeyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleRecord::clear_mkeyid() {
  mkeyid_ = 0u;
  clear_has_mkeyid();
}
inline ::google::protobuf::uint32 BattleRecord::mkeyid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mKeyId)
  return mkeyid_;
}
inline void BattleRecord::set_mkeyid(::google::protobuf::uint32 value) {
  set_has_mkeyid();
  mkeyid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mKeyId)
}

// optional uint32 mChangeType = 10;
inline bool BattleRecord::has_mchangetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleRecord::set_has_mchangetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleRecord::clear_has_mchangetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleRecord::clear_mchangetype() {
  mchangetype_ = 0u;
  clear_has_mchangetype();
}
inline ::google::protobuf::uint32 BattleRecord::mchangetype() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mChangeType)
  return mchangetype_;
}
inline void BattleRecord::set_mchangetype(::google::protobuf::uint32 value) {
  set_has_mchangetype();
  mchangetype_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mChangeType)
}

// optional uint32 mIsNew = 11;
inline bool BattleRecord::has_misnew() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleRecord::set_has_misnew() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleRecord::clear_has_misnew() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleRecord::clear_misnew() {
  misnew_ = 0u;
  clear_has_misnew();
}
inline ::google::protobuf::uint32 BattleRecord::misnew() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mIsNew)
  return misnew_;
}
inline void BattleRecord::set_misnew(::google::protobuf::uint32 value) {
  set_has_misnew();
  misnew_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mIsNew)
}

// optional float mDuration = 12;
inline bool BattleRecord::has_mduration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattleRecord::set_has_mduration() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattleRecord::clear_has_mduration() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattleRecord::clear_mduration() {
  mduration_ = 0;
  clear_has_mduration();
}
inline float BattleRecord::mduration() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mDuration)
  return mduration_;
}
inline void BattleRecord::set_mduration(float value) {
  set_has_mduration();
  mduration_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mDuration)
}

// optional uint32 mCamp = 13;
inline bool BattleRecord::has_mcamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleRecord::set_has_mcamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleRecord::clear_has_mcamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleRecord::clear_mcamp() {
  mcamp_ = 0u;
  clear_has_mcamp();
}
inline ::google::protobuf::uint32 BattleRecord::mcamp() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mCamp)
  return mcamp_;
}
inline void BattleRecord::set_mcamp(::google::protobuf::uint32 value) {
  set_has_mcamp();
  mcamp_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mCamp)
}

// optional float mX = 14;
inline bool BattleRecord::has_mx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattleRecord::set_has_mx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattleRecord::clear_has_mx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattleRecord::clear_mx() {
  mx_ = 0;
  clear_has_mx();
}
inline float BattleRecord::mx() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mX)
  return mx_;
}
inline void BattleRecord::set_mx(float value) {
  set_has_mx();
  mx_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mX)
}

// optional float mY = 15;
inline bool BattleRecord::has_my() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BattleRecord::set_has_my() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BattleRecord::clear_has_my() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BattleRecord::clear_my() {
  my_ = 0;
  clear_has_my();
}
inline float BattleRecord::my() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mY)
  return my_;
}
inline void BattleRecord::set_my(float value) {
  set_has_my();
  my_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mY)
}

// optional uint32 mCreepsId = 16;
inline bool BattleRecord::has_mcreepsid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BattleRecord::set_has_mcreepsid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BattleRecord::clear_has_mcreepsid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BattleRecord::clear_mcreepsid() {
  mcreepsid_ = 0u;
  clear_has_mcreepsid();
}
inline ::google::protobuf::uint32 BattleRecord::mcreepsid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mCreepsId)
  return mcreepsid_;
}
inline void BattleRecord::set_mcreepsid(::google::protobuf::uint32 value) {
  set_has_mcreepsid();
  mcreepsid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mCreepsId)
}

// optional uint32 mHittedCreepsID = 17;
inline bool BattleRecord::has_mhittedcreepsid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BattleRecord::set_has_mhittedcreepsid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BattleRecord::clear_has_mhittedcreepsid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BattleRecord::clear_mhittedcreepsid() {
  mhittedcreepsid_ = 0u;
  clear_has_mhittedcreepsid();
}
inline ::google::protobuf::uint32 BattleRecord::mhittedcreepsid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mHittedCreepsID)
  return mhittedcreepsid_;
}
inline void BattleRecord::set_mhittedcreepsid(::google::protobuf::uint32 value) {
  set_has_mhittedcreepsid();
  mhittedcreepsid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mHittedCreepsID)
}

// optional uint32 mHitIndex = 18;
inline bool BattleRecord::has_mhitindex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BattleRecord::set_has_mhitindex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BattleRecord::clear_has_mhitindex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BattleRecord::clear_mhitindex() {
  mhitindex_ = 0u;
  clear_has_mhitindex();
}
inline ::google::protobuf::uint32 BattleRecord::mhitindex() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mHitIndex)
  return mhitindex_;
}
inline void BattleRecord::set_mhitindex(::google::protobuf::uint32 value) {
  set_has_mhitindex();
  mhitindex_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mHitIndex)
}

// optional uint32 mOutPercent = 19;
inline bool BattleRecord::has_moutpercent() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BattleRecord::set_has_moutpercent() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BattleRecord::clear_has_moutpercent() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BattleRecord::clear_moutpercent() {
  moutpercent_ = 0u;
  clear_has_moutpercent();
}
inline ::google::protobuf::uint32 BattleRecord::moutpercent() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mOutPercent)
  return moutpercent_;
}
inline void BattleRecord::set_moutpercent(::google::protobuf::uint32 value) {
  set_has_moutpercent();
  moutpercent_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mOutPercent)
}

// repeated .fgame.BuildInfoRecord mVectorBuildInfo = 20;
inline int BattleRecord::mvectorbuildinfo_size() const {
  return mvectorbuildinfo_.size();
}
inline void BattleRecord::clear_mvectorbuildinfo() {
  mvectorbuildinfo_.Clear();
}
inline const ::fgame::BuildInfoRecord& BattleRecord::mvectorbuildinfo(int index) const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mVectorBuildInfo)
  return mvectorbuildinfo_.Get(index);
}
inline ::fgame::BuildInfoRecord* BattleRecord::mutable_mvectorbuildinfo(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.BattleRecord.mVectorBuildInfo)
  return mvectorbuildinfo_.Mutable(index);
}
inline ::fgame::BuildInfoRecord* BattleRecord::add_mvectorbuildinfo() {
  // @@protoc_insertion_point(field_add:fgame.BattleRecord.mVectorBuildInfo)
  return mvectorbuildinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::BuildInfoRecord >&
BattleRecord::mvectorbuildinfo() const {
  // @@protoc_insertion_point(field_list:fgame.BattleRecord.mVectorBuildInfo)
  return mvectorbuildinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::BuildInfoRecord >*
BattleRecord::mutable_mvectorbuildinfo() {
  // @@protoc_insertion_point(field_mutable_list:fgame.BattleRecord.mVectorBuildInfo)
  return &mvectorbuildinfo_;
}

// optional uint32 mPropId = 21;
inline bool BattleRecord::has_mpropid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BattleRecord::set_has_mpropid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BattleRecord::clear_has_mpropid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BattleRecord::clear_mpropid() {
  mpropid_ = 0u;
  clear_has_mpropid();
}
inline ::google::protobuf::uint32 BattleRecord::mpropid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mPropId)
  return mpropid_;
}
inline void BattleRecord::set_mpropid(::google::protobuf::uint32 value) {
  set_has_mpropid();
  mpropid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mPropId)
}

// optional uint32 mPropParam1 = 22;
inline bool BattleRecord::has_mpropparam1() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BattleRecord::set_has_mpropparam1() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BattleRecord::clear_has_mpropparam1() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BattleRecord::clear_mpropparam1() {
  mpropparam1_ = 0u;
  clear_has_mpropparam1();
}
inline ::google::protobuf::uint32 BattleRecord::mpropparam1() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mPropParam1)
  return mpropparam1_;
}
inline void BattleRecord::set_mpropparam1(::google::protobuf::uint32 value) {
  set_has_mpropparam1();
  mpropparam1_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mPropParam1)
}

// optional uint32 mTurretStep = 23;
inline bool BattleRecord::has_mturretstep() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BattleRecord::set_has_mturretstep() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BattleRecord::clear_has_mturretstep() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BattleRecord::clear_mturretstep() {
  mturretstep_ = 0u;
  clear_has_mturretstep();
}
inline ::google::protobuf::uint32 BattleRecord::mturretstep() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecord.mTurretStep)
  return mturretstep_;
}
inline void BattleRecord::set_mturretstep(::google::protobuf::uint32 value) {
  set_has_mturretstep();
  mturretstep_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecord.mTurretStep)
}

// -------------------------------------------------------------------

// BattleRecords

// optional uint32 mItemIdLeft = 1;
inline bool BattleRecords::has_mitemidleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleRecords::set_has_mitemidleft() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleRecords::clear_has_mitemidleft() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleRecords::clear_mitemidleft() {
  mitemidleft_ = 0u;
  clear_has_mitemidleft();
}
inline ::google::protobuf::uint32 BattleRecords::mitemidleft() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecords.mItemIdLeft)
  return mitemidleft_;
}
inline void BattleRecords::set_mitemidleft(::google::protobuf::uint32 value) {
  set_has_mitemidleft();
  mitemidleft_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecords.mItemIdLeft)
}

// optional uint32 mItemIdMid = 2;
inline bool BattleRecords::has_mitemidmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleRecords::set_has_mitemidmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleRecords::clear_has_mitemidmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleRecords::clear_mitemidmid() {
  mitemidmid_ = 0u;
  clear_has_mitemidmid();
}
inline ::google::protobuf::uint32 BattleRecords::mitemidmid() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecords.mItemIdMid)
  return mitemidmid_;
}
inline void BattleRecords::set_mitemidmid(::google::protobuf::uint32 value) {
  set_has_mitemidmid();
  mitemidmid_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecords.mItemIdMid)
}

// optional uint32 mItemIdRight = 3;
inline bool BattleRecords::has_mitemidright() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleRecords::set_has_mitemidright() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleRecords::clear_has_mitemidright() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleRecords::clear_mitemidright() {
  mitemidright_ = 0u;
  clear_has_mitemidright();
}
inline ::google::protobuf::uint32 BattleRecords::mitemidright() const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecords.mItemIdRight)
  return mitemidright_;
}
inline void BattleRecords::set_mitemidright(::google::protobuf::uint32 value) {
  set_has_mitemidright();
  mitemidright_ = value;
  // @@protoc_insertion_point(field_set:fgame.BattleRecords.mItemIdRight)
}

// repeated .fgame.BattleRecord mVecBattleRecords = 4;
inline int BattleRecords::mvecbattlerecords_size() const {
  return mvecbattlerecords_.size();
}
inline void BattleRecords::clear_mvecbattlerecords() {
  mvecbattlerecords_.Clear();
}
inline const ::fgame::BattleRecord& BattleRecords::mvecbattlerecords(int index) const {
  // @@protoc_insertion_point(field_get:fgame.BattleRecords.mVecBattleRecords)
  return mvecbattlerecords_.Get(index);
}
inline ::fgame::BattleRecord* BattleRecords::mutable_mvecbattlerecords(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.BattleRecords.mVecBattleRecords)
  return mvecbattlerecords_.Mutable(index);
}
inline ::fgame::BattleRecord* BattleRecords::add_mvecbattlerecords() {
  // @@protoc_insertion_point(field_add:fgame.BattleRecords.mVecBattleRecords)
  return mvecbattlerecords_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::BattleRecord >&
BattleRecords::mvecbattlerecords() const {
  // @@protoc_insertion_point(field_list:fgame.BattleRecords.mVecBattleRecords)
  return mvecbattlerecords_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::BattleRecord >*
BattleRecords::mutable_mvecbattlerecords() {
  // @@protoc_insertion_point(field_mutable_list:fgame.BattleRecords.mVecBattleRecords)
  return &mvecbattlerecords_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleRecord_2eproto__INCLUDED
