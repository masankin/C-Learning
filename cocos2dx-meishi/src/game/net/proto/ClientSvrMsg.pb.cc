// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientSvrMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientSvrMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_ClientSvrMsg_2eproto() {
  delete Dummy::default_instance_;
  delete C2ServerMsg::default_instance_;
  delete S2ClientMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ClientSvrMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ClientSvrMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::fgame::protobuf_AddDesc_Message_2eproto();
  ::fgame::protobuf_AddDesc_Base_2eproto();
  ::fgame::protobuf_AddDesc_Glyphs_2eproto();
  ::fgame::protobuf_AddDesc_PvpPersonalRoom_2eproto();
  ::fgame::protobuf_AddDesc_Pvp_2eproto();
  ::fgame::protobuf_AddDesc_Friend_2eproto();
  ::fgame::protobuf_AddDesc_Match_2eproto();
  ::fgame::protobuf_AddDesc_Activity_2eproto();
  ::fgame::protobuf_AddDesc_Player_2eproto();
  ::fgame::protobuf_AddDesc_Assistant_2eproto();
  ::fgame::protobuf_AddDesc_Institute_2eproto();
  Dummy::default_instance_ = new Dummy();
  C2ServerMsg::default_instance_ = new C2ServerMsg();
  S2ClientMsg::default_instance_ = new S2ClientMsg();
  Dummy::default_instance_->InitAsDefaultInstance();
  C2ServerMsg::default_instance_->InitAsDefaultInstance();
  S2ClientMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientSvrMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ClientSvrMsg_2eproto_once_);
void protobuf_AddDesc_ClientSvrMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ClientSvrMsg_2eproto_once_,
                 &protobuf_AddDesc_ClientSvrMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientSvrMsg_2eproto {
  StaticDescriptorInitializer_ClientSvrMsg_2eproto() {
    protobuf_AddDesc_ClientSvrMsg_2eproto();
  }
} static_descriptor_initializer_ClientSvrMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Dummy::kDummyFieldNumber;
#endif  // !_MSC_VER

Dummy::Dummy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.Dummy)
}

void Dummy::InitAsDefaultInstance() {
}

Dummy::Dummy(const Dummy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.Dummy)
}

void Dummy::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dummy::~Dummy() {
  // @@protoc_insertion_point(destructor:fgame.Dummy)
  SharedDtor();
}

void Dummy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Dummy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dummy& Dummy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

Dummy* Dummy::default_instance_ = NULL;

Dummy* Dummy::New() const {
  return new Dummy;
}

void Dummy::Clear() {
  dummy_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Dummy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.Dummy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fgame.CS_CMD_ID dummy = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fgame::CS_CMD_ID_IsValid(value)) {
            set_dummy(static_cast< ::fgame::CS_CMD_ID >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.Dummy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.Dummy)
  return false;
#undef DO_
}

void Dummy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.Dummy)
  // optional .fgame.CS_CMD_ID dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dummy(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.Dummy)
}

int Dummy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fgame.CS_CMD_ID dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dummy());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dummy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dummy*>(&from));
}

void Dummy::MergeFrom(const Dummy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Dummy::CopyFrom(const Dummy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dummy::IsInitialized() const {

  return true;
}

void Dummy::Swap(Dummy* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Dummy::GetTypeName() const {
  return "fgame.Dummy";
}


// ===================================================================

#ifndef _MSC_VER
const int C2ServerMsg::kLoginReqFieldNumber;
const int C2ServerMsg::kRegReqFieldNumber;
const int C2ServerMsg::kHeartBeatReqFieldNumber;
const int C2ServerMsg::kMatchReqFieldNumber;
const int C2ServerMsg::kStartReqFieldNumber;
const int C2ServerMsg::kFightReqFieldNumber;
const int C2ServerMsg::kEndReqFieldNumber;
const int C2ServerMsg::kMapReqFieldNumber;
const int C2ServerMsg::kUpgradeReqFieldNumber;
const int C2ServerMsg::kPingReqFieldNumber;
const int C2ServerMsg::kBuyItemReqFieldNumber;
const int C2ServerMsg::kUseItemReqFieldNumber;
const int C2ServerMsg::kLeaveReqFieldNumber;
const int C2ServerMsg::kGetAchievementReqFieldNumber;
const int C2ServerMsg::kReceiveAchievementReqFieldNumber;
const int C2ServerMsg::kReceiveAchievementRewardReqFieldNumber;
const int C2ServerMsg::kEnterServerReqFieldNumber;
const int C2ServerMsg::kDirectEnterReqFieldNumber;
const int C2ServerMsg::kPvpRankingGetListReqFieldNumber;
const int C2ServerMsg::kStreakWinValueReqFieldNumber;
const int C2ServerMsg::kStreakWinGetReqFieldNumber;
const int C2ServerMsg::kOpenBigStageReqFieldNumber;
const int C2ServerMsg::kPvpUseItemReqFieldNumber;
const int C2ServerMsg::kSevenDaySignListReqFieldNumber;
const int C2ServerMsg::kSevenDaySignReqFieldNumber;
const int C2ServerMsg::kGetServerReqFieldNumber;
const int C2ServerMsg::kSycPlayerInfoReqFieldNumber;
const int C2ServerMsg::kStopMatchReqFieldNumber;
const int C2ServerMsg::kChangeNameReqFieldNumber;
const int C2ServerMsg::kLogoutReqFieldNumber;
const int C2ServerMsg::kXinShouRecodeReqFieldNumber;
const int C2ServerMsg::kPvpRankingPlayerInfoReqFieldNumber;
const int C2ServerMsg::kGetOpenActivityReqFieldNumber;
const int C2ServerMsg::kGetActivityDataReqFieldNumber;
const int C2ServerMsg::kReceiveActivityRewardReqFieldNumber;
const int C2ServerMsg::kMissionListReqFieldNumber;
const int C2ServerMsg::kMissionCompleteReqFieldNumber;
const int C2ServerMsg::kGetPowerEnergyActivityDataReqFieldNumber;
const int C2ServerMsg::kReceivePowerEnergyReqFieldNumber;
const int C2ServerMsg::kGetMailReqFieldNumber;
const int C2ServerMsg::kDelMailReqFieldNumber;
const int C2ServerMsg::kBuyNewbieGiftReqFieldNumber;
const int C2ServerMsg::kRechargeCallbackReqFieldNumber;
const int C2ServerMsg::kFriendQueryReqFieldNumber;
const int C2ServerMsg::kFriendRequestAddReqFieldNumber;
const int C2ServerMsg::kFriendConfirmAddReqFieldNumber;
const int C2ServerMsg::kFriendGetInfoReqFieldNumber;
const int C2ServerMsg::kFriendRequestRemoveReqFieldNumber;
const int C2ServerMsg::kFriendAddBlackListReqFieldNumber;
const int C2ServerMsg::kFriendRemoveBlackListReqFieldNumber;
const int C2ServerMsg::kPvpChatReqFieldNumber;
const int C2ServerMsg::kUseGiftCodeReqFieldNumber;
const int C2ServerMsg::kQueryPlayerInfoReqFieldNumber;
const int C2ServerMsg::kPersonalRoomCreateReqFieldNumber;
const int C2ServerMsg::kPersonalRoomEnterReqFieldNumber;
const int C2ServerMsg::kPersonalRoomLeaveReqFieldNumber;
const int C2ServerMsg::kPersonalRoomKickReqFieldNumber;
const int C2ServerMsg::kPersonalRoomInviteReqFieldNumber;
const int C2ServerMsg::kPersonalRoomBroadcastReqFieldNumber;
const int C2ServerMsg::kPersonalRoomChatReqFieldNumber;
const int C2ServerMsg::kPersonalRoomModeReqFieldNumber;
const int C2ServerMsg::kPersonalRoomBeginFightReqFieldNumber;
const int C2ServerMsg::kPersonalRoomApplyOrRefuseInviteReqFieldNumber;
const int C2ServerMsg::kChangePlayerIconReqFieldNumber;
const int C2ServerMsg::kPersonalRoomCountDownReqFieldNumber;
const int C2ServerMsg::kSyncPlayerDataReqFieldNumber;
const int C2ServerMsg::kGetPlayerDataReqFieldNumber;
const int C2ServerMsg::kAppearCreepReqFieldNumber;
const int C2ServerMsg::kSaveCheckPtDataReqFieldNumber;
const int C2ServerMsg::kGetCheckPtDataReqFieldNumber;
const int C2ServerMsg::kSetNewBieReqFieldNumber;
const int C2ServerMsg::kGetNewBieListReqFieldNumber;
const int C2ServerMsg::kEnterPointReqFieldNumber;
const int C2ServerMsg::kShopGuideReqFieldNumber;
const int C2ServerMsg::kTestAddDiamondReqFieldNumber;
const int C2ServerMsg::kActivityListReqFieldNumber;
const int C2ServerMsg::kActivitySubmitReqFieldNumber;
const int C2ServerMsg::kSetTitleReqFieldNumber;
const int C2ServerMsg::kShopBuyReqFieldNumber;
const int C2ServerMsg::kExchangeItemReqFieldNumber;
const int C2ServerMsg::kActivityCrazyDtlsReqFieldNumber;
const int C2ServerMsg::kActivityCrazyUsageReqFieldNumber;
const int C2ServerMsg::kShopListReqFieldNumber;
const int C2ServerMsg::kPvpObserverReqFieldNumber;
const int C2ServerMsg::kSetNewBieOssReqFieldNumber;
const int C2ServerMsg::kPvpResultReqFieldNumber;
const int C2ServerMsg::kPvpSelfRankListReqFieldNumber;
const int C2ServerMsg::kGWGetMatchInfoReqFieldNumber;
const int C2ServerMsg::kGWMatchReqFieldNumber;
const int C2ServerMsg::kGWMatchStopReqFieldNumber;
const int C2ServerMsg::kGWGetRankReqFieldNumber;
const int C2ServerMsg::kGWBuyEnergyReqFieldNumber;
const int C2ServerMsg::kRequestPKeyReqFieldNumber;
const int C2ServerMsg::kSendClientKeyReqFieldNumber;
const int C2ServerMsg::kUpdateExchangeListReqFieldNumber;
const int C2ServerMsg::kGlyphsRequestInfoReqFieldNumber;
const int C2ServerMsg::kGlyphsRequestBasicInfoReqFieldNumber;
const int C2ServerMsg::kGlyphsActiveReqFieldNumber;
const int C2ServerMsg::kGlyphsUpgradeReqFieldNumber;
const int C2ServerMsg::kGlyphsPvpInfoReqFieldNumber;
const int C2ServerMsg::kBuyVipReqFieldNumber;
const int C2ServerMsg::kGlyphGuideReqFieldNumber;
const int C2ServerMsg::kNewYearGetInfoReqFieldNumber;
const int C2ServerMsg::kNewYearRewardReqFieldNumber;
const int C2ServerMsg::kOpenChestReqFieldNumber;
const int C2ServerMsg::kChristmasDecorateReqFieldNumber;
const int C2ServerMsg::kChristmasTakeBonusReqFieldNumber;
const int C2ServerMsg::kChristmasGetDateReqFieldNumber;
const int C2ServerMsg::kChristmasGetRankReqFieldNumber;
const int C2ServerMsg::kRetriveCheckPtRewardReqFieldNumber;
const int C2ServerMsg::kVipTimeReqFieldNumber;
const int C2ServerMsg::kNewYearCmpReqFieldNumber;
const int C2ServerMsg::kNotifyGlyphsUpdateReqFieldNumber;
const int C2ServerMsg::kRecoverItemReqFieldNumber;
const int C2ServerMsg::kSetSignatureReqFieldNumber;
const int C2ServerMsg::kSetExtraInfoVisibleReqFieldNumber;
const int C2ServerMsg::kGetExtraInfoReqFieldNumber;
const int C2ServerMsg::kValentineDataReqFieldNumber;
const int C2ServerMsg::kValentineExchangeReqFieldNumber;
const int C2ServerMsg::kRedPacketsGetInfoReqFieldNumber;
const int C2ServerMsg::kRedPacketsGrebReqFieldNumber;
const int C2ServerMsg::kRedPacketsOpenedReqFieldNumber;
const int C2ServerMsg::kChapterUnlockReqFieldNumber;
const int C2ServerMsg::kGetChestReqFieldNumber;
const int C2ServerMsg::kPveNotifyReqFieldNumber;
const int C2ServerMsg::kDailyTaskStatusReqFieldNumber;
const int C2ServerMsg::kRequestDailyTaskReqFieldNumber;
const int C2ServerMsg::kChangeDailyTaskReqFieldNumber;
const int C2ServerMsg::kOpenDailyTaskAwardReqFieldNumber;
const int C2ServerMsg::kUpdateDailyTaskProgressReqFieldNumber;
const int C2ServerMsg::kRankWeekRewardInfoReqFieldNumber;
const int C2ServerMsg::kRankWeekRewardRewardReqFieldNumber;
const int C2ServerMsg::kPveCheckAwardReqFieldNumber;
const int C2ServerMsg::kShareRewardReqFieldNumber;
const int C2ServerMsg::kGetSevenGoalListReqFieldNumber;
const int C2ServerMsg::kRetriveSevenGoalReqFieldNumber;
const int C2ServerMsg::kPveRankReqFieldNumber;
const int C2ServerMsg::kTopRankReqFieldNumber;
const int C2ServerMsg::kTopRankTimeReqFieldNumber;
const int C2ServerMsg::kUpdateTaskStatusReqFieldNumber;
const int C2ServerMsg::kAsSyncInfoReqFieldNumber;
const int C2ServerMsg::kAsNewAddReqFieldNumber;
const int C2ServerMsg::kAsOperateReqFieldNumber;
const int C2ServerMsg::kAsUseCardReqFieldNumber;
const int C2ServerMsg::kPvpUseSkillReqFieldNumber;
const int C2ServerMsg::kInstituteInfoReqFieldNumber;
const int C2ServerMsg::kInstituteBuyReqFieldNumber;
const int C2ServerMsg::kOpActConfigListReqFieldNumber;
const int C2ServerMsg::kOpActSelfDataListReqFieldNumber;
const int C2ServerMsg::kOpActGlobalDataListReqFieldNumber;
const int C2ServerMsg::kOpActDemoTakeReqFieldNumber;
#endif  // !_MSC_VER

C2ServerMsg::C2ServerMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.C2ServerMsg)
}

void C2ServerMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  login_req_ = const_cast< ::fgame::CSLoginReq*>(
      ::fgame::CSLoginReq::internal_default_instance());
#else
  login_req_ = const_cast< ::fgame::CSLoginReq*>(&::fgame::CSLoginReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reg_req_ = const_cast< ::fgame::CSRegReq*>(
      ::fgame::CSRegReq::internal_default_instance());
#else
  reg_req_ = const_cast< ::fgame::CSRegReq*>(&::fgame::CSRegReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  heartbeat_req_ = const_cast< ::fgame::CSHeartBeatReq*>(
      ::fgame::CSHeartBeatReq::internal_default_instance());
#else
  heartbeat_req_ = const_cast< ::fgame::CSHeartBeatReq*>(&::fgame::CSHeartBeatReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  match_req_ = const_cast< ::fgame::CSPvpMatchReq*>(
      ::fgame::CSPvpMatchReq::internal_default_instance());
#else
  match_req_ = const_cast< ::fgame::CSPvpMatchReq*>(&::fgame::CSPvpMatchReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_req_ = const_cast< ::fgame::CSPvpStartReq*>(
      ::fgame::CSPvpStartReq::internal_default_instance());
#else
  start_req_ = const_cast< ::fgame::CSPvpStartReq*>(&::fgame::CSPvpStartReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fight_req_ = const_cast< ::fgame::CSPvpFightReq*>(
      ::fgame::CSPvpFightReq::internal_default_instance());
#else
  fight_req_ = const_cast< ::fgame::CSPvpFightReq*>(&::fgame::CSPvpFightReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  end_req_ = const_cast< ::fgame::CSPvpEndReq*>(
      ::fgame::CSPvpEndReq::internal_default_instance());
#else
  end_req_ = const_cast< ::fgame::CSPvpEndReq*>(&::fgame::CSPvpEndReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  map_req_ = const_cast< ::fgame::CSPvpMapReq*>(
      ::fgame::CSPvpMapReq::internal_default_instance());
#else
  map_req_ = const_cast< ::fgame::CSPvpMapReq*>(&::fgame::CSPvpMapReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  upgrade_req_ = const_cast< ::fgame::CSPvpUpgradeReq*>(
      ::fgame::CSPvpUpgradeReq::internal_default_instance());
#else
  upgrade_req_ = const_cast< ::fgame::CSPvpUpgradeReq*>(&::fgame::CSPvpUpgradeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ping_req_ = const_cast< ::fgame::CSPvpPingReq*>(
      ::fgame::CSPvpPingReq::internal_default_instance());
#else
  ping_req_ = const_cast< ::fgame::CSPvpPingReq*>(&::fgame::CSPvpPingReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyitem_req_ = const_cast< ::fgame::CSBuyITtemReq*>(
      ::fgame::CSBuyITtemReq::internal_default_instance());
#else
  buyitem_req_ = const_cast< ::fgame::CSBuyITtemReq*>(&::fgame::CSBuyITtemReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  useitem_req_ = const_cast< ::fgame::CSUseItemReq*>(
      ::fgame::CSUseItemReq::internal_default_instance());
#else
  useitem_req_ = const_cast< ::fgame::CSUseItemReq*>(&::fgame::CSUseItemReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  leave_req_ = const_cast< ::fgame::CSPvpLeaveReq*>(
      ::fgame::CSPvpLeaveReq::internal_default_instance());
#else
  leave_req_ = const_cast< ::fgame::CSPvpLeaveReq*>(&::fgame::CSPvpLeaveReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getachievementreq_ = const_cast< ::fgame::CSGetAchievementReq*>(
      ::fgame::CSGetAchievementReq::internal_default_instance());
#else
  getachievementreq_ = const_cast< ::fgame::CSGetAchievementReq*>(&::fgame::CSGetAchievementReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveachievement_req_ = const_cast< ::fgame::CSReceiveAchievementReq*>(
      ::fgame::CSReceiveAchievementReq::internal_default_instance());
#else
  receiveachievement_req_ = const_cast< ::fgame::CSReceiveAchievementReq*>(&::fgame::CSReceiveAchievementReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveachievementreward_req_ = const_cast< ::fgame::CSReceiveAchievementRewardReq*>(
      ::fgame::CSReceiveAchievementRewardReq::internal_default_instance());
#else
  receiveachievementreward_req_ = const_cast< ::fgame::CSReceiveAchievementRewardReq*>(&::fgame::CSReceiveAchievementRewardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  enterserver_req_ = const_cast< ::fgame::CSEnterServerReq*>(
      ::fgame::CSEnterServerReq::internal_default_instance());
#else
  enterserver_req_ = const_cast< ::fgame::CSEnterServerReq*>(&::fgame::CSEnterServerReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  directenter_req_ = const_cast< ::fgame::CSDirectEnterReq*>(
      ::fgame::CSDirectEnterReq::internal_default_instance());
#else
  directenter_req_ = const_cast< ::fgame::CSDirectEnterReq*>(&::fgame::CSDirectEnterReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvprankinggetlist_req_ = const_cast< ::fgame::CSPvpRankingGetListReq*>(
      ::fgame::CSPvpRankingGetListReq::internal_default_instance());
#else
  pvprankinggetlist_req_ = const_cast< ::fgame::CSPvpRankingGetListReq*>(&::fgame::CSPvpRankingGetListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  streakwinvalue_req_ = const_cast< ::fgame::CSStreakWinValueReq*>(
      ::fgame::CSStreakWinValueReq::internal_default_instance());
#else
  streakwinvalue_req_ = const_cast< ::fgame::CSStreakWinValueReq*>(&::fgame::CSStreakWinValueReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  streakwinget_req_ = const_cast< ::fgame::CSStreakWinGetReq*>(
      ::fgame::CSStreakWinGetReq::internal_default_instance());
#else
  streakwinget_req_ = const_cast< ::fgame::CSStreakWinGetReq*>(&::fgame::CSStreakWinGetReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  openbigstage_req_ = const_cast< ::fgame::CSOpenBigStageReq*>(
      ::fgame::CSOpenBigStageReq::internal_default_instance());
#else
  openbigstage_req_ = const_cast< ::fgame::CSOpenBigStageReq*>(&::fgame::CSOpenBigStageReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpuseitem_req_ = const_cast< ::fgame::CSPvpUseItemReq*>(
      ::fgame::CSPvpUseItemReq::internal_default_instance());
#else
  pvpuseitem_req_ = const_cast< ::fgame::CSPvpUseItemReq*>(&::fgame::CSPvpUseItemReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sevendaysignlist_req_ = const_cast< ::fgame::CSSevenDaySignListReq*>(
      ::fgame::CSSevenDaySignListReq::internal_default_instance());
#else
  sevendaysignlist_req_ = const_cast< ::fgame::CSSevenDaySignListReq*>(&::fgame::CSSevenDaySignListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sevendaysign_req_ = const_cast< ::fgame::CSSevenDaySignReq*>(
      ::fgame::CSSevenDaySignReq::internal_default_instance());
#else
  sevendaysign_req_ = const_cast< ::fgame::CSSevenDaySignReq*>(&::fgame::CSSevenDaySignReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getserver_req_ = const_cast< ::fgame::CSGetServerReq*>(
      ::fgame::CSGetServerReq::internal_default_instance());
#else
  getserver_req_ = const_cast< ::fgame::CSGetServerReq*>(&::fgame::CSGetServerReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sycplayerinfo_req_ = const_cast< ::fgame::CSSycPlayerInfoReq*>(
      ::fgame::CSSycPlayerInfoReq::internal_default_instance());
#else
  sycplayerinfo_req_ = const_cast< ::fgame::CSSycPlayerInfoReq*>(&::fgame::CSSycPlayerInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stopmatch_req_ = const_cast< ::fgame::CSPvpStopMatchReq*>(
      ::fgame::CSPvpStopMatchReq::internal_default_instance());
#else
  stopmatch_req_ = const_cast< ::fgame::CSPvpStopMatchReq*>(&::fgame::CSPvpStopMatchReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changename_req_ = const_cast< ::fgame::CSChangeNameReq*>(
      ::fgame::CSChangeNameReq::internal_default_instance());
#else
  changename_req_ = const_cast< ::fgame::CSChangeNameReq*>(&::fgame::CSChangeNameReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  logout_req_ = const_cast< ::fgame::CSLogoutReq*>(
      ::fgame::CSLogoutReq::internal_default_instance());
#else
  logout_req_ = const_cast< ::fgame::CSLogoutReq*>(&::fgame::CSLogoutReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  xinshourecode_req_ = const_cast< ::fgame::CSXinShouRecodeReq*>(
      ::fgame::CSXinShouRecodeReq::internal_default_instance());
#else
  xinshourecode_req_ = const_cast< ::fgame::CSXinShouRecodeReq*>(&::fgame::CSXinShouRecodeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvprankingplayerinfo_req_ = const_cast< ::fgame::CSPvpRankingPlayerInfoReq*>(
      ::fgame::CSPvpRankingPlayerInfoReq::internal_default_instance());
#else
  pvprankingplayerinfo_req_ = const_cast< ::fgame::CSPvpRankingPlayerInfoReq*>(&::fgame::CSPvpRankingPlayerInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getopenactivity_req_ = const_cast< ::fgame::CSGetOpenActivityReq*>(
      ::fgame::CSGetOpenActivityReq::internal_default_instance());
#else
  getopenactivity_req_ = const_cast< ::fgame::CSGetOpenActivityReq*>(&::fgame::CSGetOpenActivityReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getactivitydata_req_ = const_cast< ::fgame::CSGetActivityDataReq*>(
      ::fgame::CSGetActivityDataReq::internal_default_instance());
#else
  getactivitydata_req_ = const_cast< ::fgame::CSGetActivityDataReq*>(&::fgame::CSGetActivityDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveactivityreward_req_ = const_cast< ::fgame::CSReceiveActivityRewardReq*>(
      ::fgame::CSReceiveActivityRewardReq::internal_default_instance());
#else
  receiveactivityreward_req_ = const_cast< ::fgame::CSReceiveActivityRewardReq*>(&::fgame::CSReceiveActivityRewardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  missionlist_req_ = const_cast< ::fgame::CSMissionListReq*>(
      ::fgame::CSMissionListReq::internal_default_instance());
#else
  missionlist_req_ = const_cast< ::fgame::CSMissionListReq*>(&::fgame::CSMissionListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  missioncomplete_req_ = const_cast< ::fgame::CSMissionCompleteReq*>(
      ::fgame::CSMissionCompleteReq::internal_default_instance());
#else
  missioncomplete_req_ = const_cast< ::fgame::CSMissionCompleteReq*>(&::fgame::CSMissionCompleteReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getpowerenergyactivitydata_req_ = const_cast< ::fgame::CSGetPowerEnergyActivityDataReq*>(
      ::fgame::CSGetPowerEnergyActivityDataReq::internal_default_instance());
#else
  getpowerenergyactivitydata_req_ = const_cast< ::fgame::CSGetPowerEnergyActivityDataReq*>(&::fgame::CSGetPowerEnergyActivityDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receivepowerenergy_req_ = const_cast< ::fgame::CSReceivePowerEnergyReq*>(
      ::fgame::CSReceivePowerEnergyReq::internal_default_instance());
#else
  receivepowerenergy_req_ = const_cast< ::fgame::CSReceivePowerEnergyReq*>(&::fgame::CSReceivePowerEnergyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getmail_req_ = const_cast< ::fgame::CSGetMailReq*>(
      ::fgame::CSGetMailReq::internal_default_instance());
#else
  getmail_req_ = const_cast< ::fgame::CSGetMailReq*>(&::fgame::CSGetMailReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  delmail_req_ = const_cast< ::fgame::CSDelMailReq*>(
      ::fgame::CSDelMailReq::internal_default_instance());
#else
  delmail_req_ = const_cast< ::fgame::CSDelMailReq*>(&::fgame::CSDelMailReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buynewbiegift_req_ = const_cast< ::fgame::CSBuyNewbieGiftReq*>(
      ::fgame::CSBuyNewbieGiftReq::internal_default_instance());
#else
  buynewbiegift_req_ = const_cast< ::fgame::CSBuyNewbieGiftReq*>(&::fgame::CSBuyNewbieGiftReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rechargecallback_req_ = const_cast< ::fgame::CSRechargeCallbackReq*>(
      ::fgame::CSRechargeCallbackReq::internal_default_instance());
#else
  rechargecallback_req_ = const_cast< ::fgame::CSRechargeCallbackReq*>(&::fgame::CSRechargeCallbackReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendquery_req_ = const_cast< ::fgame::CSFriendQueryReq*>(
      ::fgame::CSFriendQueryReq::internal_default_instance());
#else
  friendquery_req_ = const_cast< ::fgame::CSFriendQueryReq*>(&::fgame::CSFriendQueryReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrequestadd_req_ = const_cast< ::fgame::CSFriendRequestAddReq*>(
      ::fgame::CSFriendRequestAddReq::internal_default_instance());
#else
  friendrequestadd_req_ = const_cast< ::fgame::CSFriendRequestAddReq*>(&::fgame::CSFriendRequestAddReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendconfirmadd_req_ = const_cast< ::fgame::CSFriendConfirmAddReq*>(
      ::fgame::CSFriendConfirmAddReq::internal_default_instance());
#else
  friendconfirmadd_req_ = const_cast< ::fgame::CSFriendConfirmAddReq*>(&::fgame::CSFriendConfirmAddReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendgetinfo_req_ = const_cast< ::fgame::CSFriendGetInfoReq*>(
      ::fgame::CSFriendGetInfoReq::internal_default_instance());
#else
  friendgetinfo_req_ = const_cast< ::fgame::CSFriendGetInfoReq*>(&::fgame::CSFriendGetInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrequestremove_req_ = const_cast< ::fgame::CSFriendRequestRemoveReq*>(
      ::fgame::CSFriendRequestRemoveReq::internal_default_instance());
#else
  friendrequestremove_req_ = const_cast< ::fgame::CSFriendRequestRemoveReq*>(&::fgame::CSFriendRequestRemoveReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendaddblacklist_req_ = const_cast< ::fgame::CSFriendAddBlackListReq*>(
      ::fgame::CSFriendAddBlackListReq::internal_default_instance());
#else
  friendaddblacklist_req_ = const_cast< ::fgame::CSFriendAddBlackListReq*>(&::fgame::CSFriendAddBlackListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendremoveblacklist_req_ = const_cast< ::fgame::CSFriendRemoveBlackListReq*>(
      ::fgame::CSFriendRemoveBlackListReq::internal_default_instance());
#else
  friendremoveblacklist_req_ = const_cast< ::fgame::CSFriendRemoveBlackListReq*>(&::fgame::CSFriendRemoveBlackListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpchat_req_ = const_cast< ::fgame::CSPvpChatReq*>(
      ::fgame::CSPvpChatReq::internal_default_instance());
#else
  pvpchat_req_ = const_cast< ::fgame::CSPvpChatReq*>(&::fgame::CSPvpChatReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  usegiftcode_req_ = const_cast< ::fgame::CSUseGiftCodeReq*>(
      ::fgame::CSUseGiftCodeReq::internal_default_instance());
#else
  usegiftcode_req_ = const_cast< ::fgame::CSUseGiftCodeReq*>(&::fgame::CSUseGiftCodeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryplayerinfo_req_ = const_cast< ::fgame::CSQueryPlayerInfoReq*>(
      ::fgame::CSQueryPlayerInfoReq::internal_default_instance());
#else
  queryplayerinfo_req_ = const_cast< ::fgame::CSQueryPlayerInfoReq*>(&::fgame::CSQueryPlayerInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomcreate_req_ = const_cast< ::fgame::CSPersonalRoomCreateReq*>(
      ::fgame::CSPersonalRoomCreateReq::internal_default_instance());
#else
  personalroomcreate_req_ = const_cast< ::fgame::CSPersonalRoomCreateReq*>(&::fgame::CSPersonalRoomCreateReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomenter_req_ = const_cast< ::fgame::CSPersonalRoomEnterReq*>(
      ::fgame::CSPersonalRoomEnterReq::internal_default_instance());
#else
  personalroomenter_req_ = const_cast< ::fgame::CSPersonalRoomEnterReq*>(&::fgame::CSPersonalRoomEnterReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomleave_req_ = const_cast< ::fgame::CSPersonalRoomLeaveReq*>(
      ::fgame::CSPersonalRoomLeaveReq::internal_default_instance());
#else
  personalroomleave_req_ = const_cast< ::fgame::CSPersonalRoomLeaveReq*>(&::fgame::CSPersonalRoomLeaveReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomkick_req_ = const_cast< ::fgame::CSPersonalRoomKickReq*>(
      ::fgame::CSPersonalRoomKickReq::internal_default_instance());
#else
  personalroomkick_req_ = const_cast< ::fgame::CSPersonalRoomKickReq*>(&::fgame::CSPersonalRoomKickReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroominvite_req_ = const_cast< ::fgame::CSPersonalRoomInviteReq*>(
      ::fgame::CSPersonalRoomInviteReq::internal_default_instance());
#else
  personalroominvite_req_ = const_cast< ::fgame::CSPersonalRoomInviteReq*>(&::fgame::CSPersonalRoomInviteReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroombroadcast_req_ = const_cast< ::fgame::CSPersonalRoomBroadcastReq*>(
      ::fgame::CSPersonalRoomBroadcastReq::internal_default_instance());
#else
  personalroombroadcast_req_ = const_cast< ::fgame::CSPersonalRoomBroadcastReq*>(&::fgame::CSPersonalRoomBroadcastReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomchat_req_ = const_cast< ::fgame::CSPersonalRoomChatReq*>(
      ::fgame::CSPersonalRoomChatReq::internal_default_instance());
#else
  personalroomchat_req_ = const_cast< ::fgame::CSPersonalRoomChatReq*>(&::fgame::CSPersonalRoomChatReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroommode_req_ = const_cast< ::fgame::CSPersonalRoomModeReq*>(
      ::fgame::CSPersonalRoomModeReq::internal_default_instance());
#else
  personalroommode_req_ = const_cast< ::fgame::CSPersonalRoomModeReq*>(&::fgame::CSPersonalRoomModeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroombeginfight_req_ = const_cast< ::fgame::CSPersonalRoomBeginFightReq*>(
      ::fgame::CSPersonalRoomBeginFightReq::internal_default_instance());
#else
  personalroombeginfight_req_ = const_cast< ::fgame::CSPersonalRoomBeginFightReq*>(&::fgame::CSPersonalRoomBeginFightReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomapplyorrefuseinvite_req_ = const_cast< ::fgame::CSPersonalRoomApplyOrRefuseInviteReq*>(
      ::fgame::CSPersonalRoomApplyOrRefuseInviteReq::internal_default_instance());
#else
  personalroomapplyorrefuseinvite_req_ = const_cast< ::fgame::CSPersonalRoomApplyOrRefuseInviteReq*>(&::fgame::CSPersonalRoomApplyOrRefuseInviteReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changeplayericon_req_ = const_cast< ::fgame::CSChangePlayerIconReq*>(
      ::fgame::CSChangePlayerIconReq::internal_default_instance());
#else
  changeplayericon_req_ = const_cast< ::fgame::CSChangePlayerIconReq*>(&::fgame::CSChangePlayerIconReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomcountdown_req_ = const_cast< ::fgame::CSPersonalRoomCountDownReq*>(
      ::fgame::CSPersonalRoomCountDownReq::internal_default_instance());
#else
  personalroomcountdown_req_ = const_cast< ::fgame::CSPersonalRoomCountDownReq*>(&::fgame::CSPersonalRoomCountDownReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  syncplayerdata_req_ = const_cast< ::fgame::CSSyncPlayerDataReq*>(
      ::fgame::CSSyncPlayerDataReq::internal_default_instance());
#else
  syncplayerdata_req_ = const_cast< ::fgame::CSSyncPlayerDataReq*>(&::fgame::CSSyncPlayerDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getplayerdata_req_ = const_cast< ::fgame::CSGetPlayerDataReq*>(
      ::fgame::CSGetPlayerDataReq::internal_default_instance());
#else
  getplayerdata_req_ = const_cast< ::fgame::CSGetPlayerDataReq*>(&::fgame::CSGetPlayerDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  appearcreep_req_ = const_cast< ::fgame::CSPvpAppearCreepReq*>(
      ::fgame::CSPvpAppearCreepReq::internal_default_instance());
#else
  appearcreep_req_ = const_cast< ::fgame::CSPvpAppearCreepReq*>(&::fgame::CSPvpAppearCreepReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  savecheckptdata_req_ = const_cast< ::fgame::CSSaveCheckPtDataReq*>(
      ::fgame::CSSaveCheckPtDataReq::internal_default_instance());
#else
  savecheckptdata_req_ = const_cast< ::fgame::CSSaveCheckPtDataReq*>(&::fgame::CSSaveCheckPtDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getcheckptdata_req_ = const_cast< ::fgame::CSGetCheckPtDataReq*>(
      ::fgame::CSGetCheckPtDataReq::internal_default_instance());
#else
  getcheckptdata_req_ = const_cast< ::fgame::CSGetCheckPtDataReq*>(&::fgame::CSGetCheckPtDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setnewbie_req_ = const_cast< ::fgame::CSSetNewBieReq*>(
      ::fgame::CSSetNewBieReq::internal_default_instance());
#else
  setnewbie_req_ = const_cast< ::fgame::CSSetNewBieReq*>(&::fgame::CSSetNewBieReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getnewbielist_req_ = const_cast< ::fgame::CSGetNewBieListReq*>(
      ::fgame::CSGetNewBieListReq::internal_default_instance());
#else
  getnewbielist_req_ = const_cast< ::fgame::CSGetNewBieListReq*>(&::fgame::CSGetNewBieListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  enterpoint_req_ = const_cast< ::fgame::CSEnterPointReq*>(
      ::fgame::CSEnterPointReq::internal_default_instance());
#else
  enterpoint_req_ = const_cast< ::fgame::CSEnterPointReq*>(&::fgame::CSEnterPointReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shopguide_req_ = const_cast< ::fgame::CSShopGuideReq*>(
      ::fgame::CSShopGuideReq::internal_default_instance());
#else
  shopguide_req_ = const_cast< ::fgame::CSShopGuideReq*>(&::fgame::CSShopGuideReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  testadddiamond_req_ = const_cast< ::fgame::CSTestAddDiamondReq*>(
      ::fgame::CSTestAddDiamondReq::internal_default_instance());
#else
  testadddiamond_req_ = const_cast< ::fgame::CSTestAddDiamondReq*>(&::fgame::CSTestAddDiamondReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitylist_req_ = const_cast< ::fgame::CSActivityListReq*>(
      ::fgame::CSActivityListReq::internal_default_instance());
#else
  activitylist_req_ = const_cast< ::fgame::CSActivityListReq*>(&::fgame::CSActivityListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitysubmit_req_ = const_cast< ::fgame::CSActivitySubmitReq*>(
      ::fgame::CSActivitySubmitReq::internal_default_instance());
#else
  activitysubmit_req_ = const_cast< ::fgame::CSActivitySubmitReq*>(&::fgame::CSActivitySubmitReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  settitle_req_ = const_cast< ::fgame::CSSetTitleReq*>(
      ::fgame::CSSetTitleReq::internal_default_instance());
#else
  settitle_req_ = const_cast< ::fgame::CSSetTitleReq*>(&::fgame::CSSetTitleReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shopbuy_req_ = const_cast< ::fgame::CSShopBuyReq*>(
      ::fgame::CSShopBuyReq::internal_default_instance());
#else
  shopbuy_req_ = const_cast< ::fgame::CSShopBuyReq*>(&::fgame::CSShopBuyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  exchangeitem_req_ = const_cast< ::fgame::CSExchangeItemReq*>(
      ::fgame::CSExchangeItemReq::internal_default_instance());
#else
  exchangeitem_req_ = const_cast< ::fgame::CSExchangeItemReq*>(&::fgame::CSExchangeItemReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitycrazydtls_req_ = const_cast< ::fgame::CSActivityCrazyDtlsReq*>(
      ::fgame::CSActivityCrazyDtlsReq::internal_default_instance());
#else
  activitycrazydtls_req_ = const_cast< ::fgame::CSActivityCrazyDtlsReq*>(&::fgame::CSActivityCrazyDtlsReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitycrazyusage_req_ = const_cast< ::fgame::CSActivityCrazyUsageReq*>(
      ::fgame::CSActivityCrazyUsageReq::internal_default_instance());
#else
  activitycrazyusage_req_ = const_cast< ::fgame::CSActivityCrazyUsageReq*>(&::fgame::CSActivityCrazyUsageReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shoplist_req_ = const_cast< ::fgame::CSShopListReq*>(
      ::fgame::CSShopListReq::internal_default_instance());
#else
  shoplist_req_ = const_cast< ::fgame::CSShopListReq*>(&::fgame::CSShopListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpobserver_req_ = const_cast< ::fgame::CSPvpObserverReq*>(
      ::fgame::CSPvpObserverReq::internal_default_instance());
#else
  pvpobserver_req_ = const_cast< ::fgame::CSPvpObserverReq*>(&::fgame::CSPvpObserverReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setnewbieoss_req_ = const_cast< ::fgame::CSSetNewBieOssReq*>(
      ::fgame::CSSetNewBieOssReq::internal_default_instance());
#else
  setnewbieoss_req_ = const_cast< ::fgame::CSSetNewBieOssReq*>(&::fgame::CSSetNewBieOssReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpresult_req_ = const_cast< ::fgame::CSPvpResultReq*>(
      ::fgame::CSPvpResultReq::internal_default_instance());
#else
  pvpresult_req_ = const_cast< ::fgame::CSPvpResultReq*>(&::fgame::CSPvpResultReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpselfranklist_req_ = const_cast< ::fgame::CSPvpSelfRankListReq*>(
      ::fgame::CSPvpSelfRankListReq::internal_default_instance());
#else
  pvpselfranklist_req_ = const_cast< ::fgame::CSPvpSelfRankListReq*>(&::fgame::CSPvpSelfRankListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwgetmatchinfo_req_ = const_cast< ::fgame::CSGWGetMatchInfoReq*>(
      ::fgame::CSGWGetMatchInfoReq::internal_default_instance());
#else
  gwgetmatchinfo_req_ = const_cast< ::fgame::CSGWGetMatchInfoReq*>(&::fgame::CSGWGetMatchInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwmatch_req_ = const_cast< ::fgame::CSGWMatchReq*>(
      ::fgame::CSGWMatchReq::internal_default_instance());
#else
  gwmatch_req_ = const_cast< ::fgame::CSGWMatchReq*>(&::fgame::CSGWMatchReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwmatchstop_req_ = const_cast< ::fgame::CSGWMatchStopReq*>(
      ::fgame::CSGWMatchStopReq::internal_default_instance());
#else
  gwmatchstop_req_ = const_cast< ::fgame::CSGWMatchStopReq*>(&::fgame::CSGWMatchStopReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwgetrank_req_ = const_cast< ::fgame::CSGWGetRankReq*>(
      ::fgame::CSGWGetRankReq::internal_default_instance());
#else
  gwgetrank_req_ = const_cast< ::fgame::CSGWGetRankReq*>(&::fgame::CSGWGetRankReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwbuyenergy_req_ = const_cast< ::fgame::CSGWBuyEnergyReq*>(
      ::fgame::CSGWBuyEnergyReq::internal_default_instance());
#else
  gwbuyenergy_req_ = const_cast< ::fgame::CSGWBuyEnergyReq*>(&::fgame::CSGWBuyEnergyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requestpkey_req_ = const_cast< ::fgame::CSRequestPKeyReq*>(
      ::fgame::CSRequestPKeyReq::internal_default_instance());
#else
  requestpkey_req_ = const_cast< ::fgame::CSRequestPKeyReq*>(&::fgame::CSRequestPKeyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendclientkey_req_ = const_cast< ::fgame::CSSendClientKeyReq*>(
      ::fgame::CSSendClientKeyReq::internal_default_instance());
#else
  sendclientkey_req_ = const_cast< ::fgame::CSSendClientKeyReq*>(&::fgame::CSSendClientKeyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updateexchangelist_req_ = const_cast< ::fgame::CSUpdateExchangeListReq*>(
      ::fgame::CSUpdateExchangeListReq::internal_default_instance());
#else
  updateexchangelist_req_ = const_cast< ::fgame::CSUpdateExchangeListReq*>(&::fgame::CSUpdateExchangeListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsrequestinfo_req_ = const_cast< ::fgame::CSGlyphsRequestInfoReq*>(
      ::fgame::CSGlyphsRequestInfoReq::internal_default_instance());
#else
  glyphsrequestinfo_req_ = const_cast< ::fgame::CSGlyphsRequestInfoReq*>(&::fgame::CSGlyphsRequestInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsrequestbasicinfo_req_ = const_cast< ::fgame::CSGlyphsRequestBasicInfoReq*>(
      ::fgame::CSGlyphsRequestBasicInfoReq::internal_default_instance());
#else
  glyphsrequestbasicinfo_req_ = const_cast< ::fgame::CSGlyphsRequestBasicInfoReq*>(&::fgame::CSGlyphsRequestBasicInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsactive_req_ = const_cast< ::fgame::CSGlyphsActiveReq*>(
      ::fgame::CSGlyphsActiveReq::internal_default_instance());
#else
  glyphsactive_req_ = const_cast< ::fgame::CSGlyphsActiveReq*>(&::fgame::CSGlyphsActiveReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsupgrade_req_ = const_cast< ::fgame::CSGlyphsUpgradeReq*>(
      ::fgame::CSGlyphsUpgradeReq::internal_default_instance());
#else
  glyphsupgrade_req_ = const_cast< ::fgame::CSGlyphsUpgradeReq*>(&::fgame::CSGlyphsUpgradeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphspvpinfo_req_ = const_cast< ::fgame::CSGlyphsPvpInfoReq*>(
      ::fgame::CSGlyphsPvpInfoReq::internal_default_instance());
#else
  glyphspvpinfo_req_ = const_cast< ::fgame::CSGlyphsPvpInfoReq*>(&::fgame::CSGlyphsPvpInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyvip_req_ = const_cast< ::fgame::CSBuyVipReq*>(
      ::fgame::CSBuyVipReq::internal_default_instance());
#else
  buyvip_req_ = const_cast< ::fgame::CSBuyVipReq*>(&::fgame::CSBuyVipReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphguide_req_ = const_cast< ::fgame::CSGlyphGuideReq*>(
      ::fgame::CSGlyphGuideReq::internal_default_instance());
#else
  glyphguide_req_ = const_cast< ::fgame::CSGlyphGuideReq*>(&::fgame::CSGlyphGuideReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyeargetinfo_req_ = const_cast< ::fgame::CSNewYearGetInfoReq*>(
      ::fgame::CSNewYearGetInfoReq::internal_default_instance());
#else
  newyeargetinfo_req_ = const_cast< ::fgame::CSNewYearGetInfoReq*>(&::fgame::CSNewYearGetInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyearreward_req_ = const_cast< ::fgame::CSNewYearRewardReq*>(
      ::fgame::CSNewYearRewardReq::internal_default_instance());
#else
  newyearreward_req_ = const_cast< ::fgame::CSNewYearRewardReq*>(&::fgame::CSNewYearRewardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  openchest_req_ = const_cast< ::fgame::CSOpenChestReq*>(
      ::fgame::CSOpenChestReq::internal_default_instance());
#else
  openchest_req_ = const_cast< ::fgame::CSOpenChestReq*>(&::fgame::CSOpenChestReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasdecorate_req_ = const_cast< ::fgame::CSChristmasDecorateReq*>(
      ::fgame::CSChristmasDecorateReq::internal_default_instance());
#else
  christmasdecorate_req_ = const_cast< ::fgame::CSChristmasDecorateReq*>(&::fgame::CSChristmasDecorateReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmastakebonus_req_ = const_cast< ::fgame::CSChristmasTakeBonusReq*>(
      ::fgame::CSChristmasTakeBonusReq::internal_default_instance());
#else
  christmastakebonus_req_ = const_cast< ::fgame::CSChristmasTakeBonusReq*>(&::fgame::CSChristmasTakeBonusReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasgetdate_req_ = const_cast< ::fgame::CSChristmasGetDataReq*>(
      ::fgame::CSChristmasGetDataReq::internal_default_instance());
#else
  christmasgetdate_req_ = const_cast< ::fgame::CSChristmasGetDataReq*>(&::fgame::CSChristmasGetDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasgetrank_req_ = const_cast< ::fgame::CSChristmasGetRankReq*>(
      ::fgame::CSChristmasGetRankReq::internal_default_instance());
#else
  christmasgetrank_req_ = const_cast< ::fgame::CSChristmasGetRankReq*>(&::fgame::CSChristmasGetRankReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  retrivecheckptreward_req_ = const_cast< ::fgame::CSRetriveCheckPtRewardReq*>(
      ::fgame::CSRetriveCheckPtRewardReq::internal_default_instance());
#else
  retrivecheckptreward_req_ = const_cast< ::fgame::CSRetriveCheckPtRewardReq*>(&::fgame::CSRetriveCheckPtRewardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  viptime_req_ = const_cast< ::fgame::CSVipTimeReq*>(
      ::fgame::CSVipTimeReq::internal_default_instance());
#else
  viptime_req_ = const_cast< ::fgame::CSVipTimeReq*>(&::fgame::CSVipTimeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyearcmp_req_ = const_cast< ::fgame::CSNewYearCmpReq*>(
      ::fgame::CSNewYearCmpReq::internal_default_instance());
#else
  newyearcmp_req_ = const_cast< ::fgame::CSNewYearCmpReq*>(&::fgame::CSNewYearCmpReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notifyglyphsupdate_req_ = const_cast< ::fgame::CSNotifyGlyphsUpdateReq*>(
      ::fgame::CSNotifyGlyphsUpdateReq::internal_default_instance());
#else
  notifyglyphsupdate_req_ = const_cast< ::fgame::CSNotifyGlyphsUpdateReq*>(&::fgame::CSNotifyGlyphsUpdateReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recoveritem_req_ = const_cast< ::fgame::CSPvpRecoverItemReq*>(
      ::fgame::CSPvpRecoverItemReq::internal_default_instance());
#else
  recoveritem_req_ = const_cast< ::fgame::CSPvpRecoverItemReq*>(&::fgame::CSPvpRecoverItemReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setsignature_req_ = const_cast< ::fgame::CSSetSignatureReq*>(
      ::fgame::CSSetSignatureReq::internal_default_instance());
#else
  setsignature_req_ = const_cast< ::fgame::CSSetSignatureReq*>(&::fgame::CSSetSignatureReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setextrainfovisible_req_ = const_cast< ::fgame::CSSetExtraInfoVisibleReq*>(
      ::fgame::CSSetExtraInfoVisibleReq::internal_default_instance());
#else
  setextrainfovisible_req_ = const_cast< ::fgame::CSSetExtraInfoVisibleReq*>(&::fgame::CSSetExtraInfoVisibleReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getextrainfo_req_ = const_cast< ::fgame::CSGetExtraInfoReq*>(
      ::fgame::CSGetExtraInfoReq::internal_default_instance());
#else
  getextrainfo_req_ = const_cast< ::fgame::CSGetExtraInfoReq*>(&::fgame::CSGetExtraInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  valentinedata_req_ = const_cast< ::fgame::CSValentineDataReq*>(
      ::fgame::CSValentineDataReq::internal_default_instance());
#else
  valentinedata_req_ = const_cast< ::fgame::CSValentineDataReq*>(&::fgame::CSValentineDataReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  valentineexchange_req_ = const_cast< ::fgame::CSValentineExchangeReq*>(
      ::fgame::CSValentineExchangeReq::internal_default_instance());
#else
  valentineexchange_req_ = const_cast< ::fgame::CSValentineExchangeReq*>(&::fgame::CSValentineExchangeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsgetinfo_req_ = const_cast< ::fgame::CSRedPacketsGetInfoReq*>(
      ::fgame::CSRedPacketsGetInfoReq::internal_default_instance());
#else
  redpacketsgetinfo_req_ = const_cast< ::fgame::CSRedPacketsGetInfoReq*>(&::fgame::CSRedPacketsGetInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsgreb_req_ = const_cast< ::fgame::CSRedPacketsGrebReq*>(
      ::fgame::CSRedPacketsGrebReq::internal_default_instance());
#else
  redpacketsgreb_req_ = const_cast< ::fgame::CSRedPacketsGrebReq*>(&::fgame::CSRedPacketsGrebReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsopened_req_ = const_cast< ::fgame::CSRedPacketsOpenedReq*>(
      ::fgame::CSRedPacketsOpenedReq::internal_default_instance());
#else
  redpacketsopened_req_ = const_cast< ::fgame::CSRedPacketsOpenedReq*>(&::fgame::CSRedPacketsOpenedReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chapterunlock_req_ = const_cast< ::fgame::CSChapterUnlockReq*>(
      ::fgame::CSChapterUnlockReq::internal_default_instance());
#else
  chapterunlock_req_ = const_cast< ::fgame::CSChapterUnlockReq*>(&::fgame::CSChapterUnlockReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getchest_req_ = const_cast< ::fgame::CSGetChestReq*>(
      ::fgame::CSGetChestReq::internal_default_instance());
#else
  getchest_req_ = const_cast< ::fgame::CSGetChestReq*>(&::fgame::CSGetChestReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvenotify_req_ = const_cast< ::fgame::CSPveNotifyReq*>(
      ::fgame::CSPveNotifyReq::internal_default_instance());
#else
  pvenotify_req_ = const_cast< ::fgame::CSPveNotifyReq*>(&::fgame::CSPveNotifyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailytaskstatus_req_ = const_cast< ::fgame::CSDailyTaskStatusReq*>(
      ::fgame::CSDailyTaskStatusReq::internal_default_instance());
#else
  dailytaskstatus_req_ = const_cast< ::fgame::CSDailyTaskStatusReq*>(&::fgame::CSDailyTaskStatusReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requestdailytask_req_ = const_cast< ::fgame::CSRequestDailyTaskReq*>(
      ::fgame::CSRequestDailyTaskReq::internal_default_instance());
#else
  requestdailytask_req_ = const_cast< ::fgame::CSRequestDailyTaskReq*>(&::fgame::CSRequestDailyTaskReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changedailytask_req_ = const_cast< ::fgame::CSChangeDailyTaskReq*>(
      ::fgame::CSChangeDailyTaskReq::internal_default_instance());
#else
  changedailytask_req_ = const_cast< ::fgame::CSChangeDailyTaskReq*>(&::fgame::CSChangeDailyTaskReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opendailytaskaward_req_ = const_cast< ::fgame::CSOpenDailyTaskAwardReq*>(
      ::fgame::CSOpenDailyTaskAwardReq::internal_default_instance());
#else
  opendailytaskaward_req_ = const_cast< ::fgame::CSOpenDailyTaskAwardReq*>(&::fgame::CSOpenDailyTaskAwardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updatedailytaskprogress_req_ = const_cast< ::fgame::CSUpdateDailyTaskProgressReq*>(
      ::fgame::CSUpdateDailyTaskProgressReq::internal_default_instance());
#else
  updatedailytaskprogress_req_ = const_cast< ::fgame::CSUpdateDailyTaskProgressReq*>(&::fgame::CSUpdateDailyTaskProgressReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankweekrewardinfo_req_ = const_cast< ::fgame::CSRankWeekRewardInfoReq*>(
      ::fgame::CSRankWeekRewardInfoReq::internal_default_instance());
#else
  rankweekrewardinfo_req_ = const_cast< ::fgame::CSRankWeekRewardInfoReq*>(&::fgame::CSRankWeekRewardInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankweekrewardreward_req_ = const_cast< ::fgame::CSRankWeekRewardRewardReq*>(
      ::fgame::CSRankWeekRewardRewardReq::internal_default_instance());
#else
  rankweekrewardreward_req_ = const_cast< ::fgame::CSRankWeekRewardRewardReq*>(&::fgame::CSRankWeekRewardRewardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvecheckaward_req_ = const_cast< ::fgame::CSPveCheckAwardReq*>(
      ::fgame::CSPveCheckAwardReq::internal_default_instance());
#else
  pvecheckaward_req_ = const_cast< ::fgame::CSPveCheckAwardReq*>(&::fgame::CSPveCheckAwardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sharereward_req_ = const_cast< ::fgame::CSShareRewardGetReq*>(
      ::fgame::CSShareRewardGetReq::internal_default_instance());
#else
  sharereward_req_ = const_cast< ::fgame::CSShareRewardGetReq*>(&::fgame::CSShareRewardGetReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getsevengoallist_req_ = const_cast< ::fgame::CSGetSevenGoalListReq*>(
      ::fgame::CSGetSevenGoalListReq::internal_default_instance());
#else
  getsevengoallist_req_ = const_cast< ::fgame::CSGetSevenGoalListReq*>(&::fgame::CSGetSevenGoalListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  retrivesevengoal_req_ = const_cast< ::fgame::CSRetriveSevenGoalReq*>(
      ::fgame::CSRetriveSevenGoalReq::internal_default_instance());
#else
  retrivesevengoal_req_ = const_cast< ::fgame::CSRetriveSevenGoalReq*>(&::fgame::CSRetriveSevenGoalReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pverank_req_ = const_cast< ::fgame::CSPveRankReq*>(
      ::fgame::CSPveRankReq::internal_default_instance());
#else
  pverank_req_ = const_cast< ::fgame::CSPveRankReq*>(&::fgame::CSPveRankReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  toprank_req_ = const_cast< ::fgame::CSTopRankReq*>(
      ::fgame::CSTopRankReq::internal_default_instance());
#else
  toprank_req_ = const_cast< ::fgame::CSTopRankReq*>(&::fgame::CSTopRankReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  topranktime_req_ = const_cast< ::fgame::CSTopRankTimeReq*>(
      ::fgame::CSTopRankTimeReq::internal_default_instance());
#else
  topranktime_req_ = const_cast< ::fgame::CSTopRankTimeReq*>(&::fgame::CSTopRankTimeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updatetaskstatus_req_ = const_cast< ::fgame::CSUpdateTaskStatusReq*>(
      ::fgame::CSUpdateTaskStatusReq::internal_default_instance());
#else
  updatetaskstatus_req_ = const_cast< ::fgame::CSUpdateTaskStatusReq*>(&::fgame::CSUpdateTaskStatusReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  assyncinfo_req_ = const_cast< ::fgame::CSAsSyncInfoReq*>(
      ::fgame::CSAsSyncInfoReq::internal_default_instance());
#else
  assyncinfo_req_ = const_cast< ::fgame::CSAsSyncInfoReq*>(&::fgame::CSAsSyncInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asnewadd_req_ = const_cast< ::fgame::CSAsNewAddReq*>(
      ::fgame::CSAsNewAddReq::internal_default_instance());
#else
  asnewadd_req_ = const_cast< ::fgame::CSAsNewAddReq*>(&::fgame::CSAsNewAddReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asoperate_req_ = const_cast< ::fgame::CSAsOperateReq*>(
      ::fgame::CSAsOperateReq::internal_default_instance());
#else
  asoperate_req_ = const_cast< ::fgame::CSAsOperateReq*>(&::fgame::CSAsOperateReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asusecard_req_ = const_cast< ::fgame::CSAsUseCardReq*>(
      ::fgame::CSAsUseCardReq::internal_default_instance());
#else
  asusecard_req_ = const_cast< ::fgame::CSAsUseCardReq*>(&::fgame::CSAsUseCardReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpuseskill_req_ = const_cast< ::fgame::CSPvpUseSkillReq*>(
      ::fgame::CSPvpUseSkillReq::internal_default_instance());
#else
  pvpuseskill_req_ = const_cast< ::fgame::CSPvpUseSkillReq*>(&::fgame::CSPvpUseSkillReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  instituteinfo_req_ = const_cast< ::fgame::CSInstituteInfoReq*>(
      ::fgame::CSInstituteInfoReq::internal_default_instance());
#else
  instituteinfo_req_ = const_cast< ::fgame::CSInstituteInfoReq*>(&::fgame::CSInstituteInfoReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  institutebuy_req_ = const_cast< ::fgame::CSInstituteBuyReq*>(
      ::fgame::CSInstituteBuyReq::internal_default_instance());
#else
  institutebuy_req_ = const_cast< ::fgame::CSInstituteBuyReq*>(&::fgame::CSInstituteBuyReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactconfiglist_req_ = const_cast< ::fgame::CSOpActConfigListReq*>(
      ::fgame::CSOpActConfigListReq::internal_default_instance());
#else
  opactconfiglist_req_ = const_cast< ::fgame::CSOpActConfigListReq*>(&::fgame::CSOpActConfigListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactselfdatalist_req_ = const_cast< ::fgame::CSOpActSelfDataListReq*>(
      ::fgame::CSOpActSelfDataListReq::internal_default_instance());
#else
  opactselfdatalist_req_ = const_cast< ::fgame::CSOpActSelfDataListReq*>(&::fgame::CSOpActSelfDataListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactglobaldatalist_req_ = const_cast< ::fgame::CSOpActGlobalDataListReq*>(
      ::fgame::CSOpActGlobalDataListReq::internal_default_instance());
#else
  opactglobaldatalist_req_ = const_cast< ::fgame::CSOpActGlobalDataListReq*>(&::fgame::CSOpActGlobalDataListReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactdemotake_req_ = const_cast< ::fgame::CSOpActDemoTakeReq*>(
      ::fgame::CSOpActDemoTakeReq::internal_default_instance());
#else
  opactdemotake_req_ = const_cast< ::fgame::CSOpActDemoTakeReq*>(&::fgame::CSOpActDemoTakeReq::default_instance());
#endif
}

C2ServerMsg::C2ServerMsg(const C2ServerMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.C2ServerMsg)
}

void C2ServerMsg::SharedCtor() {
  _cached_size_ = 0;
  login_req_ = NULL;
  reg_req_ = NULL;
  heartbeat_req_ = NULL;
  match_req_ = NULL;
  start_req_ = NULL;
  fight_req_ = NULL;
  end_req_ = NULL;
  map_req_ = NULL;
  upgrade_req_ = NULL;
  ping_req_ = NULL;
  buyitem_req_ = NULL;
  useitem_req_ = NULL;
  leave_req_ = NULL;
  getachievementreq_ = NULL;
  receiveachievement_req_ = NULL;
  receiveachievementreward_req_ = NULL;
  enterserver_req_ = NULL;
  directenter_req_ = NULL;
  pvprankinggetlist_req_ = NULL;
  streakwinvalue_req_ = NULL;
  streakwinget_req_ = NULL;
  openbigstage_req_ = NULL;
  pvpuseitem_req_ = NULL;
  sevendaysignlist_req_ = NULL;
  sevendaysign_req_ = NULL;
  getserver_req_ = NULL;
  sycplayerinfo_req_ = NULL;
  stopmatch_req_ = NULL;
  changename_req_ = NULL;
  logout_req_ = NULL;
  xinshourecode_req_ = NULL;
  pvprankingplayerinfo_req_ = NULL;
  getopenactivity_req_ = NULL;
  getactivitydata_req_ = NULL;
  receiveactivityreward_req_ = NULL;
  missionlist_req_ = NULL;
  missioncomplete_req_ = NULL;
  getpowerenergyactivitydata_req_ = NULL;
  receivepowerenergy_req_ = NULL;
  getmail_req_ = NULL;
  delmail_req_ = NULL;
  buynewbiegift_req_ = NULL;
  rechargecallback_req_ = NULL;
  friendquery_req_ = NULL;
  friendrequestadd_req_ = NULL;
  friendconfirmadd_req_ = NULL;
  friendgetinfo_req_ = NULL;
  friendrequestremove_req_ = NULL;
  friendaddblacklist_req_ = NULL;
  friendremoveblacklist_req_ = NULL;
  pvpchat_req_ = NULL;
  usegiftcode_req_ = NULL;
  queryplayerinfo_req_ = NULL;
  personalroomcreate_req_ = NULL;
  personalroomenter_req_ = NULL;
  personalroomleave_req_ = NULL;
  personalroomkick_req_ = NULL;
  personalroominvite_req_ = NULL;
  personalroombroadcast_req_ = NULL;
  personalroomchat_req_ = NULL;
  personalroommode_req_ = NULL;
  personalroombeginfight_req_ = NULL;
  personalroomapplyorrefuseinvite_req_ = NULL;
  changeplayericon_req_ = NULL;
  personalroomcountdown_req_ = NULL;
  syncplayerdata_req_ = NULL;
  getplayerdata_req_ = NULL;
  appearcreep_req_ = NULL;
  savecheckptdata_req_ = NULL;
  getcheckptdata_req_ = NULL;
  setnewbie_req_ = NULL;
  getnewbielist_req_ = NULL;
  enterpoint_req_ = NULL;
  shopguide_req_ = NULL;
  testadddiamond_req_ = NULL;
  activitylist_req_ = NULL;
  activitysubmit_req_ = NULL;
  settitle_req_ = NULL;
  shopbuy_req_ = NULL;
  exchangeitem_req_ = NULL;
  activitycrazydtls_req_ = NULL;
  activitycrazyusage_req_ = NULL;
  shoplist_req_ = NULL;
  pvpobserver_req_ = NULL;
  setnewbieoss_req_ = NULL;
  pvpresult_req_ = NULL;
  pvpselfranklist_req_ = NULL;
  gwgetmatchinfo_req_ = NULL;
  gwmatch_req_ = NULL;
  gwmatchstop_req_ = NULL;
  gwgetrank_req_ = NULL;
  gwbuyenergy_req_ = NULL;
  requestpkey_req_ = NULL;
  sendclientkey_req_ = NULL;
  updateexchangelist_req_ = NULL;
  glyphsrequestinfo_req_ = NULL;
  glyphsrequestbasicinfo_req_ = NULL;
  glyphsactive_req_ = NULL;
  glyphsupgrade_req_ = NULL;
  glyphspvpinfo_req_ = NULL;
  buyvip_req_ = NULL;
  glyphguide_req_ = NULL;
  newyeargetinfo_req_ = NULL;
  newyearreward_req_ = NULL;
  openchest_req_ = NULL;
  christmasdecorate_req_ = NULL;
  christmastakebonus_req_ = NULL;
  christmasgetdate_req_ = NULL;
  christmasgetrank_req_ = NULL;
  retrivecheckptreward_req_ = NULL;
  viptime_req_ = NULL;
  newyearcmp_req_ = NULL;
  notifyglyphsupdate_req_ = NULL;
  recoveritem_req_ = NULL;
  setsignature_req_ = NULL;
  setextrainfovisible_req_ = NULL;
  getextrainfo_req_ = NULL;
  valentinedata_req_ = NULL;
  valentineexchange_req_ = NULL;
  redpacketsgetinfo_req_ = NULL;
  redpacketsgreb_req_ = NULL;
  redpacketsopened_req_ = NULL;
  chapterunlock_req_ = NULL;
  getchest_req_ = NULL;
  pvenotify_req_ = NULL;
  dailytaskstatus_req_ = NULL;
  requestdailytask_req_ = NULL;
  changedailytask_req_ = NULL;
  opendailytaskaward_req_ = NULL;
  updatedailytaskprogress_req_ = NULL;
  rankweekrewardinfo_req_ = NULL;
  rankweekrewardreward_req_ = NULL;
  pvecheckaward_req_ = NULL;
  sharereward_req_ = NULL;
  getsevengoallist_req_ = NULL;
  retrivesevengoal_req_ = NULL;
  pverank_req_ = NULL;
  toprank_req_ = NULL;
  topranktime_req_ = NULL;
  updatetaskstatus_req_ = NULL;
  assyncinfo_req_ = NULL;
  asnewadd_req_ = NULL;
  asoperate_req_ = NULL;
  asusecard_req_ = NULL;
  pvpuseskill_req_ = NULL;
  instituteinfo_req_ = NULL;
  institutebuy_req_ = NULL;
  opactconfiglist_req_ = NULL;
  opactselfdatalist_req_ = NULL;
  opactglobaldatalist_req_ = NULL;
  opactdemotake_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2ServerMsg::~C2ServerMsg() {
  // @@protoc_insertion_point(destructor:fgame.C2ServerMsg)
  SharedDtor();
}

void C2ServerMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete login_req_;
    delete reg_req_;
    delete heartbeat_req_;
    delete match_req_;
    delete start_req_;
    delete fight_req_;
    delete end_req_;
    delete map_req_;
    delete upgrade_req_;
    delete ping_req_;
    delete buyitem_req_;
    delete useitem_req_;
    delete leave_req_;
    delete getachievementreq_;
    delete receiveachievement_req_;
    delete receiveachievementreward_req_;
    delete enterserver_req_;
    delete directenter_req_;
    delete pvprankinggetlist_req_;
    delete streakwinvalue_req_;
    delete streakwinget_req_;
    delete openbigstage_req_;
    delete pvpuseitem_req_;
    delete sevendaysignlist_req_;
    delete sevendaysign_req_;
    delete getserver_req_;
    delete sycplayerinfo_req_;
    delete stopmatch_req_;
    delete changename_req_;
    delete logout_req_;
    delete xinshourecode_req_;
    delete pvprankingplayerinfo_req_;
    delete getopenactivity_req_;
    delete getactivitydata_req_;
    delete receiveactivityreward_req_;
    delete missionlist_req_;
    delete missioncomplete_req_;
    delete getpowerenergyactivitydata_req_;
    delete receivepowerenergy_req_;
    delete getmail_req_;
    delete delmail_req_;
    delete buynewbiegift_req_;
    delete rechargecallback_req_;
    delete friendquery_req_;
    delete friendrequestadd_req_;
    delete friendconfirmadd_req_;
    delete friendgetinfo_req_;
    delete friendrequestremove_req_;
    delete friendaddblacklist_req_;
    delete friendremoveblacklist_req_;
    delete pvpchat_req_;
    delete usegiftcode_req_;
    delete queryplayerinfo_req_;
    delete personalroomcreate_req_;
    delete personalroomenter_req_;
    delete personalroomleave_req_;
    delete personalroomkick_req_;
    delete personalroominvite_req_;
    delete personalroombroadcast_req_;
    delete personalroomchat_req_;
    delete personalroommode_req_;
    delete personalroombeginfight_req_;
    delete personalroomapplyorrefuseinvite_req_;
    delete changeplayericon_req_;
    delete personalroomcountdown_req_;
    delete syncplayerdata_req_;
    delete getplayerdata_req_;
    delete appearcreep_req_;
    delete savecheckptdata_req_;
    delete getcheckptdata_req_;
    delete setnewbie_req_;
    delete getnewbielist_req_;
    delete enterpoint_req_;
    delete shopguide_req_;
    delete testadddiamond_req_;
    delete activitylist_req_;
    delete activitysubmit_req_;
    delete settitle_req_;
    delete shopbuy_req_;
    delete exchangeitem_req_;
    delete activitycrazydtls_req_;
    delete activitycrazyusage_req_;
    delete shoplist_req_;
    delete pvpobserver_req_;
    delete setnewbieoss_req_;
    delete pvpresult_req_;
    delete pvpselfranklist_req_;
    delete gwgetmatchinfo_req_;
    delete gwmatch_req_;
    delete gwmatchstop_req_;
    delete gwgetrank_req_;
    delete gwbuyenergy_req_;
    delete requestpkey_req_;
    delete sendclientkey_req_;
    delete updateexchangelist_req_;
    delete glyphsrequestinfo_req_;
    delete glyphsrequestbasicinfo_req_;
    delete glyphsactive_req_;
    delete glyphsupgrade_req_;
    delete glyphspvpinfo_req_;
    delete buyvip_req_;
    delete glyphguide_req_;
    delete newyeargetinfo_req_;
    delete newyearreward_req_;
    delete openchest_req_;
    delete christmasdecorate_req_;
    delete christmastakebonus_req_;
    delete christmasgetdate_req_;
    delete christmasgetrank_req_;
    delete retrivecheckptreward_req_;
    delete viptime_req_;
    delete newyearcmp_req_;
    delete notifyglyphsupdate_req_;
    delete recoveritem_req_;
    delete setsignature_req_;
    delete setextrainfovisible_req_;
    delete getextrainfo_req_;
    delete valentinedata_req_;
    delete valentineexchange_req_;
    delete redpacketsgetinfo_req_;
    delete redpacketsgreb_req_;
    delete redpacketsopened_req_;
    delete chapterunlock_req_;
    delete getchest_req_;
    delete pvenotify_req_;
    delete dailytaskstatus_req_;
    delete requestdailytask_req_;
    delete changedailytask_req_;
    delete opendailytaskaward_req_;
    delete updatedailytaskprogress_req_;
    delete rankweekrewardinfo_req_;
    delete rankweekrewardreward_req_;
    delete pvecheckaward_req_;
    delete sharereward_req_;
    delete getsevengoallist_req_;
    delete retrivesevengoal_req_;
    delete pverank_req_;
    delete toprank_req_;
    delete topranktime_req_;
    delete updatetaskstatus_req_;
    delete assyncinfo_req_;
    delete asnewadd_req_;
    delete asoperate_req_;
    delete asusecard_req_;
    delete pvpuseskill_req_;
    delete instituteinfo_req_;
    delete institutebuy_req_;
    delete opactconfiglist_req_;
    delete opactselfdatalist_req_;
    delete opactglobaldatalist_req_;
    delete opactdemotake_req_;
  }
}

void C2ServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const C2ServerMsg& C2ServerMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

C2ServerMsg* C2ServerMsg::default_instance_ = NULL;

C2ServerMsg* C2ServerMsg::New() const {
  return new C2ServerMsg;
}

void C2ServerMsg::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_login_req()) {
      if (login_req_ != NULL) login_req_->::fgame::CSLoginReq::Clear();
    }
    if (has_reg_req()) {
      if (reg_req_ != NULL) reg_req_->::fgame::CSRegReq::Clear();
    }
    if (has_heartbeat_req()) {
      if (heartbeat_req_ != NULL) heartbeat_req_->::fgame::CSHeartBeatReq::Clear();
    }
    if (has_match_req()) {
      if (match_req_ != NULL) match_req_->::fgame::CSPvpMatchReq::Clear();
    }
    if (has_start_req()) {
      if (start_req_ != NULL) start_req_->::fgame::CSPvpStartReq::Clear();
    }
    if (has_fight_req()) {
      if (fight_req_ != NULL) fight_req_->::fgame::CSPvpFightReq::Clear();
    }
    if (has_end_req()) {
      if (end_req_ != NULL) end_req_->::fgame::CSPvpEndReq::Clear();
    }
    if (has_map_req()) {
      if (map_req_ != NULL) map_req_->::fgame::CSPvpMapReq::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_upgrade_req()) {
      if (upgrade_req_ != NULL) upgrade_req_->::fgame::CSPvpUpgradeReq::Clear();
    }
    if (has_ping_req()) {
      if (ping_req_ != NULL) ping_req_->::fgame::CSPvpPingReq::Clear();
    }
    if (has_buyitem_req()) {
      if (buyitem_req_ != NULL) buyitem_req_->::fgame::CSBuyITtemReq::Clear();
    }
    if (has_useitem_req()) {
      if (useitem_req_ != NULL) useitem_req_->::fgame::CSUseItemReq::Clear();
    }
    if (has_leave_req()) {
      if (leave_req_ != NULL) leave_req_->::fgame::CSPvpLeaveReq::Clear();
    }
    if (has_getachievementreq()) {
      if (getachievementreq_ != NULL) getachievementreq_->::fgame::CSGetAchievementReq::Clear();
    }
    if (has_receiveachievement_req()) {
      if (receiveachievement_req_ != NULL) receiveachievement_req_->::fgame::CSReceiveAchievementReq::Clear();
    }
    if (has_receiveachievementreward_req()) {
      if (receiveachievementreward_req_ != NULL) receiveachievementreward_req_->::fgame::CSReceiveAchievementRewardReq::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_enterserver_req()) {
      if (enterserver_req_ != NULL) enterserver_req_->::fgame::CSEnterServerReq::Clear();
    }
    if (has_directenter_req()) {
      if (directenter_req_ != NULL) directenter_req_->::fgame::CSDirectEnterReq::Clear();
    }
    if (has_pvprankinggetlist_req()) {
      if (pvprankinggetlist_req_ != NULL) pvprankinggetlist_req_->::fgame::CSPvpRankingGetListReq::Clear();
    }
    if (has_streakwinvalue_req()) {
      if (streakwinvalue_req_ != NULL) streakwinvalue_req_->::fgame::CSStreakWinValueReq::Clear();
    }
    if (has_streakwinget_req()) {
      if (streakwinget_req_ != NULL) streakwinget_req_->::fgame::CSStreakWinGetReq::Clear();
    }
    if (has_openbigstage_req()) {
      if (openbigstage_req_ != NULL) openbigstage_req_->::fgame::CSOpenBigStageReq::Clear();
    }
    if (has_pvpuseitem_req()) {
      if (pvpuseitem_req_ != NULL) pvpuseitem_req_->::fgame::CSPvpUseItemReq::Clear();
    }
    if (has_sevendaysignlist_req()) {
      if (sevendaysignlist_req_ != NULL) sevendaysignlist_req_->::fgame::CSSevenDaySignListReq::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_sevendaysign_req()) {
      if (sevendaysign_req_ != NULL) sevendaysign_req_->::fgame::CSSevenDaySignReq::Clear();
    }
    if (has_getserver_req()) {
      if (getserver_req_ != NULL) getserver_req_->::fgame::CSGetServerReq::Clear();
    }
    if (has_sycplayerinfo_req()) {
      if (sycplayerinfo_req_ != NULL) sycplayerinfo_req_->::fgame::CSSycPlayerInfoReq::Clear();
    }
    if (has_stopmatch_req()) {
      if (stopmatch_req_ != NULL) stopmatch_req_->::fgame::CSPvpStopMatchReq::Clear();
    }
    if (has_changename_req()) {
      if (changename_req_ != NULL) changename_req_->::fgame::CSChangeNameReq::Clear();
    }
    if (has_logout_req()) {
      if (logout_req_ != NULL) logout_req_->::fgame::CSLogoutReq::Clear();
    }
    if (has_xinshourecode_req()) {
      if (xinshourecode_req_ != NULL) xinshourecode_req_->::fgame::CSXinShouRecodeReq::Clear();
    }
    if (has_pvprankingplayerinfo_req()) {
      if (pvprankingplayerinfo_req_ != NULL) pvprankingplayerinfo_req_->::fgame::CSPvpRankingPlayerInfoReq::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_getopenactivity_req()) {
      if (getopenactivity_req_ != NULL) getopenactivity_req_->::fgame::CSGetOpenActivityReq::Clear();
    }
    if (has_getactivitydata_req()) {
      if (getactivitydata_req_ != NULL) getactivitydata_req_->::fgame::CSGetActivityDataReq::Clear();
    }
    if (has_receiveactivityreward_req()) {
      if (receiveactivityreward_req_ != NULL) receiveactivityreward_req_->::fgame::CSReceiveActivityRewardReq::Clear();
    }
    if (has_missionlist_req()) {
      if (missionlist_req_ != NULL) missionlist_req_->::fgame::CSMissionListReq::Clear();
    }
    if (has_missioncomplete_req()) {
      if (missioncomplete_req_ != NULL) missioncomplete_req_->::fgame::CSMissionCompleteReq::Clear();
    }
    if (has_getpowerenergyactivitydata_req()) {
      if (getpowerenergyactivitydata_req_ != NULL) getpowerenergyactivitydata_req_->::fgame::CSGetPowerEnergyActivityDataReq::Clear();
    }
    if (has_receivepowerenergy_req()) {
      if (receivepowerenergy_req_ != NULL) receivepowerenergy_req_->::fgame::CSReceivePowerEnergyReq::Clear();
    }
    if (has_getmail_req()) {
      if (getmail_req_ != NULL) getmail_req_->::fgame::CSGetMailReq::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_delmail_req()) {
      if (delmail_req_ != NULL) delmail_req_->::fgame::CSDelMailReq::Clear();
    }
    if (has_buynewbiegift_req()) {
      if (buynewbiegift_req_ != NULL) buynewbiegift_req_->::fgame::CSBuyNewbieGiftReq::Clear();
    }
    if (has_rechargecallback_req()) {
      if (rechargecallback_req_ != NULL) rechargecallback_req_->::fgame::CSRechargeCallbackReq::Clear();
    }
    if (has_friendquery_req()) {
      if (friendquery_req_ != NULL) friendquery_req_->::fgame::CSFriendQueryReq::Clear();
    }
    if (has_friendrequestadd_req()) {
      if (friendrequestadd_req_ != NULL) friendrequestadd_req_->::fgame::CSFriendRequestAddReq::Clear();
    }
    if (has_friendconfirmadd_req()) {
      if (friendconfirmadd_req_ != NULL) friendconfirmadd_req_->::fgame::CSFriendConfirmAddReq::Clear();
    }
    if (has_friendgetinfo_req()) {
      if (friendgetinfo_req_ != NULL) friendgetinfo_req_->::fgame::CSFriendGetInfoReq::Clear();
    }
    if (has_friendrequestremove_req()) {
      if (friendrequestremove_req_ != NULL) friendrequestremove_req_->::fgame::CSFriendRequestRemoveReq::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_friendaddblacklist_req()) {
      if (friendaddblacklist_req_ != NULL) friendaddblacklist_req_->::fgame::CSFriendAddBlackListReq::Clear();
    }
    if (has_friendremoveblacklist_req()) {
      if (friendremoveblacklist_req_ != NULL) friendremoveblacklist_req_->::fgame::CSFriendRemoveBlackListReq::Clear();
    }
    if (has_pvpchat_req()) {
      if (pvpchat_req_ != NULL) pvpchat_req_->::fgame::CSPvpChatReq::Clear();
    }
    if (has_usegiftcode_req()) {
      if (usegiftcode_req_ != NULL) usegiftcode_req_->::fgame::CSUseGiftCodeReq::Clear();
    }
    if (has_queryplayerinfo_req()) {
      if (queryplayerinfo_req_ != NULL) queryplayerinfo_req_->::fgame::CSQueryPlayerInfoReq::Clear();
    }
    if (has_personalroomcreate_req()) {
      if (personalroomcreate_req_ != NULL) personalroomcreate_req_->::fgame::CSPersonalRoomCreateReq::Clear();
    }
    if (has_personalroomenter_req()) {
      if (personalroomenter_req_ != NULL) personalroomenter_req_->::fgame::CSPersonalRoomEnterReq::Clear();
    }
    if (has_personalroomleave_req()) {
      if (personalroomleave_req_ != NULL) personalroomleave_req_->::fgame::CSPersonalRoomLeaveReq::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_personalroomkick_req()) {
      if (personalroomkick_req_ != NULL) personalroomkick_req_->::fgame::CSPersonalRoomKickReq::Clear();
    }
    if (has_personalroominvite_req()) {
      if (personalroominvite_req_ != NULL) personalroominvite_req_->::fgame::CSPersonalRoomInviteReq::Clear();
    }
    if (has_personalroombroadcast_req()) {
      if (personalroombroadcast_req_ != NULL) personalroombroadcast_req_->::fgame::CSPersonalRoomBroadcastReq::Clear();
    }
    if (has_personalroomchat_req()) {
      if (personalroomchat_req_ != NULL) personalroomchat_req_->::fgame::CSPersonalRoomChatReq::Clear();
    }
    if (has_personalroommode_req()) {
      if (personalroommode_req_ != NULL) personalroommode_req_->::fgame::CSPersonalRoomModeReq::Clear();
    }
    if (has_personalroombeginfight_req()) {
      if (personalroombeginfight_req_ != NULL) personalroombeginfight_req_->::fgame::CSPersonalRoomBeginFightReq::Clear();
    }
    if (has_personalroomapplyorrefuseinvite_req()) {
      if (personalroomapplyorrefuseinvite_req_ != NULL) personalroomapplyorrefuseinvite_req_->::fgame::CSPersonalRoomApplyOrRefuseInviteReq::Clear();
    }
    if (has_changeplayericon_req()) {
      if (changeplayericon_req_ != NULL) changeplayericon_req_->::fgame::CSChangePlayerIconReq::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_personalroomcountdown_req()) {
      if (personalroomcountdown_req_ != NULL) personalroomcountdown_req_->::fgame::CSPersonalRoomCountDownReq::Clear();
    }
    if (has_syncplayerdata_req()) {
      if (syncplayerdata_req_ != NULL) syncplayerdata_req_->::fgame::CSSyncPlayerDataReq::Clear();
    }
    if (has_getplayerdata_req()) {
      if (getplayerdata_req_ != NULL) getplayerdata_req_->::fgame::CSGetPlayerDataReq::Clear();
    }
    if (has_appearcreep_req()) {
      if (appearcreep_req_ != NULL) appearcreep_req_->::fgame::CSPvpAppearCreepReq::Clear();
    }
    if (has_savecheckptdata_req()) {
      if (savecheckptdata_req_ != NULL) savecheckptdata_req_->::fgame::CSSaveCheckPtDataReq::Clear();
    }
    if (has_getcheckptdata_req()) {
      if (getcheckptdata_req_ != NULL) getcheckptdata_req_->::fgame::CSGetCheckPtDataReq::Clear();
    }
    if (has_setnewbie_req()) {
      if (setnewbie_req_ != NULL) setnewbie_req_->::fgame::CSSetNewBieReq::Clear();
    }
    if (has_getnewbielist_req()) {
      if (getnewbielist_req_ != NULL) getnewbielist_req_->::fgame::CSGetNewBieListReq::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_enterpoint_req()) {
      if (enterpoint_req_ != NULL) enterpoint_req_->::fgame::CSEnterPointReq::Clear();
    }
    if (has_shopguide_req()) {
      if (shopguide_req_ != NULL) shopguide_req_->::fgame::CSShopGuideReq::Clear();
    }
    if (has_testadddiamond_req()) {
      if (testadddiamond_req_ != NULL) testadddiamond_req_->::fgame::CSTestAddDiamondReq::Clear();
    }
    if (has_activitylist_req()) {
      if (activitylist_req_ != NULL) activitylist_req_->::fgame::CSActivityListReq::Clear();
    }
    if (has_activitysubmit_req()) {
      if (activitysubmit_req_ != NULL) activitysubmit_req_->::fgame::CSActivitySubmitReq::Clear();
    }
    if (has_settitle_req()) {
      if (settitle_req_ != NULL) settitle_req_->::fgame::CSSetTitleReq::Clear();
    }
    if (has_shopbuy_req()) {
      if (shopbuy_req_ != NULL) shopbuy_req_->::fgame::CSShopBuyReq::Clear();
    }
    if (has_exchangeitem_req()) {
      if (exchangeitem_req_ != NULL) exchangeitem_req_->::fgame::CSExchangeItemReq::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    if (has_activitycrazydtls_req()) {
      if (activitycrazydtls_req_ != NULL) activitycrazydtls_req_->::fgame::CSActivityCrazyDtlsReq::Clear();
    }
    if (has_activitycrazyusage_req()) {
      if (activitycrazyusage_req_ != NULL) activitycrazyusage_req_->::fgame::CSActivityCrazyUsageReq::Clear();
    }
    if (has_shoplist_req()) {
      if (shoplist_req_ != NULL) shoplist_req_->::fgame::CSShopListReq::Clear();
    }
    if (has_pvpobserver_req()) {
      if (pvpobserver_req_ != NULL) pvpobserver_req_->::fgame::CSPvpObserverReq::Clear();
    }
    if (has_setnewbieoss_req()) {
      if (setnewbieoss_req_ != NULL) setnewbieoss_req_->::fgame::CSSetNewBieOssReq::Clear();
    }
    if (has_pvpresult_req()) {
      if (pvpresult_req_ != NULL) pvpresult_req_->::fgame::CSPvpResultReq::Clear();
    }
    if (has_pvpselfranklist_req()) {
      if (pvpselfranklist_req_ != NULL) pvpselfranklist_req_->::fgame::CSPvpSelfRankListReq::Clear();
    }
    if (has_gwgetmatchinfo_req()) {
      if (gwgetmatchinfo_req_ != NULL) gwgetmatchinfo_req_->::fgame::CSGWGetMatchInfoReq::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    if (has_gwmatch_req()) {
      if (gwmatch_req_ != NULL) gwmatch_req_->::fgame::CSGWMatchReq::Clear();
    }
    if (has_gwmatchstop_req()) {
      if (gwmatchstop_req_ != NULL) gwmatchstop_req_->::fgame::CSGWMatchStopReq::Clear();
    }
    if (has_gwgetrank_req()) {
      if (gwgetrank_req_ != NULL) gwgetrank_req_->::fgame::CSGWGetRankReq::Clear();
    }
    if (has_gwbuyenergy_req()) {
      if (gwbuyenergy_req_ != NULL) gwbuyenergy_req_->::fgame::CSGWBuyEnergyReq::Clear();
    }
    if (has_requestpkey_req()) {
      if (requestpkey_req_ != NULL) requestpkey_req_->::fgame::CSRequestPKeyReq::Clear();
    }
    if (has_sendclientkey_req()) {
      if (sendclientkey_req_ != NULL) sendclientkey_req_->::fgame::CSSendClientKeyReq::Clear();
    }
    if (has_updateexchangelist_req()) {
      if (updateexchangelist_req_ != NULL) updateexchangelist_req_->::fgame::CSUpdateExchangeListReq::Clear();
    }
    if (has_glyphsrequestinfo_req()) {
      if (glyphsrequestinfo_req_ != NULL) glyphsrequestinfo_req_->::fgame::CSGlyphsRequestInfoReq::Clear();
    }
  }
  if (_has_bits_[96 / 32] & 255) {
    if (has_glyphsrequestbasicinfo_req()) {
      if (glyphsrequestbasicinfo_req_ != NULL) glyphsrequestbasicinfo_req_->::fgame::CSGlyphsRequestBasicInfoReq::Clear();
    }
    if (has_glyphsactive_req()) {
      if (glyphsactive_req_ != NULL) glyphsactive_req_->::fgame::CSGlyphsActiveReq::Clear();
    }
    if (has_glyphsupgrade_req()) {
      if (glyphsupgrade_req_ != NULL) glyphsupgrade_req_->::fgame::CSGlyphsUpgradeReq::Clear();
    }
    if (has_glyphspvpinfo_req()) {
      if (glyphspvpinfo_req_ != NULL) glyphspvpinfo_req_->::fgame::CSGlyphsPvpInfoReq::Clear();
    }
    if (has_buyvip_req()) {
      if (buyvip_req_ != NULL) buyvip_req_->::fgame::CSBuyVipReq::Clear();
    }
    if (has_glyphguide_req()) {
      if (glyphguide_req_ != NULL) glyphguide_req_->::fgame::CSGlyphGuideReq::Clear();
    }
    if (has_newyeargetinfo_req()) {
      if (newyeargetinfo_req_ != NULL) newyeargetinfo_req_->::fgame::CSNewYearGetInfoReq::Clear();
    }
    if (has_newyearreward_req()) {
      if (newyearreward_req_ != NULL) newyearreward_req_->::fgame::CSNewYearRewardReq::Clear();
    }
  }
  if (_has_bits_[104 / 32] & 65280) {
    if (has_openchest_req()) {
      if (openchest_req_ != NULL) openchest_req_->::fgame::CSOpenChestReq::Clear();
    }
    if (has_christmasdecorate_req()) {
      if (christmasdecorate_req_ != NULL) christmasdecorate_req_->::fgame::CSChristmasDecorateReq::Clear();
    }
    if (has_christmastakebonus_req()) {
      if (christmastakebonus_req_ != NULL) christmastakebonus_req_->::fgame::CSChristmasTakeBonusReq::Clear();
    }
    if (has_christmasgetdate_req()) {
      if (christmasgetdate_req_ != NULL) christmasgetdate_req_->::fgame::CSChristmasGetDataReq::Clear();
    }
    if (has_christmasgetrank_req()) {
      if (christmasgetrank_req_ != NULL) christmasgetrank_req_->::fgame::CSChristmasGetRankReq::Clear();
    }
    if (has_retrivecheckptreward_req()) {
      if (retrivecheckptreward_req_ != NULL) retrivecheckptreward_req_->::fgame::CSRetriveCheckPtRewardReq::Clear();
    }
    if (has_viptime_req()) {
      if (viptime_req_ != NULL) viptime_req_->::fgame::CSVipTimeReq::Clear();
    }
    if (has_newyearcmp_req()) {
      if (newyearcmp_req_ != NULL) newyearcmp_req_->::fgame::CSNewYearCmpReq::Clear();
    }
  }
  if (_has_bits_[112 / 32] & 16711680) {
    if (has_notifyglyphsupdate_req()) {
      if (notifyglyphsupdate_req_ != NULL) notifyglyphsupdate_req_->::fgame::CSNotifyGlyphsUpdateReq::Clear();
    }
    if (has_recoveritem_req()) {
      if (recoveritem_req_ != NULL) recoveritem_req_->::fgame::CSPvpRecoverItemReq::Clear();
    }
    if (has_setsignature_req()) {
      if (setsignature_req_ != NULL) setsignature_req_->::fgame::CSSetSignatureReq::Clear();
    }
    if (has_setextrainfovisible_req()) {
      if (setextrainfovisible_req_ != NULL) setextrainfovisible_req_->::fgame::CSSetExtraInfoVisibleReq::Clear();
    }
    if (has_getextrainfo_req()) {
      if (getextrainfo_req_ != NULL) getextrainfo_req_->::fgame::CSGetExtraInfoReq::Clear();
    }
    if (has_valentinedata_req()) {
      if (valentinedata_req_ != NULL) valentinedata_req_->::fgame::CSValentineDataReq::Clear();
    }
    if (has_valentineexchange_req()) {
      if (valentineexchange_req_ != NULL) valentineexchange_req_->::fgame::CSValentineExchangeReq::Clear();
    }
    if (has_redpacketsgetinfo_req()) {
      if (redpacketsgetinfo_req_ != NULL) redpacketsgetinfo_req_->::fgame::CSRedPacketsGetInfoReq::Clear();
    }
  }
  if (_has_bits_[120 / 32] & 4278190080) {
    if (has_redpacketsgreb_req()) {
      if (redpacketsgreb_req_ != NULL) redpacketsgreb_req_->::fgame::CSRedPacketsGrebReq::Clear();
    }
    if (has_redpacketsopened_req()) {
      if (redpacketsopened_req_ != NULL) redpacketsopened_req_->::fgame::CSRedPacketsOpenedReq::Clear();
    }
    if (has_chapterunlock_req()) {
      if (chapterunlock_req_ != NULL) chapterunlock_req_->::fgame::CSChapterUnlockReq::Clear();
    }
    if (has_getchest_req()) {
      if (getchest_req_ != NULL) getchest_req_->::fgame::CSGetChestReq::Clear();
    }
    if (has_pvenotify_req()) {
      if (pvenotify_req_ != NULL) pvenotify_req_->::fgame::CSPveNotifyReq::Clear();
    }
    if (has_dailytaskstatus_req()) {
      if (dailytaskstatus_req_ != NULL) dailytaskstatus_req_->::fgame::CSDailyTaskStatusReq::Clear();
    }
    if (has_requestdailytask_req()) {
      if (requestdailytask_req_ != NULL) requestdailytask_req_->::fgame::CSRequestDailyTaskReq::Clear();
    }
    if (has_changedailytask_req()) {
      if (changedailytask_req_ != NULL) changedailytask_req_->::fgame::CSChangeDailyTaskReq::Clear();
    }
  }
  if (_has_bits_[128 / 32] & 255) {
    if (has_opendailytaskaward_req()) {
      if (opendailytaskaward_req_ != NULL) opendailytaskaward_req_->::fgame::CSOpenDailyTaskAwardReq::Clear();
    }
    if (has_updatedailytaskprogress_req()) {
      if (updatedailytaskprogress_req_ != NULL) updatedailytaskprogress_req_->::fgame::CSUpdateDailyTaskProgressReq::Clear();
    }
    if (has_rankweekrewardinfo_req()) {
      if (rankweekrewardinfo_req_ != NULL) rankweekrewardinfo_req_->::fgame::CSRankWeekRewardInfoReq::Clear();
    }
    if (has_rankweekrewardreward_req()) {
      if (rankweekrewardreward_req_ != NULL) rankweekrewardreward_req_->::fgame::CSRankWeekRewardRewardReq::Clear();
    }
    if (has_pvecheckaward_req()) {
      if (pvecheckaward_req_ != NULL) pvecheckaward_req_->::fgame::CSPveCheckAwardReq::Clear();
    }
    if (has_sharereward_req()) {
      if (sharereward_req_ != NULL) sharereward_req_->::fgame::CSShareRewardGetReq::Clear();
    }
    if (has_getsevengoallist_req()) {
      if (getsevengoallist_req_ != NULL) getsevengoallist_req_->::fgame::CSGetSevenGoalListReq::Clear();
    }
    if (has_retrivesevengoal_req()) {
      if (retrivesevengoal_req_ != NULL) retrivesevengoal_req_->::fgame::CSRetriveSevenGoalReq::Clear();
    }
  }
  if (_has_bits_[136 / 32] & 65280) {
    if (has_pverank_req()) {
      if (pverank_req_ != NULL) pverank_req_->::fgame::CSPveRankReq::Clear();
    }
    if (has_toprank_req()) {
      if (toprank_req_ != NULL) toprank_req_->::fgame::CSTopRankReq::Clear();
    }
    if (has_topranktime_req()) {
      if (topranktime_req_ != NULL) topranktime_req_->::fgame::CSTopRankTimeReq::Clear();
    }
    if (has_updatetaskstatus_req()) {
      if (updatetaskstatus_req_ != NULL) updatetaskstatus_req_->::fgame::CSUpdateTaskStatusReq::Clear();
    }
    if (has_assyncinfo_req()) {
      if (assyncinfo_req_ != NULL) assyncinfo_req_->::fgame::CSAsSyncInfoReq::Clear();
    }
    if (has_asnewadd_req()) {
      if (asnewadd_req_ != NULL) asnewadd_req_->::fgame::CSAsNewAddReq::Clear();
    }
    if (has_asoperate_req()) {
      if (asoperate_req_ != NULL) asoperate_req_->::fgame::CSAsOperateReq::Clear();
    }
    if (has_asusecard_req()) {
      if (asusecard_req_ != NULL) asusecard_req_->::fgame::CSAsUseCardReq::Clear();
    }
  }
  if (_has_bits_[144 / 32] & 8323072) {
    if (has_pvpuseskill_req()) {
      if (pvpuseskill_req_ != NULL) pvpuseskill_req_->::fgame::CSPvpUseSkillReq::Clear();
    }
    if (has_instituteinfo_req()) {
      if (instituteinfo_req_ != NULL) instituteinfo_req_->::fgame::CSInstituteInfoReq::Clear();
    }
    if (has_institutebuy_req()) {
      if (institutebuy_req_ != NULL) institutebuy_req_->::fgame::CSInstituteBuyReq::Clear();
    }
    if (has_opactconfiglist_req()) {
      if (opactconfiglist_req_ != NULL) opactconfiglist_req_->::fgame::CSOpActConfigListReq::Clear();
    }
    if (has_opactselfdatalist_req()) {
      if (opactselfdatalist_req_ != NULL) opactselfdatalist_req_->::fgame::CSOpActSelfDataListReq::Clear();
    }
    if (has_opactglobaldatalist_req()) {
      if (opactglobaldatalist_req_ != NULL) opactglobaldatalist_req_->::fgame::CSOpActGlobalDataListReq::Clear();
    }
    if (has_opactdemotake_req()) {
      if (opactdemotake_req_ != NULL) opactdemotake_req_->::fgame::CSOpActDemoTakeReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool C2ServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.C2ServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fgame.CSLoginReq Login_Req = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Reg_Req;
        break;
      }

      // optional .fgame.CSRegReq Reg_Req = 3;
      case 3: {
        if (tag == 26) {
         parse_Reg_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HeartBeat_Req;
        break;
      }

      // optional .fgame.CSHeartBeatReq HeartBeat_Req = 4;
      case 4: {
        if (tag == 34) {
         parse_HeartBeat_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Match_Req;
        break;
      }

      // optional .fgame.CSPvpMatchReq Match_Req = 5;
      case 5: {
        if (tag == 42) {
         parse_Match_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Start_Req;
        break;
      }

      // optional .fgame.CSPvpStartReq Start_Req = 6;
      case 6: {
        if (tag == 50) {
         parse_Start_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Fight_Req;
        break;
      }

      // optional .fgame.CSPvpFightReq Fight_Req = 7;
      case 7: {
        if (tag == 58) {
         parse_Fight_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_End_Req;
        break;
      }

      // optional .fgame.CSPvpEndReq End_Req = 8;
      case 8: {
        if (tag == 66) {
         parse_End_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Map_Req;
        break;
      }

      // optional .fgame.CSPvpMapReq Map_Req = 9;
      case 9: {
        if (tag == 74) {
         parse_Map_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Upgrade_Req;
        break;
      }

      // optional .fgame.CSPvpUpgradeReq Upgrade_Req = 10;
      case 10: {
        if (tag == 82) {
         parse_Upgrade_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Ping_Req;
        break;
      }

      // optional .fgame.CSPvpPingReq Ping_Req = 13;
      case 13: {
        if (tag == 106) {
         parse_Ping_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_BuyItem_Req;
        break;
      }

      // optional .fgame.CSBuyITtemReq BuyItem_Req = 14;
      case 14: {
        if (tag == 114) {
         parse_BuyItem_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyitem_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_UseItem_Req;
        break;
      }

      // optional .fgame.CSUseItemReq UseItem_Req = 15;
      case 15: {
        if (tag == 122) {
         parse_UseItem_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useitem_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Leave_Req;
        break;
      }

      // optional .fgame.CSPvpLeaveReq Leave_Req = 18;
      case 18: {
        if (tag == 146) {
         parse_Leave_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_GetAchievementReq;
        break;
      }

      // optional .fgame.CSGetAchievementReq GetAchievementReq = 19;
      case 19: {
        if (tag == 154) {
         parse_GetAchievementReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getachievementreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ReceiveAchievement_Req;
        break;
      }

      // optional .fgame.CSReceiveAchievementReq ReceiveAchievement_Req = 20;
      case 20: {
        if (tag == 162) {
         parse_ReceiveAchievement_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveachievement_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ReceiveAchievementReward_Req;
        break;
      }

      // optional .fgame.CSReceiveAchievementRewardReq ReceiveAchievementReward_Req = 21;
      case 21: {
        if (tag == 170) {
         parse_ReceiveAchievementReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveachievementreward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_EnterServer_Req;
        break;
      }

      // optional .fgame.CSEnterServerReq EnterServer_Req = 22;
      case 22: {
        if (tag == 178) {
         parse_EnterServer_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterserver_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_DirectEnter_Req;
        break;
      }

      // optional .fgame.CSDirectEnterReq DirectEnter_Req = 25;
      case 25: {
        if (tag == 202) {
         parse_DirectEnter_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directenter_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_PvpRankingGetList_Req;
        break;
      }

      // optional .fgame.CSPvpRankingGetListReq PvpRankingGetList_Req = 26;
      case 26: {
        if (tag == 210) {
         parse_PvpRankingGetList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvprankinggetlist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_StreakWinValue_Req;
        break;
      }

      // optional .fgame.CSStreakWinValueReq StreakWinValue_Req = 27;
      case 27: {
        if (tag == 218) {
         parse_StreakWinValue_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streakwinvalue_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_StreakWinGet_Req;
        break;
      }

      // optional .fgame.CSStreakWinGetReq StreakWinGet_Req = 28;
      case 28: {
        if (tag == 226) {
         parse_StreakWinGet_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streakwinget_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_OpenBigStage_Req;
        break;
      }

      // optional .fgame.CSOpenBigStageReq OpenBigStage_Req = 29;
      case 29: {
        if (tag == 234) {
         parse_OpenBigStage_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openbigstage_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_PvpUseItem_Req;
        break;
      }

      // optional .fgame.CSPvpUseItemReq PvpUseItem_Req = 30;
      case 30: {
        if (tag == 242) {
         parse_PvpUseItem_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpuseitem_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_SevenDaySignList_Req;
        break;
      }

      // optional .fgame.CSSevenDaySignListReq SevenDaySignList_Req = 31;
      case 31: {
        if (tag == 250) {
         parse_SevenDaySignList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevendaysignlist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_SevenDaySign_Req;
        break;
      }

      // optional .fgame.CSSevenDaySignReq SevenDaySign_Req = 32;
      case 32: {
        if (tag == 258) {
         parse_SevenDaySign_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevendaysign_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_GetServer_Req;
        break;
      }

      // optional .fgame.CSGetServerReq GetServer_Req = 33;
      case 33: {
        if (tag == 266) {
         parse_GetServer_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getserver_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_SycPlayerInfo_Req;
        break;
      }

      // optional .fgame.CSSycPlayerInfoReq SycPlayerInfo_Req = 34;
      case 34: {
        if (tag == 274) {
         parse_SycPlayerInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sycplayerinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_StopMatch_Req;
        break;
      }

      // optional .fgame.CSPvpStopMatchReq StopMatch_Req = 36;
      case 36: {
        if (tag == 290) {
         parse_StopMatch_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopmatch_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_ChangeName_Req;
        break;
      }

      // optional .fgame.CSChangeNameReq ChangeName_Req = 37;
      case 37: {
        if (tag == 298) {
         parse_ChangeName_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changename_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_Logout_Req;
        break;
      }

      // optional .fgame.CSLogoutReq Logout_Req = 38;
      case 38: {
        if (tag == 306) {
         parse_Logout_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_XinShouRecode_Req;
        break;
      }

      // optional .fgame.CSXinShouRecodeReq XinShouRecode_Req = 41;
      case 41: {
        if (tag == 330) {
         parse_XinShouRecode_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xinshourecode_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_PvpRankingPlayerInfo_Req;
        break;
      }

      // optional .fgame.CSPvpRankingPlayerInfoReq PvpRankingPlayerInfo_Req = 42;
      case 42: {
        if (tag == 338) {
         parse_PvpRankingPlayerInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvprankingplayerinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_GetOpenActivity_Req;
        break;
      }

      // optional .fgame.CSGetOpenActivityReq GetOpenActivity_Req = 43;
      case 43: {
        if (tag == 346) {
         parse_GetOpenActivity_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getopenactivity_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_GetActivityData_Req;
        break;
      }

      // optional .fgame.CSGetActivityDataReq GetActivityData_Req = 44;
      case 44: {
        if (tag == 354) {
         parse_GetActivityData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getactivitydata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_ReceiveActivityReward_Req;
        break;
      }

      // optional .fgame.CSReceiveActivityRewardReq ReceiveActivityReward_Req = 45;
      case 45: {
        if (tag == 362) {
         parse_ReceiveActivityReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveactivityreward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_MissionList_Req;
        break;
      }

      // optional .fgame.CSMissionListReq MissionList_Req = 46;
      case 46: {
        if (tag == 370) {
         parse_MissionList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionlist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_MissionComplete_Req;
        break;
      }

      // optional .fgame.CSMissionCompleteReq MissionComplete_Req = 47;
      case 47: {
        if (tag == 378) {
         parse_MissionComplete_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missioncomplete_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_GetPowerEnergyActivityData_Req;
        break;
      }

      // optional .fgame.CSGetPowerEnergyActivityDataReq GetPowerEnergyActivityData_Req = 49;
      case 49: {
        if (tag == 394) {
         parse_GetPowerEnergyActivityData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpowerenergyactivitydata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_ReceivePowerEnergy_Req;
        break;
      }

      // optional .fgame.CSReceivePowerEnergyReq ReceivePowerEnergy_Req = 50;
      case 50: {
        if (tag == 402) {
         parse_ReceivePowerEnergy_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivepowerenergy_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_GetMail_Req;
        break;
      }

      // optional .fgame.CSGetMailReq GetMail_Req = 51;
      case 51: {
        if (tag == 410) {
         parse_GetMail_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmail_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_DelMail_Req;
        break;
      }

      // optional .fgame.CSDelMailReq DelMail_Req = 52;
      case 52: {
        if (tag == 418) {
         parse_DelMail_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delmail_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_BuyNewbieGift_Req;
        break;
      }

      // optional .fgame.CSBuyNewbieGiftReq BuyNewbieGift_Req = 54;
      case 54: {
        if (tag == 434) {
         parse_BuyNewbieGift_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buynewbiegift_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_RechargeCallback_Req;
        break;
      }

      // optional .fgame.CSRechargeCallbackReq RechargeCallback_Req = 55;
      case 55: {
        if (tag == 442) {
         parse_RechargeCallback_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargecallback_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_FriendQuery_Req;
        break;
      }

      // optional .fgame.CSFriendQueryReq FriendQuery_Req = 56;
      case 56: {
        if (tag == 450) {
         parse_FriendQuery_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendquery_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_FriendRequestAdd_Req;
        break;
      }

      // optional .fgame.CSFriendRequestAddReq FriendRequestAdd_Req = 57;
      case 57: {
        if (tag == 458) {
         parse_FriendRequestAdd_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrequestadd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_FriendConfirmAdd_Req;
        break;
      }

      // optional .fgame.CSFriendConfirmAddReq FriendConfirmAdd_Req = 58;
      case 58: {
        if (tag == 466) {
         parse_FriendConfirmAdd_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendconfirmadd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_FriendGetInfo_Req;
        break;
      }

      // optional .fgame.CSFriendGetInfoReq FriendGetInfo_Req = 59;
      case 59: {
        if (tag == 474) {
         parse_FriendGetInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendgetinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_FriendRequestRemove_Req;
        break;
      }

      // optional .fgame.CSFriendRequestRemoveReq FriendRequestRemove_Req = 60;
      case 60: {
        if (tag == 482) {
         parse_FriendRequestRemove_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrequestremove_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_FriendAddBlackList_Req;
        break;
      }

      // optional .fgame.CSFriendAddBlackListReq FriendAddBlackList_Req = 61;
      case 61: {
        if (tag == 490) {
         parse_FriendAddBlackList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendaddblacklist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_FriendRemoveBlackList_Req;
        break;
      }

      // optional .fgame.CSFriendRemoveBlackListReq FriendRemoveBlackList_Req = 62;
      case 62: {
        if (tag == 498) {
         parse_FriendRemoveBlackList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendremoveblacklist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_PvpChat_Req;
        break;
      }

      // optional .fgame.CSPvpChatReq PvpChat_Req = 63;
      case 63: {
        if (tag == 506) {
         parse_PvpChat_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpchat_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_UseGiftCode_Req;
        break;
      }

      // optional .fgame.CSUseGiftCodeReq UseGiftCode_Req = 64;
      case 64: {
        if (tag == 514) {
         parse_UseGiftCode_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usegiftcode_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_QueryPlayerInfo_Req;
        break;
      }

      // optional .fgame.CSQueryPlayerInfoReq QueryPlayerInfo_Req = 65;
      case 65: {
        if (tag == 522) {
         parse_QueryPlayerInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryplayerinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_PersonalRoomCreate_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomCreateReq PersonalRoomCreate_Req = 66;
      case 66: {
        if (tag == 530) {
         parse_PersonalRoomCreate_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomcreate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_PersonalRoomEnter_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomEnterReq PersonalRoomEnter_Req = 67;
      case 67: {
        if (tag == 538) {
         parse_PersonalRoomEnter_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomenter_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_PersonalRoomLeave_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomLeaveReq PersonalRoomLeave_Req = 68;
      case 68: {
        if (tag == 546) {
         parse_PersonalRoomLeave_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomleave_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_PersonalRoomKick_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomKickReq PersonalRoomKick_Req = 69;
      case 69: {
        if (tag == 554) {
         parse_PersonalRoomKick_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomkick_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_PersonalRoomInvite_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomInviteReq PersonalRoomInvite_Req = 70;
      case 70: {
        if (tag == 562) {
         parse_PersonalRoomInvite_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroominvite_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_PersonalRoomBroadcast_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomBroadcastReq PersonalRoomBroadcast_Req = 71;
      case 71: {
        if (tag == 570) {
         parse_PersonalRoomBroadcast_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroombroadcast_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_PersonalRoomChat_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomChatReq PersonalRoomChat_Req = 72;
      case 72: {
        if (tag == 578) {
         parse_PersonalRoomChat_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomchat_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_PersonalRoomMode_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomModeReq PersonalRoomMode_Req = 73;
      case 73: {
        if (tag == 586) {
         parse_PersonalRoomMode_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroommode_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_PersonalRoomBeginFight_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomBeginFightReq PersonalRoomBeginFight_Req = 74;
      case 74: {
        if (tag == 594) {
         parse_PersonalRoomBeginFight_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroombeginfight_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_PersonalRoomApplyOrRefuseInvite_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomApplyOrRefuseInviteReq PersonalRoomApplyOrRefuseInvite_Req = 76;
      case 76: {
        if (tag == 610) {
         parse_PersonalRoomApplyOrRefuseInvite_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomapplyorrefuseinvite_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_ChangePlayerIcon_Req;
        break;
      }

      // optional .fgame.CSChangePlayerIconReq ChangePlayerIcon_Req = 77;
      case 77: {
        if (tag == 618) {
         parse_ChangePlayerIcon_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeplayericon_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_PersonalRoomCountDown_Req;
        break;
      }

      // optional .fgame.CSPersonalRoomCountDownReq PersonalRoomCountDown_Req = 78;
      case 78: {
        if (tag == 626) {
         parse_PersonalRoomCountDown_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomcountdown_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_SyncPlayerData_Req;
        break;
      }

      // optional .fgame.CSSyncPlayerDataReq SyncPlayerData_Req = 79;
      case 79: {
        if (tag == 634) {
         parse_SyncPlayerData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncplayerdata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_GetPlayerData_Req;
        break;
      }

      // optional .fgame.CSGetPlayerDataReq GetPlayerData_Req = 80;
      case 80: {
        if (tag == 642) {
         parse_GetPlayerData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getplayerdata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_AppearCreep_Req;
        break;
      }

      // optional .fgame.CSPvpAppearCreepReq AppearCreep_Req = 81;
      case 81: {
        if (tag == 650) {
         parse_AppearCreep_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appearcreep_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_SaveCheckPtData_Req;
        break;
      }

      // optional .fgame.CSSaveCheckPtDataReq SaveCheckPtData_Req = 82;
      case 82: {
        if (tag == 658) {
         parse_SaveCheckPtData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_savecheckptdata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_GetCheckPtData_Req;
        break;
      }

      // optional .fgame.CSGetCheckPtDataReq GetCheckPtData_Req = 83;
      case 83: {
        if (tag == 666) {
         parse_GetCheckPtData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getcheckptdata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_SetNewBie_Req;
        break;
      }

      // optional .fgame.CSSetNewBieReq SetNewBie_Req = 84;
      case 84: {
        if (tag == 674) {
         parse_SetNewBie_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setnewbie_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_GetNewBieList_Req;
        break;
      }

      // optional .fgame.CSGetNewBieListReq GetNewBieList_Req = 85;
      case 85: {
        if (tag == 682) {
         parse_GetNewBieList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnewbielist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_EnterPoint_Req;
        break;
      }

      // optional .fgame.CSEnterPointReq EnterPoint_Req = 87;
      case 87: {
        if (tag == 698) {
         parse_EnterPoint_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterpoint_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_ShopGuide_Req;
        break;
      }

      // optional .fgame.CSShopGuideReq ShopGuide_Req = 88;
      case 88: {
        if (tag == 706) {
         parse_ShopGuide_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopguide_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(714)) goto parse_TestAddDiamond_Req;
        break;
      }

      // optional .fgame.CSTestAddDiamondReq TestAddDiamond_Req = 89;
      case 89: {
        if (tag == 714) {
         parse_TestAddDiamond_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testadddiamond_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_ActivityList_Req;
        break;
      }

      // optional .fgame.CSActivityListReq ActivityList_Req = 90;
      case 90: {
        if (tag == 722) {
         parse_ActivityList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitylist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_ActivitySubmit_Req;
        break;
      }

      // optional .fgame.CSActivitySubmitReq ActivitySubmit_Req = 92;
      case 92: {
        if (tag == 738) {
         parse_ActivitySubmit_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitysubmit_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_SetTitle_Req;
        break;
      }

      // optional .fgame.CSSetTitleReq SetTitle_Req = 93;
      case 93: {
        if (tag == 746) {
         parse_SetTitle_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settitle_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(754)) goto parse_ShopBuy_Req;
        break;
      }

      // optional .fgame.CSShopBuyReq ShopBuy_Req = 94;
      case 94: {
        if (tag == 754) {
         parse_ShopBuy_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopbuy_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_ExchangeItem_Req;
        break;
      }

      // optional .fgame.CSExchangeItemReq ExchangeItem_Req = 96;
      case 96: {
        if (tag == 770) {
         parse_ExchangeItem_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangeitem_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_ActivityCrazyDtls_Req;
        break;
      }

      // optional .fgame.CSActivityCrazyDtlsReq ActivityCrazyDtls_Req = 97;
      case 97: {
        if (tag == 778) {
         parse_ActivityCrazyDtls_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitycrazydtls_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_ActivityCrazyUsage_Req;
        break;
      }

      // optional .fgame.CSActivityCrazyUsageReq ActivityCrazyUsage_Req = 98;
      case 98: {
        if (tag == 786) {
         parse_ActivityCrazyUsage_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitycrazyusage_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_ShopList_Req;
        break;
      }

      // optional .fgame.CSShopListReq ShopList_Req = 100;
      case 100: {
        if (tag == 802) {
         parse_ShopList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shoplist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_PvpObserver_Req;
        break;
      }

      // optional .fgame.CSPvpObserverReq PvpObserver_Req = 101;
      case 101: {
        if (tag == 810) {
         parse_PvpObserver_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpobserver_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_SetNewBieOss_Req;
        break;
      }

      // optional .fgame.CSSetNewBieOssReq SetNewBieOss_Req = 102;
      case 102: {
        if (tag == 818) {
         parse_SetNewBieOss_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setnewbieoss_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_PvpResult_Req;
        break;
      }

      // optional .fgame.CSPvpResultReq PvpResult_Req = 104;
      case 104: {
        if (tag == 834) {
         parse_PvpResult_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpresult_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_PvpSelfRankList_Req;
        break;
      }

      // optional .fgame.CSPvpSelfRankListReq PvpSelfRankList_Req = 105;
      case 105: {
        if (tag == 842) {
         parse_PvpSelfRankList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpselfranklist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_GWGetMatchInfo_Req;
        break;
      }

      // optional .fgame.CSGWGetMatchInfoReq GWGetMatchInfo_Req = 106;
      case 106: {
        if (tag == 850) {
         parse_GWGetMatchInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwgetmatchinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_GWMatch_Req;
        break;
      }

      // optional .fgame.CSGWMatchReq GWMatch_Req = 107;
      case 107: {
        if (tag == 858) {
         parse_GWMatch_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwmatch_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_GWMatchStop_Req;
        break;
      }

      // optional .fgame.CSGWMatchStopReq GWMatchStop_Req = 108;
      case 108: {
        if (tag == 866) {
         parse_GWMatchStop_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwmatchstop_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_GWGetRank_Req;
        break;
      }

      // optional .fgame.CSGWGetRankReq GWGetRank_Req = 109;
      case 109: {
        if (tag == 874) {
         parse_GWGetRank_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwgetrank_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_GWBuyEnergy_Req;
        break;
      }

      // optional .fgame.CSGWBuyEnergyReq GWBuyEnergy_Req = 110;
      case 110: {
        if (tag == 882) {
         parse_GWBuyEnergy_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwbuyenergy_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_RequestPKey_Req;
        break;
      }

      // optional .fgame.CSRequestPKeyReq RequestPKey_Req = 114;
      case 114: {
        if (tag == 914) {
         parse_RequestPKey_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestpkey_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_SendClientKey_Req;
        break;
      }

      // optional .fgame.CSSendClientKeyReq SendClientKey_Req = 115;
      case 115: {
        if (tag == 922) {
         parse_SendClientKey_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendclientkey_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_UpdateExchangeList_Req;
        break;
      }

      // optional .fgame.CSUpdateExchangeListReq UpdateExchangeList_Req = 116;
      case 116: {
        if (tag == 930) {
         parse_UpdateExchangeList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateexchangelist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_GlyphsRequestInfo_Req;
        break;
      }

      // optional .fgame.CSGlyphsRequestInfoReq GlyphsRequestInfo_Req = 120;
      case 120: {
        if (tag == 962) {
         parse_GlyphsRequestInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsrequestinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_GlyphsRequestBasicInfo_Req;
        break;
      }

      // optional .fgame.CSGlyphsRequestBasicInfoReq GlyphsRequestBasicInfo_Req = 121;
      case 121: {
        if (tag == 970) {
         parse_GlyphsRequestBasicInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsrequestbasicinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_GlyphsActive_Req;
        break;
      }

      // optional .fgame.CSGlyphsActiveReq GlyphsActive_Req = 122;
      case 122: {
        if (tag == 978) {
         parse_GlyphsActive_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsactive_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_GlyphsUpgrade_Req;
        break;
      }

      // optional .fgame.CSGlyphsUpgradeReq GlyphsUpgrade_Req = 123;
      case 123: {
        if (tag == 986) {
         parse_GlyphsUpgrade_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsupgrade_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_GlyphsPvpInfo_Req;
        break;
      }

      // optional .fgame.CSGlyphsPvpInfoReq GlyphsPvpInfo_Req = 124;
      case 124: {
        if (tag == 994) {
         parse_GlyphsPvpInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphspvpinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1002)) goto parse_BuyVip_Req;
        break;
      }

      // optional .fgame.CSBuyVipReq BuyVip_Req = 125;
      case 125: {
        if (tag == 1002) {
         parse_BuyVip_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyvip_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1010)) goto parse_GlyphGuide_Req;
        break;
      }

      // optional .fgame.CSGlyphGuideReq GlyphGuide_Req = 126;
      case 126: {
        if (tag == 1010) {
         parse_GlyphGuide_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphguide_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1018)) goto parse_NewYearGetInfo_Req;
        break;
      }

      // optional .fgame.CSNewYearGetInfoReq NewYearGetInfo_Req = 127;
      case 127: {
        if (tag == 1018) {
         parse_NewYearGetInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyeargetinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_NewYearReward_Req;
        break;
      }

      // optional .fgame.CSNewYearRewardReq NewYearReward_Req = 128;
      case 128: {
        if (tag == 1026) {
         parse_NewYearReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearreward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_OpenChest_Req;
        break;
      }

      // optional .fgame.CSOpenChestReq OpenChest_Req = 129;
      case 129: {
        if (tag == 1034) {
         parse_OpenChest_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openchest_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_ChristmasDecorate_Req;
        break;
      }

      // optional .fgame.CSChristmasDecorateReq ChristmasDecorate_Req = 130;
      case 130: {
        if (tag == 1042) {
         parse_ChristmasDecorate_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasdecorate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_ChristmasTakeBonus_Req;
        break;
      }

      // optional .fgame.CSChristmasTakeBonusReq ChristmasTakeBonus_Req = 131;
      case 131: {
        if (tag == 1050) {
         parse_ChristmasTakeBonus_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmastakebonus_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_ChristmasGetDate_Req;
        break;
      }

      // optional .fgame.CSChristmasGetDataReq ChristmasGetDate_Req = 132;
      case 132: {
        if (tag == 1058) {
         parse_ChristmasGetDate_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasgetdate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_ChristmasGetRank_Req;
        break;
      }

      // optional .fgame.CSChristmasGetRankReq ChristmasGetRank_Req = 133;
      case 133: {
        if (tag == 1066) {
         parse_ChristmasGetRank_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasgetrank_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_RetriveCheckPtReward_Req;
        break;
      }

      // optional .fgame.CSRetriveCheckPtRewardReq RetriveCheckPtReward_Req = 134;
      case 134: {
        if (tag == 1074) {
         parse_RetriveCheckPtReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrivecheckptreward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1082)) goto parse_VipTime_Req;
        break;
      }

      // optional .fgame.CSVipTimeReq VipTime_Req = 135;
      case 135: {
        if (tag == 1082) {
         parse_VipTime_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viptime_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_NewYearCmp_Req;
        break;
      }

      // optional .fgame.CSNewYearCmpReq NewYearCmp_Req = 136;
      case 136: {
        if (tag == 1090) {
         parse_NewYearCmp_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearcmp_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_NotifyGlyphsUpdate_Req;
        break;
      }

      // optional .fgame.CSNotifyGlyphsUpdateReq NotifyGlyphsUpdate_Req = 137;
      case 137: {
        if (tag == 1098) {
         parse_NotifyGlyphsUpdate_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyglyphsupdate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1106)) goto parse_RecoverItem_Req;
        break;
      }

      // optional .fgame.CSPvpRecoverItemReq RecoverItem_Req = 138;
      case 138: {
        if (tag == 1106) {
         parse_RecoverItem_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recoveritem_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1114)) goto parse_SetSignature_Req;
        break;
      }

      // optional .fgame.CSSetSignatureReq SetSignature_Req = 139;
      case 139: {
        if (tag == 1114) {
         parse_SetSignature_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsignature_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_SetExtraInfoVisible_Req;
        break;
      }

      // optional .fgame.CSSetExtraInfoVisibleReq SetExtraInfoVisible_Req = 140;
      case 140: {
        if (tag == 1122) {
         parse_SetExtraInfoVisible_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setextrainfovisible_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_GetExtraInfo_Req;
        break;
      }

      // optional .fgame.CSGetExtraInfoReq GetExtraInfo_Req = 141;
      case 141: {
        if (tag == 1130) {
         parse_GetExtraInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getextrainfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_ValentineData_Req;
        break;
      }

      // optional .fgame.CSValentineDataReq ValentineData_Req = 143;
      case 143: {
        if (tag == 1146) {
         parse_ValentineData_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valentinedata_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_ValentineExchange_Req;
        break;
      }

      // optional .fgame.CSValentineExchangeReq ValentineExchange_Req = 144;
      case 144: {
        if (tag == 1154) {
         parse_ValentineExchange_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valentineexchange_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_RedPacketsGetInfo_Req;
        break;
      }

      // optional .fgame.CSRedPacketsGetInfoReq RedPacketsGetInfo_Req = 145;
      case 145: {
        if (tag == 1162) {
         parse_RedPacketsGetInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsgetinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_RedPacketsGreb_Req;
        break;
      }

      // optional .fgame.CSRedPacketsGrebReq RedPacketsGreb_Req = 146;
      case 146: {
        if (tag == 1170) {
         parse_RedPacketsGreb_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsgreb_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1178)) goto parse_RedPacketsOpened_Req;
        break;
      }

      // optional .fgame.CSRedPacketsOpenedReq RedPacketsOpened_Req = 147;
      case 147: {
        if (tag == 1178) {
         parse_RedPacketsOpened_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsopened_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1186)) goto parse_ChapterUnlock_Req;
        break;
      }

      // optional .fgame.CSChapterUnlockReq ChapterUnlock_Req = 148;
      case 148: {
        if (tag == 1186) {
         parse_ChapterUnlock_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chapterunlock_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1194)) goto parse_GetChest_Req;
        break;
      }

      // optional .fgame.CSGetChestReq GetChest_Req = 149;
      case 149: {
        if (tag == 1194) {
         parse_GetChest_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchest_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_PveNotify_Req;
        break;
      }

      // optional .fgame.CSPveNotifyReq PveNotify_Req = 150;
      case 150: {
        if (tag == 1202) {
         parse_PveNotify_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvenotify_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1218)) goto parse_DailyTaskStatus_Req;
        break;
      }

      // optional .fgame.CSDailyTaskStatusReq DailyTaskStatus_Req = 152;
      case 152: {
        if (tag == 1218) {
         parse_DailyTaskStatus_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailytaskstatus_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1226)) goto parse_RequestDailyTask_Req;
        break;
      }

      // optional .fgame.CSRequestDailyTaskReq RequestDailyTask_Req = 153;
      case 153: {
        if (tag == 1226) {
         parse_RequestDailyTask_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestdailytask_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1234)) goto parse_ChangeDailyTask_Req;
        break;
      }

      // optional .fgame.CSChangeDailyTaskReq ChangeDailyTask_Req = 154;
      case 154: {
        if (tag == 1234) {
         parse_ChangeDailyTask_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changedailytask_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1242)) goto parse_OpenDailyTaskAward_Req;
        break;
      }

      // optional .fgame.CSOpenDailyTaskAwardReq OpenDailyTaskAward_Req = 155;
      case 155: {
        if (tag == 1242) {
         parse_OpenDailyTaskAward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opendailytaskaward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1250)) goto parse_UpdateDailyTaskProgress_Req;
        break;
      }

      // optional .fgame.CSUpdateDailyTaskProgressReq UpdateDailyTaskProgress_Req = 156;
      case 156: {
        if (tag == 1250) {
         parse_UpdateDailyTaskProgress_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatedailytaskprogress_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1258)) goto parse_RankWeekRewardInfo_Req;
        break;
      }

      // optional .fgame.CSRankWeekRewardInfoReq RankWeekRewardInfo_Req = 157;
      case 157: {
        if (tag == 1258) {
         parse_RankWeekRewardInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankweekrewardinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1266)) goto parse_RankWeekRewardReward_Req;
        break;
      }

      // optional .fgame.CSRankWeekRewardRewardReq RankWeekRewardReward_Req = 158;
      case 158: {
        if (tag == 1266) {
         parse_RankWeekRewardReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankweekrewardreward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1274)) goto parse_PveCheckAward_Req;
        break;
      }

      // optional .fgame.CSPveCheckAwardReq PveCheckAward_Req = 159;
      case 159: {
        if (tag == 1274) {
         parse_PveCheckAward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvecheckaward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1298)) goto parse_ShareReward_Req;
        break;
      }

      // optional .fgame.CSShareRewardGetReq ShareReward_Req = 162;
      case 162: {
        if (tag == 1298) {
         parse_ShareReward_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sharereward_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1306)) goto parse_GetSevenGoalList_Req;
        break;
      }

      // optional .fgame.CSGetSevenGoalListReq GetSevenGoalList_Req = 163;
      case 163: {
        if (tag == 1306) {
         parse_GetSevenGoalList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsevengoallist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1314)) goto parse_RetriveSevenGoal_Req;
        break;
      }

      // optional .fgame.CSRetriveSevenGoalReq RetriveSevenGoal_Req = 164;
      case 164: {
        if (tag == 1314) {
         parse_RetriveSevenGoal_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrivesevengoal_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1330)) goto parse_PveRank_Req;
        break;
      }

      // optional .fgame.CSPveRankReq PveRank_Req = 166;
      case 166: {
        if (tag == 1330) {
         parse_PveRank_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pverank_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1338)) goto parse_TopRank_Req;
        break;
      }

      // optional .fgame.CSTopRankReq TopRank_Req = 167;
      case 167: {
        if (tag == 1338) {
         parse_TopRank_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toprank_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1346)) goto parse_TopRankTime_Req;
        break;
      }

      // optional .fgame.CSTopRankTimeReq TopRankTime_Req = 168;
      case 168: {
        if (tag == 1346) {
         parse_TopRankTime_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topranktime_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_UpdateTaskStatus_Req;
        break;
      }

      // optional .fgame.CSUpdateTaskStatusReq UpdateTaskStatus_Req = 201;
      case 201: {
        if (tag == 1610) {
         parse_UpdateTaskStatus_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatetaskstatus_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_AsSyncInfo_Req;
        break;
      }

      // optional .fgame.CSAsSyncInfoReq AsSyncInfo_Req = 202;
      case 202: {
        if (tag == 1618) {
         parse_AsSyncInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assyncinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_AsNewAdd_Req;
        break;
      }

      // optional .fgame.CSAsNewAddReq AsNewAdd_Req = 203;
      case 203: {
        if (tag == 1626) {
         parse_AsNewAdd_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asnewadd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_AsOperate_Req;
        break;
      }

      // optional .fgame.CSAsOperateReq AsOperate_Req = 204;
      case 204: {
        if (tag == 1634) {
         parse_AsOperate_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asoperate_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1642)) goto parse_AsUseCard_Req;
        break;
      }

      // optional .fgame.CSAsUseCardReq AsUseCard_Req = 205;
      case 205: {
        if (tag == 1642) {
         parse_AsUseCard_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asusecard_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1650)) goto parse_PvpUseSkill_Req;
        break;
      }

      // optional .fgame.CSPvpUseSkillReq PvpUseSkill_Req = 206;
      case 206: {
        if (tag == 1650) {
         parse_PvpUseSkill_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpuseskill_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1666)) goto parse_InstituteInfo_Req;
        break;
      }

      // optional .fgame.CSInstituteInfoReq InstituteInfo_Req = 208;
      case 208: {
        if (tag == 1666) {
         parse_InstituteInfo_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instituteinfo_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1674)) goto parse_InstituteBuy_Req;
        break;
      }

      // optional .fgame.CSInstituteBuyReq InstituteBuy_Req = 209;
      case 209: {
        if (tag == 1674) {
         parse_InstituteBuy_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_institutebuy_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2434)) goto parse_OpActConfigList_Req;
        break;
      }

      // optional .fgame.CSOpActConfigListReq OpActConfigList_Req = 304;
      case 304: {
        if (tag == 2434) {
         parse_OpActConfigList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactconfiglist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2442)) goto parse_OpActSelfDataList_Req;
        break;
      }

      // optional .fgame.CSOpActSelfDataListReq OpActSelfDataList_Req = 305;
      case 305: {
        if (tag == 2442) {
         parse_OpActSelfDataList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactselfdatalist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2450)) goto parse_OpActGlobalDataList_Req;
        break;
      }

      // optional .fgame.CSOpActGlobalDataListReq OpActGlobalDataList_Req = 306;
      case 306: {
        if (tag == 2450) {
         parse_OpActGlobalDataList_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactglobaldatalist_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2482)) goto parse_OpActDemoTake_Req;
        break;
      }

      // optional .fgame.CSOpActDemoTakeReq OpActDemoTake_Req = 310;
      case 310: {
        if (tag == 2482) {
         parse_OpActDemoTake_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactdemotake_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.C2ServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.C2ServerMsg)
  return false;
#undef DO_
}

void C2ServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.C2ServerMsg)
  // optional .fgame.CSLoginReq Login_Req = 2;
  if (has_login_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->login_req(), output);
  }

  // optional .fgame.CSRegReq Reg_Req = 3;
  if (has_reg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->reg_req(), output);
  }

  // optional .fgame.CSHeartBeatReq HeartBeat_Req = 4;
  if (has_heartbeat_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->heartbeat_req(), output);
  }

  // optional .fgame.CSPvpMatchReq Match_Req = 5;
  if (has_match_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->match_req(), output);
  }

  // optional .fgame.CSPvpStartReq Start_Req = 6;
  if (has_start_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->start_req(), output);
  }

  // optional .fgame.CSPvpFightReq Fight_Req = 7;
  if (has_fight_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->fight_req(), output);
  }

  // optional .fgame.CSPvpEndReq End_Req = 8;
  if (has_end_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->end_req(), output);
  }

  // optional .fgame.CSPvpMapReq Map_Req = 9;
  if (has_map_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->map_req(), output);
  }

  // optional .fgame.CSPvpUpgradeReq Upgrade_Req = 10;
  if (has_upgrade_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->upgrade_req(), output);
  }

  // optional .fgame.CSPvpPingReq Ping_Req = 13;
  if (has_ping_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->ping_req(), output);
  }

  // optional .fgame.CSBuyITtemReq BuyItem_Req = 14;
  if (has_buyitem_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->buyitem_req(), output);
  }

  // optional .fgame.CSUseItemReq UseItem_Req = 15;
  if (has_useitem_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->useitem_req(), output);
  }

  // optional .fgame.CSPvpLeaveReq Leave_Req = 18;
  if (has_leave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->leave_req(), output);
  }

  // optional .fgame.CSGetAchievementReq GetAchievementReq = 19;
  if (has_getachievementreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->getachievementreq(), output);
  }

  // optional .fgame.CSReceiveAchievementReq ReceiveAchievement_Req = 20;
  if (has_receiveachievement_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->receiveachievement_req(), output);
  }

  // optional .fgame.CSReceiveAchievementRewardReq ReceiveAchievementReward_Req = 21;
  if (has_receiveachievementreward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->receiveachievementreward_req(), output);
  }

  // optional .fgame.CSEnterServerReq EnterServer_Req = 22;
  if (has_enterserver_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->enterserver_req(), output);
  }

  // optional .fgame.CSDirectEnterReq DirectEnter_Req = 25;
  if (has_directenter_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->directenter_req(), output);
  }

  // optional .fgame.CSPvpRankingGetListReq PvpRankingGetList_Req = 26;
  if (has_pvprankinggetlist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->pvprankinggetlist_req(), output);
  }

  // optional .fgame.CSStreakWinValueReq StreakWinValue_Req = 27;
  if (has_streakwinvalue_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->streakwinvalue_req(), output);
  }

  // optional .fgame.CSStreakWinGetReq StreakWinGet_Req = 28;
  if (has_streakwinget_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->streakwinget_req(), output);
  }

  // optional .fgame.CSOpenBigStageReq OpenBigStage_Req = 29;
  if (has_openbigstage_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->openbigstage_req(), output);
  }

  // optional .fgame.CSPvpUseItemReq PvpUseItem_Req = 30;
  if (has_pvpuseitem_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->pvpuseitem_req(), output);
  }

  // optional .fgame.CSSevenDaySignListReq SevenDaySignList_Req = 31;
  if (has_sevendaysignlist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->sevendaysignlist_req(), output);
  }

  // optional .fgame.CSSevenDaySignReq SevenDaySign_Req = 32;
  if (has_sevendaysign_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->sevendaysign_req(), output);
  }

  // optional .fgame.CSGetServerReq GetServer_Req = 33;
  if (has_getserver_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->getserver_req(), output);
  }

  // optional .fgame.CSSycPlayerInfoReq SycPlayerInfo_Req = 34;
  if (has_sycplayerinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->sycplayerinfo_req(), output);
  }

  // optional .fgame.CSPvpStopMatchReq StopMatch_Req = 36;
  if (has_stopmatch_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->stopmatch_req(), output);
  }

  // optional .fgame.CSChangeNameReq ChangeName_Req = 37;
  if (has_changename_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->changename_req(), output);
  }

  // optional .fgame.CSLogoutReq Logout_Req = 38;
  if (has_logout_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->logout_req(), output);
  }

  // optional .fgame.CSXinShouRecodeReq XinShouRecode_Req = 41;
  if (has_xinshourecode_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->xinshourecode_req(), output);
  }

  // optional .fgame.CSPvpRankingPlayerInfoReq PvpRankingPlayerInfo_Req = 42;
  if (has_pvprankingplayerinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->pvprankingplayerinfo_req(), output);
  }

  // optional .fgame.CSGetOpenActivityReq GetOpenActivity_Req = 43;
  if (has_getopenactivity_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->getopenactivity_req(), output);
  }

  // optional .fgame.CSGetActivityDataReq GetActivityData_Req = 44;
  if (has_getactivitydata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->getactivitydata_req(), output);
  }

  // optional .fgame.CSReceiveActivityRewardReq ReceiveActivityReward_Req = 45;
  if (has_receiveactivityreward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->receiveactivityreward_req(), output);
  }

  // optional .fgame.CSMissionListReq MissionList_Req = 46;
  if (has_missionlist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->missionlist_req(), output);
  }

  // optional .fgame.CSMissionCompleteReq MissionComplete_Req = 47;
  if (has_missioncomplete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->missioncomplete_req(), output);
  }

  // optional .fgame.CSGetPowerEnergyActivityDataReq GetPowerEnergyActivityData_Req = 49;
  if (has_getpowerenergyactivitydata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->getpowerenergyactivitydata_req(), output);
  }

  // optional .fgame.CSReceivePowerEnergyReq ReceivePowerEnergy_Req = 50;
  if (has_receivepowerenergy_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->receivepowerenergy_req(), output);
  }

  // optional .fgame.CSGetMailReq GetMail_Req = 51;
  if (has_getmail_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->getmail_req(), output);
  }

  // optional .fgame.CSDelMailReq DelMail_Req = 52;
  if (has_delmail_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, this->delmail_req(), output);
  }

  // optional .fgame.CSBuyNewbieGiftReq BuyNewbieGift_Req = 54;
  if (has_buynewbiegift_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, this->buynewbiegift_req(), output);
  }

  // optional .fgame.CSRechargeCallbackReq RechargeCallback_Req = 55;
  if (has_rechargecallback_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, this->rechargecallback_req(), output);
  }

  // optional .fgame.CSFriendQueryReq FriendQuery_Req = 56;
  if (has_friendquery_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, this->friendquery_req(), output);
  }

  // optional .fgame.CSFriendRequestAddReq FriendRequestAdd_Req = 57;
  if (has_friendrequestadd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, this->friendrequestadd_req(), output);
  }

  // optional .fgame.CSFriendConfirmAddReq FriendConfirmAdd_Req = 58;
  if (has_friendconfirmadd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, this->friendconfirmadd_req(), output);
  }

  // optional .fgame.CSFriendGetInfoReq FriendGetInfo_Req = 59;
  if (has_friendgetinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, this->friendgetinfo_req(), output);
  }

  // optional .fgame.CSFriendRequestRemoveReq FriendRequestRemove_Req = 60;
  if (has_friendrequestremove_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->friendrequestremove_req(), output);
  }

  // optional .fgame.CSFriendAddBlackListReq FriendAddBlackList_Req = 61;
  if (has_friendaddblacklist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->friendaddblacklist_req(), output);
  }

  // optional .fgame.CSFriendRemoveBlackListReq FriendRemoveBlackList_Req = 62;
  if (has_friendremoveblacklist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, this->friendremoveblacklist_req(), output);
  }

  // optional .fgame.CSPvpChatReq PvpChat_Req = 63;
  if (has_pvpchat_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, this->pvpchat_req(), output);
  }

  // optional .fgame.CSUseGiftCodeReq UseGiftCode_Req = 64;
  if (has_usegiftcode_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, this->usegiftcode_req(), output);
  }

  // optional .fgame.CSQueryPlayerInfoReq QueryPlayerInfo_Req = 65;
  if (has_queryplayerinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->queryplayerinfo_req(), output);
  }

  // optional .fgame.CSPersonalRoomCreateReq PersonalRoomCreate_Req = 66;
  if (has_personalroomcreate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      66, this->personalroomcreate_req(), output);
  }

  // optional .fgame.CSPersonalRoomEnterReq PersonalRoomEnter_Req = 67;
  if (has_personalroomenter_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, this->personalroomenter_req(), output);
  }

  // optional .fgame.CSPersonalRoomLeaveReq PersonalRoomLeave_Req = 68;
  if (has_personalroomleave_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      68, this->personalroomleave_req(), output);
  }

  // optional .fgame.CSPersonalRoomKickReq PersonalRoomKick_Req = 69;
  if (has_personalroomkick_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      69, this->personalroomkick_req(), output);
  }

  // optional .fgame.CSPersonalRoomInviteReq PersonalRoomInvite_Req = 70;
  if (has_personalroominvite_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, this->personalroominvite_req(), output);
  }

  // optional .fgame.CSPersonalRoomBroadcastReq PersonalRoomBroadcast_Req = 71;
  if (has_personalroombroadcast_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, this->personalroombroadcast_req(), output);
  }

  // optional .fgame.CSPersonalRoomChatReq PersonalRoomChat_Req = 72;
  if (has_personalroomchat_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      72, this->personalroomchat_req(), output);
  }

  // optional .fgame.CSPersonalRoomModeReq PersonalRoomMode_Req = 73;
  if (has_personalroommode_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, this->personalroommode_req(), output);
  }

  // optional .fgame.CSPersonalRoomBeginFightReq PersonalRoomBeginFight_Req = 74;
  if (has_personalroombeginfight_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      74, this->personalroombeginfight_req(), output);
  }

  // optional .fgame.CSPersonalRoomApplyOrRefuseInviteReq PersonalRoomApplyOrRefuseInvite_Req = 76;
  if (has_personalroomapplyorrefuseinvite_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      76, this->personalroomapplyorrefuseinvite_req(), output);
  }

  // optional .fgame.CSChangePlayerIconReq ChangePlayerIcon_Req = 77;
  if (has_changeplayericon_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      77, this->changeplayericon_req(), output);
  }

  // optional .fgame.CSPersonalRoomCountDownReq PersonalRoomCountDown_Req = 78;
  if (has_personalroomcountdown_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      78, this->personalroomcountdown_req(), output);
  }

  // optional .fgame.CSSyncPlayerDataReq SyncPlayerData_Req = 79;
  if (has_syncplayerdata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, this->syncplayerdata_req(), output);
  }

  // optional .fgame.CSGetPlayerDataReq GetPlayerData_Req = 80;
  if (has_getplayerdata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, this->getplayerdata_req(), output);
  }

  // optional .fgame.CSPvpAppearCreepReq AppearCreep_Req = 81;
  if (has_appearcreep_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, this->appearcreep_req(), output);
  }

  // optional .fgame.CSSaveCheckPtDataReq SaveCheckPtData_Req = 82;
  if (has_savecheckptdata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      82, this->savecheckptdata_req(), output);
  }

  // optional .fgame.CSGetCheckPtDataReq GetCheckPtData_Req = 83;
  if (has_getcheckptdata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      83, this->getcheckptdata_req(), output);
  }

  // optional .fgame.CSSetNewBieReq SetNewBie_Req = 84;
  if (has_setnewbie_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      84, this->setnewbie_req(), output);
  }

  // optional .fgame.CSGetNewBieListReq GetNewBieList_Req = 85;
  if (has_getnewbielist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      85, this->getnewbielist_req(), output);
  }

  // optional .fgame.CSEnterPointReq EnterPoint_Req = 87;
  if (has_enterpoint_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      87, this->enterpoint_req(), output);
  }

  // optional .fgame.CSShopGuideReq ShopGuide_Req = 88;
  if (has_shopguide_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      88, this->shopguide_req(), output);
  }

  // optional .fgame.CSTestAddDiamondReq TestAddDiamond_Req = 89;
  if (has_testadddiamond_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      89, this->testadddiamond_req(), output);
  }

  // optional .fgame.CSActivityListReq ActivityList_Req = 90;
  if (has_activitylist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      90, this->activitylist_req(), output);
  }

  // optional .fgame.CSActivitySubmitReq ActivitySubmit_Req = 92;
  if (has_activitysubmit_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      92, this->activitysubmit_req(), output);
  }

  // optional .fgame.CSSetTitleReq SetTitle_Req = 93;
  if (has_settitle_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      93, this->settitle_req(), output);
  }

  // optional .fgame.CSShopBuyReq ShopBuy_Req = 94;
  if (has_shopbuy_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      94, this->shopbuy_req(), output);
  }

  // optional .fgame.CSExchangeItemReq ExchangeItem_Req = 96;
  if (has_exchangeitem_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      96, this->exchangeitem_req(), output);
  }

  // optional .fgame.CSActivityCrazyDtlsReq ActivityCrazyDtls_Req = 97;
  if (has_activitycrazydtls_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      97, this->activitycrazydtls_req(), output);
  }

  // optional .fgame.CSActivityCrazyUsageReq ActivityCrazyUsage_Req = 98;
  if (has_activitycrazyusage_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      98, this->activitycrazyusage_req(), output);
  }

  // optional .fgame.CSShopListReq ShopList_Req = 100;
  if (has_shoplist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->shoplist_req(), output);
  }

  // optional .fgame.CSPvpObserverReq PvpObserver_Req = 101;
  if (has_pvpobserver_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->pvpobserver_req(), output);
  }

  // optional .fgame.CSSetNewBieOssReq SetNewBieOss_Req = 102;
  if (has_setnewbieoss_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->setnewbieoss_req(), output);
  }

  // optional .fgame.CSPvpResultReq PvpResult_Req = 104;
  if (has_pvpresult_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104, this->pvpresult_req(), output);
  }

  // optional .fgame.CSPvpSelfRankListReq PvpSelfRankList_Req = 105;
  if (has_pvpselfranklist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      105, this->pvpselfranklist_req(), output);
  }

  // optional .fgame.CSGWGetMatchInfoReq GWGetMatchInfo_Req = 106;
  if (has_gwgetmatchinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      106, this->gwgetmatchinfo_req(), output);
  }

  // optional .fgame.CSGWMatchReq GWMatch_Req = 107;
  if (has_gwmatch_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      107, this->gwmatch_req(), output);
  }

  // optional .fgame.CSGWMatchStopReq GWMatchStop_Req = 108;
  if (has_gwmatchstop_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      108, this->gwmatchstop_req(), output);
  }

  // optional .fgame.CSGWGetRankReq GWGetRank_Req = 109;
  if (has_gwgetrank_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      109, this->gwgetrank_req(), output);
  }

  // optional .fgame.CSGWBuyEnergyReq GWBuyEnergy_Req = 110;
  if (has_gwbuyenergy_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      110, this->gwbuyenergy_req(), output);
  }

  // optional .fgame.CSRequestPKeyReq RequestPKey_Req = 114;
  if (has_requestpkey_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      114, this->requestpkey_req(), output);
  }

  // optional .fgame.CSSendClientKeyReq SendClientKey_Req = 115;
  if (has_sendclientkey_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      115, this->sendclientkey_req(), output);
  }

  // optional .fgame.CSUpdateExchangeListReq UpdateExchangeList_Req = 116;
  if (has_updateexchangelist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      116, this->updateexchangelist_req(), output);
  }

  // optional .fgame.CSGlyphsRequestInfoReq GlyphsRequestInfo_Req = 120;
  if (has_glyphsrequestinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      120, this->glyphsrequestinfo_req(), output);
  }

  // optional .fgame.CSGlyphsRequestBasicInfoReq GlyphsRequestBasicInfo_Req = 121;
  if (has_glyphsrequestbasicinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      121, this->glyphsrequestbasicinfo_req(), output);
  }

  // optional .fgame.CSGlyphsActiveReq GlyphsActive_Req = 122;
  if (has_glyphsactive_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      122, this->glyphsactive_req(), output);
  }

  // optional .fgame.CSGlyphsUpgradeReq GlyphsUpgrade_Req = 123;
  if (has_glyphsupgrade_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      123, this->glyphsupgrade_req(), output);
  }

  // optional .fgame.CSGlyphsPvpInfoReq GlyphsPvpInfo_Req = 124;
  if (has_glyphspvpinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      124, this->glyphspvpinfo_req(), output);
  }

  // optional .fgame.CSBuyVipReq BuyVip_Req = 125;
  if (has_buyvip_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      125, this->buyvip_req(), output);
  }

  // optional .fgame.CSGlyphGuideReq GlyphGuide_Req = 126;
  if (has_glyphguide_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      126, this->glyphguide_req(), output);
  }

  // optional .fgame.CSNewYearGetInfoReq NewYearGetInfo_Req = 127;
  if (has_newyeargetinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      127, this->newyeargetinfo_req(), output);
  }

  // optional .fgame.CSNewYearRewardReq NewYearReward_Req = 128;
  if (has_newyearreward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      128, this->newyearreward_req(), output);
  }

  // optional .fgame.CSOpenChestReq OpenChest_Req = 129;
  if (has_openchest_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      129, this->openchest_req(), output);
  }

  // optional .fgame.CSChristmasDecorateReq ChristmasDecorate_Req = 130;
  if (has_christmasdecorate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      130, this->christmasdecorate_req(), output);
  }

  // optional .fgame.CSChristmasTakeBonusReq ChristmasTakeBonus_Req = 131;
  if (has_christmastakebonus_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      131, this->christmastakebonus_req(), output);
  }

  // optional .fgame.CSChristmasGetDataReq ChristmasGetDate_Req = 132;
  if (has_christmasgetdate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      132, this->christmasgetdate_req(), output);
  }

  // optional .fgame.CSChristmasGetRankReq ChristmasGetRank_Req = 133;
  if (has_christmasgetrank_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      133, this->christmasgetrank_req(), output);
  }

  // optional .fgame.CSRetriveCheckPtRewardReq RetriveCheckPtReward_Req = 134;
  if (has_retrivecheckptreward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      134, this->retrivecheckptreward_req(), output);
  }

  // optional .fgame.CSVipTimeReq VipTime_Req = 135;
  if (has_viptime_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      135, this->viptime_req(), output);
  }

  // optional .fgame.CSNewYearCmpReq NewYearCmp_Req = 136;
  if (has_newyearcmp_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      136, this->newyearcmp_req(), output);
  }

  // optional .fgame.CSNotifyGlyphsUpdateReq NotifyGlyphsUpdate_Req = 137;
  if (has_notifyglyphsupdate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      137, this->notifyglyphsupdate_req(), output);
  }

  // optional .fgame.CSPvpRecoverItemReq RecoverItem_Req = 138;
  if (has_recoveritem_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      138, this->recoveritem_req(), output);
  }

  // optional .fgame.CSSetSignatureReq SetSignature_Req = 139;
  if (has_setsignature_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      139, this->setsignature_req(), output);
  }

  // optional .fgame.CSSetExtraInfoVisibleReq SetExtraInfoVisible_Req = 140;
  if (has_setextrainfovisible_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      140, this->setextrainfovisible_req(), output);
  }

  // optional .fgame.CSGetExtraInfoReq GetExtraInfo_Req = 141;
  if (has_getextrainfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      141, this->getextrainfo_req(), output);
  }

  // optional .fgame.CSValentineDataReq ValentineData_Req = 143;
  if (has_valentinedata_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      143, this->valentinedata_req(), output);
  }

  // optional .fgame.CSValentineExchangeReq ValentineExchange_Req = 144;
  if (has_valentineexchange_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      144, this->valentineexchange_req(), output);
  }

  // optional .fgame.CSRedPacketsGetInfoReq RedPacketsGetInfo_Req = 145;
  if (has_redpacketsgetinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      145, this->redpacketsgetinfo_req(), output);
  }

  // optional .fgame.CSRedPacketsGrebReq RedPacketsGreb_Req = 146;
  if (has_redpacketsgreb_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      146, this->redpacketsgreb_req(), output);
  }

  // optional .fgame.CSRedPacketsOpenedReq RedPacketsOpened_Req = 147;
  if (has_redpacketsopened_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      147, this->redpacketsopened_req(), output);
  }

  // optional .fgame.CSChapterUnlockReq ChapterUnlock_Req = 148;
  if (has_chapterunlock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      148, this->chapterunlock_req(), output);
  }

  // optional .fgame.CSGetChestReq GetChest_Req = 149;
  if (has_getchest_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      149, this->getchest_req(), output);
  }

  // optional .fgame.CSPveNotifyReq PveNotify_Req = 150;
  if (has_pvenotify_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      150, this->pvenotify_req(), output);
  }

  // optional .fgame.CSDailyTaskStatusReq DailyTaskStatus_Req = 152;
  if (has_dailytaskstatus_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      152, this->dailytaskstatus_req(), output);
  }

  // optional .fgame.CSRequestDailyTaskReq RequestDailyTask_Req = 153;
  if (has_requestdailytask_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      153, this->requestdailytask_req(), output);
  }

  // optional .fgame.CSChangeDailyTaskReq ChangeDailyTask_Req = 154;
  if (has_changedailytask_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      154, this->changedailytask_req(), output);
  }

  // optional .fgame.CSOpenDailyTaskAwardReq OpenDailyTaskAward_Req = 155;
  if (has_opendailytaskaward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      155, this->opendailytaskaward_req(), output);
  }

  // optional .fgame.CSUpdateDailyTaskProgressReq UpdateDailyTaskProgress_Req = 156;
  if (has_updatedailytaskprogress_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      156, this->updatedailytaskprogress_req(), output);
  }

  // optional .fgame.CSRankWeekRewardInfoReq RankWeekRewardInfo_Req = 157;
  if (has_rankweekrewardinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      157, this->rankweekrewardinfo_req(), output);
  }

  // optional .fgame.CSRankWeekRewardRewardReq RankWeekRewardReward_Req = 158;
  if (has_rankweekrewardreward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      158, this->rankweekrewardreward_req(), output);
  }

  // optional .fgame.CSPveCheckAwardReq PveCheckAward_Req = 159;
  if (has_pvecheckaward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      159, this->pvecheckaward_req(), output);
  }

  // optional .fgame.CSShareRewardGetReq ShareReward_Req = 162;
  if (has_sharereward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      162, this->sharereward_req(), output);
  }

  // optional .fgame.CSGetSevenGoalListReq GetSevenGoalList_Req = 163;
  if (has_getsevengoallist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      163, this->getsevengoallist_req(), output);
  }

  // optional .fgame.CSRetriveSevenGoalReq RetriveSevenGoal_Req = 164;
  if (has_retrivesevengoal_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      164, this->retrivesevengoal_req(), output);
  }

  // optional .fgame.CSPveRankReq PveRank_Req = 166;
  if (has_pverank_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      166, this->pverank_req(), output);
  }

  // optional .fgame.CSTopRankReq TopRank_Req = 167;
  if (has_toprank_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      167, this->toprank_req(), output);
  }

  // optional .fgame.CSTopRankTimeReq TopRankTime_Req = 168;
  if (has_topranktime_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      168, this->topranktime_req(), output);
  }

  // optional .fgame.CSUpdateTaskStatusReq UpdateTaskStatus_Req = 201;
  if (has_updatetaskstatus_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      201, this->updatetaskstatus_req(), output);
  }

  // optional .fgame.CSAsSyncInfoReq AsSyncInfo_Req = 202;
  if (has_assyncinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      202, this->assyncinfo_req(), output);
  }

  // optional .fgame.CSAsNewAddReq AsNewAdd_Req = 203;
  if (has_asnewadd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      203, this->asnewadd_req(), output);
  }

  // optional .fgame.CSAsOperateReq AsOperate_Req = 204;
  if (has_asoperate_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      204, this->asoperate_req(), output);
  }

  // optional .fgame.CSAsUseCardReq AsUseCard_Req = 205;
  if (has_asusecard_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      205, this->asusecard_req(), output);
  }

  // optional .fgame.CSPvpUseSkillReq PvpUseSkill_Req = 206;
  if (has_pvpuseskill_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      206, this->pvpuseskill_req(), output);
  }

  // optional .fgame.CSInstituteInfoReq InstituteInfo_Req = 208;
  if (has_instituteinfo_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      208, this->instituteinfo_req(), output);
  }

  // optional .fgame.CSInstituteBuyReq InstituteBuy_Req = 209;
  if (has_institutebuy_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      209, this->institutebuy_req(), output);
  }

  // optional .fgame.CSOpActConfigListReq OpActConfigList_Req = 304;
  if (has_opactconfiglist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      304, this->opactconfiglist_req(), output);
  }

  // optional .fgame.CSOpActSelfDataListReq OpActSelfDataList_Req = 305;
  if (has_opactselfdatalist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      305, this->opactselfdatalist_req(), output);
  }

  // optional .fgame.CSOpActGlobalDataListReq OpActGlobalDataList_Req = 306;
  if (has_opactglobaldatalist_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      306, this->opactglobaldatalist_req(), output);
  }

  // optional .fgame.CSOpActDemoTakeReq OpActDemoTake_Req = 310;
  if (has_opactdemotake_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      310, this->opactdemotake_req(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.C2ServerMsg)
}

int C2ServerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fgame.CSLoginReq Login_Req = 2;
    if (has_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_req());
    }

    // optional .fgame.CSRegReq Reg_Req = 3;
    if (has_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_req());
    }

    // optional .fgame.CSHeartBeatReq HeartBeat_Req = 4;
    if (has_heartbeat_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_req());
    }

    // optional .fgame.CSPvpMatchReq Match_Req = 5;
    if (has_match_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match_req());
    }

    // optional .fgame.CSPvpStartReq Start_Req = 6;
    if (has_start_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_req());
    }

    // optional .fgame.CSPvpFightReq Fight_Req = 7;
    if (has_fight_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_req());
    }

    // optional .fgame.CSPvpEndReq End_Req = 8;
    if (has_end_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_req());
    }

    // optional .fgame.CSPvpMapReq Map_Req = 9;
    if (has_map_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fgame.CSPvpUpgradeReq Upgrade_Req = 10;
    if (has_upgrade_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade_req());
    }

    // optional .fgame.CSPvpPingReq Ping_Req = 13;
    if (has_ping_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_req());
    }

    // optional .fgame.CSBuyITtemReq BuyItem_Req = 14;
    if (has_buyitem_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyitem_req());
    }

    // optional .fgame.CSUseItemReq UseItem_Req = 15;
    if (has_useitem_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useitem_req());
    }

    // optional .fgame.CSPvpLeaveReq Leave_Req = 18;
    if (has_leave_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_req());
    }

    // optional .fgame.CSGetAchievementReq GetAchievementReq = 19;
    if (has_getachievementreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getachievementreq());
    }

    // optional .fgame.CSReceiveAchievementReq ReceiveAchievement_Req = 20;
    if (has_receiveachievement_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveachievement_req());
    }

    // optional .fgame.CSReceiveAchievementRewardReq ReceiveAchievementReward_Req = 21;
    if (has_receiveachievementreward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveachievementreward_req());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .fgame.CSEnterServerReq EnterServer_Req = 22;
    if (has_enterserver_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterserver_req());
    }

    // optional .fgame.CSDirectEnterReq DirectEnter_Req = 25;
    if (has_directenter_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directenter_req());
    }

    // optional .fgame.CSPvpRankingGetListReq PvpRankingGetList_Req = 26;
    if (has_pvprankinggetlist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvprankinggetlist_req());
    }

    // optional .fgame.CSStreakWinValueReq StreakWinValue_Req = 27;
    if (has_streakwinvalue_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streakwinvalue_req());
    }

    // optional .fgame.CSStreakWinGetReq StreakWinGet_Req = 28;
    if (has_streakwinget_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streakwinget_req());
    }

    // optional .fgame.CSOpenBigStageReq OpenBigStage_Req = 29;
    if (has_openbigstage_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openbigstage_req());
    }

    // optional .fgame.CSPvpUseItemReq PvpUseItem_Req = 30;
    if (has_pvpuseitem_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpuseitem_req());
    }

    // optional .fgame.CSSevenDaySignListReq SevenDaySignList_Req = 31;
    if (has_sevendaysignlist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevendaysignlist_req());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .fgame.CSSevenDaySignReq SevenDaySign_Req = 32;
    if (has_sevendaysign_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevendaysign_req());
    }

    // optional .fgame.CSGetServerReq GetServer_Req = 33;
    if (has_getserver_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getserver_req());
    }

    // optional .fgame.CSSycPlayerInfoReq SycPlayerInfo_Req = 34;
    if (has_sycplayerinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sycplayerinfo_req());
    }

    // optional .fgame.CSPvpStopMatchReq StopMatch_Req = 36;
    if (has_stopmatch_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopmatch_req());
    }

    // optional .fgame.CSChangeNameReq ChangeName_Req = 37;
    if (has_changename_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changename_req());
    }

    // optional .fgame.CSLogoutReq Logout_Req = 38;
    if (has_logout_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_req());
    }

    // optional .fgame.CSXinShouRecodeReq XinShouRecode_Req = 41;
    if (has_xinshourecode_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xinshourecode_req());
    }

    // optional .fgame.CSPvpRankingPlayerInfoReq PvpRankingPlayerInfo_Req = 42;
    if (has_pvprankingplayerinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvprankingplayerinfo_req());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .fgame.CSGetOpenActivityReq GetOpenActivity_Req = 43;
    if (has_getopenactivity_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getopenactivity_req());
    }

    // optional .fgame.CSGetActivityDataReq GetActivityData_Req = 44;
    if (has_getactivitydata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getactivitydata_req());
    }

    // optional .fgame.CSReceiveActivityRewardReq ReceiveActivityReward_Req = 45;
    if (has_receiveactivityreward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveactivityreward_req());
    }

    // optional .fgame.CSMissionListReq MissionList_Req = 46;
    if (has_missionlist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionlist_req());
    }

    // optional .fgame.CSMissionCompleteReq MissionComplete_Req = 47;
    if (has_missioncomplete_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missioncomplete_req());
    }

    // optional .fgame.CSGetPowerEnergyActivityDataReq GetPowerEnergyActivityData_Req = 49;
    if (has_getpowerenergyactivitydata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getpowerenergyactivitydata_req());
    }

    // optional .fgame.CSReceivePowerEnergyReq ReceivePowerEnergy_Req = 50;
    if (has_receivepowerenergy_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receivepowerenergy_req());
    }

    // optional .fgame.CSGetMailReq GetMail_Req = 51;
    if (has_getmail_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getmail_req());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .fgame.CSDelMailReq DelMail_Req = 52;
    if (has_delmail_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delmail_req());
    }

    // optional .fgame.CSBuyNewbieGiftReq BuyNewbieGift_Req = 54;
    if (has_buynewbiegift_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buynewbiegift_req());
    }

    // optional .fgame.CSRechargeCallbackReq RechargeCallback_Req = 55;
    if (has_rechargecallback_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargecallback_req());
    }

    // optional .fgame.CSFriendQueryReq FriendQuery_Req = 56;
    if (has_friendquery_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendquery_req());
    }

    // optional .fgame.CSFriendRequestAddReq FriendRequestAdd_Req = 57;
    if (has_friendrequestadd_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrequestadd_req());
    }

    // optional .fgame.CSFriendConfirmAddReq FriendConfirmAdd_Req = 58;
    if (has_friendconfirmadd_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendconfirmadd_req());
    }

    // optional .fgame.CSFriendGetInfoReq FriendGetInfo_Req = 59;
    if (has_friendgetinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendgetinfo_req());
    }

    // optional .fgame.CSFriendRequestRemoveReq FriendRequestRemove_Req = 60;
    if (has_friendrequestremove_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrequestremove_req());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .fgame.CSFriendAddBlackListReq FriendAddBlackList_Req = 61;
    if (has_friendaddblacklist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendaddblacklist_req());
    }

    // optional .fgame.CSFriendRemoveBlackListReq FriendRemoveBlackList_Req = 62;
    if (has_friendremoveblacklist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendremoveblacklist_req());
    }

    // optional .fgame.CSPvpChatReq PvpChat_Req = 63;
    if (has_pvpchat_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpchat_req());
    }

    // optional .fgame.CSUseGiftCodeReq UseGiftCode_Req = 64;
    if (has_usegiftcode_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usegiftcode_req());
    }

    // optional .fgame.CSQueryPlayerInfoReq QueryPlayerInfo_Req = 65;
    if (has_queryplayerinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryplayerinfo_req());
    }

    // optional .fgame.CSPersonalRoomCreateReq PersonalRoomCreate_Req = 66;
    if (has_personalroomcreate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomcreate_req());
    }

    // optional .fgame.CSPersonalRoomEnterReq PersonalRoomEnter_Req = 67;
    if (has_personalroomenter_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomenter_req());
    }

    // optional .fgame.CSPersonalRoomLeaveReq PersonalRoomLeave_Req = 68;
    if (has_personalroomleave_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomleave_req());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .fgame.CSPersonalRoomKickReq PersonalRoomKick_Req = 69;
    if (has_personalroomkick_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomkick_req());
    }

    // optional .fgame.CSPersonalRoomInviteReq PersonalRoomInvite_Req = 70;
    if (has_personalroominvite_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroominvite_req());
    }

    // optional .fgame.CSPersonalRoomBroadcastReq PersonalRoomBroadcast_Req = 71;
    if (has_personalroombroadcast_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroombroadcast_req());
    }

    // optional .fgame.CSPersonalRoomChatReq PersonalRoomChat_Req = 72;
    if (has_personalroomchat_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomchat_req());
    }

    // optional .fgame.CSPersonalRoomModeReq PersonalRoomMode_Req = 73;
    if (has_personalroommode_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroommode_req());
    }

    // optional .fgame.CSPersonalRoomBeginFightReq PersonalRoomBeginFight_Req = 74;
    if (has_personalroombeginfight_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroombeginfight_req());
    }

    // optional .fgame.CSPersonalRoomApplyOrRefuseInviteReq PersonalRoomApplyOrRefuseInvite_Req = 76;
    if (has_personalroomapplyorrefuseinvite_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomapplyorrefuseinvite_req());
    }

    // optional .fgame.CSChangePlayerIconReq ChangePlayerIcon_Req = 77;
    if (has_changeplayericon_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeplayericon_req());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .fgame.CSPersonalRoomCountDownReq PersonalRoomCountDown_Req = 78;
    if (has_personalroomcountdown_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomcountdown_req());
    }

    // optional .fgame.CSSyncPlayerDataReq SyncPlayerData_Req = 79;
    if (has_syncplayerdata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncplayerdata_req());
    }

    // optional .fgame.CSGetPlayerDataReq GetPlayerData_Req = 80;
    if (has_getplayerdata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getplayerdata_req());
    }

    // optional .fgame.CSPvpAppearCreepReq AppearCreep_Req = 81;
    if (has_appearcreep_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appearcreep_req());
    }

    // optional .fgame.CSSaveCheckPtDataReq SaveCheckPtData_Req = 82;
    if (has_savecheckptdata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->savecheckptdata_req());
    }

    // optional .fgame.CSGetCheckPtDataReq GetCheckPtData_Req = 83;
    if (has_getcheckptdata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getcheckptdata_req());
    }

    // optional .fgame.CSSetNewBieReq SetNewBie_Req = 84;
    if (has_setnewbie_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setnewbie_req());
    }

    // optional .fgame.CSGetNewBieListReq GetNewBieList_Req = 85;
    if (has_getnewbielist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getnewbielist_req());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .fgame.CSEnterPointReq EnterPoint_Req = 87;
    if (has_enterpoint_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterpoint_req());
    }

    // optional .fgame.CSShopGuideReq ShopGuide_Req = 88;
    if (has_shopguide_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopguide_req());
    }

    // optional .fgame.CSTestAddDiamondReq TestAddDiamond_Req = 89;
    if (has_testadddiamond_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->testadddiamond_req());
    }

    // optional .fgame.CSActivityListReq ActivityList_Req = 90;
    if (has_activitylist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitylist_req());
    }

    // optional .fgame.CSActivitySubmitReq ActivitySubmit_Req = 92;
    if (has_activitysubmit_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitysubmit_req());
    }

    // optional .fgame.CSSetTitleReq SetTitle_Req = 93;
    if (has_settitle_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settitle_req());
    }

    // optional .fgame.CSShopBuyReq ShopBuy_Req = 94;
    if (has_shopbuy_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopbuy_req());
    }

    // optional .fgame.CSExchangeItemReq ExchangeItem_Req = 96;
    if (has_exchangeitem_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchangeitem_req());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .fgame.CSActivityCrazyDtlsReq ActivityCrazyDtls_Req = 97;
    if (has_activitycrazydtls_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitycrazydtls_req());
    }

    // optional .fgame.CSActivityCrazyUsageReq ActivityCrazyUsage_Req = 98;
    if (has_activitycrazyusage_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitycrazyusage_req());
    }

    // optional .fgame.CSShopListReq ShopList_Req = 100;
    if (has_shoplist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shoplist_req());
    }

    // optional .fgame.CSPvpObserverReq PvpObserver_Req = 101;
    if (has_pvpobserver_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpobserver_req());
    }

    // optional .fgame.CSSetNewBieOssReq SetNewBieOss_Req = 102;
    if (has_setnewbieoss_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setnewbieoss_req());
    }

    // optional .fgame.CSPvpResultReq PvpResult_Req = 104;
    if (has_pvpresult_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpresult_req());
    }

    // optional .fgame.CSPvpSelfRankListReq PvpSelfRankList_Req = 105;
    if (has_pvpselfranklist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpselfranklist_req());
    }

    // optional .fgame.CSGWGetMatchInfoReq GWGetMatchInfo_Req = 106;
    if (has_gwgetmatchinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwgetmatchinfo_req());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .fgame.CSGWMatchReq GWMatch_Req = 107;
    if (has_gwmatch_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwmatch_req());
    }

    // optional .fgame.CSGWMatchStopReq GWMatchStop_Req = 108;
    if (has_gwmatchstop_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwmatchstop_req());
    }

    // optional .fgame.CSGWGetRankReq GWGetRank_Req = 109;
    if (has_gwgetrank_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwgetrank_req());
    }

    // optional .fgame.CSGWBuyEnergyReq GWBuyEnergy_Req = 110;
    if (has_gwbuyenergy_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwbuyenergy_req());
    }

    // optional .fgame.CSRequestPKeyReq RequestPKey_Req = 114;
    if (has_requestpkey_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestpkey_req());
    }

    // optional .fgame.CSSendClientKeyReq SendClientKey_Req = 115;
    if (has_sendclientkey_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendclientkey_req());
    }

    // optional .fgame.CSUpdateExchangeListReq UpdateExchangeList_Req = 116;
    if (has_updateexchangelist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updateexchangelist_req());
    }

    // optional .fgame.CSGlyphsRequestInfoReq GlyphsRequestInfo_Req = 120;
    if (has_glyphsrequestinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsrequestinfo_req());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .fgame.CSGlyphsRequestBasicInfoReq GlyphsRequestBasicInfo_Req = 121;
    if (has_glyphsrequestbasicinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsrequestbasicinfo_req());
    }

    // optional .fgame.CSGlyphsActiveReq GlyphsActive_Req = 122;
    if (has_glyphsactive_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsactive_req());
    }

    // optional .fgame.CSGlyphsUpgradeReq GlyphsUpgrade_Req = 123;
    if (has_glyphsupgrade_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsupgrade_req());
    }

    // optional .fgame.CSGlyphsPvpInfoReq GlyphsPvpInfo_Req = 124;
    if (has_glyphspvpinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphspvpinfo_req());
    }

    // optional .fgame.CSBuyVipReq BuyVip_Req = 125;
    if (has_buyvip_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyvip_req());
    }

    // optional .fgame.CSGlyphGuideReq GlyphGuide_Req = 126;
    if (has_glyphguide_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphguide_req());
    }

    // optional .fgame.CSNewYearGetInfoReq NewYearGetInfo_Req = 127;
    if (has_newyeargetinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyeargetinfo_req());
    }

    // optional .fgame.CSNewYearRewardReq NewYearReward_Req = 128;
    if (has_newyearreward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearreward_req());
    }

  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional .fgame.CSOpenChestReq OpenChest_Req = 129;
    if (has_openchest_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openchest_req());
    }

    // optional .fgame.CSChristmasDecorateReq ChristmasDecorate_Req = 130;
    if (has_christmasdecorate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasdecorate_req());
    }

    // optional .fgame.CSChristmasTakeBonusReq ChristmasTakeBonus_Req = 131;
    if (has_christmastakebonus_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmastakebonus_req());
    }

    // optional .fgame.CSChristmasGetDataReq ChristmasGetDate_Req = 132;
    if (has_christmasgetdate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasgetdate_req());
    }

    // optional .fgame.CSChristmasGetRankReq ChristmasGetRank_Req = 133;
    if (has_christmasgetrank_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasgetrank_req());
    }

    // optional .fgame.CSRetriveCheckPtRewardReq RetriveCheckPtReward_Req = 134;
    if (has_retrivecheckptreward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrivecheckptreward_req());
    }

    // optional .fgame.CSVipTimeReq VipTime_Req = 135;
    if (has_viptime_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viptime_req());
    }

    // optional .fgame.CSNewYearCmpReq NewYearCmp_Req = 136;
    if (has_newyearcmp_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearcmp_req());
    }

  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional .fgame.CSNotifyGlyphsUpdateReq NotifyGlyphsUpdate_Req = 137;
    if (has_notifyglyphsupdate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifyglyphsupdate_req());
    }

    // optional .fgame.CSPvpRecoverItemReq RecoverItem_Req = 138;
    if (has_recoveritem_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recoveritem_req());
    }

    // optional .fgame.CSSetSignatureReq SetSignature_Req = 139;
    if (has_setsignature_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setsignature_req());
    }

    // optional .fgame.CSSetExtraInfoVisibleReq SetExtraInfoVisible_Req = 140;
    if (has_setextrainfovisible_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setextrainfovisible_req());
    }

    // optional .fgame.CSGetExtraInfoReq GetExtraInfo_Req = 141;
    if (has_getextrainfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getextrainfo_req());
    }

    // optional .fgame.CSValentineDataReq ValentineData_Req = 143;
    if (has_valentinedata_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valentinedata_req());
    }

    // optional .fgame.CSValentineExchangeReq ValentineExchange_Req = 144;
    if (has_valentineexchange_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valentineexchange_req());
    }

    // optional .fgame.CSRedPacketsGetInfoReq RedPacketsGetInfo_Req = 145;
    if (has_redpacketsgetinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsgetinfo_req());
    }

  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional .fgame.CSRedPacketsGrebReq RedPacketsGreb_Req = 146;
    if (has_redpacketsgreb_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsgreb_req());
    }

    // optional .fgame.CSRedPacketsOpenedReq RedPacketsOpened_Req = 147;
    if (has_redpacketsopened_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsopened_req());
    }

    // optional .fgame.CSChapterUnlockReq ChapterUnlock_Req = 148;
    if (has_chapterunlock_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chapterunlock_req());
    }

    // optional .fgame.CSGetChestReq GetChest_Req = 149;
    if (has_getchest_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getchest_req());
    }

    // optional .fgame.CSPveNotifyReq PveNotify_Req = 150;
    if (has_pvenotify_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvenotify_req());
    }

    // optional .fgame.CSDailyTaskStatusReq DailyTaskStatus_Req = 152;
    if (has_dailytaskstatus_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailytaskstatus_req());
    }

    // optional .fgame.CSRequestDailyTaskReq RequestDailyTask_Req = 153;
    if (has_requestdailytask_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestdailytask_req());
    }

    // optional .fgame.CSChangeDailyTaskReq ChangeDailyTask_Req = 154;
    if (has_changedailytask_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changedailytask_req());
    }

  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    // optional .fgame.CSOpenDailyTaskAwardReq OpenDailyTaskAward_Req = 155;
    if (has_opendailytaskaward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opendailytaskaward_req());
    }

    // optional .fgame.CSUpdateDailyTaskProgressReq UpdateDailyTaskProgress_Req = 156;
    if (has_updatedailytaskprogress_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatedailytaskprogress_req());
    }

    // optional .fgame.CSRankWeekRewardInfoReq RankWeekRewardInfo_Req = 157;
    if (has_rankweekrewardinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankweekrewardinfo_req());
    }

    // optional .fgame.CSRankWeekRewardRewardReq RankWeekRewardReward_Req = 158;
    if (has_rankweekrewardreward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankweekrewardreward_req());
    }

    // optional .fgame.CSPveCheckAwardReq PveCheckAward_Req = 159;
    if (has_pvecheckaward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvecheckaward_req());
    }

    // optional .fgame.CSShareRewardGetReq ShareReward_Req = 162;
    if (has_sharereward_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sharereward_req());
    }

    // optional .fgame.CSGetSevenGoalListReq GetSevenGoalList_Req = 163;
    if (has_getsevengoallist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsevengoallist_req());
    }

    // optional .fgame.CSRetriveSevenGoalReq RetriveSevenGoal_Req = 164;
    if (has_retrivesevengoal_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrivesevengoal_req());
    }

  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    // optional .fgame.CSPveRankReq PveRank_Req = 166;
    if (has_pverank_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pverank_req());
    }

    // optional .fgame.CSTopRankReq TopRank_Req = 167;
    if (has_toprank_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toprank_req());
    }

    // optional .fgame.CSTopRankTimeReq TopRankTime_Req = 168;
    if (has_topranktime_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topranktime_req());
    }

    // optional .fgame.CSUpdateTaskStatusReq UpdateTaskStatus_Req = 201;
    if (has_updatetaskstatus_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatetaskstatus_req());
    }

    // optional .fgame.CSAsSyncInfoReq AsSyncInfo_Req = 202;
    if (has_assyncinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assyncinfo_req());
    }

    // optional .fgame.CSAsNewAddReq AsNewAdd_Req = 203;
    if (has_asnewadd_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asnewadd_req());
    }

    // optional .fgame.CSAsOperateReq AsOperate_Req = 204;
    if (has_asoperate_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asoperate_req());
    }

    // optional .fgame.CSAsUseCardReq AsUseCard_Req = 205;
    if (has_asusecard_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asusecard_req());
    }

  }
  if (_has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    // optional .fgame.CSPvpUseSkillReq PvpUseSkill_Req = 206;
    if (has_pvpuseskill_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpuseskill_req());
    }

    // optional .fgame.CSInstituteInfoReq InstituteInfo_Req = 208;
    if (has_instituteinfo_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instituteinfo_req());
    }

    // optional .fgame.CSInstituteBuyReq InstituteBuy_Req = 209;
    if (has_institutebuy_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->institutebuy_req());
    }

    // optional .fgame.CSOpActConfigListReq OpActConfigList_Req = 304;
    if (has_opactconfiglist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactconfiglist_req());
    }

    // optional .fgame.CSOpActSelfDataListReq OpActSelfDataList_Req = 305;
    if (has_opactselfdatalist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactselfdatalist_req());
    }

    // optional .fgame.CSOpActGlobalDataListReq OpActGlobalDataList_Req = 306;
    if (has_opactglobaldatalist_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactglobaldatalist_req());
    }

    // optional .fgame.CSOpActDemoTakeReq OpActDemoTake_Req = 310;
    if (has_opactdemotake_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactdemotake_req());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2ServerMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const C2ServerMsg*>(&from));
}

void C2ServerMsg::MergeFrom(const C2ServerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_req()) {
      mutable_login_req()->::fgame::CSLoginReq::MergeFrom(from.login_req());
    }
    if (from.has_reg_req()) {
      mutable_reg_req()->::fgame::CSRegReq::MergeFrom(from.reg_req());
    }
    if (from.has_heartbeat_req()) {
      mutable_heartbeat_req()->::fgame::CSHeartBeatReq::MergeFrom(from.heartbeat_req());
    }
    if (from.has_match_req()) {
      mutable_match_req()->::fgame::CSPvpMatchReq::MergeFrom(from.match_req());
    }
    if (from.has_start_req()) {
      mutable_start_req()->::fgame::CSPvpStartReq::MergeFrom(from.start_req());
    }
    if (from.has_fight_req()) {
      mutable_fight_req()->::fgame::CSPvpFightReq::MergeFrom(from.fight_req());
    }
    if (from.has_end_req()) {
      mutable_end_req()->::fgame::CSPvpEndReq::MergeFrom(from.end_req());
    }
    if (from.has_map_req()) {
      mutable_map_req()->::fgame::CSPvpMapReq::MergeFrom(from.map_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_upgrade_req()) {
      mutable_upgrade_req()->::fgame::CSPvpUpgradeReq::MergeFrom(from.upgrade_req());
    }
    if (from.has_ping_req()) {
      mutable_ping_req()->::fgame::CSPvpPingReq::MergeFrom(from.ping_req());
    }
    if (from.has_buyitem_req()) {
      mutable_buyitem_req()->::fgame::CSBuyITtemReq::MergeFrom(from.buyitem_req());
    }
    if (from.has_useitem_req()) {
      mutable_useitem_req()->::fgame::CSUseItemReq::MergeFrom(from.useitem_req());
    }
    if (from.has_leave_req()) {
      mutable_leave_req()->::fgame::CSPvpLeaveReq::MergeFrom(from.leave_req());
    }
    if (from.has_getachievementreq()) {
      mutable_getachievementreq()->::fgame::CSGetAchievementReq::MergeFrom(from.getachievementreq());
    }
    if (from.has_receiveachievement_req()) {
      mutable_receiveachievement_req()->::fgame::CSReceiveAchievementReq::MergeFrom(from.receiveachievement_req());
    }
    if (from.has_receiveachievementreward_req()) {
      mutable_receiveachievementreward_req()->::fgame::CSReceiveAchievementRewardReq::MergeFrom(from.receiveachievementreward_req());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enterserver_req()) {
      mutable_enterserver_req()->::fgame::CSEnterServerReq::MergeFrom(from.enterserver_req());
    }
    if (from.has_directenter_req()) {
      mutable_directenter_req()->::fgame::CSDirectEnterReq::MergeFrom(from.directenter_req());
    }
    if (from.has_pvprankinggetlist_req()) {
      mutable_pvprankinggetlist_req()->::fgame::CSPvpRankingGetListReq::MergeFrom(from.pvprankinggetlist_req());
    }
    if (from.has_streakwinvalue_req()) {
      mutable_streakwinvalue_req()->::fgame::CSStreakWinValueReq::MergeFrom(from.streakwinvalue_req());
    }
    if (from.has_streakwinget_req()) {
      mutable_streakwinget_req()->::fgame::CSStreakWinGetReq::MergeFrom(from.streakwinget_req());
    }
    if (from.has_openbigstage_req()) {
      mutable_openbigstage_req()->::fgame::CSOpenBigStageReq::MergeFrom(from.openbigstage_req());
    }
    if (from.has_pvpuseitem_req()) {
      mutable_pvpuseitem_req()->::fgame::CSPvpUseItemReq::MergeFrom(from.pvpuseitem_req());
    }
    if (from.has_sevendaysignlist_req()) {
      mutable_sevendaysignlist_req()->::fgame::CSSevenDaySignListReq::MergeFrom(from.sevendaysignlist_req());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sevendaysign_req()) {
      mutable_sevendaysign_req()->::fgame::CSSevenDaySignReq::MergeFrom(from.sevendaysign_req());
    }
    if (from.has_getserver_req()) {
      mutable_getserver_req()->::fgame::CSGetServerReq::MergeFrom(from.getserver_req());
    }
    if (from.has_sycplayerinfo_req()) {
      mutable_sycplayerinfo_req()->::fgame::CSSycPlayerInfoReq::MergeFrom(from.sycplayerinfo_req());
    }
    if (from.has_stopmatch_req()) {
      mutable_stopmatch_req()->::fgame::CSPvpStopMatchReq::MergeFrom(from.stopmatch_req());
    }
    if (from.has_changename_req()) {
      mutable_changename_req()->::fgame::CSChangeNameReq::MergeFrom(from.changename_req());
    }
    if (from.has_logout_req()) {
      mutable_logout_req()->::fgame::CSLogoutReq::MergeFrom(from.logout_req());
    }
    if (from.has_xinshourecode_req()) {
      mutable_xinshourecode_req()->::fgame::CSXinShouRecodeReq::MergeFrom(from.xinshourecode_req());
    }
    if (from.has_pvprankingplayerinfo_req()) {
      mutable_pvprankingplayerinfo_req()->::fgame::CSPvpRankingPlayerInfoReq::MergeFrom(from.pvprankingplayerinfo_req());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_getopenactivity_req()) {
      mutable_getopenactivity_req()->::fgame::CSGetOpenActivityReq::MergeFrom(from.getopenactivity_req());
    }
    if (from.has_getactivitydata_req()) {
      mutable_getactivitydata_req()->::fgame::CSGetActivityDataReq::MergeFrom(from.getactivitydata_req());
    }
    if (from.has_receiveactivityreward_req()) {
      mutable_receiveactivityreward_req()->::fgame::CSReceiveActivityRewardReq::MergeFrom(from.receiveactivityreward_req());
    }
    if (from.has_missionlist_req()) {
      mutable_missionlist_req()->::fgame::CSMissionListReq::MergeFrom(from.missionlist_req());
    }
    if (from.has_missioncomplete_req()) {
      mutable_missioncomplete_req()->::fgame::CSMissionCompleteReq::MergeFrom(from.missioncomplete_req());
    }
    if (from.has_getpowerenergyactivitydata_req()) {
      mutable_getpowerenergyactivitydata_req()->::fgame::CSGetPowerEnergyActivityDataReq::MergeFrom(from.getpowerenergyactivitydata_req());
    }
    if (from.has_receivepowerenergy_req()) {
      mutable_receivepowerenergy_req()->::fgame::CSReceivePowerEnergyReq::MergeFrom(from.receivepowerenergy_req());
    }
    if (from.has_getmail_req()) {
      mutable_getmail_req()->::fgame::CSGetMailReq::MergeFrom(from.getmail_req());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_delmail_req()) {
      mutable_delmail_req()->::fgame::CSDelMailReq::MergeFrom(from.delmail_req());
    }
    if (from.has_buynewbiegift_req()) {
      mutable_buynewbiegift_req()->::fgame::CSBuyNewbieGiftReq::MergeFrom(from.buynewbiegift_req());
    }
    if (from.has_rechargecallback_req()) {
      mutable_rechargecallback_req()->::fgame::CSRechargeCallbackReq::MergeFrom(from.rechargecallback_req());
    }
    if (from.has_friendquery_req()) {
      mutable_friendquery_req()->::fgame::CSFriendQueryReq::MergeFrom(from.friendquery_req());
    }
    if (from.has_friendrequestadd_req()) {
      mutable_friendrequestadd_req()->::fgame::CSFriendRequestAddReq::MergeFrom(from.friendrequestadd_req());
    }
    if (from.has_friendconfirmadd_req()) {
      mutable_friendconfirmadd_req()->::fgame::CSFriendConfirmAddReq::MergeFrom(from.friendconfirmadd_req());
    }
    if (from.has_friendgetinfo_req()) {
      mutable_friendgetinfo_req()->::fgame::CSFriendGetInfoReq::MergeFrom(from.friendgetinfo_req());
    }
    if (from.has_friendrequestremove_req()) {
      mutable_friendrequestremove_req()->::fgame::CSFriendRequestRemoveReq::MergeFrom(from.friendrequestremove_req());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_friendaddblacklist_req()) {
      mutable_friendaddblacklist_req()->::fgame::CSFriendAddBlackListReq::MergeFrom(from.friendaddblacklist_req());
    }
    if (from.has_friendremoveblacklist_req()) {
      mutable_friendremoveblacklist_req()->::fgame::CSFriendRemoveBlackListReq::MergeFrom(from.friendremoveblacklist_req());
    }
    if (from.has_pvpchat_req()) {
      mutable_pvpchat_req()->::fgame::CSPvpChatReq::MergeFrom(from.pvpchat_req());
    }
    if (from.has_usegiftcode_req()) {
      mutable_usegiftcode_req()->::fgame::CSUseGiftCodeReq::MergeFrom(from.usegiftcode_req());
    }
    if (from.has_queryplayerinfo_req()) {
      mutable_queryplayerinfo_req()->::fgame::CSQueryPlayerInfoReq::MergeFrom(from.queryplayerinfo_req());
    }
    if (from.has_personalroomcreate_req()) {
      mutable_personalroomcreate_req()->::fgame::CSPersonalRoomCreateReq::MergeFrom(from.personalroomcreate_req());
    }
    if (from.has_personalroomenter_req()) {
      mutable_personalroomenter_req()->::fgame::CSPersonalRoomEnterReq::MergeFrom(from.personalroomenter_req());
    }
    if (from.has_personalroomleave_req()) {
      mutable_personalroomleave_req()->::fgame::CSPersonalRoomLeaveReq::MergeFrom(from.personalroomleave_req());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_personalroomkick_req()) {
      mutable_personalroomkick_req()->::fgame::CSPersonalRoomKickReq::MergeFrom(from.personalroomkick_req());
    }
    if (from.has_personalroominvite_req()) {
      mutable_personalroominvite_req()->::fgame::CSPersonalRoomInviteReq::MergeFrom(from.personalroominvite_req());
    }
    if (from.has_personalroombroadcast_req()) {
      mutable_personalroombroadcast_req()->::fgame::CSPersonalRoomBroadcastReq::MergeFrom(from.personalroombroadcast_req());
    }
    if (from.has_personalroomchat_req()) {
      mutable_personalroomchat_req()->::fgame::CSPersonalRoomChatReq::MergeFrom(from.personalroomchat_req());
    }
    if (from.has_personalroommode_req()) {
      mutable_personalroommode_req()->::fgame::CSPersonalRoomModeReq::MergeFrom(from.personalroommode_req());
    }
    if (from.has_personalroombeginfight_req()) {
      mutable_personalroombeginfight_req()->::fgame::CSPersonalRoomBeginFightReq::MergeFrom(from.personalroombeginfight_req());
    }
    if (from.has_personalroomapplyorrefuseinvite_req()) {
      mutable_personalroomapplyorrefuseinvite_req()->::fgame::CSPersonalRoomApplyOrRefuseInviteReq::MergeFrom(from.personalroomapplyorrefuseinvite_req());
    }
    if (from.has_changeplayericon_req()) {
      mutable_changeplayericon_req()->::fgame::CSChangePlayerIconReq::MergeFrom(from.changeplayericon_req());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_personalroomcountdown_req()) {
      mutable_personalroomcountdown_req()->::fgame::CSPersonalRoomCountDownReq::MergeFrom(from.personalroomcountdown_req());
    }
    if (from.has_syncplayerdata_req()) {
      mutable_syncplayerdata_req()->::fgame::CSSyncPlayerDataReq::MergeFrom(from.syncplayerdata_req());
    }
    if (from.has_getplayerdata_req()) {
      mutable_getplayerdata_req()->::fgame::CSGetPlayerDataReq::MergeFrom(from.getplayerdata_req());
    }
    if (from.has_appearcreep_req()) {
      mutable_appearcreep_req()->::fgame::CSPvpAppearCreepReq::MergeFrom(from.appearcreep_req());
    }
    if (from.has_savecheckptdata_req()) {
      mutable_savecheckptdata_req()->::fgame::CSSaveCheckPtDataReq::MergeFrom(from.savecheckptdata_req());
    }
    if (from.has_getcheckptdata_req()) {
      mutable_getcheckptdata_req()->::fgame::CSGetCheckPtDataReq::MergeFrom(from.getcheckptdata_req());
    }
    if (from.has_setnewbie_req()) {
      mutable_setnewbie_req()->::fgame::CSSetNewBieReq::MergeFrom(from.setnewbie_req());
    }
    if (from.has_getnewbielist_req()) {
      mutable_getnewbielist_req()->::fgame::CSGetNewBieListReq::MergeFrom(from.getnewbielist_req());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_enterpoint_req()) {
      mutable_enterpoint_req()->::fgame::CSEnterPointReq::MergeFrom(from.enterpoint_req());
    }
    if (from.has_shopguide_req()) {
      mutable_shopguide_req()->::fgame::CSShopGuideReq::MergeFrom(from.shopguide_req());
    }
    if (from.has_testadddiamond_req()) {
      mutable_testadddiamond_req()->::fgame::CSTestAddDiamondReq::MergeFrom(from.testadddiamond_req());
    }
    if (from.has_activitylist_req()) {
      mutable_activitylist_req()->::fgame::CSActivityListReq::MergeFrom(from.activitylist_req());
    }
    if (from.has_activitysubmit_req()) {
      mutable_activitysubmit_req()->::fgame::CSActivitySubmitReq::MergeFrom(from.activitysubmit_req());
    }
    if (from.has_settitle_req()) {
      mutable_settitle_req()->::fgame::CSSetTitleReq::MergeFrom(from.settitle_req());
    }
    if (from.has_shopbuy_req()) {
      mutable_shopbuy_req()->::fgame::CSShopBuyReq::MergeFrom(from.shopbuy_req());
    }
    if (from.has_exchangeitem_req()) {
      mutable_exchangeitem_req()->::fgame::CSExchangeItemReq::MergeFrom(from.exchangeitem_req());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_activitycrazydtls_req()) {
      mutable_activitycrazydtls_req()->::fgame::CSActivityCrazyDtlsReq::MergeFrom(from.activitycrazydtls_req());
    }
    if (from.has_activitycrazyusage_req()) {
      mutable_activitycrazyusage_req()->::fgame::CSActivityCrazyUsageReq::MergeFrom(from.activitycrazyusage_req());
    }
    if (from.has_shoplist_req()) {
      mutable_shoplist_req()->::fgame::CSShopListReq::MergeFrom(from.shoplist_req());
    }
    if (from.has_pvpobserver_req()) {
      mutable_pvpobserver_req()->::fgame::CSPvpObserverReq::MergeFrom(from.pvpobserver_req());
    }
    if (from.has_setnewbieoss_req()) {
      mutable_setnewbieoss_req()->::fgame::CSSetNewBieOssReq::MergeFrom(from.setnewbieoss_req());
    }
    if (from.has_pvpresult_req()) {
      mutable_pvpresult_req()->::fgame::CSPvpResultReq::MergeFrom(from.pvpresult_req());
    }
    if (from.has_pvpselfranklist_req()) {
      mutable_pvpselfranklist_req()->::fgame::CSPvpSelfRankListReq::MergeFrom(from.pvpselfranklist_req());
    }
    if (from.has_gwgetmatchinfo_req()) {
      mutable_gwgetmatchinfo_req()->::fgame::CSGWGetMatchInfoReq::MergeFrom(from.gwgetmatchinfo_req());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_gwmatch_req()) {
      mutable_gwmatch_req()->::fgame::CSGWMatchReq::MergeFrom(from.gwmatch_req());
    }
    if (from.has_gwmatchstop_req()) {
      mutable_gwmatchstop_req()->::fgame::CSGWMatchStopReq::MergeFrom(from.gwmatchstop_req());
    }
    if (from.has_gwgetrank_req()) {
      mutable_gwgetrank_req()->::fgame::CSGWGetRankReq::MergeFrom(from.gwgetrank_req());
    }
    if (from.has_gwbuyenergy_req()) {
      mutable_gwbuyenergy_req()->::fgame::CSGWBuyEnergyReq::MergeFrom(from.gwbuyenergy_req());
    }
    if (from.has_requestpkey_req()) {
      mutable_requestpkey_req()->::fgame::CSRequestPKeyReq::MergeFrom(from.requestpkey_req());
    }
    if (from.has_sendclientkey_req()) {
      mutable_sendclientkey_req()->::fgame::CSSendClientKeyReq::MergeFrom(from.sendclientkey_req());
    }
    if (from.has_updateexchangelist_req()) {
      mutable_updateexchangelist_req()->::fgame::CSUpdateExchangeListReq::MergeFrom(from.updateexchangelist_req());
    }
    if (from.has_glyphsrequestinfo_req()) {
      mutable_glyphsrequestinfo_req()->::fgame::CSGlyphsRequestInfoReq::MergeFrom(from.glyphsrequestinfo_req());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_glyphsrequestbasicinfo_req()) {
      mutable_glyphsrequestbasicinfo_req()->::fgame::CSGlyphsRequestBasicInfoReq::MergeFrom(from.glyphsrequestbasicinfo_req());
    }
    if (from.has_glyphsactive_req()) {
      mutable_glyphsactive_req()->::fgame::CSGlyphsActiveReq::MergeFrom(from.glyphsactive_req());
    }
    if (from.has_glyphsupgrade_req()) {
      mutable_glyphsupgrade_req()->::fgame::CSGlyphsUpgradeReq::MergeFrom(from.glyphsupgrade_req());
    }
    if (from.has_glyphspvpinfo_req()) {
      mutable_glyphspvpinfo_req()->::fgame::CSGlyphsPvpInfoReq::MergeFrom(from.glyphspvpinfo_req());
    }
    if (from.has_buyvip_req()) {
      mutable_buyvip_req()->::fgame::CSBuyVipReq::MergeFrom(from.buyvip_req());
    }
    if (from.has_glyphguide_req()) {
      mutable_glyphguide_req()->::fgame::CSGlyphGuideReq::MergeFrom(from.glyphguide_req());
    }
    if (from.has_newyeargetinfo_req()) {
      mutable_newyeargetinfo_req()->::fgame::CSNewYearGetInfoReq::MergeFrom(from.newyeargetinfo_req());
    }
    if (from.has_newyearreward_req()) {
      mutable_newyearreward_req()->::fgame::CSNewYearRewardReq::MergeFrom(from.newyearreward_req());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_openchest_req()) {
      mutable_openchest_req()->::fgame::CSOpenChestReq::MergeFrom(from.openchest_req());
    }
    if (from.has_christmasdecorate_req()) {
      mutable_christmasdecorate_req()->::fgame::CSChristmasDecorateReq::MergeFrom(from.christmasdecorate_req());
    }
    if (from.has_christmastakebonus_req()) {
      mutable_christmastakebonus_req()->::fgame::CSChristmasTakeBonusReq::MergeFrom(from.christmastakebonus_req());
    }
    if (from.has_christmasgetdate_req()) {
      mutable_christmasgetdate_req()->::fgame::CSChristmasGetDataReq::MergeFrom(from.christmasgetdate_req());
    }
    if (from.has_christmasgetrank_req()) {
      mutable_christmasgetrank_req()->::fgame::CSChristmasGetRankReq::MergeFrom(from.christmasgetrank_req());
    }
    if (from.has_retrivecheckptreward_req()) {
      mutable_retrivecheckptreward_req()->::fgame::CSRetriveCheckPtRewardReq::MergeFrom(from.retrivecheckptreward_req());
    }
    if (from.has_viptime_req()) {
      mutable_viptime_req()->::fgame::CSVipTimeReq::MergeFrom(from.viptime_req());
    }
    if (from.has_newyearcmp_req()) {
      mutable_newyearcmp_req()->::fgame::CSNewYearCmpReq::MergeFrom(from.newyearcmp_req());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_notifyglyphsupdate_req()) {
      mutable_notifyglyphsupdate_req()->::fgame::CSNotifyGlyphsUpdateReq::MergeFrom(from.notifyglyphsupdate_req());
    }
    if (from.has_recoveritem_req()) {
      mutable_recoveritem_req()->::fgame::CSPvpRecoverItemReq::MergeFrom(from.recoveritem_req());
    }
    if (from.has_setsignature_req()) {
      mutable_setsignature_req()->::fgame::CSSetSignatureReq::MergeFrom(from.setsignature_req());
    }
    if (from.has_setextrainfovisible_req()) {
      mutable_setextrainfovisible_req()->::fgame::CSSetExtraInfoVisibleReq::MergeFrom(from.setextrainfovisible_req());
    }
    if (from.has_getextrainfo_req()) {
      mutable_getextrainfo_req()->::fgame::CSGetExtraInfoReq::MergeFrom(from.getextrainfo_req());
    }
    if (from.has_valentinedata_req()) {
      mutable_valentinedata_req()->::fgame::CSValentineDataReq::MergeFrom(from.valentinedata_req());
    }
    if (from.has_valentineexchange_req()) {
      mutable_valentineexchange_req()->::fgame::CSValentineExchangeReq::MergeFrom(from.valentineexchange_req());
    }
    if (from.has_redpacketsgetinfo_req()) {
      mutable_redpacketsgetinfo_req()->::fgame::CSRedPacketsGetInfoReq::MergeFrom(from.redpacketsgetinfo_req());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from.has_redpacketsgreb_req()) {
      mutable_redpacketsgreb_req()->::fgame::CSRedPacketsGrebReq::MergeFrom(from.redpacketsgreb_req());
    }
    if (from.has_redpacketsopened_req()) {
      mutable_redpacketsopened_req()->::fgame::CSRedPacketsOpenedReq::MergeFrom(from.redpacketsopened_req());
    }
    if (from.has_chapterunlock_req()) {
      mutable_chapterunlock_req()->::fgame::CSChapterUnlockReq::MergeFrom(from.chapterunlock_req());
    }
    if (from.has_getchest_req()) {
      mutable_getchest_req()->::fgame::CSGetChestReq::MergeFrom(from.getchest_req());
    }
    if (from.has_pvenotify_req()) {
      mutable_pvenotify_req()->::fgame::CSPveNotifyReq::MergeFrom(from.pvenotify_req());
    }
    if (from.has_dailytaskstatus_req()) {
      mutable_dailytaskstatus_req()->::fgame::CSDailyTaskStatusReq::MergeFrom(from.dailytaskstatus_req());
    }
    if (from.has_requestdailytask_req()) {
      mutable_requestdailytask_req()->::fgame::CSRequestDailyTaskReq::MergeFrom(from.requestdailytask_req());
    }
    if (from.has_changedailytask_req()) {
      mutable_changedailytask_req()->::fgame::CSChangeDailyTaskReq::MergeFrom(from.changedailytask_req());
    }
  }
  if (from._has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    if (from.has_opendailytaskaward_req()) {
      mutable_opendailytaskaward_req()->::fgame::CSOpenDailyTaskAwardReq::MergeFrom(from.opendailytaskaward_req());
    }
    if (from.has_updatedailytaskprogress_req()) {
      mutable_updatedailytaskprogress_req()->::fgame::CSUpdateDailyTaskProgressReq::MergeFrom(from.updatedailytaskprogress_req());
    }
    if (from.has_rankweekrewardinfo_req()) {
      mutable_rankweekrewardinfo_req()->::fgame::CSRankWeekRewardInfoReq::MergeFrom(from.rankweekrewardinfo_req());
    }
    if (from.has_rankweekrewardreward_req()) {
      mutable_rankweekrewardreward_req()->::fgame::CSRankWeekRewardRewardReq::MergeFrom(from.rankweekrewardreward_req());
    }
    if (from.has_pvecheckaward_req()) {
      mutable_pvecheckaward_req()->::fgame::CSPveCheckAwardReq::MergeFrom(from.pvecheckaward_req());
    }
    if (from.has_sharereward_req()) {
      mutable_sharereward_req()->::fgame::CSShareRewardGetReq::MergeFrom(from.sharereward_req());
    }
    if (from.has_getsevengoallist_req()) {
      mutable_getsevengoallist_req()->::fgame::CSGetSevenGoalListReq::MergeFrom(from.getsevengoallist_req());
    }
    if (from.has_retrivesevengoal_req()) {
      mutable_retrivesevengoal_req()->::fgame::CSRetriveSevenGoalReq::MergeFrom(from.retrivesevengoal_req());
    }
  }
  if (from._has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    if (from.has_pverank_req()) {
      mutable_pverank_req()->::fgame::CSPveRankReq::MergeFrom(from.pverank_req());
    }
    if (from.has_toprank_req()) {
      mutable_toprank_req()->::fgame::CSTopRankReq::MergeFrom(from.toprank_req());
    }
    if (from.has_topranktime_req()) {
      mutable_topranktime_req()->::fgame::CSTopRankTimeReq::MergeFrom(from.topranktime_req());
    }
    if (from.has_updatetaskstatus_req()) {
      mutable_updatetaskstatus_req()->::fgame::CSUpdateTaskStatusReq::MergeFrom(from.updatetaskstatus_req());
    }
    if (from.has_assyncinfo_req()) {
      mutable_assyncinfo_req()->::fgame::CSAsSyncInfoReq::MergeFrom(from.assyncinfo_req());
    }
    if (from.has_asnewadd_req()) {
      mutable_asnewadd_req()->::fgame::CSAsNewAddReq::MergeFrom(from.asnewadd_req());
    }
    if (from.has_asoperate_req()) {
      mutable_asoperate_req()->::fgame::CSAsOperateReq::MergeFrom(from.asoperate_req());
    }
    if (from.has_asusecard_req()) {
      mutable_asusecard_req()->::fgame::CSAsUseCardReq::MergeFrom(from.asusecard_req());
    }
  }
  if (from._has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    if (from.has_pvpuseskill_req()) {
      mutable_pvpuseskill_req()->::fgame::CSPvpUseSkillReq::MergeFrom(from.pvpuseskill_req());
    }
    if (from.has_instituteinfo_req()) {
      mutable_instituteinfo_req()->::fgame::CSInstituteInfoReq::MergeFrom(from.instituteinfo_req());
    }
    if (from.has_institutebuy_req()) {
      mutable_institutebuy_req()->::fgame::CSInstituteBuyReq::MergeFrom(from.institutebuy_req());
    }
    if (from.has_opactconfiglist_req()) {
      mutable_opactconfiglist_req()->::fgame::CSOpActConfigListReq::MergeFrom(from.opactconfiglist_req());
    }
    if (from.has_opactselfdatalist_req()) {
      mutable_opactselfdatalist_req()->::fgame::CSOpActSelfDataListReq::MergeFrom(from.opactselfdatalist_req());
    }
    if (from.has_opactglobaldatalist_req()) {
      mutable_opactglobaldatalist_req()->::fgame::CSOpActGlobalDataListReq::MergeFrom(from.opactglobaldatalist_req());
    }
    if (from.has_opactdemotake_req()) {
      mutable_opactdemotake_req()->::fgame::CSOpActDemoTakeReq::MergeFrom(from.opactdemotake_req());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void C2ServerMsg::CopyFrom(const C2ServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2ServerMsg::IsInitialized() const {

  if (has_login_req()) {
    if (!this->login_req().IsInitialized()) return false;
  }
  if (has_reg_req()) {
    if (!this->reg_req().IsInitialized()) return false;
  }
  if (has_match_req()) {
    if (!this->match_req().IsInitialized()) return false;
  }
  if (has_start_req()) {
    if (!this->start_req().IsInitialized()) return false;
  }
  if (has_fight_req()) {
    if (!this->fight_req().IsInitialized()) return false;
  }
  if (has_end_req()) {
    if (!this->end_req().IsInitialized()) return false;
  }
  if (has_map_req()) {
    if (!this->map_req().IsInitialized()) return false;
  }
  if (has_upgrade_req()) {
    if (!this->upgrade_req().IsInitialized()) return false;
  }
  if (has_ping_req()) {
    if (!this->ping_req().IsInitialized()) return false;
  }
  if (has_buyitem_req()) {
    if (!this->buyitem_req().IsInitialized()) return false;
  }
  if (has_useitem_req()) {
    if (!this->useitem_req().IsInitialized()) return false;
  }
  if (has_receiveachievement_req()) {
    if (!this->receiveachievement_req().IsInitialized()) return false;
  }
  if (has_receiveachievementreward_req()) {
    if (!this->receiveachievementreward_req().IsInitialized()) return false;
  }
  if (has_enterserver_req()) {
    if (!this->enterserver_req().IsInitialized()) return false;
  }
  if (has_directenter_req()) {
    if (!this->directenter_req().IsInitialized()) return false;
  }
  if (has_pvprankinggetlist_req()) {
    if (!this->pvprankinggetlist_req().IsInitialized()) return false;
  }
  if (has_streakwinvalue_req()) {
    if (!this->streakwinvalue_req().IsInitialized()) return false;
  }
  if (has_streakwinget_req()) {
    if (!this->streakwinget_req().IsInitialized()) return false;
  }
  if (has_openbigstage_req()) {
    if (!this->openbigstage_req().IsInitialized()) return false;
  }
  if (has_pvpuseitem_req()) {
    if (!this->pvpuseitem_req().IsInitialized()) return false;
  }
  if (has_getserver_req()) {
    if (!this->getserver_req().IsInitialized()) return false;
  }
  if (has_stopmatch_req()) {
    if (!this->stopmatch_req().IsInitialized()) return false;
  }
  if (has_logout_req()) {
    if (!this->logout_req().IsInitialized()) return false;
  }
  if (has_xinshourecode_req()) {
    if (!this->xinshourecode_req().IsInitialized()) return false;
  }
  if (has_pvprankingplayerinfo_req()) {
    if (!this->pvprankingplayerinfo_req().IsInitialized()) return false;
  }
  if (has_receiveactivityreward_req()) {
    if (!this->receiveactivityreward_req().IsInitialized()) return false;
  }
  if (has_missioncomplete_req()) {
    if (!this->missioncomplete_req().IsInitialized()) return false;
  }
  if (has_receivepowerenergy_req()) {
    if (!this->receivepowerenergy_req().IsInitialized()) return false;
  }
  if (has_getmail_req()) {
    if (!this->getmail_req().IsInitialized()) return false;
  }
  if (has_buynewbiegift_req()) {
    if (!this->buynewbiegift_req().IsInitialized()) return false;
  }
  if (has_rechargecallback_req()) {
    if (!this->rechargecallback_req().IsInitialized()) return false;
  }
  if (has_friendquery_req()) {
    if (!this->friendquery_req().IsInitialized()) return false;
  }
  if (has_friendrequestadd_req()) {
    if (!this->friendrequestadd_req().IsInitialized()) return false;
  }
  if (has_friendconfirmadd_req()) {
    if (!this->friendconfirmadd_req().IsInitialized()) return false;
  }
  if (has_friendgetinfo_req()) {
    if (!this->friendgetinfo_req().IsInitialized()) return false;
  }
  if (has_friendrequestremove_req()) {
    if (!this->friendrequestremove_req().IsInitialized()) return false;
  }
  if (has_friendaddblacklist_req()) {
    if (!this->friendaddblacklist_req().IsInitialized()) return false;
  }
  if (has_friendremoveblacklist_req()) {
    if (!this->friendremoveblacklist_req().IsInitialized()) return false;
  }
  if (has_pvpchat_req()) {
    if (!this->pvpchat_req().IsInitialized()) return false;
  }
  if (has_usegiftcode_req()) {
    if (!this->usegiftcode_req().IsInitialized()) return false;
  }
  if (has_queryplayerinfo_req()) {
    if (!this->queryplayerinfo_req().IsInitialized()) return false;
  }
  if (has_personalroomenter_req()) {
    if (!this->personalroomenter_req().IsInitialized()) return false;
  }
  if (has_personalroomleave_req()) {
    if (!this->personalroomleave_req().IsInitialized()) return false;
  }
  if (has_personalroomkick_req()) {
    if (!this->personalroomkick_req().IsInitialized()) return false;
  }
  if (has_personalroominvite_req()) {
    if (!this->personalroominvite_req().IsInitialized()) return false;
  }
  if (has_personalroomchat_req()) {
    if (!this->personalroomchat_req().IsInitialized()) return false;
  }
  if (has_personalroommode_req()) {
    if (!this->personalroommode_req().IsInitialized()) return false;
  }
  if (has_personalroomapplyorrefuseinvite_req()) {
    if (!this->personalroomapplyorrefuseinvite_req().IsInitialized()) return false;
  }
  if (has_changeplayericon_req()) {
    if (!this->changeplayericon_req().IsInitialized()) return false;
  }
  if (has_personalroomcountdown_req()) {
    if (!this->personalroomcountdown_req().IsInitialized()) return false;
  }
  if (has_syncplayerdata_req()) {
    if (!this->syncplayerdata_req().IsInitialized()) return false;
  }
  if (has_appearcreep_req()) {
    if (!this->appearcreep_req().IsInitialized()) return false;
  }
  if (has_savecheckptdata_req()) {
    if (!this->savecheckptdata_req().IsInitialized()) return false;
  }
  if (has_enterpoint_req()) {
    if (!this->enterpoint_req().IsInitialized()) return false;
  }
  if (has_shopguide_req()) {
    if (!this->shopguide_req().IsInitialized()) return false;
  }
  if (has_testadddiamond_req()) {
    if (!this->testadddiamond_req().IsInitialized()) return false;
  }
  if (has_activitysubmit_req()) {
    if (!this->activitysubmit_req().IsInitialized()) return false;
  }
  if (has_settitle_req()) {
    if (!this->settitle_req().IsInitialized()) return false;
  }
  if (has_shopbuy_req()) {
    if (!this->shopbuy_req().IsInitialized()) return false;
  }
  if (has_exchangeitem_req()) {
    if (!this->exchangeitem_req().IsInitialized()) return false;
  }
  if (has_setnewbieoss_req()) {
    if (!this->setnewbieoss_req().IsInitialized()) return false;
  }
  if (has_requestpkey_req()) {
    if (!this->requestpkey_req().IsInitialized()) return false;
  }
  if (has_sendclientkey_req()) {
    if (!this->sendclientkey_req().IsInitialized()) return false;
  }
  if (has_glyphsactive_req()) {
    if (!this->glyphsactive_req().IsInitialized()) return false;
  }
  if (has_glyphsupgrade_req()) {
    if (!this->glyphsupgrade_req().IsInitialized()) return false;
  }
  if (has_glyphspvpinfo_req()) {
    if (!this->glyphspvpinfo_req().IsInitialized()) return false;
  }
  if (has_buyvip_req()) {
    if (!this->buyvip_req().IsInitialized()) return false;
  }
  if (has_openchest_req()) {
    if (!this->openchest_req().IsInitialized()) return false;
  }
  if (has_christmasdecorate_req()) {
    if (!this->christmasdecorate_req().IsInitialized()) return false;
  }
  if (has_christmastakebonus_req()) {
    if (!this->christmastakebonus_req().IsInitialized()) return false;
  }
  if (has_retrivecheckptreward_req()) {
    if (!this->retrivecheckptreward_req().IsInitialized()) return false;
  }
  if (has_recoveritem_req()) {
    if (!this->recoveritem_req().IsInitialized()) return false;
  }
  if (has_setsignature_req()) {
    if (!this->setsignature_req().IsInitialized()) return false;
  }
  if (has_setextrainfovisible_req()) {
    if (!this->setextrainfovisible_req().IsInitialized()) return false;
  }
  if (has_getextrainfo_req()) {
    if (!this->getextrainfo_req().IsInitialized()) return false;
  }
  if (has_valentineexchange_req()) {
    if (!this->valentineexchange_req().IsInitialized()) return false;
  }
  if (has_chapterunlock_req()) {
    if (!this->chapterunlock_req().IsInitialized()) return false;
  }
  if (has_getchest_req()) {
    if (!this->getchest_req().IsInitialized()) return false;
  }
  if (has_pvenotify_req()) {
    if (!this->pvenotify_req().IsInitialized()) return false;
  }
  if (has_changedailytask_req()) {
    if (!this->changedailytask_req().IsInitialized()) return false;
  }
  if (has_sharereward_req()) {
    if (!this->sharereward_req().IsInitialized()) return false;
  }
  if (has_retrivesevengoal_req()) {
    if (!this->retrivesevengoal_req().IsInitialized()) return false;
  }
  if (has_toprank_req()) {
    if (!this->toprank_req().IsInitialized()) return false;
  }
  if (has_topranktime_req()) {
    if (!this->topranktime_req().IsInitialized()) return false;
  }
  if (has_asoperate_req()) {
    if (!this->asoperate_req().IsInitialized()) return false;
  }
  if (has_asusecard_req()) {
    if (!this->asusecard_req().IsInitialized()) return false;
  }
  if (has_pvpuseskill_req()) {
    if (!this->pvpuseskill_req().IsInitialized()) return false;
  }
  if (has_institutebuy_req()) {
    if (!this->institutebuy_req().IsInitialized()) return false;
  }
  if (has_opactdemotake_req()) {
    if (!this->opactdemotake_req().IsInitialized()) return false;
  }
  return true;
}

void C2ServerMsg::Swap(C2ServerMsg* other) {
  if (other != this) {
    std::swap(login_req_, other->login_req_);
    std::swap(reg_req_, other->reg_req_);
    std::swap(heartbeat_req_, other->heartbeat_req_);
    std::swap(match_req_, other->match_req_);
    std::swap(start_req_, other->start_req_);
    std::swap(fight_req_, other->fight_req_);
    std::swap(end_req_, other->end_req_);
    std::swap(map_req_, other->map_req_);
    std::swap(upgrade_req_, other->upgrade_req_);
    std::swap(ping_req_, other->ping_req_);
    std::swap(buyitem_req_, other->buyitem_req_);
    std::swap(useitem_req_, other->useitem_req_);
    std::swap(leave_req_, other->leave_req_);
    std::swap(getachievementreq_, other->getachievementreq_);
    std::swap(receiveachievement_req_, other->receiveachievement_req_);
    std::swap(receiveachievementreward_req_, other->receiveachievementreward_req_);
    std::swap(enterserver_req_, other->enterserver_req_);
    std::swap(directenter_req_, other->directenter_req_);
    std::swap(pvprankinggetlist_req_, other->pvprankinggetlist_req_);
    std::swap(streakwinvalue_req_, other->streakwinvalue_req_);
    std::swap(streakwinget_req_, other->streakwinget_req_);
    std::swap(openbigstage_req_, other->openbigstage_req_);
    std::swap(pvpuseitem_req_, other->pvpuseitem_req_);
    std::swap(sevendaysignlist_req_, other->sevendaysignlist_req_);
    std::swap(sevendaysign_req_, other->sevendaysign_req_);
    std::swap(getserver_req_, other->getserver_req_);
    std::swap(sycplayerinfo_req_, other->sycplayerinfo_req_);
    std::swap(stopmatch_req_, other->stopmatch_req_);
    std::swap(changename_req_, other->changename_req_);
    std::swap(logout_req_, other->logout_req_);
    std::swap(xinshourecode_req_, other->xinshourecode_req_);
    std::swap(pvprankingplayerinfo_req_, other->pvprankingplayerinfo_req_);
    std::swap(getopenactivity_req_, other->getopenactivity_req_);
    std::swap(getactivitydata_req_, other->getactivitydata_req_);
    std::swap(receiveactivityreward_req_, other->receiveactivityreward_req_);
    std::swap(missionlist_req_, other->missionlist_req_);
    std::swap(missioncomplete_req_, other->missioncomplete_req_);
    std::swap(getpowerenergyactivitydata_req_, other->getpowerenergyactivitydata_req_);
    std::swap(receivepowerenergy_req_, other->receivepowerenergy_req_);
    std::swap(getmail_req_, other->getmail_req_);
    std::swap(delmail_req_, other->delmail_req_);
    std::swap(buynewbiegift_req_, other->buynewbiegift_req_);
    std::swap(rechargecallback_req_, other->rechargecallback_req_);
    std::swap(friendquery_req_, other->friendquery_req_);
    std::swap(friendrequestadd_req_, other->friendrequestadd_req_);
    std::swap(friendconfirmadd_req_, other->friendconfirmadd_req_);
    std::swap(friendgetinfo_req_, other->friendgetinfo_req_);
    std::swap(friendrequestremove_req_, other->friendrequestremove_req_);
    std::swap(friendaddblacklist_req_, other->friendaddblacklist_req_);
    std::swap(friendremoveblacklist_req_, other->friendremoveblacklist_req_);
    std::swap(pvpchat_req_, other->pvpchat_req_);
    std::swap(usegiftcode_req_, other->usegiftcode_req_);
    std::swap(queryplayerinfo_req_, other->queryplayerinfo_req_);
    std::swap(personalroomcreate_req_, other->personalroomcreate_req_);
    std::swap(personalroomenter_req_, other->personalroomenter_req_);
    std::swap(personalroomleave_req_, other->personalroomleave_req_);
    std::swap(personalroomkick_req_, other->personalroomkick_req_);
    std::swap(personalroominvite_req_, other->personalroominvite_req_);
    std::swap(personalroombroadcast_req_, other->personalroombroadcast_req_);
    std::swap(personalroomchat_req_, other->personalroomchat_req_);
    std::swap(personalroommode_req_, other->personalroommode_req_);
    std::swap(personalroombeginfight_req_, other->personalroombeginfight_req_);
    std::swap(personalroomapplyorrefuseinvite_req_, other->personalroomapplyorrefuseinvite_req_);
    std::swap(changeplayericon_req_, other->changeplayericon_req_);
    std::swap(personalroomcountdown_req_, other->personalroomcountdown_req_);
    std::swap(syncplayerdata_req_, other->syncplayerdata_req_);
    std::swap(getplayerdata_req_, other->getplayerdata_req_);
    std::swap(appearcreep_req_, other->appearcreep_req_);
    std::swap(savecheckptdata_req_, other->savecheckptdata_req_);
    std::swap(getcheckptdata_req_, other->getcheckptdata_req_);
    std::swap(setnewbie_req_, other->setnewbie_req_);
    std::swap(getnewbielist_req_, other->getnewbielist_req_);
    std::swap(enterpoint_req_, other->enterpoint_req_);
    std::swap(shopguide_req_, other->shopguide_req_);
    std::swap(testadddiamond_req_, other->testadddiamond_req_);
    std::swap(activitylist_req_, other->activitylist_req_);
    std::swap(activitysubmit_req_, other->activitysubmit_req_);
    std::swap(settitle_req_, other->settitle_req_);
    std::swap(shopbuy_req_, other->shopbuy_req_);
    std::swap(exchangeitem_req_, other->exchangeitem_req_);
    std::swap(activitycrazydtls_req_, other->activitycrazydtls_req_);
    std::swap(activitycrazyusage_req_, other->activitycrazyusage_req_);
    std::swap(shoplist_req_, other->shoplist_req_);
    std::swap(pvpobserver_req_, other->pvpobserver_req_);
    std::swap(setnewbieoss_req_, other->setnewbieoss_req_);
    std::swap(pvpresult_req_, other->pvpresult_req_);
    std::swap(pvpselfranklist_req_, other->pvpselfranklist_req_);
    std::swap(gwgetmatchinfo_req_, other->gwgetmatchinfo_req_);
    std::swap(gwmatch_req_, other->gwmatch_req_);
    std::swap(gwmatchstop_req_, other->gwmatchstop_req_);
    std::swap(gwgetrank_req_, other->gwgetrank_req_);
    std::swap(gwbuyenergy_req_, other->gwbuyenergy_req_);
    std::swap(requestpkey_req_, other->requestpkey_req_);
    std::swap(sendclientkey_req_, other->sendclientkey_req_);
    std::swap(updateexchangelist_req_, other->updateexchangelist_req_);
    std::swap(glyphsrequestinfo_req_, other->glyphsrequestinfo_req_);
    std::swap(glyphsrequestbasicinfo_req_, other->glyphsrequestbasicinfo_req_);
    std::swap(glyphsactive_req_, other->glyphsactive_req_);
    std::swap(glyphsupgrade_req_, other->glyphsupgrade_req_);
    std::swap(glyphspvpinfo_req_, other->glyphspvpinfo_req_);
    std::swap(buyvip_req_, other->buyvip_req_);
    std::swap(glyphguide_req_, other->glyphguide_req_);
    std::swap(newyeargetinfo_req_, other->newyeargetinfo_req_);
    std::swap(newyearreward_req_, other->newyearreward_req_);
    std::swap(openchest_req_, other->openchest_req_);
    std::swap(christmasdecorate_req_, other->christmasdecorate_req_);
    std::swap(christmastakebonus_req_, other->christmastakebonus_req_);
    std::swap(christmasgetdate_req_, other->christmasgetdate_req_);
    std::swap(christmasgetrank_req_, other->christmasgetrank_req_);
    std::swap(retrivecheckptreward_req_, other->retrivecheckptreward_req_);
    std::swap(viptime_req_, other->viptime_req_);
    std::swap(newyearcmp_req_, other->newyearcmp_req_);
    std::swap(notifyglyphsupdate_req_, other->notifyglyphsupdate_req_);
    std::swap(recoveritem_req_, other->recoveritem_req_);
    std::swap(setsignature_req_, other->setsignature_req_);
    std::swap(setextrainfovisible_req_, other->setextrainfovisible_req_);
    std::swap(getextrainfo_req_, other->getextrainfo_req_);
    std::swap(valentinedata_req_, other->valentinedata_req_);
    std::swap(valentineexchange_req_, other->valentineexchange_req_);
    std::swap(redpacketsgetinfo_req_, other->redpacketsgetinfo_req_);
    std::swap(redpacketsgreb_req_, other->redpacketsgreb_req_);
    std::swap(redpacketsopened_req_, other->redpacketsopened_req_);
    std::swap(chapterunlock_req_, other->chapterunlock_req_);
    std::swap(getchest_req_, other->getchest_req_);
    std::swap(pvenotify_req_, other->pvenotify_req_);
    std::swap(dailytaskstatus_req_, other->dailytaskstatus_req_);
    std::swap(requestdailytask_req_, other->requestdailytask_req_);
    std::swap(changedailytask_req_, other->changedailytask_req_);
    std::swap(opendailytaskaward_req_, other->opendailytaskaward_req_);
    std::swap(updatedailytaskprogress_req_, other->updatedailytaskprogress_req_);
    std::swap(rankweekrewardinfo_req_, other->rankweekrewardinfo_req_);
    std::swap(rankweekrewardreward_req_, other->rankweekrewardreward_req_);
    std::swap(pvecheckaward_req_, other->pvecheckaward_req_);
    std::swap(sharereward_req_, other->sharereward_req_);
    std::swap(getsevengoallist_req_, other->getsevengoallist_req_);
    std::swap(retrivesevengoal_req_, other->retrivesevengoal_req_);
    std::swap(pverank_req_, other->pverank_req_);
    std::swap(toprank_req_, other->toprank_req_);
    std::swap(topranktime_req_, other->topranktime_req_);
    std::swap(updatetaskstatus_req_, other->updatetaskstatus_req_);
    std::swap(assyncinfo_req_, other->assyncinfo_req_);
    std::swap(asnewadd_req_, other->asnewadd_req_);
    std::swap(asoperate_req_, other->asoperate_req_);
    std::swap(asusecard_req_, other->asusecard_req_);
    std::swap(pvpuseskill_req_, other->pvpuseskill_req_);
    std::swap(instituteinfo_req_, other->instituteinfo_req_);
    std::swap(institutebuy_req_, other->institutebuy_req_);
    std::swap(opactconfiglist_req_, other->opactconfiglist_req_);
    std::swap(opactselfdatalist_req_, other->opactselfdatalist_req_);
    std::swap(opactglobaldatalist_req_, other->opactglobaldatalist_req_);
    std::swap(opactdemotake_req_, other->opactdemotake_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_has_bits_[4], other->_has_bits_[4]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string C2ServerMsg::GetTypeName() const {
  return "fgame.C2ServerMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int S2ClientMsg::kErrorMsgFieldNumber;
const int S2ClientMsg::kLoginRespFieldNumber;
const int S2ClientMsg::kRegRespFieldNumber;
const int S2ClientMsg::kHeartBeatRespFieldNumber;
const int S2ClientMsg::kMatchRespFieldNumber;
const int S2ClientMsg::kStartRespFieldNumber;
const int S2ClientMsg::kFightRespFieldNumber;
const int S2ClientMsg::kEndRespFieldNumber;
const int S2ClientMsg::kMapRespFieldNumber;
const int S2ClientMsg::kUpgradeRespFieldNumber;
const int S2ClientMsg::kPingRespFieldNumber;
const int S2ClientMsg::kBuyItemRespFieldNumber;
const int S2ClientMsg::kUseItemRespFieldNumber;
const int S2ClientMsg::kLeaveRespFieldNumber;
const int S2ClientMsg::kGetAchievementRespFieldNumber;
const int S2ClientMsg::kReceiveAchievementRespFieldNumber;
const int S2ClientMsg::kReceiveAchievementRewardRespFieldNumber;
const int S2ClientMsg::kEnterServerRespFieldNumber;
const int S2ClientMsg::kCanEnterReqFieldNumber;
const int S2ClientMsg::kQueueReqFieldNumber;
const int S2ClientMsg::kDirectEnterRespFieldNumber;
const int S2ClientMsg::kPvpRankingGetListRespFieldNumber;
const int S2ClientMsg::kStreakWinValueRespFieldNumber;
const int S2ClientMsg::kStreakWinGetRespFieldNumber;
const int S2ClientMsg::kOpenBigStageRespFieldNumber;
const int S2ClientMsg::kPvpUseItemRespFieldNumber;
const int S2ClientMsg::kSevenDaySignListRespFieldNumber;
const int S2ClientMsg::kSevenDaySignRespFieldNumber;
const int S2ClientMsg::kGetServerRespFieldNumber;
const int S2ClientMsg::kSycPlayerInfoRespFieldNumber;
const int S2ClientMsg::kNoticeReqFieldNumber;
const int S2ClientMsg::kStopMatchRespFieldNumber;
const int S2ClientMsg::kChangeNameRespFieldNumber;
const int S2ClientMsg::kGMCmdReqFieldNumber;
const int S2ClientMsg::kXinShouRecodeRespFieldNumber;
const int S2ClientMsg::kPvpRankingPlayerInfoRespFieldNumber;
const int S2ClientMsg::kGetOpenActivityRespFieldNumber;
const int S2ClientMsg::kGetActivityDataRespFieldNumber;
const int S2ClientMsg::kReceiveActivityRewardRespFieldNumber;
const int S2ClientMsg::kMissionListRespFieldNumber;
const int S2ClientMsg::kMissionCompleteRespFieldNumber;
const int S2ClientMsg::kMissionUpdateRespFieldNumber;
const int S2ClientMsg::kGetPowerEnergyActivityRespFieldNumber;
const int S2ClientMsg::kReceivePowerEnergyRespFieldNumber;
const int S2ClientMsg::kGetMailRespFieldNumber;
const int S2ClientMsg::kDelMailRespFieldNumber;
const int S2ClientMsg::kNoticeMailReqFieldNumber;
const int S2ClientMsg::kBuyNewbieGiftRespFieldNumber;
const int S2ClientMsg::kRechargeCallbackRespFieldNumber;
const int S2ClientMsg::kFriendQueryRespFieldNumber;
const int S2ClientMsg::kFriendRequestAddRespFieldNumber;
const int S2ClientMsg::kFriendConfirmAddRespFieldNumber;
const int S2ClientMsg::kFriendGetInfoRespFieldNumber;
const int S2ClientMsg::kFriendRequestRemoveRespFieldNumber;
const int S2ClientMsg::kFriendAddBlackListRespFieldNumber;
const int S2ClientMsg::kFriendRemoveBlackListRespFieldNumber;
const int S2ClientMsg::kPvpChatRespFieldNumber;
const int S2ClientMsg::kUseGiftCodeRespFieldNumber;
const int S2ClientMsg::kQueryPlayerInfoRespFieldNumber;
const int S2ClientMsg::kPersonalRoomCreateRespFieldNumber;
const int S2ClientMsg::kPersonalRoomEnterRespFieldNumber;
const int S2ClientMsg::kPersonalRoomLeaveRespFieldNumber;
const int S2ClientMsg::kPersonalRoomKickRespFieldNumber;
const int S2ClientMsg::kPersonalRoomInviteRespFieldNumber;
const int S2ClientMsg::kPersonalRoomBroadcastRespFieldNumber;
const int S2ClientMsg::kPersonalRoomChatRespFieldNumber;
const int S2ClientMsg::kPersonalRoomModeRespFieldNumber;
const int S2ClientMsg::kPersonalRoomBeginFightRespFieldNumber;
const int S2ClientMsg::kPersonalRoomApplyOrRefuseInviteRespFieldNumber;
const int S2ClientMsg::kChangePlayerIconRespFieldNumber;
const int S2ClientMsg::kPersonalRoomCountDownRespFieldNumber;
const int S2ClientMsg::kSyncPlayerDataRespFieldNumber;
const int S2ClientMsg::kGetPlayerDataRespFieldNumber;
const int S2ClientMsg::kAppearCreepRespFieldNumber;
const int S2ClientMsg::kSaveCheckPtDataRespFieldNumber;
const int S2ClientMsg::kGetCheckPtDataRespFieldNumber;
const int S2ClientMsg::kSetNewBieRespFieldNumber;
const int S2ClientMsg::kGetNewBieListRespFieldNumber;
const int S2ClientMsg::kPropertyUpdateRespFieldNumber;
const int S2ClientMsg::kEnterPointRespFieldNumber;
const int S2ClientMsg::kShopGuideRespFieldNumber;
const int S2ClientMsg::kActivityListRespFieldNumber;
const int S2ClientMsg::kActivityUpdateRespFieldNumber;
const int S2ClientMsg::kActivitySubmitRespFieldNumber;
const int S2ClientMsg::kSetTitleRespFieldNumber;
const int S2ClientMsg::kShopBuyRespFieldNumber;
const int S2ClientMsg::kKickPlayerReqFieldNumber;
const int S2ClientMsg::kExchangeItemRespFieldNumber;
const int S2ClientMsg::kActivityCrazyDtlsRespFieldNumber;
const int S2ClientMsg::kActivityCrazyUsageRespFieldNumber;
const int S2ClientMsg::kActivityCrazyUsableRespFieldNumber;
const int S2ClientMsg::kShopListRespFieldNumber;
const int S2ClientMsg::kPvpObserverRespFieldNumber;
const int S2ClientMsg::kSetNewBieOssRespFieldNumber;
const int S2ClientMsg::kUpdateAchievementRespFieldNumber;
const int S2ClientMsg::kPvpResultRespFieldNumber;
const int S2ClientMsg::kPvpSelfRankListRespFieldNumber;
const int S2ClientMsg::kGWGetMatchInfoRespFieldNumber;
const int S2ClientMsg::kGWGetRankRespFieldNumber;
const int S2ClientMsg::kGWMatchRespFieldNumber;
const int S2ClientMsg::kGWMatchStopRespFieldNumber;
const int S2ClientMsg::kGWBuyEnergyRespFieldNumber;
const int S2ClientMsg::kRequestPKeyRespFieldNumber;
const int S2ClientMsg::kSendClientKeyRespFieldNumber;
const int S2ClientMsg::kUpdateExchangeListRespFieldNumber;
const int S2ClientMsg::kGlyphsRequestInfoRespFieldNumber;
const int S2ClientMsg::kGlyphsRequestBasicInfoRespFieldNumber;
const int S2ClientMsg::kGlyphsActiveRespFieldNumber;
const int S2ClientMsg::kGlyphsUpgradeRespFieldNumber;
const int S2ClientMsg::kGlyphsPvpInfoRespFieldNumber;
const int S2ClientMsg::kBuyVipRespFieldNumber;
const int S2ClientMsg::kGlyphGuideRespFieldNumber;
const int S2ClientMsg::kNewYearGetInfoRespFieldNumber;
const int S2ClientMsg::kNewYearRewardRespFieldNumber;
const int S2ClientMsg::kOpenChestRespFieldNumber;
const int S2ClientMsg::kChristmasDecorateRespFieldNumber;
const int S2ClientMsg::kChristmasTakeBonusRespFieldNumber;
const int S2ClientMsg::kChristmasGetDateRespFieldNumber;
const int S2ClientMsg::kChristmasGetRankRespFieldNumber;
const int S2ClientMsg::kRetriveCheckPtRewardRespFieldNumber;
const int S2ClientMsg::kNewYearCmpRespFieldNumber;
const int S2ClientMsg::kNotifyGlyphsUpdateRespFieldNumber;
const int S2ClientMsg::kRecoverItemRespFieldNumber;
const int S2ClientMsg::kSetSignatureRespFieldNumber;
const int S2ClientMsg::kSetExtraInfoVisibleRespFieldNumber;
const int S2ClientMsg::kGetExtraInfoRespFieldNumber;
const int S2ClientMsg::kStopKickPlayerReqFieldNumber;
const int S2ClientMsg::kValentineDataRespFieldNumber;
const int S2ClientMsg::kValentineExchangeRespFieldNumber;
const int S2ClientMsg::kRedPacketsGetInfoRespFieldNumber;
const int S2ClientMsg::kRedPacketsGrebRespFieldNumber;
const int S2ClientMsg::kRedPacketsOpenedRespFieldNumber;
const int S2ClientMsg::kChapterUnlockRespFieldNumber;
const int S2ClientMsg::kGetChestRespFieldNumber;
const int S2ClientMsg::kPveNotifyRespFieldNumber;
const int S2ClientMsg::kPvpGetAwardRespFieldNumber;
const int S2ClientMsg::kDailyTaskStatusRespFieldNumber;
const int S2ClientMsg::kRequestDailyTaskRespFieldNumber;
const int S2ClientMsg::kChangeDailyTaskRespFieldNumber;
const int S2ClientMsg::kOpenDailyTaskAwardRespFieldNumber;
const int S2ClientMsg::kUpdateDailyTaskProgressRespFieldNumber;
const int S2ClientMsg::kNewDailyTaskRespFieldNumber;
const int S2ClientMsg::kPveCheckAwardRespFieldNumber;
const int S2ClientMsg::kRankWeekRewardInfoRespFieldNumber;
const int S2ClientMsg::kRankWeekRewardRewardRespFieldNumber;
const int S2ClientMsg::kShareRewardRespFieldNumber;
const int S2ClientMsg::kGetSevenGoalListRespFieldNumber;
const int S2ClientMsg::kRetriveSevenGoalRespFieldNumber;
const int S2ClientMsg::kNoticeSevenGoalRespFieldNumber;
const int S2ClientMsg::kPveRankRespFieldNumber;
const int S2ClientMsg::kTopRankRespFieldNumber;
const int S2ClientMsg::kTopRankTimeRespFieldNumber;
const int S2ClientMsg::kUpdateTaskStatusRespFieldNumber;
const int S2ClientMsg::kAsSyncInfoRespFieldNumber;
const int S2ClientMsg::kAsNewAddRespFieldNumber;
const int S2ClientMsg::kAsOperateRespFieldNumber;
const int S2ClientMsg::kAsUseCardRespFieldNumber;
const int S2ClientMsg::kPvpUseSkillRespFieldNumber;
const int S2ClientMsg::kPvpAssistantInfoRespFieldNumber;
const int S2ClientMsg::kInstituteInfoRespFieldNumber;
const int S2ClientMsg::kInstituteBuyRespFieldNumber;
const int S2ClientMsg::kOpActAddRespFieldNumber;
const int S2ClientMsg::kOpActStateChangedRespFieldNumber;
const int S2ClientMsg::kOpActSelfDataChangedRespFieldNumber;
const int S2ClientMsg::kOpActGlobalDataChangedRespFieldNumber;
const int S2ClientMsg::kOpActConfigListRespFieldNumber;
const int S2ClientMsg::kOpActSelfDataListRespFieldNumber;
const int S2ClientMsg::kOpActGlobalDataListRespFieldNumber;
const int S2ClientMsg::kOpActDemoTakeRespFieldNumber;
#endif  // !_MSC_VER

S2ClientMsg::S2ClientMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.S2ClientMsg)
}

void S2ClientMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  error_msg_ = const_cast< ::fgame::CSErrorMsg*>(
      ::fgame::CSErrorMsg::internal_default_instance());
#else
  error_msg_ = const_cast< ::fgame::CSErrorMsg*>(&::fgame::CSErrorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  login_resp_ = const_cast< ::fgame::CSLoginResp*>(
      ::fgame::CSLoginResp::internal_default_instance());
#else
  login_resp_ = const_cast< ::fgame::CSLoginResp*>(&::fgame::CSLoginResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reg_resp_ = const_cast< ::fgame::CSRegResp*>(
      ::fgame::CSRegResp::internal_default_instance());
#else
  reg_resp_ = const_cast< ::fgame::CSRegResp*>(&::fgame::CSRegResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  heartbeat_resp_ = const_cast< ::fgame::CSHeartBeatResp*>(
      ::fgame::CSHeartBeatResp::internal_default_instance());
#else
  heartbeat_resp_ = const_cast< ::fgame::CSHeartBeatResp*>(&::fgame::CSHeartBeatResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  match_resp_ = const_cast< ::fgame::CSPvpMatchResp*>(
      ::fgame::CSPvpMatchResp::internal_default_instance());
#else
  match_resp_ = const_cast< ::fgame::CSPvpMatchResp*>(&::fgame::CSPvpMatchResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_resp_ = const_cast< ::fgame::CSPvpStartResp*>(
      ::fgame::CSPvpStartResp::internal_default_instance());
#else
  start_resp_ = const_cast< ::fgame::CSPvpStartResp*>(&::fgame::CSPvpStartResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fight_resp_ = const_cast< ::fgame::CSPvpFightResp*>(
      ::fgame::CSPvpFightResp::internal_default_instance());
#else
  fight_resp_ = const_cast< ::fgame::CSPvpFightResp*>(&::fgame::CSPvpFightResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  end_resp_ = const_cast< ::fgame::CSPvpEndResp*>(
      ::fgame::CSPvpEndResp::internal_default_instance());
#else
  end_resp_ = const_cast< ::fgame::CSPvpEndResp*>(&::fgame::CSPvpEndResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  map_resp_ = const_cast< ::fgame::CSPvpMapResp*>(
      ::fgame::CSPvpMapResp::internal_default_instance());
#else
  map_resp_ = const_cast< ::fgame::CSPvpMapResp*>(&::fgame::CSPvpMapResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  upgrade_resp_ = const_cast< ::fgame::CSPvpUpgradeResp*>(
      ::fgame::CSPvpUpgradeResp::internal_default_instance());
#else
  upgrade_resp_ = const_cast< ::fgame::CSPvpUpgradeResp*>(&::fgame::CSPvpUpgradeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ping_resp_ = const_cast< ::fgame::CSPvpPingResp*>(
      ::fgame::CSPvpPingResp::internal_default_instance());
#else
  ping_resp_ = const_cast< ::fgame::CSPvpPingResp*>(&::fgame::CSPvpPingResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyitem_resp_ = const_cast< ::fgame::CSBuyItemResp*>(
      ::fgame::CSBuyItemResp::internal_default_instance());
#else
  buyitem_resp_ = const_cast< ::fgame::CSBuyItemResp*>(&::fgame::CSBuyItemResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  useitem_resp_ = const_cast< ::fgame::CSUseItemResp*>(
      ::fgame::CSUseItemResp::internal_default_instance());
#else
  useitem_resp_ = const_cast< ::fgame::CSUseItemResp*>(&::fgame::CSUseItemResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  leave_resp_ = const_cast< ::fgame::CSPvpLeaveResp*>(
      ::fgame::CSPvpLeaveResp::internal_default_instance());
#else
  leave_resp_ = const_cast< ::fgame::CSPvpLeaveResp*>(&::fgame::CSPvpLeaveResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getachievement_resp_ = const_cast< ::fgame::CSGetAchievementResp*>(
      ::fgame::CSGetAchievementResp::internal_default_instance());
#else
  getachievement_resp_ = const_cast< ::fgame::CSGetAchievementResp*>(&::fgame::CSGetAchievementResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveachievement_resp_ = const_cast< ::fgame::CSReceiveAchievementResp*>(
      ::fgame::CSReceiveAchievementResp::internal_default_instance());
#else
  receiveachievement_resp_ = const_cast< ::fgame::CSReceiveAchievementResp*>(&::fgame::CSReceiveAchievementResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveachievementreward_resp_ = const_cast< ::fgame::CSReceiveAchievementRewardResp*>(
      ::fgame::CSReceiveAchievementRewardResp::internal_default_instance());
#else
  receiveachievementreward_resp_ = const_cast< ::fgame::CSReceiveAchievementRewardResp*>(&::fgame::CSReceiveAchievementRewardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  enterserver_resp_ = const_cast< ::fgame::CSEnterServerResp*>(
      ::fgame::CSEnterServerResp::internal_default_instance());
#else
  enterserver_resp_ = const_cast< ::fgame::CSEnterServerResp*>(&::fgame::CSEnterServerResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  canenter_req_ = const_cast< ::fgame::CSCanEnterReq*>(
      ::fgame::CSCanEnterReq::internal_default_instance());
#else
  canenter_req_ = const_cast< ::fgame::CSCanEnterReq*>(&::fgame::CSCanEnterReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queue_req_ = const_cast< ::fgame::CSQueueReq*>(
      ::fgame::CSQueueReq::internal_default_instance());
#else
  queue_req_ = const_cast< ::fgame::CSQueueReq*>(&::fgame::CSQueueReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  directenter_resp_ = const_cast< ::fgame::CSDircetEnterResp*>(
      ::fgame::CSDircetEnterResp::internal_default_instance());
#else
  directenter_resp_ = const_cast< ::fgame::CSDircetEnterResp*>(&::fgame::CSDircetEnterResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvprankinggetlist_resp_ = const_cast< ::fgame::CSPvpRankingGetListResp*>(
      ::fgame::CSPvpRankingGetListResp::internal_default_instance());
#else
  pvprankinggetlist_resp_ = const_cast< ::fgame::CSPvpRankingGetListResp*>(&::fgame::CSPvpRankingGetListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  streakwinvalue_resp_ = const_cast< ::fgame::CSStreakWinValueResp*>(
      ::fgame::CSStreakWinValueResp::internal_default_instance());
#else
  streakwinvalue_resp_ = const_cast< ::fgame::CSStreakWinValueResp*>(&::fgame::CSStreakWinValueResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  streakwinget_resp_ = const_cast< ::fgame::CSStreakWinGetResp*>(
      ::fgame::CSStreakWinGetResp::internal_default_instance());
#else
  streakwinget_resp_ = const_cast< ::fgame::CSStreakWinGetResp*>(&::fgame::CSStreakWinGetResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  openbigstage_resp_ = const_cast< ::fgame::CSOpenBigStageResp*>(
      ::fgame::CSOpenBigStageResp::internal_default_instance());
#else
  openbigstage_resp_ = const_cast< ::fgame::CSOpenBigStageResp*>(&::fgame::CSOpenBigStageResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpuseitem_resp_ = const_cast< ::fgame::CSPvpUseItemResp*>(
      ::fgame::CSPvpUseItemResp::internal_default_instance());
#else
  pvpuseitem_resp_ = const_cast< ::fgame::CSPvpUseItemResp*>(&::fgame::CSPvpUseItemResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sevendaysignlist_resp_ = const_cast< ::fgame::CSSevenDaySignListResp*>(
      ::fgame::CSSevenDaySignListResp::internal_default_instance());
#else
  sevendaysignlist_resp_ = const_cast< ::fgame::CSSevenDaySignListResp*>(&::fgame::CSSevenDaySignListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sevendaysign_resp_ = const_cast< ::fgame::CSSevenDaySignResp*>(
      ::fgame::CSSevenDaySignResp::internal_default_instance());
#else
  sevendaysign_resp_ = const_cast< ::fgame::CSSevenDaySignResp*>(&::fgame::CSSevenDaySignResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getserver_resp_ = const_cast< ::fgame::CSGetServerResp*>(
      ::fgame::CSGetServerResp::internal_default_instance());
#else
  getserver_resp_ = const_cast< ::fgame::CSGetServerResp*>(&::fgame::CSGetServerResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sycplayerinfo_resp_ = const_cast< ::fgame::CSSycPlayerInfoResp*>(
      ::fgame::CSSycPlayerInfoResp::internal_default_instance());
#else
  sycplayerinfo_resp_ = const_cast< ::fgame::CSSycPlayerInfoResp*>(&::fgame::CSSycPlayerInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notice_req_ = const_cast< ::fgame::CSNoticeReq*>(
      ::fgame::CSNoticeReq::internal_default_instance());
#else
  notice_req_ = const_cast< ::fgame::CSNoticeReq*>(&::fgame::CSNoticeReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stopmatch_resp_ = const_cast< ::fgame::CSPvpStopMatchResp*>(
      ::fgame::CSPvpStopMatchResp::internal_default_instance());
#else
  stopmatch_resp_ = const_cast< ::fgame::CSPvpStopMatchResp*>(&::fgame::CSPvpStopMatchResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changename_resp_ = const_cast< ::fgame::CSChangeNameResp*>(
      ::fgame::CSChangeNameResp::internal_default_instance());
#else
  changename_resp_ = const_cast< ::fgame::CSChangeNameResp*>(&::fgame::CSChangeNameResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gmcmd_req_ = const_cast< ::fgame::CSGMCmdReq*>(
      ::fgame::CSGMCmdReq::internal_default_instance());
#else
  gmcmd_req_ = const_cast< ::fgame::CSGMCmdReq*>(&::fgame::CSGMCmdReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  xinshourecode_resp_ = const_cast< ::fgame::CSXinShouRecodeResp*>(
      ::fgame::CSXinShouRecodeResp::internal_default_instance());
#else
  xinshourecode_resp_ = const_cast< ::fgame::CSXinShouRecodeResp*>(&::fgame::CSXinShouRecodeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvprankingplayerinfo_resp_ = const_cast< ::fgame::CSPvpRankingPlayerInfoResp*>(
      ::fgame::CSPvpRankingPlayerInfoResp::internal_default_instance());
#else
  pvprankingplayerinfo_resp_ = const_cast< ::fgame::CSPvpRankingPlayerInfoResp*>(&::fgame::CSPvpRankingPlayerInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getopenactivity_resp_ = const_cast< ::fgame::CSGetOpenActivityResp*>(
      ::fgame::CSGetOpenActivityResp::internal_default_instance());
#else
  getopenactivity_resp_ = const_cast< ::fgame::CSGetOpenActivityResp*>(&::fgame::CSGetOpenActivityResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getactivitydata_resp_ = const_cast< ::fgame::CSGetActivityDataResp*>(
      ::fgame::CSGetActivityDataResp::internal_default_instance());
#else
  getactivitydata_resp_ = const_cast< ::fgame::CSGetActivityDataResp*>(&::fgame::CSGetActivityDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiveactivityreward_resp_ = const_cast< ::fgame::CSReceiveActivityRewardResp*>(
      ::fgame::CSReceiveActivityRewardResp::internal_default_instance());
#else
  receiveactivityreward_resp_ = const_cast< ::fgame::CSReceiveActivityRewardResp*>(&::fgame::CSReceiveActivityRewardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  missionlist_resp_ = const_cast< ::fgame::CSMissionListResp*>(
      ::fgame::CSMissionListResp::internal_default_instance());
#else
  missionlist_resp_ = const_cast< ::fgame::CSMissionListResp*>(&::fgame::CSMissionListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  missioncomplete_resp_ = const_cast< ::fgame::CSMissionCompleteResp*>(
      ::fgame::CSMissionCompleteResp::internal_default_instance());
#else
  missioncomplete_resp_ = const_cast< ::fgame::CSMissionCompleteResp*>(&::fgame::CSMissionCompleteResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  missionupdate_resp_ = const_cast< ::fgame::CSMissionUpdateResp*>(
      ::fgame::CSMissionUpdateResp::internal_default_instance());
#else
  missionupdate_resp_ = const_cast< ::fgame::CSMissionUpdateResp*>(&::fgame::CSMissionUpdateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getpowerenergyactivity_resp_ = const_cast< ::fgame::CSGetPowerEnergyActivityResp*>(
      ::fgame::CSGetPowerEnergyActivityResp::internal_default_instance());
#else
  getpowerenergyactivity_resp_ = const_cast< ::fgame::CSGetPowerEnergyActivityResp*>(&::fgame::CSGetPowerEnergyActivityResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receivepowerenergy_resp_ = const_cast< ::fgame::CSReceivePowerEnergyResp*>(
      ::fgame::CSReceivePowerEnergyResp::internal_default_instance());
#else
  receivepowerenergy_resp_ = const_cast< ::fgame::CSReceivePowerEnergyResp*>(&::fgame::CSReceivePowerEnergyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getmail_resp_ = const_cast< ::fgame::CSGetMailResp*>(
      ::fgame::CSGetMailResp::internal_default_instance());
#else
  getmail_resp_ = const_cast< ::fgame::CSGetMailResp*>(&::fgame::CSGetMailResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  delmail_resp_ = const_cast< ::fgame::CSDelMailResp*>(
      ::fgame::CSDelMailResp::internal_default_instance());
#else
  delmail_resp_ = const_cast< ::fgame::CSDelMailResp*>(&::fgame::CSDelMailResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  noticemail_req_ = const_cast< ::fgame::CSNoticeMailReq*>(
      ::fgame::CSNoticeMailReq::internal_default_instance());
#else
  noticemail_req_ = const_cast< ::fgame::CSNoticeMailReq*>(&::fgame::CSNoticeMailReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buynewbiegift_resp_ = const_cast< ::fgame::CSBuyNewbieGiftResp*>(
      ::fgame::CSBuyNewbieGiftResp::internal_default_instance());
#else
  buynewbiegift_resp_ = const_cast< ::fgame::CSBuyNewbieGiftResp*>(&::fgame::CSBuyNewbieGiftResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rechargecallback_resp_ = const_cast< ::fgame::CSRechargeCallbackResp*>(
      ::fgame::CSRechargeCallbackResp::internal_default_instance());
#else
  rechargecallback_resp_ = const_cast< ::fgame::CSRechargeCallbackResp*>(&::fgame::CSRechargeCallbackResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendquery_resp_ = const_cast< ::fgame::CSFriendQueryResp*>(
      ::fgame::CSFriendQueryResp::internal_default_instance());
#else
  friendquery_resp_ = const_cast< ::fgame::CSFriendQueryResp*>(&::fgame::CSFriendQueryResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrequestadd_resp_ = const_cast< ::fgame::CSFriendRequestAddResp*>(
      ::fgame::CSFriendRequestAddResp::internal_default_instance());
#else
  friendrequestadd_resp_ = const_cast< ::fgame::CSFriendRequestAddResp*>(&::fgame::CSFriendRequestAddResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendconfirmadd_resp_ = const_cast< ::fgame::CSFriendConfirmAddResp*>(
      ::fgame::CSFriendConfirmAddResp::internal_default_instance());
#else
  friendconfirmadd_resp_ = const_cast< ::fgame::CSFriendConfirmAddResp*>(&::fgame::CSFriendConfirmAddResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendgetinfo_resp_ = const_cast< ::fgame::CSFriendGetInfoResp*>(
      ::fgame::CSFriendGetInfoResp::internal_default_instance());
#else
  friendgetinfo_resp_ = const_cast< ::fgame::CSFriendGetInfoResp*>(&::fgame::CSFriendGetInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrequestremove_resp_ = const_cast< ::fgame::CSFriendRequestRemoveResp*>(
      ::fgame::CSFriendRequestRemoveResp::internal_default_instance());
#else
  friendrequestremove_resp_ = const_cast< ::fgame::CSFriendRequestRemoveResp*>(&::fgame::CSFriendRequestRemoveResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendaddblacklist_resp_ = const_cast< ::fgame::CSFriendAddBlackListResp*>(
      ::fgame::CSFriendAddBlackListResp::internal_default_instance());
#else
  friendaddblacklist_resp_ = const_cast< ::fgame::CSFriendAddBlackListResp*>(&::fgame::CSFriendAddBlackListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendremoveblacklist_resp_ = const_cast< ::fgame::CSFriendRemoveBlackListResp*>(
      ::fgame::CSFriendRemoveBlackListResp::internal_default_instance());
#else
  friendremoveblacklist_resp_ = const_cast< ::fgame::CSFriendRemoveBlackListResp*>(&::fgame::CSFriendRemoveBlackListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpchat_resp_ = const_cast< ::fgame::CSPvpChatResp*>(
      ::fgame::CSPvpChatResp::internal_default_instance());
#else
  pvpchat_resp_ = const_cast< ::fgame::CSPvpChatResp*>(&::fgame::CSPvpChatResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  usegiftcode_resp_ = const_cast< ::fgame::CSUseGiftCodeResp*>(
      ::fgame::CSUseGiftCodeResp::internal_default_instance());
#else
  usegiftcode_resp_ = const_cast< ::fgame::CSUseGiftCodeResp*>(&::fgame::CSUseGiftCodeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryplayerinfo_resp_ = const_cast< ::fgame::CSQueryPlayerInfoResp*>(
      ::fgame::CSQueryPlayerInfoResp::internal_default_instance());
#else
  queryplayerinfo_resp_ = const_cast< ::fgame::CSQueryPlayerInfoResp*>(&::fgame::CSQueryPlayerInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomcreate_resp_ = const_cast< ::fgame::CSPersonalRoomCreateResp*>(
      ::fgame::CSPersonalRoomCreateResp::internal_default_instance());
#else
  personalroomcreate_resp_ = const_cast< ::fgame::CSPersonalRoomCreateResp*>(&::fgame::CSPersonalRoomCreateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomenter_resp_ = const_cast< ::fgame::CSPersonalRoomEnterResp*>(
      ::fgame::CSPersonalRoomEnterResp::internal_default_instance());
#else
  personalroomenter_resp_ = const_cast< ::fgame::CSPersonalRoomEnterResp*>(&::fgame::CSPersonalRoomEnterResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomleave_resp_ = const_cast< ::fgame::CSPersonalRoomLeaveResp*>(
      ::fgame::CSPersonalRoomLeaveResp::internal_default_instance());
#else
  personalroomleave_resp_ = const_cast< ::fgame::CSPersonalRoomLeaveResp*>(&::fgame::CSPersonalRoomLeaveResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomkick_resp_ = const_cast< ::fgame::CSPersonalRoomKickResp*>(
      ::fgame::CSPersonalRoomKickResp::internal_default_instance());
#else
  personalroomkick_resp_ = const_cast< ::fgame::CSPersonalRoomKickResp*>(&::fgame::CSPersonalRoomKickResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroominvite_resp_ = const_cast< ::fgame::CSPersonalRoomInviteResp*>(
      ::fgame::CSPersonalRoomInviteResp::internal_default_instance());
#else
  personalroominvite_resp_ = const_cast< ::fgame::CSPersonalRoomInviteResp*>(&::fgame::CSPersonalRoomInviteResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroombroadcast_resp_ = const_cast< ::fgame::CSPersonalRoomBroadcastResp*>(
      ::fgame::CSPersonalRoomBroadcastResp::internal_default_instance());
#else
  personalroombroadcast_resp_ = const_cast< ::fgame::CSPersonalRoomBroadcastResp*>(&::fgame::CSPersonalRoomBroadcastResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomchat_resp_ = const_cast< ::fgame::CSPersonalRoomChatResp*>(
      ::fgame::CSPersonalRoomChatResp::internal_default_instance());
#else
  personalroomchat_resp_ = const_cast< ::fgame::CSPersonalRoomChatResp*>(&::fgame::CSPersonalRoomChatResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroommode_resp_ = const_cast< ::fgame::CSPersonalRoomModeResp*>(
      ::fgame::CSPersonalRoomModeResp::internal_default_instance());
#else
  personalroommode_resp_ = const_cast< ::fgame::CSPersonalRoomModeResp*>(&::fgame::CSPersonalRoomModeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroombeginfight_resp_ = const_cast< ::fgame::CSPersonalRoomBeginFightResp*>(
      ::fgame::CSPersonalRoomBeginFightResp::internal_default_instance());
#else
  personalroombeginfight_resp_ = const_cast< ::fgame::CSPersonalRoomBeginFightResp*>(&::fgame::CSPersonalRoomBeginFightResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomapplyorrefuseinvite_resp_ = const_cast< ::fgame::CSPersonalRoomApplyOrRefuseInviteResp*>(
      ::fgame::CSPersonalRoomApplyOrRefuseInviteResp::internal_default_instance());
#else
  personalroomapplyorrefuseinvite_resp_ = const_cast< ::fgame::CSPersonalRoomApplyOrRefuseInviteResp*>(&::fgame::CSPersonalRoomApplyOrRefuseInviteResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changeplayericon_resp_ = const_cast< ::fgame::CSChangePlayerIconResp*>(
      ::fgame::CSChangePlayerIconResp::internal_default_instance());
#else
  changeplayericon_resp_ = const_cast< ::fgame::CSChangePlayerIconResp*>(&::fgame::CSChangePlayerIconResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  personalroomcountdown_resp_ = const_cast< ::fgame::CSPersonalRoomCountDownResp*>(
      ::fgame::CSPersonalRoomCountDownResp::internal_default_instance());
#else
  personalroomcountdown_resp_ = const_cast< ::fgame::CSPersonalRoomCountDownResp*>(&::fgame::CSPersonalRoomCountDownResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  syncplayerdata_resp_ = const_cast< ::fgame::CSSyncPlayerDataResp*>(
      ::fgame::CSSyncPlayerDataResp::internal_default_instance());
#else
  syncplayerdata_resp_ = const_cast< ::fgame::CSSyncPlayerDataResp*>(&::fgame::CSSyncPlayerDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getplayerdata_resp_ = const_cast< ::fgame::CSGetPlayerDataResp*>(
      ::fgame::CSGetPlayerDataResp::internal_default_instance());
#else
  getplayerdata_resp_ = const_cast< ::fgame::CSGetPlayerDataResp*>(&::fgame::CSGetPlayerDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  appearcreep_resp_ = const_cast< ::fgame::CSPvpAppearCreepResp*>(
      ::fgame::CSPvpAppearCreepResp::internal_default_instance());
#else
  appearcreep_resp_ = const_cast< ::fgame::CSPvpAppearCreepResp*>(&::fgame::CSPvpAppearCreepResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  savecheckptdata_resp_ = const_cast< ::fgame::CSSaveCheckPtDataResp*>(
      ::fgame::CSSaveCheckPtDataResp::internal_default_instance());
#else
  savecheckptdata_resp_ = const_cast< ::fgame::CSSaveCheckPtDataResp*>(&::fgame::CSSaveCheckPtDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getcheckptdata_resp_ = const_cast< ::fgame::CSGetCheckPtDataResp*>(
      ::fgame::CSGetCheckPtDataResp::internal_default_instance());
#else
  getcheckptdata_resp_ = const_cast< ::fgame::CSGetCheckPtDataResp*>(&::fgame::CSGetCheckPtDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setnewbie_resp_ = const_cast< ::fgame::CSSetNewBieResp*>(
      ::fgame::CSSetNewBieResp::internal_default_instance());
#else
  setnewbie_resp_ = const_cast< ::fgame::CSSetNewBieResp*>(&::fgame::CSSetNewBieResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getnewbielist_resp_ = const_cast< ::fgame::CSGetNewBieListResp*>(
      ::fgame::CSGetNewBieListResp::internal_default_instance());
#else
  getnewbielist_resp_ = const_cast< ::fgame::CSGetNewBieListResp*>(&::fgame::CSGetNewBieListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  propertyupdate_resp_ = const_cast< ::fgame::CSPropertyUpdateResp*>(
      ::fgame::CSPropertyUpdateResp::internal_default_instance());
#else
  propertyupdate_resp_ = const_cast< ::fgame::CSPropertyUpdateResp*>(&::fgame::CSPropertyUpdateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  enterpoint_resp_ = const_cast< ::fgame::CSEnterPointResp*>(
      ::fgame::CSEnterPointResp::internal_default_instance());
#else
  enterpoint_resp_ = const_cast< ::fgame::CSEnterPointResp*>(&::fgame::CSEnterPointResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shopguide_resp_ = const_cast< ::fgame::CSShopGuideResp*>(
      ::fgame::CSShopGuideResp::internal_default_instance());
#else
  shopguide_resp_ = const_cast< ::fgame::CSShopGuideResp*>(&::fgame::CSShopGuideResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitylist_resp_ = const_cast< ::fgame::CSActivityListResp*>(
      ::fgame::CSActivityListResp::internal_default_instance());
#else
  activitylist_resp_ = const_cast< ::fgame::CSActivityListResp*>(&::fgame::CSActivityListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activityupdate_resp_ = const_cast< ::fgame::CSActivityUpdateResp*>(
      ::fgame::CSActivityUpdateResp::internal_default_instance());
#else
  activityupdate_resp_ = const_cast< ::fgame::CSActivityUpdateResp*>(&::fgame::CSActivityUpdateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitysubmit_resp_ = const_cast< ::fgame::CSActivitySubmitResp*>(
      ::fgame::CSActivitySubmitResp::internal_default_instance());
#else
  activitysubmit_resp_ = const_cast< ::fgame::CSActivitySubmitResp*>(&::fgame::CSActivitySubmitResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  settitle_resp_ = const_cast< ::fgame::CSSetTitleResp*>(
      ::fgame::CSSetTitleResp::internal_default_instance());
#else
  settitle_resp_ = const_cast< ::fgame::CSSetTitleResp*>(&::fgame::CSSetTitleResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shopbuy_resp_ = const_cast< ::fgame::CSShopBuyResp*>(
      ::fgame::CSShopBuyResp::internal_default_instance());
#else
  shopbuy_resp_ = const_cast< ::fgame::CSShopBuyResp*>(&::fgame::CSShopBuyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  kickplayer_req_ = const_cast< ::fgame::CSKickPlayerReq*>(
      ::fgame::CSKickPlayerReq::internal_default_instance());
#else
  kickplayer_req_ = const_cast< ::fgame::CSKickPlayerReq*>(&::fgame::CSKickPlayerReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  exchangeitem_resp_ = const_cast< ::fgame::CSExchangeItemResp*>(
      ::fgame::CSExchangeItemResp::internal_default_instance());
#else
  exchangeitem_resp_ = const_cast< ::fgame::CSExchangeItemResp*>(&::fgame::CSExchangeItemResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitycrazydtls_resp_ = const_cast< ::fgame::CSActivityCrazyDtlsResp*>(
      ::fgame::CSActivityCrazyDtlsResp::internal_default_instance());
#else
  activitycrazydtls_resp_ = const_cast< ::fgame::CSActivityCrazyDtlsResp*>(&::fgame::CSActivityCrazyDtlsResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitycrazyusage_resp_ = const_cast< ::fgame::CSActivityCrazyUsageResp*>(
      ::fgame::CSActivityCrazyUsageResp::internal_default_instance());
#else
  activitycrazyusage_resp_ = const_cast< ::fgame::CSActivityCrazyUsageResp*>(&::fgame::CSActivityCrazyUsageResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitycrazyusable_resp_ = const_cast< ::fgame::CSActivityCrazyUsableResp*>(
      ::fgame::CSActivityCrazyUsableResp::internal_default_instance());
#else
  activitycrazyusable_resp_ = const_cast< ::fgame::CSActivityCrazyUsableResp*>(&::fgame::CSActivityCrazyUsableResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shoplist_resp_ = const_cast< ::fgame::CSShopListResp*>(
      ::fgame::CSShopListResp::internal_default_instance());
#else
  shoplist_resp_ = const_cast< ::fgame::CSShopListResp*>(&::fgame::CSShopListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpobserver_resp_ = const_cast< ::fgame::CSPvpObserverResp*>(
      ::fgame::CSPvpObserverResp::internal_default_instance());
#else
  pvpobserver_resp_ = const_cast< ::fgame::CSPvpObserverResp*>(&::fgame::CSPvpObserverResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setnewbieoss_resp_ = const_cast< ::fgame::CSSetNewBieOssResp*>(
      ::fgame::CSSetNewBieOssResp::internal_default_instance());
#else
  setnewbieoss_resp_ = const_cast< ::fgame::CSSetNewBieOssResp*>(&::fgame::CSSetNewBieOssResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updateachievement_resp_ = const_cast< ::fgame::CSUpdateAchievementResp*>(
      ::fgame::CSUpdateAchievementResp::internal_default_instance());
#else
  updateachievement_resp_ = const_cast< ::fgame::CSUpdateAchievementResp*>(&::fgame::CSUpdateAchievementResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpresult_resp_ = const_cast< ::fgame::CSPvpResultResp*>(
      ::fgame::CSPvpResultResp::internal_default_instance());
#else
  pvpresult_resp_ = const_cast< ::fgame::CSPvpResultResp*>(&::fgame::CSPvpResultResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpselfranklist_resp_ = const_cast< ::fgame::CSPvpSelfRankListResp*>(
      ::fgame::CSPvpSelfRankListResp::internal_default_instance());
#else
  pvpselfranklist_resp_ = const_cast< ::fgame::CSPvpSelfRankListResp*>(&::fgame::CSPvpSelfRankListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwgetmatchinfo_resp_ = const_cast< ::fgame::CSGWGetMatchInfoResp*>(
      ::fgame::CSGWGetMatchInfoResp::internal_default_instance());
#else
  gwgetmatchinfo_resp_ = const_cast< ::fgame::CSGWGetMatchInfoResp*>(&::fgame::CSGWGetMatchInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwgetrank_resp_ = const_cast< ::fgame::CSGWGetRankResp*>(
      ::fgame::CSGWGetRankResp::internal_default_instance());
#else
  gwgetrank_resp_ = const_cast< ::fgame::CSGWGetRankResp*>(&::fgame::CSGWGetRankResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwmatch_resp_ = const_cast< ::fgame::CSGWMatchResp*>(
      ::fgame::CSGWMatchResp::internal_default_instance());
#else
  gwmatch_resp_ = const_cast< ::fgame::CSGWMatchResp*>(&::fgame::CSGWMatchResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwmatchstop_resp_ = const_cast< ::fgame::CSGWMatchStopResp*>(
      ::fgame::CSGWMatchStopResp::internal_default_instance());
#else
  gwmatchstop_resp_ = const_cast< ::fgame::CSGWMatchStopResp*>(&::fgame::CSGWMatchStopResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gwbuyenergy_resp_ = const_cast< ::fgame::CSGWBuyEnergyResp*>(
      ::fgame::CSGWBuyEnergyResp::internal_default_instance());
#else
  gwbuyenergy_resp_ = const_cast< ::fgame::CSGWBuyEnergyResp*>(&::fgame::CSGWBuyEnergyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requestpkey_resp_ = const_cast< ::fgame::CSRequestPKeyResp*>(
      ::fgame::CSRequestPKeyResp::internal_default_instance());
#else
  requestpkey_resp_ = const_cast< ::fgame::CSRequestPKeyResp*>(&::fgame::CSRequestPKeyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendclientkey_resp_ = const_cast< ::fgame::CSSendClientKeyResp*>(
      ::fgame::CSSendClientKeyResp::internal_default_instance());
#else
  sendclientkey_resp_ = const_cast< ::fgame::CSSendClientKeyResp*>(&::fgame::CSSendClientKeyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updateexchangelist_resp_ = const_cast< ::fgame::CSUpdateExchangeListResp*>(
      ::fgame::CSUpdateExchangeListResp::internal_default_instance());
#else
  updateexchangelist_resp_ = const_cast< ::fgame::CSUpdateExchangeListResp*>(&::fgame::CSUpdateExchangeListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsrequestinfo_resp_ = const_cast< ::fgame::CSGlyphsRequestInfoResp*>(
      ::fgame::CSGlyphsRequestInfoResp::internal_default_instance());
#else
  glyphsrequestinfo_resp_ = const_cast< ::fgame::CSGlyphsRequestInfoResp*>(&::fgame::CSGlyphsRequestInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsrequestbasicinfo_resp_ = const_cast< ::fgame::CSGlyphsRequestBasicInfoResp*>(
      ::fgame::CSGlyphsRequestBasicInfoResp::internal_default_instance());
#else
  glyphsrequestbasicinfo_resp_ = const_cast< ::fgame::CSGlyphsRequestBasicInfoResp*>(&::fgame::CSGlyphsRequestBasicInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsactive_resp_ = const_cast< ::fgame::CSGlyphsActiveResp*>(
      ::fgame::CSGlyphsActiveResp::internal_default_instance());
#else
  glyphsactive_resp_ = const_cast< ::fgame::CSGlyphsActiveResp*>(&::fgame::CSGlyphsActiveResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphsupgrade_resp_ = const_cast< ::fgame::CSGlyphsUpgradeResp*>(
      ::fgame::CSGlyphsUpgradeResp::internal_default_instance());
#else
  glyphsupgrade_resp_ = const_cast< ::fgame::CSGlyphsUpgradeResp*>(&::fgame::CSGlyphsUpgradeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphspvpinfo_resp_ = const_cast< ::fgame::CSGlyphsPvpInfoResp*>(
      ::fgame::CSGlyphsPvpInfoResp::internal_default_instance());
#else
  glyphspvpinfo_resp_ = const_cast< ::fgame::CSGlyphsPvpInfoResp*>(&::fgame::CSGlyphsPvpInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyvip_resp_ = const_cast< ::fgame::CSBuyVipResp*>(
      ::fgame::CSBuyVipResp::internal_default_instance());
#else
  buyvip_resp_ = const_cast< ::fgame::CSBuyVipResp*>(&::fgame::CSBuyVipResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  glyphguide_resp_ = const_cast< ::fgame::CSGlyphGuideResp*>(
      ::fgame::CSGlyphGuideResp::internal_default_instance());
#else
  glyphguide_resp_ = const_cast< ::fgame::CSGlyphGuideResp*>(&::fgame::CSGlyphGuideResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyeargetinfo_resp_ = const_cast< ::fgame::CSNewYearGetInfoResp*>(
      ::fgame::CSNewYearGetInfoResp::internal_default_instance());
#else
  newyeargetinfo_resp_ = const_cast< ::fgame::CSNewYearGetInfoResp*>(&::fgame::CSNewYearGetInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyearreward_resp_ = const_cast< ::fgame::CSNewYearRewardResp*>(
      ::fgame::CSNewYearRewardResp::internal_default_instance());
#else
  newyearreward_resp_ = const_cast< ::fgame::CSNewYearRewardResp*>(&::fgame::CSNewYearRewardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  openchest_resp_ = const_cast< ::fgame::CSOpenChestResp*>(
      ::fgame::CSOpenChestResp::internal_default_instance());
#else
  openchest_resp_ = const_cast< ::fgame::CSOpenChestResp*>(&::fgame::CSOpenChestResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasdecorate_resp_ = const_cast< ::fgame::CSChristmasDecorateResp*>(
      ::fgame::CSChristmasDecorateResp::internal_default_instance());
#else
  christmasdecorate_resp_ = const_cast< ::fgame::CSChristmasDecorateResp*>(&::fgame::CSChristmasDecorateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmastakebonus_resp_ = const_cast< ::fgame::CSChristmasTakeBonusResp*>(
      ::fgame::CSChristmasTakeBonusResp::internal_default_instance());
#else
  christmastakebonus_resp_ = const_cast< ::fgame::CSChristmasTakeBonusResp*>(&::fgame::CSChristmasTakeBonusResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasgetdate_resp_ = const_cast< ::fgame::CSChristmasGetDataResp*>(
      ::fgame::CSChristmasGetDataResp::internal_default_instance());
#else
  christmasgetdate_resp_ = const_cast< ::fgame::CSChristmasGetDataResp*>(&::fgame::CSChristmasGetDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  christmasgetrank_resp_ = const_cast< ::fgame::CSChristmasGetRankResp*>(
      ::fgame::CSChristmasGetRankResp::internal_default_instance());
#else
  christmasgetrank_resp_ = const_cast< ::fgame::CSChristmasGetRankResp*>(&::fgame::CSChristmasGetRankResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  retrivecheckptreward_resp_ = const_cast< ::fgame::CSRetriveCheckPtRewardResp*>(
      ::fgame::CSRetriveCheckPtRewardResp::internal_default_instance());
#else
  retrivecheckptreward_resp_ = const_cast< ::fgame::CSRetriveCheckPtRewardResp*>(&::fgame::CSRetriveCheckPtRewardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newyearcmp_resp_ = const_cast< ::fgame::CSNewYearCmpResp*>(
      ::fgame::CSNewYearCmpResp::internal_default_instance());
#else
  newyearcmp_resp_ = const_cast< ::fgame::CSNewYearCmpResp*>(&::fgame::CSNewYearCmpResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notifyglyphsupdate_resp_ = const_cast< ::fgame::CSNotifyGlyphsUpdateResp*>(
      ::fgame::CSNotifyGlyphsUpdateResp::internal_default_instance());
#else
  notifyglyphsupdate_resp_ = const_cast< ::fgame::CSNotifyGlyphsUpdateResp*>(&::fgame::CSNotifyGlyphsUpdateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recoveritem_resp_ = const_cast< ::fgame::CSPvpRecoverItemResp*>(
      ::fgame::CSPvpRecoverItemResp::internal_default_instance());
#else
  recoveritem_resp_ = const_cast< ::fgame::CSPvpRecoverItemResp*>(&::fgame::CSPvpRecoverItemResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setsignature_resp_ = const_cast< ::fgame::CSSetSignatureResp*>(
      ::fgame::CSSetSignatureResp::internal_default_instance());
#else
  setsignature_resp_ = const_cast< ::fgame::CSSetSignatureResp*>(&::fgame::CSSetSignatureResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setextrainfovisible_resp_ = const_cast< ::fgame::CSSetExtraInfoVisibleResp*>(
      ::fgame::CSSetExtraInfoVisibleResp::internal_default_instance());
#else
  setextrainfovisible_resp_ = const_cast< ::fgame::CSSetExtraInfoVisibleResp*>(&::fgame::CSSetExtraInfoVisibleResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getextrainfo_resp_ = const_cast< ::fgame::CSGetExtraInfoResp*>(
      ::fgame::CSGetExtraInfoResp::internal_default_instance());
#else
  getextrainfo_resp_ = const_cast< ::fgame::CSGetExtraInfoResp*>(&::fgame::CSGetExtraInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stopkickplayer_req_ = const_cast< ::fgame::CSStopKickPlayerReq*>(
      ::fgame::CSStopKickPlayerReq::internal_default_instance());
#else
  stopkickplayer_req_ = const_cast< ::fgame::CSStopKickPlayerReq*>(&::fgame::CSStopKickPlayerReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  valentinedata_resp_ = const_cast< ::fgame::CSValentineDataResp*>(
      ::fgame::CSValentineDataResp::internal_default_instance());
#else
  valentinedata_resp_ = const_cast< ::fgame::CSValentineDataResp*>(&::fgame::CSValentineDataResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  valentineexchange_resp_ = const_cast< ::fgame::CSValentineExchangeResp*>(
      ::fgame::CSValentineExchangeResp::internal_default_instance());
#else
  valentineexchange_resp_ = const_cast< ::fgame::CSValentineExchangeResp*>(&::fgame::CSValentineExchangeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsgetinfo_resp_ = const_cast< ::fgame::CSRedPacketsGetInfoResp*>(
      ::fgame::CSRedPacketsGetInfoResp::internal_default_instance());
#else
  redpacketsgetinfo_resp_ = const_cast< ::fgame::CSRedPacketsGetInfoResp*>(&::fgame::CSRedPacketsGetInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsgreb_resp_ = const_cast< ::fgame::CSRedPacketsGrebResp*>(
      ::fgame::CSRedPacketsGrebResp::internal_default_instance());
#else
  redpacketsgreb_resp_ = const_cast< ::fgame::CSRedPacketsGrebResp*>(&::fgame::CSRedPacketsGrebResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  redpacketsopened_resp_ = const_cast< ::fgame::CSRedPacketsOpenedResp*>(
      ::fgame::CSRedPacketsOpenedResp::internal_default_instance());
#else
  redpacketsopened_resp_ = const_cast< ::fgame::CSRedPacketsOpenedResp*>(&::fgame::CSRedPacketsOpenedResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chapterunlock_resp_ = const_cast< ::fgame::CSChapterUnlockResp*>(
      ::fgame::CSChapterUnlockResp::internal_default_instance());
#else
  chapterunlock_resp_ = const_cast< ::fgame::CSChapterUnlockResp*>(&::fgame::CSChapterUnlockResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getchest_resp_ = const_cast< ::fgame::CSGetChestResp*>(
      ::fgame::CSGetChestResp::internal_default_instance());
#else
  getchest_resp_ = const_cast< ::fgame::CSGetChestResp*>(&::fgame::CSGetChestResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvenotify_resp_ = const_cast< ::fgame::CSPveNotifyResp*>(
      ::fgame::CSPveNotifyResp::internal_default_instance());
#else
  pvenotify_resp_ = const_cast< ::fgame::CSPveNotifyResp*>(&::fgame::CSPveNotifyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpgetaward_resp_ = const_cast< ::fgame::CSPvpGetAwardResp*>(
      ::fgame::CSPvpGetAwardResp::internal_default_instance());
#else
  pvpgetaward_resp_ = const_cast< ::fgame::CSPvpGetAwardResp*>(&::fgame::CSPvpGetAwardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailytaskstatus_resp_ = const_cast< ::fgame::CSDailyTaskStatusResp*>(
      ::fgame::CSDailyTaskStatusResp::internal_default_instance());
#else
  dailytaskstatus_resp_ = const_cast< ::fgame::CSDailyTaskStatusResp*>(&::fgame::CSDailyTaskStatusResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requestdailytask_resp_ = const_cast< ::fgame::CSRequestDailyTaskResp*>(
      ::fgame::CSRequestDailyTaskResp::internal_default_instance());
#else
  requestdailytask_resp_ = const_cast< ::fgame::CSRequestDailyTaskResp*>(&::fgame::CSRequestDailyTaskResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changedailytask_resp_ = const_cast< ::fgame::CSChangeDailyTaskResp*>(
      ::fgame::CSChangeDailyTaskResp::internal_default_instance());
#else
  changedailytask_resp_ = const_cast< ::fgame::CSChangeDailyTaskResp*>(&::fgame::CSChangeDailyTaskResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opendailytaskaward_resp_ = const_cast< ::fgame::CSOpenDailyTaskAwardResp*>(
      ::fgame::CSOpenDailyTaskAwardResp::internal_default_instance());
#else
  opendailytaskaward_resp_ = const_cast< ::fgame::CSOpenDailyTaskAwardResp*>(&::fgame::CSOpenDailyTaskAwardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updatedailytaskprogress_resp_ = const_cast< ::fgame::CSUpdateDailyTaskProgressResp*>(
      ::fgame::CSUpdateDailyTaskProgressResp::internal_default_instance());
#else
  updatedailytaskprogress_resp_ = const_cast< ::fgame::CSUpdateDailyTaskProgressResp*>(&::fgame::CSUpdateDailyTaskProgressResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newdailytask_resp_ = const_cast< ::fgame::CSNewDailyTaskResp*>(
      ::fgame::CSNewDailyTaskResp::internal_default_instance());
#else
  newdailytask_resp_ = const_cast< ::fgame::CSNewDailyTaskResp*>(&::fgame::CSNewDailyTaskResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvecheckaward_resp_ = const_cast< ::fgame::CSPveCheckAwardResp*>(
      ::fgame::CSPveCheckAwardResp::internal_default_instance());
#else
  pvecheckaward_resp_ = const_cast< ::fgame::CSPveCheckAwardResp*>(&::fgame::CSPveCheckAwardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankweekrewardinfo_resp_ = const_cast< ::fgame::CSRankWeekRewardInfoResp*>(
      ::fgame::CSRankWeekRewardInfoResp::internal_default_instance());
#else
  rankweekrewardinfo_resp_ = const_cast< ::fgame::CSRankWeekRewardInfoResp*>(&::fgame::CSRankWeekRewardInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankweekrewardreward_resp_ = const_cast< ::fgame::CSRankWeekRewardRewardResp*>(
      ::fgame::CSRankWeekRewardRewardResp::internal_default_instance());
#else
  rankweekrewardreward_resp_ = const_cast< ::fgame::CSRankWeekRewardRewardResp*>(&::fgame::CSRankWeekRewardRewardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sharereward_resp_ = const_cast< ::fgame::CSShareRewardGetResq*>(
      ::fgame::CSShareRewardGetResq::internal_default_instance());
#else
  sharereward_resp_ = const_cast< ::fgame::CSShareRewardGetResq*>(&::fgame::CSShareRewardGetResq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getsevengoallist_resp_ = const_cast< ::fgame::CSGetSevenGoalListResp*>(
      ::fgame::CSGetSevenGoalListResp::internal_default_instance());
#else
  getsevengoallist_resp_ = const_cast< ::fgame::CSGetSevenGoalListResp*>(&::fgame::CSGetSevenGoalListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  retrivesevengoal_resp_ = const_cast< ::fgame::CSRetriveSevenGoalResp*>(
      ::fgame::CSRetriveSevenGoalResp::internal_default_instance());
#else
  retrivesevengoal_resp_ = const_cast< ::fgame::CSRetriveSevenGoalResp*>(&::fgame::CSRetriveSevenGoalResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  noticesevengoal_resp_ = const_cast< ::fgame::CSNoticeSevenGoalResp*>(
      ::fgame::CSNoticeSevenGoalResp::internal_default_instance());
#else
  noticesevengoal_resp_ = const_cast< ::fgame::CSNoticeSevenGoalResp*>(&::fgame::CSNoticeSevenGoalResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pverank_resp_ = const_cast< ::fgame::CSPveRankResp*>(
      ::fgame::CSPveRankResp::internal_default_instance());
#else
  pverank_resp_ = const_cast< ::fgame::CSPveRankResp*>(&::fgame::CSPveRankResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  toprank_resp_ = const_cast< ::fgame::CSTopRankResp*>(
      ::fgame::CSTopRankResp::internal_default_instance());
#else
  toprank_resp_ = const_cast< ::fgame::CSTopRankResp*>(&::fgame::CSTopRankResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  topranktime_resp_ = const_cast< ::fgame::CSTopRankTimeResp*>(
      ::fgame::CSTopRankTimeResp::internal_default_instance());
#else
  topranktime_resp_ = const_cast< ::fgame::CSTopRankTimeResp*>(&::fgame::CSTopRankTimeResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updatetaskstatus_resp_ = const_cast< ::fgame::CSUpdateTaskStatusResp*>(
      ::fgame::CSUpdateTaskStatusResp::internal_default_instance());
#else
  updatetaskstatus_resp_ = const_cast< ::fgame::CSUpdateTaskStatusResp*>(&::fgame::CSUpdateTaskStatusResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  assyncinfo_resp_ = const_cast< ::fgame::CSAsSyncInfoResp*>(
      ::fgame::CSAsSyncInfoResp::internal_default_instance());
#else
  assyncinfo_resp_ = const_cast< ::fgame::CSAsSyncInfoResp*>(&::fgame::CSAsSyncInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asnewadd_resp_ = const_cast< ::fgame::CSAsNewAddResp*>(
      ::fgame::CSAsNewAddResp::internal_default_instance());
#else
  asnewadd_resp_ = const_cast< ::fgame::CSAsNewAddResp*>(&::fgame::CSAsNewAddResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asoperate_resp_ = const_cast< ::fgame::CSAsOperateResp*>(
      ::fgame::CSAsOperateResp::internal_default_instance());
#else
  asoperate_resp_ = const_cast< ::fgame::CSAsOperateResp*>(&::fgame::CSAsOperateResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asusecard_resp_ = const_cast< ::fgame::CSAsUseCardResp*>(
      ::fgame::CSAsUseCardResp::internal_default_instance());
#else
  asusecard_resp_ = const_cast< ::fgame::CSAsUseCardResp*>(&::fgame::CSAsUseCardResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpuseskill_resp_ = const_cast< ::fgame::CSPvpUseSkillResp*>(
      ::fgame::CSPvpUseSkillResp::internal_default_instance());
#else
  pvpuseskill_resp_ = const_cast< ::fgame::CSPvpUseSkillResp*>(&::fgame::CSPvpUseSkillResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pvpassistantinfo_resp_ = const_cast< ::fgame::CSPvpAssistantInfoResp*>(
      ::fgame::CSPvpAssistantInfoResp::internal_default_instance());
#else
  pvpassistantinfo_resp_ = const_cast< ::fgame::CSPvpAssistantInfoResp*>(&::fgame::CSPvpAssistantInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  instituteinfo_resp_ = const_cast< ::fgame::CSInstituteInfoResp*>(
      ::fgame::CSInstituteInfoResp::internal_default_instance());
#else
  instituteinfo_resp_ = const_cast< ::fgame::CSInstituteInfoResp*>(&::fgame::CSInstituteInfoResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  institutebuy_resp_ = const_cast< ::fgame::CSInstituteBuyResp*>(
      ::fgame::CSInstituteBuyResp::internal_default_instance());
#else
  institutebuy_resp_ = const_cast< ::fgame::CSInstituteBuyResp*>(&::fgame::CSInstituteBuyResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactadd_resp_ = const_cast< ::fgame::CSOpActAddResp*>(
      ::fgame::CSOpActAddResp::internal_default_instance());
#else
  opactadd_resp_ = const_cast< ::fgame::CSOpActAddResp*>(&::fgame::CSOpActAddResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactstatechanged_resp_ = const_cast< ::fgame::CSOpActStateChangedResp*>(
      ::fgame::CSOpActStateChangedResp::internal_default_instance());
#else
  opactstatechanged_resp_ = const_cast< ::fgame::CSOpActStateChangedResp*>(&::fgame::CSOpActStateChangedResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactselfdatachanged_resp_ = const_cast< ::fgame::CSActSelfDataChangedResp*>(
      ::fgame::CSActSelfDataChangedResp::internal_default_instance());
#else
  opactselfdatachanged_resp_ = const_cast< ::fgame::CSActSelfDataChangedResp*>(&::fgame::CSActSelfDataChangedResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactglobaldatachanged_resp_ = const_cast< ::fgame::CSActGlobalDataChangedResp*>(
      ::fgame::CSActGlobalDataChangedResp::internal_default_instance());
#else
  opactglobaldatachanged_resp_ = const_cast< ::fgame::CSActGlobalDataChangedResp*>(&::fgame::CSActGlobalDataChangedResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactconfiglist_resp_ = const_cast< ::fgame::CSOpActConfigListResp*>(
      ::fgame::CSOpActConfigListResp::internal_default_instance());
#else
  opactconfiglist_resp_ = const_cast< ::fgame::CSOpActConfigListResp*>(&::fgame::CSOpActConfigListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactselfdatalist_resp_ = const_cast< ::fgame::CSOpActSelfDataListResp*>(
      ::fgame::CSOpActSelfDataListResp::internal_default_instance());
#else
  opactselfdatalist_resp_ = const_cast< ::fgame::CSOpActSelfDataListResp*>(&::fgame::CSOpActSelfDataListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactglobaldatalist_resp_ = const_cast< ::fgame::CSOpActGlobalDataListResp*>(
      ::fgame::CSOpActGlobalDataListResp::internal_default_instance());
#else
  opactglobaldatalist_resp_ = const_cast< ::fgame::CSOpActGlobalDataListResp*>(&::fgame::CSOpActGlobalDataListResp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opactdemotake_resp_ = const_cast< ::fgame::CSOpActDemoTakeResp*>(
      ::fgame::CSOpActDemoTakeResp::internal_default_instance());
#else
  opactdemotake_resp_ = const_cast< ::fgame::CSOpActDemoTakeResp*>(&::fgame::CSOpActDemoTakeResp::default_instance());
#endif
}

S2ClientMsg::S2ClientMsg(const S2ClientMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.S2ClientMsg)
}

void S2ClientMsg::SharedCtor() {
  _cached_size_ = 0;
  error_msg_ = NULL;
  login_resp_ = NULL;
  reg_resp_ = NULL;
  heartbeat_resp_ = NULL;
  match_resp_ = NULL;
  start_resp_ = NULL;
  fight_resp_ = NULL;
  end_resp_ = NULL;
  map_resp_ = NULL;
  upgrade_resp_ = NULL;
  ping_resp_ = NULL;
  buyitem_resp_ = NULL;
  useitem_resp_ = NULL;
  leave_resp_ = NULL;
  getachievement_resp_ = NULL;
  receiveachievement_resp_ = NULL;
  receiveachievementreward_resp_ = NULL;
  enterserver_resp_ = NULL;
  canenter_req_ = NULL;
  queue_req_ = NULL;
  directenter_resp_ = NULL;
  pvprankinggetlist_resp_ = NULL;
  streakwinvalue_resp_ = NULL;
  streakwinget_resp_ = NULL;
  openbigstage_resp_ = NULL;
  pvpuseitem_resp_ = NULL;
  sevendaysignlist_resp_ = NULL;
  sevendaysign_resp_ = NULL;
  getserver_resp_ = NULL;
  sycplayerinfo_resp_ = NULL;
  notice_req_ = NULL;
  stopmatch_resp_ = NULL;
  changename_resp_ = NULL;
  gmcmd_req_ = NULL;
  xinshourecode_resp_ = NULL;
  pvprankingplayerinfo_resp_ = NULL;
  getopenactivity_resp_ = NULL;
  getactivitydata_resp_ = NULL;
  receiveactivityreward_resp_ = NULL;
  missionlist_resp_ = NULL;
  missioncomplete_resp_ = NULL;
  missionupdate_resp_ = NULL;
  getpowerenergyactivity_resp_ = NULL;
  receivepowerenergy_resp_ = NULL;
  getmail_resp_ = NULL;
  delmail_resp_ = NULL;
  noticemail_req_ = NULL;
  buynewbiegift_resp_ = NULL;
  rechargecallback_resp_ = NULL;
  friendquery_resp_ = NULL;
  friendrequestadd_resp_ = NULL;
  friendconfirmadd_resp_ = NULL;
  friendgetinfo_resp_ = NULL;
  friendrequestremove_resp_ = NULL;
  friendaddblacklist_resp_ = NULL;
  friendremoveblacklist_resp_ = NULL;
  pvpchat_resp_ = NULL;
  usegiftcode_resp_ = NULL;
  queryplayerinfo_resp_ = NULL;
  personalroomcreate_resp_ = NULL;
  personalroomenter_resp_ = NULL;
  personalroomleave_resp_ = NULL;
  personalroomkick_resp_ = NULL;
  personalroominvite_resp_ = NULL;
  personalroombroadcast_resp_ = NULL;
  personalroomchat_resp_ = NULL;
  personalroommode_resp_ = NULL;
  personalroombeginfight_resp_ = NULL;
  personalroomapplyorrefuseinvite_resp_ = NULL;
  changeplayericon_resp_ = NULL;
  personalroomcountdown_resp_ = NULL;
  syncplayerdata_resp_ = NULL;
  getplayerdata_resp_ = NULL;
  appearcreep_resp_ = NULL;
  savecheckptdata_resp_ = NULL;
  getcheckptdata_resp_ = NULL;
  setnewbie_resp_ = NULL;
  getnewbielist_resp_ = NULL;
  propertyupdate_resp_ = NULL;
  enterpoint_resp_ = NULL;
  shopguide_resp_ = NULL;
  activitylist_resp_ = NULL;
  activityupdate_resp_ = NULL;
  activitysubmit_resp_ = NULL;
  settitle_resp_ = NULL;
  shopbuy_resp_ = NULL;
  kickplayer_req_ = NULL;
  exchangeitem_resp_ = NULL;
  activitycrazydtls_resp_ = NULL;
  activitycrazyusage_resp_ = NULL;
  activitycrazyusable_resp_ = NULL;
  shoplist_resp_ = NULL;
  pvpobserver_resp_ = NULL;
  setnewbieoss_resp_ = NULL;
  updateachievement_resp_ = NULL;
  pvpresult_resp_ = NULL;
  pvpselfranklist_resp_ = NULL;
  gwgetmatchinfo_resp_ = NULL;
  gwgetrank_resp_ = NULL;
  gwmatch_resp_ = NULL;
  gwmatchstop_resp_ = NULL;
  gwbuyenergy_resp_ = NULL;
  requestpkey_resp_ = NULL;
  sendclientkey_resp_ = NULL;
  updateexchangelist_resp_ = NULL;
  glyphsrequestinfo_resp_ = NULL;
  glyphsrequestbasicinfo_resp_ = NULL;
  glyphsactive_resp_ = NULL;
  glyphsupgrade_resp_ = NULL;
  glyphspvpinfo_resp_ = NULL;
  buyvip_resp_ = NULL;
  glyphguide_resp_ = NULL;
  newyeargetinfo_resp_ = NULL;
  newyearreward_resp_ = NULL;
  openchest_resp_ = NULL;
  christmasdecorate_resp_ = NULL;
  christmastakebonus_resp_ = NULL;
  christmasgetdate_resp_ = NULL;
  christmasgetrank_resp_ = NULL;
  retrivecheckptreward_resp_ = NULL;
  newyearcmp_resp_ = NULL;
  notifyglyphsupdate_resp_ = NULL;
  recoveritem_resp_ = NULL;
  setsignature_resp_ = NULL;
  setextrainfovisible_resp_ = NULL;
  getextrainfo_resp_ = NULL;
  stopkickplayer_req_ = NULL;
  valentinedata_resp_ = NULL;
  valentineexchange_resp_ = NULL;
  redpacketsgetinfo_resp_ = NULL;
  redpacketsgreb_resp_ = NULL;
  redpacketsopened_resp_ = NULL;
  chapterunlock_resp_ = NULL;
  getchest_resp_ = NULL;
  pvenotify_resp_ = NULL;
  pvpgetaward_resp_ = NULL;
  dailytaskstatus_resp_ = NULL;
  requestdailytask_resp_ = NULL;
  changedailytask_resp_ = NULL;
  opendailytaskaward_resp_ = NULL;
  updatedailytaskprogress_resp_ = NULL;
  newdailytask_resp_ = NULL;
  pvecheckaward_resp_ = NULL;
  rankweekrewardinfo_resp_ = NULL;
  rankweekrewardreward_resp_ = NULL;
  sharereward_resp_ = NULL;
  getsevengoallist_resp_ = NULL;
  retrivesevengoal_resp_ = NULL;
  noticesevengoal_resp_ = NULL;
  pverank_resp_ = NULL;
  toprank_resp_ = NULL;
  topranktime_resp_ = NULL;
  updatetaskstatus_resp_ = NULL;
  assyncinfo_resp_ = NULL;
  asnewadd_resp_ = NULL;
  asoperate_resp_ = NULL;
  asusecard_resp_ = NULL;
  pvpuseskill_resp_ = NULL;
  pvpassistantinfo_resp_ = NULL;
  instituteinfo_resp_ = NULL;
  institutebuy_resp_ = NULL;
  opactadd_resp_ = NULL;
  opactstatechanged_resp_ = NULL;
  opactselfdatachanged_resp_ = NULL;
  opactglobaldatachanged_resp_ = NULL;
  opactconfiglist_resp_ = NULL;
  opactselfdatalist_resp_ = NULL;
  opactglobaldatalist_resp_ = NULL;
  opactdemotake_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2ClientMsg::~S2ClientMsg() {
  // @@protoc_insertion_point(destructor:fgame.S2ClientMsg)
  SharedDtor();
}

void S2ClientMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete error_msg_;
    delete login_resp_;
    delete reg_resp_;
    delete heartbeat_resp_;
    delete match_resp_;
    delete start_resp_;
    delete fight_resp_;
    delete end_resp_;
    delete map_resp_;
    delete upgrade_resp_;
    delete ping_resp_;
    delete buyitem_resp_;
    delete useitem_resp_;
    delete leave_resp_;
    delete getachievement_resp_;
    delete receiveachievement_resp_;
    delete receiveachievementreward_resp_;
    delete enterserver_resp_;
    delete canenter_req_;
    delete queue_req_;
    delete directenter_resp_;
    delete pvprankinggetlist_resp_;
    delete streakwinvalue_resp_;
    delete streakwinget_resp_;
    delete openbigstage_resp_;
    delete pvpuseitem_resp_;
    delete sevendaysignlist_resp_;
    delete sevendaysign_resp_;
    delete getserver_resp_;
    delete sycplayerinfo_resp_;
    delete notice_req_;
    delete stopmatch_resp_;
    delete changename_resp_;
    delete gmcmd_req_;
    delete xinshourecode_resp_;
    delete pvprankingplayerinfo_resp_;
    delete getopenactivity_resp_;
    delete getactivitydata_resp_;
    delete receiveactivityreward_resp_;
    delete missionlist_resp_;
    delete missioncomplete_resp_;
    delete missionupdate_resp_;
    delete getpowerenergyactivity_resp_;
    delete receivepowerenergy_resp_;
    delete getmail_resp_;
    delete delmail_resp_;
    delete noticemail_req_;
    delete buynewbiegift_resp_;
    delete rechargecallback_resp_;
    delete friendquery_resp_;
    delete friendrequestadd_resp_;
    delete friendconfirmadd_resp_;
    delete friendgetinfo_resp_;
    delete friendrequestremove_resp_;
    delete friendaddblacklist_resp_;
    delete friendremoveblacklist_resp_;
    delete pvpchat_resp_;
    delete usegiftcode_resp_;
    delete queryplayerinfo_resp_;
    delete personalroomcreate_resp_;
    delete personalroomenter_resp_;
    delete personalroomleave_resp_;
    delete personalroomkick_resp_;
    delete personalroominvite_resp_;
    delete personalroombroadcast_resp_;
    delete personalroomchat_resp_;
    delete personalroommode_resp_;
    delete personalroombeginfight_resp_;
    delete personalroomapplyorrefuseinvite_resp_;
    delete changeplayericon_resp_;
    delete personalroomcountdown_resp_;
    delete syncplayerdata_resp_;
    delete getplayerdata_resp_;
    delete appearcreep_resp_;
    delete savecheckptdata_resp_;
    delete getcheckptdata_resp_;
    delete setnewbie_resp_;
    delete getnewbielist_resp_;
    delete propertyupdate_resp_;
    delete enterpoint_resp_;
    delete shopguide_resp_;
    delete activitylist_resp_;
    delete activityupdate_resp_;
    delete activitysubmit_resp_;
    delete settitle_resp_;
    delete shopbuy_resp_;
    delete kickplayer_req_;
    delete exchangeitem_resp_;
    delete activitycrazydtls_resp_;
    delete activitycrazyusage_resp_;
    delete activitycrazyusable_resp_;
    delete shoplist_resp_;
    delete pvpobserver_resp_;
    delete setnewbieoss_resp_;
    delete updateachievement_resp_;
    delete pvpresult_resp_;
    delete pvpselfranklist_resp_;
    delete gwgetmatchinfo_resp_;
    delete gwgetrank_resp_;
    delete gwmatch_resp_;
    delete gwmatchstop_resp_;
    delete gwbuyenergy_resp_;
    delete requestpkey_resp_;
    delete sendclientkey_resp_;
    delete updateexchangelist_resp_;
    delete glyphsrequestinfo_resp_;
    delete glyphsrequestbasicinfo_resp_;
    delete glyphsactive_resp_;
    delete glyphsupgrade_resp_;
    delete glyphspvpinfo_resp_;
    delete buyvip_resp_;
    delete glyphguide_resp_;
    delete newyeargetinfo_resp_;
    delete newyearreward_resp_;
    delete openchest_resp_;
    delete christmasdecorate_resp_;
    delete christmastakebonus_resp_;
    delete christmasgetdate_resp_;
    delete christmasgetrank_resp_;
    delete retrivecheckptreward_resp_;
    delete newyearcmp_resp_;
    delete notifyglyphsupdate_resp_;
    delete recoveritem_resp_;
    delete setsignature_resp_;
    delete setextrainfovisible_resp_;
    delete getextrainfo_resp_;
    delete stopkickplayer_req_;
    delete valentinedata_resp_;
    delete valentineexchange_resp_;
    delete redpacketsgetinfo_resp_;
    delete redpacketsgreb_resp_;
    delete redpacketsopened_resp_;
    delete chapterunlock_resp_;
    delete getchest_resp_;
    delete pvenotify_resp_;
    delete pvpgetaward_resp_;
    delete dailytaskstatus_resp_;
    delete requestdailytask_resp_;
    delete changedailytask_resp_;
    delete opendailytaskaward_resp_;
    delete updatedailytaskprogress_resp_;
    delete newdailytask_resp_;
    delete pvecheckaward_resp_;
    delete rankweekrewardinfo_resp_;
    delete rankweekrewardreward_resp_;
    delete sharereward_resp_;
    delete getsevengoallist_resp_;
    delete retrivesevengoal_resp_;
    delete noticesevengoal_resp_;
    delete pverank_resp_;
    delete toprank_resp_;
    delete topranktime_resp_;
    delete updatetaskstatus_resp_;
    delete assyncinfo_resp_;
    delete asnewadd_resp_;
    delete asoperate_resp_;
    delete asusecard_resp_;
    delete pvpuseskill_resp_;
    delete pvpassistantinfo_resp_;
    delete instituteinfo_resp_;
    delete institutebuy_resp_;
    delete opactadd_resp_;
    delete opactstatechanged_resp_;
    delete opactselfdatachanged_resp_;
    delete opactglobaldatachanged_resp_;
    delete opactconfiglist_resp_;
    delete opactselfdatalist_resp_;
    delete opactglobaldatalist_resp_;
    delete opactdemotake_resp_;
  }
}

void S2ClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const S2ClientMsg& S2ClientMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

S2ClientMsg* S2ClientMsg::default_instance_ = NULL;

S2ClientMsg* S2ClientMsg::New() const {
  return new S2ClientMsg;
}

void S2ClientMsg::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_error_msg()) {
      if (error_msg_ != NULL) error_msg_->::fgame::CSErrorMsg::Clear();
    }
    if (has_login_resp()) {
      if (login_resp_ != NULL) login_resp_->::fgame::CSLoginResp::Clear();
    }
    if (has_reg_resp()) {
      if (reg_resp_ != NULL) reg_resp_->::fgame::CSRegResp::Clear();
    }
    if (has_heartbeat_resp()) {
      if (heartbeat_resp_ != NULL) heartbeat_resp_->::fgame::CSHeartBeatResp::Clear();
    }
    if (has_match_resp()) {
      if (match_resp_ != NULL) match_resp_->::fgame::CSPvpMatchResp::Clear();
    }
    if (has_start_resp()) {
      if (start_resp_ != NULL) start_resp_->::fgame::CSPvpStartResp::Clear();
    }
    if (has_fight_resp()) {
      if (fight_resp_ != NULL) fight_resp_->::fgame::CSPvpFightResp::Clear();
    }
    if (has_end_resp()) {
      if (end_resp_ != NULL) end_resp_->::fgame::CSPvpEndResp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_map_resp()) {
      if (map_resp_ != NULL) map_resp_->::fgame::CSPvpMapResp::Clear();
    }
    if (has_upgrade_resp()) {
      if (upgrade_resp_ != NULL) upgrade_resp_->::fgame::CSPvpUpgradeResp::Clear();
    }
    if (has_ping_resp()) {
      if (ping_resp_ != NULL) ping_resp_->::fgame::CSPvpPingResp::Clear();
    }
    if (has_buyitem_resp()) {
      if (buyitem_resp_ != NULL) buyitem_resp_->::fgame::CSBuyItemResp::Clear();
    }
    if (has_useitem_resp()) {
      if (useitem_resp_ != NULL) useitem_resp_->::fgame::CSUseItemResp::Clear();
    }
    if (has_leave_resp()) {
      if (leave_resp_ != NULL) leave_resp_->::fgame::CSPvpLeaveResp::Clear();
    }
    if (has_getachievement_resp()) {
      if (getachievement_resp_ != NULL) getachievement_resp_->::fgame::CSGetAchievementResp::Clear();
    }
    if (has_receiveachievement_resp()) {
      if (receiveachievement_resp_ != NULL) receiveachievement_resp_->::fgame::CSReceiveAchievementResp::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_receiveachievementreward_resp()) {
      if (receiveachievementreward_resp_ != NULL) receiveachievementreward_resp_->::fgame::CSReceiveAchievementRewardResp::Clear();
    }
    if (has_enterserver_resp()) {
      if (enterserver_resp_ != NULL) enterserver_resp_->::fgame::CSEnterServerResp::Clear();
    }
    if (has_canenter_req()) {
      if (canenter_req_ != NULL) canenter_req_->::fgame::CSCanEnterReq::Clear();
    }
    if (has_queue_req()) {
      if (queue_req_ != NULL) queue_req_->::fgame::CSQueueReq::Clear();
    }
    if (has_directenter_resp()) {
      if (directenter_resp_ != NULL) directenter_resp_->::fgame::CSDircetEnterResp::Clear();
    }
    if (has_pvprankinggetlist_resp()) {
      if (pvprankinggetlist_resp_ != NULL) pvprankinggetlist_resp_->::fgame::CSPvpRankingGetListResp::Clear();
    }
    if (has_streakwinvalue_resp()) {
      if (streakwinvalue_resp_ != NULL) streakwinvalue_resp_->::fgame::CSStreakWinValueResp::Clear();
    }
    if (has_streakwinget_resp()) {
      if (streakwinget_resp_ != NULL) streakwinget_resp_->::fgame::CSStreakWinGetResp::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_openbigstage_resp()) {
      if (openbigstage_resp_ != NULL) openbigstage_resp_->::fgame::CSOpenBigStageResp::Clear();
    }
    if (has_pvpuseitem_resp()) {
      if (pvpuseitem_resp_ != NULL) pvpuseitem_resp_->::fgame::CSPvpUseItemResp::Clear();
    }
    if (has_sevendaysignlist_resp()) {
      if (sevendaysignlist_resp_ != NULL) sevendaysignlist_resp_->::fgame::CSSevenDaySignListResp::Clear();
    }
    if (has_sevendaysign_resp()) {
      if (sevendaysign_resp_ != NULL) sevendaysign_resp_->::fgame::CSSevenDaySignResp::Clear();
    }
    if (has_getserver_resp()) {
      if (getserver_resp_ != NULL) getserver_resp_->::fgame::CSGetServerResp::Clear();
    }
    if (has_sycplayerinfo_resp()) {
      if (sycplayerinfo_resp_ != NULL) sycplayerinfo_resp_->::fgame::CSSycPlayerInfoResp::Clear();
    }
    if (has_notice_req()) {
      if (notice_req_ != NULL) notice_req_->::fgame::CSNoticeReq::Clear();
    }
    if (has_stopmatch_resp()) {
      if (stopmatch_resp_ != NULL) stopmatch_resp_->::fgame::CSPvpStopMatchResp::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_changename_resp()) {
      if (changename_resp_ != NULL) changename_resp_->::fgame::CSChangeNameResp::Clear();
    }
    if (has_gmcmd_req()) {
      if (gmcmd_req_ != NULL) gmcmd_req_->::fgame::CSGMCmdReq::Clear();
    }
    if (has_xinshourecode_resp()) {
      if (xinshourecode_resp_ != NULL) xinshourecode_resp_->::fgame::CSXinShouRecodeResp::Clear();
    }
    if (has_pvprankingplayerinfo_resp()) {
      if (pvprankingplayerinfo_resp_ != NULL) pvprankingplayerinfo_resp_->::fgame::CSPvpRankingPlayerInfoResp::Clear();
    }
    if (has_getopenactivity_resp()) {
      if (getopenactivity_resp_ != NULL) getopenactivity_resp_->::fgame::CSGetOpenActivityResp::Clear();
    }
    if (has_getactivitydata_resp()) {
      if (getactivitydata_resp_ != NULL) getactivitydata_resp_->::fgame::CSGetActivityDataResp::Clear();
    }
    if (has_receiveactivityreward_resp()) {
      if (receiveactivityreward_resp_ != NULL) receiveactivityreward_resp_->::fgame::CSReceiveActivityRewardResp::Clear();
    }
    if (has_missionlist_resp()) {
      if (missionlist_resp_ != NULL) missionlist_resp_->::fgame::CSMissionListResp::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_missioncomplete_resp()) {
      if (missioncomplete_resp_ != NULL) missioncomplete_resp_->::fgame::CSMissionCompleteResp::Clear();
    }
    if (has_missionupdate_resp()) {
      if (missionupdate_resp_ != NULL) missionupdate_resp_->::fgame::CSMissionUpdateResp::Clear();
    }
    if (has_getpowerenergyactivity_resp()) {
      if (getpowerenergyactivity_resp_ != NULL) getpowerenergyactivity_resp_->::fgame::CSGetPowerEnergyActivityResp::Clear();
    }
    if (has_receivepowerenergy_resp()) {
      if (receivepowerenergy_resp_ != NULL) receivepowerenergy_resp_->::fgame::CSReceivePowerEnergyResp::Clear();
    }
    if (has_getmail_resp()) {
      if (getmail_resp_ != NULL) getmail_resp_->::fgame::CSGetMailResp::Clear();
    }
    if (has_delmail_resp()) {
      if (delmail_resp_ != NULL) delmail_resp_->::fgame::CSDelMailResp::Clear();
    }
    if (has_noticemail_req()) {
      if (noticemail_req_ != NULL) noticemail_req_->::fgame::CSNoticeMailReq::Clear();
    }
    if (has_buynewbiegift_resp()) {
      if (buynewbiegift_resp_ != NULL) buynewbiegift_resp_->::fgame::CSBuyNewbieGiftResp::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_rechargecallback_resp()) {
      if (rechargecallback_resp_ != NULL) rechargecallback_resp_->::fgame::CSRechargeCallbackResp::Clear();
    }
    if (has_friendquery_resp()) {
      if (friendquery_resp_ != NULL) friendquery_resp_->::fgame::CSFriendQueryResp::Clear();
    }
    if (has_friendrequestadd_resp()) {
      if (friendrequestadd_resp_ != NULL) friendrequestadd_resp_->::fgame::CSFriendRequestAddResp::Clear();
    }
    if (has_friendconfirmadd_resp()) {
      if (friendconfirmadd_resp_ != NULL) friendconfirmadd_resp_->::fgame::CSFriendConfirmAddResp::Clear();
    }
    if (has_friendgetinfo_resp()) {
      if (friendgetinfo_resp_ != NULL) friendgetinfo_resp_->::fgame::CSFriendGetInfoResp::Clear();
    }
    if (has_friendrequestremove_resp()) {
      if (friendrequestremove_resp_ != NULL) friendrequestremove_resp_->::fgame::CSFriendRequestRemoveResp::Clear();
    }
    if (has_friendaddblacklist_resp()) {
      if (friendaddblacklist_resp_ != NULL) friendaddblacklist_resp_->::fgame::CSFriendAddBlackListResp::Clear();
    }
    if (has_friendremoveblacklist_resp()) {
      if (friendremoveblacklist_resp_ != NULL) friendremoveblacklist_resp_->::fgame::CSFriendRemoveBlackListResp::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_pvpchat_resp()) {
      if (pvpchat_resp_ != NULL) pvpchat_resp_->::fgame::CSPvpChatResp::Clear();
    }
    if (has_usegiftcode_resp()) {
      if (usegiftcode_resp_ != NULL) usegiftcode_resp_->::fgame::CSUseGiftCodeResp::Clear();
    }
    if (has_queryplayerinfo_resp()) {
      if (queryplayerinfo_resp_ != NULL) queryplayerinfo_resp_->::fgame::CSQueryPlayerInfoResp::Clear();
    }
    if (has_personalroomcreate_resp()) {
      if (personalroomcreate_resp_ != NULL) personalroomcreate_resp_->::fgame::CSPersonalRoomCreateResp::Clear();
    }
    if (has_personalroomenter_resp()) {
      if (personalroomenter_resp_ != NULL) personalroomenter_resp_->::fgame::CSPersonalRoomEnterResp::Clear();
    }
    if (has_personalroomleave_resp()) {
      if (personalroomleave_resp_ != NULL) personalroomleave_resp_->::fgame::CSPersonalRoomLeaveResp::Clear();
    }
    if (has_personalroomkick_resp()) {
      if (personalroomkick_resp_ != NULL) personalroomkick_resp_->::fgame::CSPersonalRoomKickResp::Clear();
    }
    if (has_personalroominvite_resp()) {
      if (personalroominvite_resp_ != NULL) personalroominvite_resp_->::fgame::CSPersonalRoomInviteResp::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_personalroombroadcast_resp()) {
      if (personalroombroadcast_resp_ != NULL) personalroombroadcast_resp_->::fgame::CSPersonalRoomBroadcastResp::Clear();
    }
    if (has_personalroomchat_resp()) {
      if (personalroomchat_resp_ != NULL) personalroomchat_resp_->::fgame::CSPersonalRoomChatResp::Clear();
    }
    if (has_personalroommode_resp()) {
      if (personalroommode_resp_ != NULL) personalroommode_resp_->::fgame::CSPersonalRoomModeResp::Clear();
    }
    if (has_personalroombeginfight_resp()) {
      if (personalroombeginfight_resp_ != NULL) personalroombeginfight_resp_->::fgame::CSPersonalRoomBeginFightResp::Clear();
    }
    if (has_personalroomapplyorrefuseinvite_resp()) {
      if (personalroomapplyorrefuseinvite_resp_ != NULL) personalroomapplyorrefuseinvite_resp_->::fgame::CSPersonalRoomApplyOrRefuseInviteResp::Clear();
    }
    if (has_changeplayericon_resp()) {
      if (changeplayericon_resp_ != NULL) changeplayericon_resp_->::fgame::CSChangePlayerIconResp::Clear();
    }
    if (has_personalroomcountdown_resp()) {
      if (personalroomcountdown_resp_ != NULL) personalroomcountdown_resp_->::fgame::CSPersonalRoomCountDownResp::Clear();
    }
    if (has_syncplayerdata_resp()) {
      if (syncplayerdata_resp_ != NULL) syncplayerdata_resp_->::fgame::CSSyncPlayerDataResp::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_getplayerdata_resp()) {
      if (getplayerdata_resp_ != NULL) getplayerdata_resp_->::fgame::CSGetPlayerDataResp::Clear();
    }
    if (has_appearcreep_resp()) {
      if (appearcreep_resp_ != NULL) appearcreep_resp_->::fgame::CSPvpAppearCreepResp::Clear();
    }
    if (has_savecheckptdata_resp()) {
      if (savecheckptdata_resp_ != NULL) savecheckptdata_resp_->::fgame::CSSaveCheckPtDataResp::Clear();
    }
    if (has_getcheckptdata_resp()) {
      if (getcheckptdata_resp_ != NULL) getcheckptdata_resp_->::fgame::CSGetCheckPtDataResp::Clear();
    }
    if (has_setnewbie_resp()) {
      if (setnewbie_resp_ != NULL) setnewbie_resp_->::fgame::CSSetNewBieResp::Clear();
    }
    if (has_getnewbielist_resp()) {
      if (getnewbielist_resp_ != NULL) getnewbielist_resp_->::fgame::CSGetNewBieListResp::Clear();
    }
    if (has_propertyupdate_resp()) {
      if (propertyupdate_resp_ != NULL) propertyupdate_resp_->::fgame::CSPropertyUpdateResp::Clear();
    }
    if (has_enterpoint_resp()) {
      if (enterpoint_resp_ != NULL) enterpoint_resp_->::fgame::CSEnterPointResp::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    if (has_shopguide_resp()) {
      if (shopguide_resp_ != NULL) shopguide_resp_->::fgame::CSShopGuideResp::Clear();
    }
    if (has_activitylist_resp()) {
      if (activitylist_resp_ != NULL) activitylist_resp_->::fgame::CSActivityListResp::Clear();
    }
    if (has_activityupdate_resp()) {
      if (activityupdate_resp_ != NULL) activityupdate_resp_->::fgame::CSActivityUpdateResp::Clear();
    }
    if (has_activitysubmit_resp()) {
      if (activitysubmit_resp_ != NULL) activitysubmit_resp_->::fgame::CSActivitySubmitResp::Clear();
    }
    if (has_settitle_resp()) {
      if (settitle_resp_ != NULL) settitle_resp_->::fgame::CSSetTitleResp::Clear();
    }
    if (has_shopbuy_resp()) {
      if (shopbuy_resp_ != NULL) shopbuy_resp_->::fgame::CSShopBuyResp::Clear();
    }
    if (has_kickplayer_req()) {
      if (kickplayer_req_ != NULL) kickplayer_req_->::fgame::CSKickPlayerReq::Clear();
    }
    if (has_exchangeitem_resp()) {
      if (exchangeitem_resp_ != NULL) exchangeitem_resp_->::fgame::CSExchangeItemResp::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    if (has_activitycrazydtls_resp()) {
      if (activitycrazydtls_resp_ != NULL) activitycrazydtls_resp_->::fgame::CSActivityCrazyDtlsResp::Clear();
    }
    if (has_activitycrazyusage_resp()) {
      if (activitycrazyusage_resp_ != NULL) activitycrazyusage_resp_->::fgame::CSActivityCrazyUsageResp::Clear();
    }
    if (has_activitycrazyusable_resp()) {
      if (activitycrazyusable_resp_ != NULL) activitycrazyusable_resp_->::fgame::CSActivityCrazyUsableResp::Clear();
    }
    if (has_shoplist_resp()) {
      if (shoplist_resp_ != NULL) shoplist_resp_->::fgame::CSShopListResp::Clear();
    }
    if (has_pvpobserver_resp()) {
      if (pvpobserver_resp_ != NULL) pvpobserver_resp_->::fgame::CSPvpObserverResp::Clear();
    }
    if (has_setnewbieoss_resp()) {
      if (setnewbieoss_resp_ != NULL) setnewbieoss_resp_->::fgame::CSSetNewBieOssResp::Clear();
    }
    if (has_updateachievement_resp()) {
      if (updateachievement_resp_ != NULL) updateachievement_resp_->::fgame::CSUpdateAchievementResp::Clear();
    }
    if (has_pvpresult_resp()) {
      if (pvpresult_resp_ != NULL) pvpresult_resp_->::fgame::CSPvpResultResp::Clear();
    }
  }
  if (_has_bits_[96 / 32] & 255) {
    if (has_pvpselfranklist_resp()) {
      if (pvpselfranklist_resp_ != NULL) pvpselfranklist_resp_->::fgame::CSPvpSelfRankListResp::Clear();
    }
    if (has_gwgetmatchinfo_resp()) {
      if (gwgetmatchinfo_resp_ != NULL) gwgetmatchinfo_resp_->::fgame::CSGWGetMatchInfoResp::Clear();
    }
    if (has_gwgetrank_resp()) {
      if (gwgetrank_resp_ != NULL) gwgetrank_resp_->::fgame::CSGWGetRankResp::Clear();
    }
    if (has_gwmatch_resp()) {
      if (gwmatch_resp_ != NULL) gwmatch_resp_->::fgame::CSGWMatchResp::Clear();
    }
    if (has_gwmatchstop_resp()) {
      if (gwmatchstop_resp_ != NULL) gwmatchstop_resp_->::fgame::CSGWMatchStopResp::Clear();
    }
    if (has_gwbuyenergy_resp()) {
      if (gwbuyenergy_resp_ != NULL) gwbuyenergy_resp_->::fgame::CSGWBuyEnergyResp::Clear();
    }
    if (has_requestpkey_resp()) {
      if (requestpkey_resp_ != NULL) requestpkey_resp_->::fgame::CSRequestPKeyResp::Clear();
    }
    if (has_sendclientkey_resp()) {
      if (sendclientkey_resp_ != NULL) sendclientkey_resp_->::fgame::CSSendClientKeyResp::Clear();
    }
  }
  if (_has_bits_[104 / 32] & 65280) {
    if (has_updateexchangelist_resp()) {
      if (updateexchangelist_resp_ != NULL) updateexchangelist_resp_->::fgame::CSUpdateExchangeListResp::Clear();
    }
    if (has_glyphsrequestinfo_resp()) {
      if (glyphsrequestinfo_resp_ != NULL) glyphsrequestinfo_resp_->::fgame::CSGlyphsRequestInfoResp::Clear();
    }
    if (has_glyphsrequestbasicinfo_resp()) {
      if (glyphsrequestbasicinfo_resp_ != NULL) glyphsrequestbasicinfo_resp_->::fgame::CSGlyphsRequestBasicInfoResp::Clear();
    }
    if (has_glyphsactive_resp()) {
      if (glyphsactive_resp_ != NULL) glyphsactive_resp_->::fgame::CSGlyphsActiveResp::Clear();
    }
    if (has_glyphsupgrade_resp()) {
      if (glyphsupgrade_resp_ != NULL) glyphsupgrade_resp_->::fgame::CSGlyphsUpgradeResp::Clear();
    }
    if (has_glyphspvpinfo_resp()) {
      if (glyphspvpinfo_resp_ != NULL) glyphspvpinfo_resp_->::fgame::CSGlyphsPvpInfoResp::Clear();
    }
    if (has_buyvip_resp()) {
      if (buyvip_resp_ != NULL) buyvip_resp_->::fgame::CSBuyVipResp::Clear();
    }
    if (has_glyphguide_resp()) {
      if (glyphguide_resp_ != NULL) glyphguide_resp_->::fgame::CSGlyphGuideResp::Clear();
    }
  }
  if (_has_bits_[112 / 32] & 16711680) {
    if (has_newyeargetinfo_resp()) {
      if (newyeargetinfo_resp_ != NULL) newyeargetinfo_resp_->::fgame::CSNewYearGetInfoResp::Clear();
    }
    if (has_newyearreward_resp()) {
      if (newyearreward_resp_ != NULL) newyearreward_resp_->::fgame::CSNewYearRewardResp::Clear();
    }
    if (has_openchest_resp()) {
      if (openchest_resp_ != NULL) openchest_resp_->::fgame::CSOpenChestResp::Clear();
    }
    if (has_christmasdecorate_resp()) {
      if (christmasdecorate_resp_ != NULL) christmasdecorate_resp_->::fgame::CSChristmasDecorateResp::Clear();
    }
    if (has_christmastakebonus_resp()) {
      if (christmastakebonus_resp_ != NULL) christmastakebonus_resp_->::fgame::CSChristmasTakeBonusResp::Clear();
    }
    if (has_christmasgetdate_resp()) {
      if (christmasgetdate_resp_ != NULL) christmasgetdate_resp_->::fgame::CSChristmasGetDataResp::Clear();
    }
    if (has_christmasgetrank_resp()) {
      if (christmasgetrank_resp_ != NULL) christmasgetrank_resp_->::fgame::CSChristmasGetRankResp::Clear();
    }
    if (has_retrivecheckptreward_resp()) {
      if (retrivecheckptreward_resp_ != NULL) retrivecheckptreward_resp_->::fgame::CSRetriveCheckPtRewardResp::Clear();
    }
  }
  if (_has_bits_[120 / 32] & 4278190080) {
    if (has_newyearcmp_resp()) {
      if (newyearcmp_resp_ != NULL) newyearcmp_resp_->::fgame::CSNewYearCmpResp::Clear();
    }
    if (has_notifyglyphsupdate_resp()) {
      if (notifyglyphsupdate_resp_ != NULL) notifyglyphsupdate_resp_->::fgame::CSNotifyGlyphsUpdateResp::Clear();
    }
    if (has_recoveritem_resp()) {
      if (recoveritem_resp_ != NULL) recoveritem_resp_->::fgame::CSPvpRecoverItemResp::Clear();
    }
    if (has_setsignature_resp()) {
      if (setsignature_resp_ != NULL) setsignature_resp_->::fgame::CSSetSignatureResp::Clear();
    }
    if (has_setextrainfovisible_resp()) {
      if (setextrainfovisible_resp_ != NULL) setextrainfovisible_resp_->::fgame::CSSetExtraInfoVisibleResp::Clear();
    }
    if (has_getextrainfo_resp()) {
      if (getextrainfo_resp_ != NULL) getextrainfo_resp_->::fgame::CSGetExtraInfoResp::Clear();
    }
    if (has_stopkickplayer_req()) {
      if (stopkickplayer_req_ != NULL) stopkickplayer_req_->::fgame::CSStopKickPlayerReq::Clear();
    }
    if (has_valentinedata_resp()) {
      if (valentinedata_resp_ != NULL) valentinedata_resp_->::fgame::CSValentineDataResp::Clear();
    }
  }
  if (_has_bits_[128 / 32] & 255) {
    if (has_valentineexchange_resp()) {
      if (valentineexchange_resp_ != NULL) valentineexchange_resp_->::fgame::CSValentineExchangeResp::Clear();
    }
    if (has_redpacketsgetinfo_resp()) {
      if (redpacketsgetinfo_resp_ != NULL) redpacketsgetinfo_resp_->::fgame::CSRedPacketsGetInfoResp::Clear();
    }
    if (has_redpacketsgreb_resp()) {
      if (redpacketsgreb_resp_ != NULL) redpacketsgreb_resp_->::fgame::CSRedPacketsGrebResp::Clear();
    }
    if (has_redpacketsopened_resp()) {
      if (redpacketsopened_resp_ != NULL) redpacketsopened_resp_->::fgame::CSRedPacketsOpenedResp::Clear();
    }
    if (has_chapterunlock_resp()) {
      if (chapterunlock_resp_ != NULL) chapterunlock_resp_->::fgame::CSChapterUnlockResp::Clear();
    }
    if (has_getchest_resp()) {
      if (getchest_resp_ != NULL) getchest_resp_->::fgame::CSGetChestResp::Clear();
    }
    if (has_pvenotify_resp()) {
      if (pvenotify_resp_ != NULL) pvenotify_resp_->::fgame::CSPveNotifyResp::Clear();
    }
    if (has_pvpgetaward_resp()) {
      if (pvpgetaward_resp_ != NULL) pvpgetaward_resp_->::fgame::CSPvpGetAwardResp::Clear();
    }
  }
  if (_has_bits_[136 / 32] & 65280) {
    if (has_dailytaskstatus_resp()) {
      if (dailytaskstatus_resp_ != NULL) dailytaskstatus_resp_->::fgame::CSDailyTaskStatusResp::Clear();
    }
    if (has_requestdailytask_resp()) {
      if (requestdailytask_resp_ != NULL) requestdailytask_resp_->::fgame::CSRequestDailyTaskResp::Clear();
    }
    if (has_changedailytask_resp()) {
      if (changedailytask_resp_ != NULL) changedailytask_resp_->::fgame::CSChangeDailyTaskResp::Clear();
    }
    if (has_opendailytaskaward_resp()) {
      if (opendailytaskaward_resp_ != NULL) opendailytaskaward_resp_->::fgame::CSOpenDailyTaskAwardResp::Clear();
    }
    if (has_updatedailytaskprogress_resp()) {
      if (updatedailytaskprogress_resp_ != NULL) updatedailytaskprogress_resp_->::fgame::CSUpdateDailyTaskProgressResp::Clear();
    }
    if (has_newdailytask_resp()) {
      if (newdailytask_resp_ != NULL) newdailytask_resp_->::fgame::CSNewDailyTaskResp::Clear();
    }
    if (has_pvecheckaward_resp()) {
      if (pvecheckaward_resp_ != NULL) pvecheckaward_resp_->::fgame::CSPveCheckAwardResp::Clear();
    }
    if (has_rankweekrewardinfo_resp()) {
      if (rankweekrewardinfo_resp_ != NULL) rankweekrewardinfo_resp_->::fgame::CSRankWeekRewardInfoResp::Clear();
    }
  }
  if (_has_bits_[144 / 32] & 16711680) {
    if (has_rankweekrewardreward_resp()) {
      if (rankweekrewardreward_resp_ != NULL) rankweekrewardreward_resp_->::fgame::CSRankWeekRewardRewardResp::Clear();
    }
    if (has_sharereward_resp()) {
      if (sharereward_resp_ != NULL) sharereward_resp_->::fgame::CSShareRewardGetResq::Clear();
    }
    if (has_getsevengoallist_resp()) {
      if (getsevengoallist_resp_ != NULL) getsevengoallist_resp_->::fgame::CSGetSevenGoalListResp::Clear();
    }
    if (has_retrivesevengoal_resp()) {
      if (retrivesevengoal_resp_ != NULL) retrivesevengoal_resp_->::fgame::CSRetriveSevenGoalResp::Clear();
    }
    if (has_noticesevengoal_resp()) {
      if (noticesevengoal_resp_ != NULL) noticesevengoal_resp_->::fgame::CSNoticeSevenGoalResp::Clear();
    }
    if (has_pverank_resp()) {
      if (pverank_resp_ != NULL) pverank_resp_->::fgame::CSPveRankResp::Clear();
    }
    if (has_toprank_resp()) {
      if (toprank_resp_ != NULL) toprank_resp_->::fgame::CSTopRankResp::Clear();
    }
    if (has_topranktime_resp()) {
      if (topranktime_resp_ != NULL) topranktime_resp_->::fgame::CSTopRankTimeResp::Clear();
    }
  }
  if (_has_bits_[152 / 32] & 4278190080) {
    if (has_updatetaskstatus_resp()) {
      if (updatetaskstatus_resp_ != NULL) updatetaskstatus_resp_->::fgame::CSUpdateTaskStatusResp::Clear();
    }
    if (has_assyncinfo_resp()) {
      if (assyncinfo_resp_ != NULL) assyncinfo_resp_->::fgame::CSAsSyncInfoResp::Clear();
    }
    if (has_asnewadd_resp()) {
      if (asnewadd_resp_ != NULL) asnewadd_resp_->::fgame::CSAsNewAddResp::Clear();
    }
    if (has_asoperate_resp()) {
      if (asoperate_resp_ != NULL) asoperate_resp_->::fgame::CSAsOperateResp::Clear();
    }
    if (has_asusecard_resp()) {
      if (asusecard_resp_ != NULL) asusecard_resp_->::fgame::CSAsUseCardResp::Clear();
    }
    if (has_pvpuseskill_resp()) {
      if (pvpuseskill_resp_ != NULL) pvpuseskill_resp_->::fgame::CSPvpUseSkillResp::Clear();
    }
    if (has_pvpassistantinfo_resp()) {
      if (pvpassistantinfo_resp_ != NULL) pvpassistantinfo_resp_->::fgame::CSPvpAssistantInfoResp::Clear();
    }
    if (has_instituteinfo_resp()) {
      if (instituteinfo_resp_ != NULL) instituteinfo_resp_->::fgame::CSInstituteInfoResp::Clear();
    }
  }
  if (_has_bits_[160 / 32] & 255) {
    if (has_institutebuy_resp()) {
      if (institutebuy_resp_ != NULL) institutebuy_resp_->::fgame::CSInstituteBuyResp::Clear();
    }
    if (has_opactadd_resp()) {
      if (opactadd_resp_ != NULL) opactadd_resp_->::fgame::CSOpActAddResp::Clear();
    }
    if (has_opactstatechanged_resp()) {
      if (opactstatechanged_resp_ != NULL) opactstatechanged_resp_->::fgame::CSOpActStateChangedResp::Clear();
    }
    if (has_opactselfdatachanged_resp()) {
      if (opactselfdatachanged_resp_ != NULL) opactselfdatachanged_resp_->::fgame::CSActSelfDataChangedResp::Clear();
    }
    if (has_opactglobaldatachanged_resp()) {
      if (opactglobaldatachanged_resp_ != NULL) opactglobaldatachanged_resp_->::fgame::CSActGlobalDataChangedResp::Clear();
    }
    if (has_opactconfiglist_resp()) {
      if (opactconfiglist_resp_ != NULL) opactconfiglist_resp_->::fgame::CSOpActConfigListResp::Clear();
    }
    if (has_opactselfdatalist_resp()) {
      if (opactselfdatalist_resp_ != NULL) opactselfdatalist_resp_->::fgame::CSOpActSelfDataListResp::Clear();
    }
    if (has_opactglobaldatalist_resp()) {
      if (opactglobaldatalist_resp_ != NULL) opactglobaldatalist_resp_->::fgame::CSOpActGlobalDataListResp::Clear();
    }
  }
  if (has_opactdemotake_resp()) {
    if (opactdemotake_resp_ != NULL) opactdemotake_resp_->::fgame::CSOpActDemoTakeResp::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool S2ClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.S2ClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fgame.CSErrorMsg Error_Msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Login_Resp;
        break;
      }

      // optional .fgame.CSLoginResp Login_Resp = 2;
      case 2: {
        if (tag == 18) {
         parse_Login_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Reg_Resp;
        break;
      }

      // optional .fgame.CSRegResp Reg_Resp = 3;
      case 3: {
        if (tag == 26) {
         parse_Reg_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HeartBeat_Resp;
        break;
      }

      // optional .fgame.CSHeartBeatResp HeartBeat_Resp = 4;
      case 4: {
        if (tag == 34) {
         parse_HeartBeat_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Match_Resp;
        break;
      }

      // optional .fgame.CSPvpMatchResp Match_Resp = 5;
      case 5: {
        if (tag == 42) {
         parse_Match_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Start_Resp;
        break;
      }

      // optional .fgame.CSPvpStartResp Start_Resp = 6;
      case 6: {
        if (tag == 50) {
         parse_Start_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Fight_Resp;
        break;
      }

      // optional .fgame.CSPvpFightResp Fight_Resp = 7;
      case 7: {
        if (tag == 58) {
         parse_Fight_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_End_Resp;
        break;
      }

      // optional .fgame.CSPvpEndResp End_Resp = 8;
      case 8: {
        if (tag == 66) {
         parse_End_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Map_Resp;
        break;
      }

      // optional .fgame.CSPvpMapResp Map_Resp = 9;
      case 9: {
        if (tag == 74) {
         parse_Map_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Upgrade_Resp;
        break;
      }

      // optional .fgame.CSPvpUpgradeResp Upgrade_Resp = 10;
      case 10: {
        if (tag == 82) {
         parse_Upgrade_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Ping_Resp;
        break;
      }

      // optional .fgame.CSPvpPingResp Ping_Resp = 13;
      case 13: {
        if (tag == 106) {
         parse_Ping_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_BuyItem_Resp;
        break;
      }

      // optional .fgame.CSBuyItemResp BuyItem_Resp = 14;
      case 14: {
        if (tag == 114) {
         parse_BuyItem_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyitem_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_UseItem_Resp;
        break;
      }

      // optional .fgame.CSUseItemResp UseItem_Resp = 15;
      case 15: {
        if (tag == 122) {
         parse_UseItem_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useitem_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Leave_Resp;
        break;
      }

      // optional .fgame.CSPvpLeaveResp Leave_Resp = 18;
      case 18: {
        if (tag == 146) {
         parse_Leave_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_GetAchievement_Resp;
        break;
      }

      // optional .fgame.CSGetAchievementResp GetAchievement_Resp = 19;
      case 19: {
        if (tag == 154) {
         parse_GetAchievement_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getachievement_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ReceiveAchievement_Resp;
        break;
      }

      // optional .fgame.CSReceiveAchievementResp ReceiveAchievement_Resp = 20;
      case 20: {
        if (tag == 162) {
         parse_ReceiveAchievement_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveachievement_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ReceiveAchievementReward_Resp;
        break;
      }

      // optional .fgame.CSReceiveAchievementRewardResp ReceiveAchievementReward_Resp = 21;
      case 21: {
        if (tag == 170) {
         parse_ReceiveAchievementReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveachievementreward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_EnterServer_Resp;
        break;
      }

      // optional .fgame.CSEnterServerResp EnterServer_Resp = 22;
      case 22: {
        if (tag == 178) {
         parse_EnterServer_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterserver_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_CanEnter_Req;
        break;
      }

      // optional .fgame.CSCanEnterReq CanEnter_Req = 23;
      case 23: {
        if (tag == 186) {
         parse_CanEnter_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canenter_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_Queue_Req;
        break;
      }

      // optional .fgame.CSQueueReq Queue_Req = 24;
      case 24: {
        if (tag == 194) {
         parse_Queue_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_DirectEnter_Resp;
        break;
      }

      // optional .fgame.CSDircetEnterResp DirectEnter_Resp = 25;
      case 25: {
        if (tag == 202) {
         parse_DirectEnter_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directenter_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_PvpRankingGetList_Resp;
        break;
      }

      // optional .fgame.CSPvpRankingGetListResp PvpRankingGetList_Resp = 26;
      case 26: {
        if (tag == 210) {
         parse_PvpRankingGetList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvprankinggetlist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_StreakWinValue_Resp;
        break;
      }

      // optional .fgame.CSStreakWinValueResp StreakWinValue_Resp = 27;
      case 27: {
        if (tag == 218) {
         parse_StreakWinValue_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streakwinvalue_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_StreakWinGet_Resp;
        break;
      }

      // optional .fgame.CSStreakWinGetResp StreakWinGet_Resp = 28;
      case 28: {
        if (tag == 226) {
         parse_StreakWinGet_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streakwinget_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_OpenBigStage_Resp;
        break;
      }

      // optional .fgame.CSOpenBigStageResp OpenBigStage_Resp = 29;
      case 29: {
        if (tag == 234) {
         parse_OpenBigStage_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openbigstage_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_PvpUseItem_Resp;
        break;
      }

      // optional .fgame.CSPvpUseItemResp PvpUseItem_Resp = 30;
      case 30: {
        if (tag == 242) {
         parse_PvpUseItem_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpuseitem_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_SevenDaySignList_Resp;
        break;
      }

      // optional .fgame.CSSevenDaySignListResp SevenDaySignList_Resp = 31;
      case 31: {
        if (tag == 250) {
         parse_SevenDaySignList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevendaysignlist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_SevenDaySign_Resp;
        break;
      }

      // optional .fgame.CSSevenDaySignResp SevenDaySign_Resp = 32;
      case 32: {
        if (tag == 258) {
         parse_SevenDaySign_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sevendaysign_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_GetServer_Resp;
        break;
      }

      // optional .fgame.CSGetServerResp GetServer_Resp = 33;
      case 33: {
        if (tag == 266) {
         parse_GetServer_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getserver_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_SycPlayerInfo_Resp;
        break;
      }

      // optional .fgame.CSSycPlayerInfoResp SycPlayerInfo_Resp = 34;
      case 34: {
        if (tag == 274) {
         parse_SycPlayerInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sycplayerinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_Notice_Req;
        break;
      }

      // optional .fgame.CSNoticeReq Notice_Req = 35;
      case 35: {
        if (tag == 282) {
         parse_Notice_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notice_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_StopMatch_Resp;
        break;
      }

      // optional .fgame.CSPvpStopMatchResp StopMatch_Resp = 36;
      case 36: {
        if (tag == 290) {
         parse_StopMatch_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopmatch_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_ChangeName_Resp;
        break;
      }

      // optional .fgame.CSChangeNameResp ChangeName_Resp = 37;
      case 37: {
        if (tag == 298) {
         parse_ChangeName_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changename_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_GMCmd_Req;
        break;
      }

      // optional .fgame.CSGMCmdReq GMCmd_Req = 40;
      case 40: {
        if (tag == 322) {
         parse_GMCmd_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmcmd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_XinShouRecode_Resp;
        break;
      }

      // optional .fgame.CSXinShouRecodeResp XinShouRecode_Resp = 41;
      case 41: {
        if (tag == 330) {
         parse_XinShouRecode_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xinshourecode_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_PvpRankingPlayerInfo_Resp;
        break;
      }

      // optional .fgame.CSPvpRankingPlayerInfoResp PvpRankingPlayerInfo_Resp = 42;
      case 42: {
        if (tag == 338) {
         parse_PvpRankingPlayerInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvprankingplayerinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_GetOpenActivity_Resp;
        break;
      }

      // optional .fgame.CSGetOpenActivityResp GetOpenActivity_Resp = 43;
      case 43: {
        if (tag == 346) {
         parse_GetOpenActivity_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getopenactivity_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_GetActivityData_Resp;
        break;
      }

      // optional .fgame.CSGetActivityDataResp GetActivityData_Resp = 44;
      case 44: {
        if (tag == 354) {
         parse_GetActivityData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getactivitydata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_ReceiveActivityReward_Resp;
        break;
      }

      // optional .fgame.CSReceiveActivityRewardResp ReceiveActivityReward_Resp = 45;
      case 45: {
        if (tag == 362) {
         parse_ReceiveActivityReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiveactivityreward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_MissionList_Resp;
        break;
      }

      // optional .fgame.CSMissionListResp MissionList_Resp = 46;
      case 46: {
        if (tag == 370) {
         parse_MissionList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionlist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_MissionComplete_Resp;
        break;
      }

      // optional .fgame.CSMissionCompleteResp MissionComplete_Resp = 47;
      case 47: {
        if (tag == 378) {
         parse_MissionComplete_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missioncomplete_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_MissionUpdate_Resp;
        break;
      }

      // optional .fgame.CSMissionUpdateResp MissionUpdate_Resp = 48;
      case 48: {
        if (tag == 386) {
         parse_MissionUpdate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionupdate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_GetPowerEnergyActivity_Resp;
        break;
      }

      // optional .fgame.CSGetPowerEnergyActivityResp GetPowerEnergyActivity_Resp = 49;
      case 49: {
        if (tag == 394) {
         parse_GetPowerEnergyActivity_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpowerenergyactivity_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_ReceivePowerEnergy_Resp;
        break;
      }

      // optional .fgame.CSReceivePowerEnergyResp ReceivePowerEnergy_Resp = 50;
      case 50: {
        if (tag == 402) {
         parse_ReceivePowerEnergy_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivepowerenergy_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_GetMail_Resp;
        break;
      }

      // optional .fgame.CSGetMailResp GetMail_Resp = 51;
      case 51: {
        if (tag == 410) {
         parse_GetMail_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmail_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_DelMail_Resp;
        break;
      }

      // optional .fgame.CSDelMailResp DelMail_Resp = 52;
      case 52: {
        if (tag == 418) {
         parse_DelMail_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delmail_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_NoticeMail_Req;
        break;
      }

      // optional .fgame.CSNoticeMailReq NoticeMail_Req = 53;
      case 53: {
        if (tag == 426) {
         parse_NoticeMail_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noticemail_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_BuyNewbieGift_Resp;
        break;
      }

      // optional .fgame.CSBuyNewbieGiftResp BuyNewbieGift_Resp = 54;
      case 54: {
        if (tag == 434) {
         parse_BuyNewbieGift_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buynewbiegift_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_RechargeCallback_Resp;
        break;
      }

      // optional .fgame.CSRechargeCallbackResp RechargeCallback_Resp = 55;
      case 55: {
        if (tag == 442) {
         parse_RechargeCallback_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargecallback_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_FriendQuery_Resp;
        break;
      }

      // optional .fgame.CSFriendQueryResp FriendQuery_Resp = 56;
      case 56: {
        if (tag == 450) {
         parse_FriendQuery_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendquery_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_FriendRequestAdd_Resp;
        break;
      }

      // optional .fgame.CSFriendRequestAddResp FriendRequestAdd_Resp = 57;
      case 57: {
        if (tag == 458) {
         parse_FriendRequestAdd_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrequestadd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_FriendConfirmAdd_Resp;
        break;
      }

      // optional .fgame.CSFriendConfirmAddResp FriendConfirmAdd_Resp = 58;
      case 58: {
        if (tag == 466) {
         parse_FriendConfirmAdd_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendconfirmadd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_FriendGetInfo_Resp;
        break;
      }

      // optional .fgame.CSFriendGetInfoResp FriendGetInfo_Resp = 59;
      case 59: {
        if (tag == 474) {
         parse_FriendGetInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendgetinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_FriendRequestRemove_Resp;
        break;
      }

      // optional .fgame.CSFriendRequestRemoveResp FriendRequestRemove_Resp = 60;
      case 60: {
        if (tag == 482) {
         parse_FriendRequestRemove_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrequestremove_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_FriendAddBlackList_Resp;
        break;
      }

      // optional .fgame.CSFriendAddBlackListResp FriendAddBlackList_Resp = 61;
      case 61: {
        if (tag == 490) {
         parse_FriendAddBlackList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendaddblacklist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_FriendRemoveBlackList_Resp;
        break;
      }

      // optional .fgame.CSFriendRemoveBlackListResp FriendRemoveBlackList_Resp = 62;
      case 62: {
        if (tag == 498) {
         parse_FriendRemoveBlackList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendremoveblacklist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_PvpChat_Resp;
        break;
      }

      // optional .fgame.CSPvpChatResp PvpChat_Resp = 63;
      case 63: {
        if (tag == 506) {
         parse_PvpChat_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpchat_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_UseGiftCode_Resp;
        break;
      }

      // optional .fgame.CSUseGiftCodeResp UseGiftCode_Resp = 64;
      case 64: {
        if (tag == 514) {
         parse_UseGiftCode_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usegiftcode_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_QueryPlayerInfo_Resp;
        break;
      }

      // optional .fgame.CSQueryPlayerInfoResp QueryPlayerInfo_Resp = 65;
      case 65: {
        if (tag == 522) {
         parse_QueryPlayerInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryplayerinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_PersonalRoomCreate_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomCreateResp PersonalRoomCreate_Resp = 66;
      case 66: {
        if (tag == 530) {
         parse_PersonalRoomCreate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomcreate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_PersonalRoomEnter_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomEnterResp PersonalRoomEnter_Resp = 67;
      case 67: {
        if (tag == 538) {
         parse_PersonalRoomEnter_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomenter_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_PersonalRoomLeave_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomLeaveResp PersonalRoomLeave_Resp = 68;
      case 68: {
        if (tag == 546) {
         parse_PersonalRoomLeave_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomleave_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_PersonalRoomKick_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomKickResp PersonalRoomKick_Resp = 69;
      case 69: {
        if (tag == 554) {
         parse_PersonalRoomKick_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomkick_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_PersonalRoomInvite_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomInviteResp PersonalRoomInvite_Resp = 70;
      case 70: {
        if (tag == 562) {
         parse_PersonalRoomInvite_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroominvite_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_PersonalRoomBroadcast_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomBroadcastResp PersonalRoomBroadcast_Resp = 71;
      case 71: {
        if (tag == 570) {
         parse_PersonalRoomBroadcast_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroombroadcast_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_PersonalRoomChat_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomChatResp PersonalRoomChat_Resp = 72;
      case 72: {
        if (tag == 578) {
         parse_PersonalRoomChat_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomchat_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_PersonalRoomMode_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomModeResp PersonalRoomMode_Resp = 73;
      case 73: {
        if (tag == 586) {
         parse_PersonalRoomMode_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroommode_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_PersonalRoomBeginFight_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomBeginFightResp PersonalRoomBeginFight_Resp = 74;
      case 74: {
        if (tag == 594) {
         parse_PersonalRoomBeginFight_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroombeginfight_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_PersonalRoomApplyOrRefuseInvite_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomApplyOrRefuseInviteResp PersonalRoomApplyOrRefuseInvite_Resp = 76;
      case 76: {
        if (tag == 610) {
         parse_PersonalRoomApplyOrRefuseInvite_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomapplyorrefuseinvite_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_ChangePlayerIcon_Resp;
        break;
      }

      // optional .fgame.CSChangePlayerIconResp ChangePlayerIcon_Resp = 77;
      case 77: {
        if (tag == 618) {
         parse_ChangePlayerIcon_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeplayericon_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_PersonalRoomCountDown_Resp;
        break;
      }

      // optional .fgame.CSPersonalRoomCountDownResp PersonalRoomCountDown_Resp = 78;
      case 78: {
        if (tag == 626) {
         parse_PersonalRoomCountDown_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_personalroomcountdown_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_SyncPlayerData_Resp;
        break;
      }

      // optional .fgame.CSSyncPlayerDataResp SyncPlayerData_Resp = 79;
      case 79: {
        if (tag == 634) {
         parse_SyncPlayerData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncplayerdata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_GetPlayerData_Resp;
        break;
      }

      // optional .fgame.CSGetPlayerDataResp GetPlayerData_Resp = 80;
      case 80: {
        if (tag == 642) {
         parse_GetPlayerData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getplayerdata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_AppearCreep_Resp;
        break;
      }

      // optional .fgame.CSPvpAppearCreepResp AppearCreep_Resp = 81;
      case 81: {
        if (tag == 650) {
         parse_AppearCreep_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appearcreep_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_SaveCheckPtData_Resp;
        break;
      }

      // optional .fgame.CSSaveCheckPtDataResp SaveCheckPtData_Resp = 82;
      case 82: {
        if (tag == 658) {
         parse_SaveCheckPtData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_savecheckptdata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_GetCheckPtData_Resp;
        break;
      }

      // optional .fgame.CSGetCheckPtDataResp GetCheckPtData_Resp = 83;
      case 83: {
        if (tag == 666) {
         parse_GetCheckPtData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getcheckptdata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_SetNewBie_Resp;
        break;
      }

      // optional .fgame.CSSetNewBieResp SetNewBie_Resp = 84;
      case 84: {
        if (tag == 674) {
         parse_SetNewBie_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setnewbie_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_GetNewBieList_Resp;
        break;
      }

      // optional .fgame.CSGetNewBieListResp GetNewBieList_Resp = 85;
      case 85: {
        if (tag == 682) {
         parse_GetNewBieList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getnewbielist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(690)) goto parse_PropertyUpdate_Resp;
        break;
      }

      // optional .fgame.CSPropertyUpdateResp PropertyUpdate_Resp = 86;
      case 86: {
        if (tag == 690) {
         parse_PropertyUpdate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propertyupdate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_EnterPoint_Resp;
        break;
      }

      // optional .fgame.CSEnterPointResp EnterPoint_Resp = 87;
      case 87: {
        if (tag == 698) {
         parse_EnterPoint_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterpoint_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_ShopGuide_Resp;
        break;
      }

      // optional .fgame.CSShopGuideResp ShopGuide_Resp = 88;
      case 88: {
        if (tag == 706) {
         parse_ShopGuide_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopguide_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_ActivityList_Resp;
        break;
      }

      // optional .fgame.CSActivityListResp ActivityList_Resp = 90;
      case 90: {
        if (tag == 722) {
         parse_ActivityList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitylist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_ActivityUpdate_Resp;
        break;
      }

      // optional .fgame.CSActivityUpdateResp ActivityUpdate_Resp = 91;
      case 91: {
        if (tag == 730) {
         parse_ActivityUpdate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activityupdate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_ActivitySubmit_Resp;
        break;
      }

      // optional .fgame.CSActivitySubmitResp ActivitySubmit_Resp = 92;
      case 92: {
        if (tag == 738) {
         parse_ActivitySubmit_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitysubmit_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_SetTitle_Resp;
        break;
      }

      // optional .fgame.CSSetTitleResp SetTitle_Resp = 93;
      case 93: {
        if (tag == 746) {
         parse_SetTitle_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settitle_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(754)) goto parse_ShopBuy_Resp;
        break;
      }

      // optional .fgame.CSShopBuyResp ShopBuy_Resp = 94;
      case 94: {
        if (tag == 754) {
         parse_ShopBuy_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopbuy_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(762)) goto parse_KickPlayer_Req;
        break;
      }

      // optional .fgame.CSKickPlayerReq KickPlayer_Req = 95;
      case 95: {
        if (tag == 762) {
         parse_KickPlayer_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickplayer_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_ExchangeItem_Resp;
        break;
      }

      // optional .fgame.CSExchangeItemResp ExchangeItem_Resp = 96;
      case 96: {
        if (tag == 770) {
         parse_ExchangeItem_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangeitem_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_ActivityCrazyDtls_Resp;
        break;
      }

      // optional .fgame.CSActivityCrazyDtlsResp ActivityCrazyDtls_Resp = 97;
      case 97: {
        if (tag == 778) {
         parse_ActivityCrazyDtls_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitycrazydtls_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_ActivityCrazyUsage_Resp;
        break;
      }

      // optional .fgame.CSActivityCrazyUsageResp ActivityCrazyUsage_Resp = 98;
      case 98: {
        if (tag == 786) {
         parse_ActivityCrazyUsage_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitycrazyusage_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_ActivityCrazyUsable_Resp;
        break;
      }

      // optional .fgame.CSActivityCrazyUsableResp ActivityCrazyUsable_Resp = 99;
      case 99: {
        if (tag == 794) {
         parse_ActivityCrazyUsable_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitycrazyusable_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_ShopList_Resp;
        break;
      }

      // optional .fgame.CSShopListResp ShopList_Resp = 100;
      case 100: {
        if (tag == 802) {
         parse_ShopList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shoplist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_PvpObserver_Resp;
        break;
      }

      // optional .fgame.CSPvpObserverResp PvpObserver_Resp = 101;
      case 101: {
        if (tag == 810) {
         parse_PvpObserver_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpobserver_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_SetNewBieOss_Resp;
        break;
      }

      // optional .fgame.CSSetNewBieOssResp SetNewBieOss_Resp = 102;
      case 102: {
        if (tag == 818) {
         parse_SetNewBieOss_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setnewbieoss_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_UpdateAchievement_Resp;
        break;
      }

      // optional .fgame.CSUpdateAchievementResp UpdateAchievement_Resp = 103;
      case 103: {
        if (tag == 826) {
         parse_UpdateAchievement_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateachievement_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_PvpResult_Resp;
        break;
      }

      // optional .fgame.CSPvpResultResp PvpResult_Resp = 104;
      case 104: {
        if (tag == 834) {
         parse_PvpResult_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpresult_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_PvpSelfRankList_Resp;
        break;
      }

      // optional .fgame.CSPvpSelfRankListResp PvpSelfRankList_Resp = 105;
      case 105: {
        if (tag == 842) {
         parse_PvpSelfRankList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpselfranklist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_GWGetMatchInfo_Resp;
        break;
      }

      // optional .fgame.CSGWGetMatchInfoResp GWGetMatchInfo_Resp = 106;
      case 106: {
        if (tag == 850) {
         parse_GWGetMatchInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwgetmatchinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_GWGetRank_Resp;
        break;
      }

      // optional .fgame.CSGWGetRankResp GWGetRank_Resp = 107;
      case 107: {
        if (tag == 858) {
         parse_GWGetRank_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwgetrank_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_GWMatch_Resp;
        break;
      }

      // optional .fgame.CSGWMatchResp GWMatch_Resp = 108;
      case 108: {
        if (tag == 866) {
         parse_GWMatch_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwmatch_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_GWMatchStop_Resp;
        break;
      }

      // optional .fgame.CSGWMatchStopResp GWMatchStop_Resp = 109;
      case 109: {
        if (tag == 874) {
         parse_GWMatchStop_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwmatchstop_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_GWBuyEnergy_Resp;
        break;
      }

      // optional .fgame.CSGWBuyEnergyResp GWBuyEnergy_Resp = 110;
      case 110: {
        if (tag == 882) {
         parse_GWBuyEnergy_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwbuyenergy_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_RequestPKey_Resp;
        break;
      }

      // optional .fgame.CSRequestPKeyResp RequestPKey_Resp = 114;
      case 114: {
        if (tag == 914) {
         parse_RequestPKey_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestpkey_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_SendClientKey_Resp;
        break;
      }

      // optional .fgame.CSSendClientKeyResp SendClientKey_Resp = 115;
      case 115: {
        if (tag == 922) {
         parse_SendClientKey_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendclientkey_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_UpdateExchangeList_Resp;
        break;
      }

      // optional .fgame.CSUpdateExchangeListResp UpdateExchangeList_Resp = 116;
      case 116: {
        if (tag == 930) {
         parse_UpdateExchangeList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateexchangelist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_GlyphsRequestInfo_Resp;
        break;
      }

      // optional .fgame.CSGlyphsRequestInfoResp GlyphsRequestInfo_Resp = 120;
      case 120: {
        if (tag == 962) {
         parse_GlyphsRequestInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsrequestinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_GlyphsRequestBasicInfo_Resp;
        break;
      }

      // optional .fgame.CSGlyphsRequestBasicInfoResp GlyphsRequestBasicInfo_Resp = 121;
      case 121: {
        if (tag == 970) {
         parse_GlyphsRequestBasicInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsrequestbasicinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_GlyphsActive_Resp;
        break;
      }

      // optional .fgame.CSGlyphsActiveResp GlyphsActive_Resp = 122;
      case 122: {
        if (tag == 978) {
         parse_GlyphsActive_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsactive_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_GlyphsUpgrade_Resp;
        break;
      }

      // optional .fgame.CSGlyphsUpgradeResp GlyphsUpgrade_Resp = 123;
      case 123: {
        if (tag == 986) {
         parse_GlyphsUpgrade_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphsupgrade_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_GlyphsPvpInfo_Resp;
        break;
      }

      // optional .fgame.CSGlyphsPvpInfoResp GlyphsPvpInfo_Resp = 124;
      case 124: {
        if (tag == 994) {
         parse_GlyphsPvpInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphspvpinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1002)) goto parse_BuyVip_Resp;
        break;
      }

      // optional .fgame.CSBuyVipResp BuyVip_Resp = 125;
      case 125: {
        if (tag == 1002) {
         parse_BuyVip_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyvip_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1010)) goto parse_GlyphGuide_Resp;
        break;
      }

      // optional .fgame.CSGlyphGuideResp GlyphGuide_Resp = 126;
      case 126: {
        if (tag == 1010) {
         parse_GlyphGuide_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glyphguide_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1018)) goto parse_NewYearGetInfo_Resp;
        break;
      }

      // optional .fgame.CSNewYearGetInfoResp NewYearGetInfo_Resp = 127;
      case 127: {
        if (tag == 1018) {
         parse_NewYearGetInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyeargetinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_NewYearReward_Resp;
        break;
      }

      // optional .fgame.CSNewYearRewardResp NewYearReward_Resp = 128;
      case 128: {
        if (tag == 1026) {
         parse_NewYearReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearreward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_OpenChest_Resp;
        break;
      }

      // optional .fgame.CSOpenChestResp OpenChest_Resp = 129;
      case 129: {
        if (tag == 1034) {
         parse_OpenChest_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openchest_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_ChristmasDecorate_Resp;
        break;
      }

      // optional .fgame.CSChristmasDecorateResp ChristmasDecorate_Resp = 130;
      case 130: {
        if (tag == 1042) {
         parse_ChristmasDecorate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasdecorate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_ChristmasTakeBonus_Resp;
        break;
      }

      // optional .fgame.CSChristmasTakeBonusResp ChristmasTakeBonus_Resp = 131;
      case 131: {
        if (tag == 1050) {
         parse_ChristmasTakeBonus_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmastakebonus_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_ChristmasGetDate_Resp;
        break;
      }

      // optional .fgame.CSChristmasGetDataResp ChristmasGetDate_Resp = 132;
      case 132: {
        if (tag == 1058) {
         parse_ChristmasGetDate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasgetdate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_ChristmasGetRank_Resp;
        break;
      }

      // optional .fgame.CSChristmasGetRankResp ChristmasGetRank_Resp = 133;
      case 133: {
        if (tag == 1066) {
         parse_ChristmasGetRank_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasgetrank_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_RetriveCheckPtReward_Resp;
        break;
      }

      // optional .fgame.CSRetriveCheckPtRewardResp RetriveCheckPtReward_Resp = 134;
      case 134: {
        if (tag == 1074) {
         parse_RetriveCheckPtReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrivecheckptreward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_NewYearCmp_Resp;
        break;
      }

      // optional .fgame.CSNewYearCmpResp NewYearCmp_Resp = 136;
      case 136: {
        if (tag == 1090) {
         parse_NewYearCmp_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearcmp_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_NotifyGlyphsUpdate_Resp;
        break;
      }

      // optional .fgame.CSNotifyGlyphsUpdateResp NotifyGlyphsUpdate_Resp = 137;
      case 137: {
        if (tag == 1098) {
         parse_NotifyGlyphsUpdate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyglyphsupdate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1106)) goto parse_RecoverItem_Resp;
        break;
      }

      // optional .fgame.CSPvpRecoverItemResp RecoverItem_Resp = 138;
      case 138: {
        if (tag == 1106) {
         parse_RecoverItem_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recoveritem_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1114)) goto parse_SetSignature_Resp;
        break;
      }

      // optional .fgame.CSSetSignatureResp SetSignature_Resp = 139;
      case 139: {
        if (tag == 1114) {
         parse_SetSignature_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsignature_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_SetExtraInfoVisible_Resp;
        break;
      }

      // optional .fgame.CSSetExtraInfoVisibleResp SetExtraInfoVisible_Resp = 140;
      case 140: {
        if (tag == 1122) {
         parse_SetExtraInfoVisible_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setextrainfovisible_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_GetExtraInfo_Resp;
        break;
      }

      // optional .fgame.CSGetExtraInfoResp GetExtraInfo_Resp = 141;
      case 141: {
        if (tag == 1130) {
         parse_GetExtraInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getextrainfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_StopKickPlayer_Req;
        break;
      }

      // optional .fgame.CSStopKickPlayerReq StopKickPlayer_Req = 142;
      case 142: {
        if (tag == 1138) {
         parse_StopKickPlayer_Req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopkickplayer_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_ValentineData_Resp;
        break;
      }

      // optional .fgame.CSValentineDataResp ValentineData_Resp = 143;
      case 143: {
        if (tag == 1146) {
         parse_ValentineData_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valentinedata_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_ValentineExchange_Resp;
        break;
      }

      // optional .fgame.CSValentineExchangeResp ValentineExchange_Resp = 144;
      case 144: {
        if (tag == 1154) {
         parse_ValentineExchange_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valentineexchange_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_RedPacketsGetInfo_Resp;
        break;
      }

      // optional .fgame.CSRedPacketsGetInfoResp RedPacketsGetInfo_Resp = 145;
      case 145: {
        if (tag == 1162) {
         parse_RedPacketsGetInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsgetinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_RedPacketsGreb_Resp;
        break;
      }

      // optional .fgame.CSRedPacketsGrebResp RedPacketsGreb_Resp = 146;
      case 146: {
        if (tag == 1170) {
         parse_RedPacketsGreb_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsgreb_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1178)) goto parse_RedPacketsOpened_Resp;
        break;
      }

      // optional .fgame.CSRedPacketsOpenedResp RedPacketsOpened_Resp = 147;
      case 147: {
        if (tag == 1178) {
         parse_RedPacketsOpened_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketsopened_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1186)) goto parse_ChapterUnlock_Resp;
        break;
      }

      // optional .fgame.CSChapterUnlockResp ChapterUnlock_Resp = 148;
      case 148: {
        if (tag == 1186) {
         parse_ChapterUnlock_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chapterunlock_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1194)) goto parse_GetChest_Resp;
        break;
      }

      // optional .fgame.CSGetChestResp GetChest_Resp = 149;
      case 149: {
        if (tag == 1194) {
         parse_GetChest_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchest_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_PveNotify_Resp;
        break;
      }

      // optional .fgame.CSPveNotifyResp PveNotify_Resp = 150;
      case 150: {
        if (tag == 1202) {
         parse_PveNotify_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvenotify_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1210)) goto parse_PvpGetAward_Resp;
        break;
      }

      // optional .fgame.CSPvpGetAwardResp PvpGetAward_Resp = 151;
      case 151: {
        if (tag == 1210) {
         parse_PvpGetAward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpgetaward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1218)) goto parse_DailyTaskStatus_Resp;
        break;
      }

      // optional .fgame.CSDailyTaskStatusResp DailyTaskStatus_Resp = 152;
      case 152: {
        if (tag == 1218) {
         parse_DailyTaskStatus_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailytaskstatus_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1226)) goto parse_RequestDailyTask_Resp;
        break;
      }

      // optional .fgame.CSRequestDailyTaskResp RequestDailyTask_Resp = 153;
      case 153: {
        if (tag == 1226) {
         parse_RequestDailyTask_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestdailytask_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1234)) goto parse_ChangeDailyTask_Resp;
        break;
      }

      // optional .fgame.CSChangeDailyTaskResp ChangeDailyTask_Resp = 154;
      case 154: {
        if (tag == 1234) {
         parse_ChangeDailyTask_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changedailytask_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1242)) goto parse_OpenDailyTaskAward_Resp;
        break;
      }

      // optional .fgame.CSOpenDailyTaskAwardResp OpenDailyTaskAward_Resp = 155;
      case 155: {
        if (tag == 1242) {
         parse_OpenDailyTaskAward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opendailytaskaward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1250)) goto parse_UpdateDailyTaskProgress_Resp;
        break;
      }

      // optional .fgame.CSUpdateDailyTaskProgressResp UpdateDailyTaskProgress_Resp = 156;
      case 156: {
        if (tag == 1250) {
         parse_UpdateDailyTaskProgress_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatedailytaskprogress_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1258)) goto parse_NewDailyTask_Resp;
        break;
      }

      // optional .fgame.CSNewDailyTaskResp NewDailyTask_Resp = 157;
      case 157: {
        if (tag == 1258) {
         parse_NewDailyTask_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newdailytask_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1274)) goto parse_PveCheckAward_Resp;
        break;
      }

      // optional .fgame.CSPveCheckAwardResp PveCheckAward_Resp = 159;
      case 159: {
        if (tag == 1274) {
         parse_PveCheckAward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvecheckaward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1282)) goto parse_RankWeekRewardInfo_Resp;
        break;
      }

      // optional .fgame.CSRankWeekRewardInfoResp RankWeekRewardInfo_Resp = 160;
      case 160: {
        if (tag == 1282) {
         parse_RankWeekRewardInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankweekrewardinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1290)) goto parse_RankWeekRewardReward_Resp;
        break;
      }

      // optional .fgame.CSRankWeekRewardRewardResp RankWeekRewardReward_Resp = 161;
      case 161: {
        if (tag == 1290) {
         parse_RankWeekRewardReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankweekrewardreward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1298)) goto parse_ShareReward_Resp;
        break;
      }

      // optional .fgame.CSShareRewardGetResq ShareReward_Resp = 162;
      case 162: {
        if (tag == 1298) {
         parse_ShareReward_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sharereward_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1306)) goto parse_GetSevenGoalList_Resp;
        break;
      }

      // optional .fgame.CSGetSevenGoalListResp GetSevenGoalList_Resp = 163;
      case 163: {
        if (tag == 1306) {
         parse_GetSevenGoalList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsevengoallist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1314)) goto parse_RetriveSevenGoal_Resp;
        break;
      }

      // optional .fgame.CSRetriveSevenGoalResp RetriveSevenGoal_Resp = 164;
      case 164: {
        if (tag == 1314) {
         parse_RetriveSevenGoal_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retrivesevengoal_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1322)) goto parse_NoticeSevenGoal_Resp;
        break;
      }

      // optional .fgame.CSNoticeSevenGoalResp NoticeSevenGoal_Resp = 165;
      case 165: {
        if (tag == 1322) {
         parse_NoticeSevenGoal_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noticesevengoal_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1330)) goto parse_PveRank_Resp;
        break;
      }

      // optional .fgame.CSPveRankResp PveRank_Resp = 166;
      case 166: {
        if (tag == 1330) {
         parse_PveRank_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pverank_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1338)) goto parse_TopRank_Resp;
        break;
      }

      // optional .fgame.CSTopRankResp TopRank_Resp = 167;
      case 167: {
        if (tag == 1338) {
         parse_TopRank_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toprank_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1346)) goto parse_TopRankTime_Resp;
        break;
      }

      // optional .fgame.CSTopRankTimeResp TopRankTime_Resp = 168;
      case 168: {
        if (tag == 1346) {
         parse_TopRankTime_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topranktime_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_UpdateTaskStatus_Resp;
        break;
      }

      // optional .fgame.CSUpdateTaskStatusResp UpdateTaskStatus_Resp = 201;
      case 201: {
        if (tag == 1610) {
         parse_UpdateTaskStatus_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatetaskstatus_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_AsSyncInfo_Resp;
        break;
      }

      // optional .fgame.CSAsSyncInfoResp AsSyncInfo_Resp = 202;
      case 202: {
        if (tag == 1618) {
         parse_AsSyncInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assyncinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_AsNewAdd_Resp;
        break;
      }

      // optional .fgame.CSAsNewAddResp AsNewAdd_Resp = 203;
      case 203: {
        if (tag == 1626) {
         parse_AsNewAdd_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asnewadd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_AsOperate_Resp;
        break;
      }

      // optional .fgame.CSAsOperateResp AsOperate_Resp = 204;
      case 204: {
        if (tag == 1634) {
         parse_AsOperate_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asoperate_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1642)) goto parse_AsUseCard_Resp;
        break;
      }

      // optional .fgame.CSAsUseCardResp AsUseCard_Resp = 205;
      case 205: {
        if (tag == 1642) {
         parse_AsUseCard_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asusecard_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1650)) goto parse_PvpUseSkill_Resp;
        break;
      }

      // optional .fgame.CSPvpUseSkillResp PvpUseSkill_Resp = 206;
      case 206: {
        if (tag == 1650) {
         parse_PvpUseSkill_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpuseskill_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1658)) goto parse_PvpAssistantInfo_Resp;
        break;
      }

      // optional .fgame.CSPvpAssistantInfoResp PvpAssistantInfo_Resp = 207;
      case 207: {
        if (tag == 1658) {
         parse_PvpAssistantInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpassistantinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1666)) goto parse_InstituteInfo_Resp;
        break;
      }

      // optional .fgame.CSInstituteInfoResp InstituteInfo_Resp = 208;
      case 208: {
        if (tag == 1666) {
         parse_InstituteInfo_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instituteinfo_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1674)) goto parse_InstituteBuy_Resp;
        break;
      }

      // optional .fgame.CSInstituteBuyResp InstituteBuy_Resp = 209;
      case 209: {
        if (tag == 1674) {
         parse_InstituteBuy_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_institutebuy_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2402)) goto parse_OpActAdd_Resp;
        break;
      }

      // optional .fgame.CSOpActAddResp OpActAdd_Resp = 300;
      case 300: {
        if (tag == 2402) {
         parse_OpActAdd_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactadd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_OpActStateChanged_Resp;
        break;
      }

      // optional .fgame.CSOpActStateChangedResp OpActStateChanged_Resp = 301;
      case 301: {
        if (tag == 2410) {
         parse_OpActStateChanged_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactstatechanged_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2418)) goto parse_OpActSelfDataChanged_Resp;
        break;
      }

      // optional .fgame.CSActSelfDataChangedResp OpActSelfDataChanged_Resp = 302;
      case 302: {
        if (tag == 2418) {
         parse_OpActSelfDataChanged_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactselfdatachanged_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2426)) goto parse_OpActGlobalDataChanged_Resp;
        break;
      }

      // optional .fgame.CSActGlobalDataChangedResp OpActGlobalDataChanged_Resp = 303;
      case 303: {
        if (tag == 2426) {
         parse_OpActGlobalDataChanged_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactglobaldatachanged_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2434)) goto parse_OpActConfigList_Resp;
        break;
      }

      // optional .fgame.CSOpActConfigListResp OpActConfigList_Resp = 304;
      case 304: {
        if (tag == 2434) {
         parse_OpActConfigList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactconfiglist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2442)) goto parse_OpActSelfDataList_Resp;
        break;
      }

      // optional .fgame.CSOpActSelfDataListResp OpActSelfDataList_Resp = 305;
      case 305: {
        if (tag == 2442) {
         parse_OpActSelfDataList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactselfdatalist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2450)) goto parse_OpActGlobalDataList_Resp;
        break;
      }

      // optional .fgame.CSOpActGlobalDataListResp OpActGlobalDataList_Resp = 306;
      case 306: {
        if (tag == 2450) {
         parse_OpActGlobalDataList_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactglobaldatalist_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2482)) goto parse_OpActDemoTake_Resp;
        break;
      }

      // optional .fgame.CSOpActDemoTakeResp OpActDemoTake_Resp = 310;
      case 310: {
        if (tag == 2482) {
         parse_OpActDemoTake_Resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactdemotake_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.S2ClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.S2ClientMsg)
  return false;
#undef DO_
}

void S2ClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.S2ClientMsg)
  // optional .fgame.CSErrorMsg Error_Msg = 1;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->error_msg(), output);
  }

  // optional .fgame.CSLoginResp Login_Resp = 2;
  if (has_login_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->login_resp(), output);
  }

  // optional .fgame.CSRegResp Reg_Resp = 3;
  if (has_reg_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->reg_resp(), output);
  }

  // optional .fgame.CSHeartBeatResp HeartBeat_Resp = 4;
  if (has_heartbeat_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->heartbeat_resp(), output);
  }

  // optional .fgame.CSPvpMatchResp Match_Resp = 5;
  if (has_match_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->match_resp(), output);
  }

  // optional .fgame.CSPvpStartResp Start_Resp = 6;
  if (has_start_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->start_resp(), output);
  }

  // optional .fgame.CSPvpFightResp Fight_Resp = 7;
  if (has_fight_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->fight_resp(), output);
  }

  // optional .fgame.CSPvpEndResp End_Resp = 8;
  if (has_end_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->end_resp(), output);
  }

  // optional .fgame.CSPvpMapResp Map_Resp = 9;
  if (has_map_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->map_resp(), output);
  }

  // optional .fgame.CSPvpUpgradeResp Upgrade_Resp = 10;
  if (has_upgrade_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->upgrade_resp(), output);
  }

  // optional .fgame.CSPvpPingResp Ping_Resp = 13;
  if (has_ping_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->ping_resp(), output);
  }

  // optional .fgame.CSBuyItemResp BuyItem_Resp = 14;
  if (has_buyitem_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->buyitem_resp(), output);
  }

  // optional .fgame.CSUseItemResp UseItem_Resp = 15;
  if (has_useitem_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->useitem_resp(), output);
  }

  // optional .fgame.CSPvpLeaveResp Leave_Resp = 18;
  if (has_leave_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->leave_resp(), output);
  }

  // optional .fgame.CSGetAchievementResp GetAchievement_Resp = 19;
  if (has_getachievement_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->getachievement_resp(), output);
  }

  // optional .fgame.CSReceiveAchievementResp ReceiveAchievement_Resp = 20;
  if (has_receiveachievement_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->receiveachievement_resp(), output);
  }

  // optional .fgame.CSReceiveAchievementRewardResp ReceiveAchievementReward_Resp = 21;
  if (has_receiveachievementreward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->receiveachievementreward_resp(), output);
  }

  // optional .fgame.CSEnterServerResp EnterServer_Resp = 22;
  if (has_enterserver_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->enterserver_resp(), output);
  }

  // optional .fgame.CSCanEnterReq CanEnter_Req = 23;
  if (has_canenter_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->canenter_req(), output);
  }

  // optional .fgame.CSQueueReq Queue_Req = 24;
  if (has_queue_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->queue_req(), output);
  }

  // optional .fgame.CSDircetEnterResp DirectEnter_Resp = 25;
  if (has_directenter_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->directenter_resp(), output);
  }

  // optional .fgame.CSPvpRankingGetListResp PvpRankingGetList_Resp = 26;
  if (has_pvprankinggetlist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->pvprankinggetlist_resp(), output);
  }

  // optional .fgame.CSStreakWinValueResp StreakWinValue_Resp = 27;
  if (has_streakwinvalue_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->streakwinvalue_resp(), output);
  }

  // optional .fgame.CSStreakWinGetResp StreakWinGet_Resp = 28;
  if (has_streakwinget_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->streakwinget_resp(), output);
  }

  // optional .fgame.CSOpenBigStageResp OpenBigStage_Resp = 29;
  if (has_openbigstage_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->openbigstage_resp(), output);
  }

  // optional .fgame.CSPvpUseItemResp PvpUseItem_Resp = 30;
  if (has_pvpuseitem_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->pvpuseitem_resp(), output);
  }

  // optional .fgame.CSSevenDaySignListResp SevenDaySignList_Resp = 31;
  if (has_sevendaysignlist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->sevendaysignlist_resp(), output);
  }

  // optional .fgame.CSSevenDaySignResp SevenDaySign_Resp = 32;
  if (has_sevendaysign_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->sevendaysign_resp(), output);
  }

  // optional .fgame.CSGetServerResp GetServer_Resp = 33;
  if (has_getserver_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->getserver_resp(), output);
  }

  // optional .fgame.CSSycPlayerInfoResp SycPlayerInfo_Resp = 34;
  if (has_sycplayerinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->sycplayerinfo_resp(), output);
  }

  // optional .fgame.CSNoticeReq Notice_Req = 35;
  if (has_notice_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->notice_req(), output);
  }

  // optional .fgame.CSPvpStopMatchResp StopMatch_Resp = 36;
  if (has_stopmatch_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->stopmatch_resp(), output);
  }

  // optional .fgame.CSChangeNameResp ChangeName_Resp = 37;
  if (has_changename_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->changename_resp(), output);
  }

  // optional .fgame.CSGMCmdReq GMCmd_Req = 40;
  if (has_gmcmd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->gmcmd_req(), output);
  }

  // optional .fgame.CSXinShouRecodeResp XinShouRecode_Resp = 41;
  if (has_xinshourecode_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->xinshourecode_resp(), output);
  }

  // optional .fgame.CSPvpRankingPlayerInfoResp PvpRankingPlayerInfo_Resp = 42;
  if (has_pvprankingplayerinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->pvprankingplayerinfo_resp(), output);
  }

  // optional .fgame.CSGetOpenActivityResp GetOpenActivity_Resp = 43;
  if (has_getopenactivity_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->getopenactivity_resp(), output);
  }

  // optional .fgame.CSGetActivityDataResp GetActivityData_Resp = 44;
  if (has_getactivitydata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, this->getactivitydata_resp(), output);
  }

  // optional .fgame.CSReceiveActivityRewardResp ReceiveActivityReward_Resp = 45;
  if (has_receiveactivityreward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->receiveactivityreward_resp(), output);
  }

  // optional .fgame.CSMissionListResp MissionList_Resp = 46;
  if (has_missionlist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->missionlist_resp(), output);
  }

  // optional .fgame.CSMissionCompleteResp MissionComplete_Resp = 47;
  if (has_missioncomplete_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->missioncomplete_resp(), output);
  }

  // optional .fgame.CSMissionUpdateResp MissionUpdate_Resp = 48;
  if (has_missionupdate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->missionupdate_resp(), output);
  }

  // optional .fgame.CSGetPowerEnergyActivityResp GetPowerEnergyActivity_Resp = 49;
  if (has_getpowerenergyactivity_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->getpowerenergyactivity_resp(), output);
  }

  // optional .fgame.CSReceivePowerEnergyResp ReceivePowerEnergy_Resp = 50;
  if (has_receivepowerenergy_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->receivepowerenergy_resp(), output);
  }

  // optional .fgame.CSGetMailResp GetMail_Resp = 51;
  if (has_getmail_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->getmail_resp(), output);
  }

  // optional .fgame.CSDelMailResp DelMail_Resp = 52;
  if (has_delmail_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, this->delmail_resp(), output);
  }

  // optional .fgame.CSNoticeMailReq NoticeMail_Req = 53;
  if (has_noticemail_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      53, this->noticemail_req(), output);
  }

  // optional .fgame.CSBuyNewbieGiftResp BuyNewbieGift_Resp = 54;
  if (has_buynewbiegift_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, this->buynewbiegift_resp(), output);
  }

  // optional .fgame.CSRechargeCallbackResp RechargeCallback_Resp = 55;
  if (has_rechargecallback_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, this->rechargecallback_resp(), output);
  }

  // optional .fgame.CSFriendQueryResp FriendQuery_Resp = 56;
  if (has_friendquery_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, this->friendquery_resp(), output);
  }

  // optional .fgame.CSFriendRequestAddResp FriendRequestAdd_Resp = 57;
  if (has_friendrequestadd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, this->friendrequestadd_resp(), output);
  }

  // optional .fgame.CSFriendConfirmAddResp FriendConfirmAdd_Resp = 58;
  if (has_friendconfirmadd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, this->friendconfirmadd_resp(), output);
  }

  // optional .fgame.CSFriendGetInfoResp FriendGetInfo_Resp = 59;
  if (has_friendgetinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, this->friendgetinfo_resp(), output);
  }

  // optional .fgame.CSFriendRequestRemoveResp FriendRequestRemove_Resp = 60;
  if (has_friendrequestremove_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->friendrequestremove_resp(), output);
  }

  // optional .fgame.CSFriendAddBlackListResp FriendAddBlackList_Resp = 61;
  if (has_friendaddblacklist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->friendaddblacklist_resp(), output);
  }

  // optional .fgame.CSFriendRemoveBlackListResp FriendRemoveBlackList_Resp = 62;
  if (has_friendremoveblacklist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, this->friendremoveblacklist_resp(), output);
  }

  // optional .fgame.CSPvpChatResp PvpChat_Resp = 63;
  if (has_pvpchat_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, this->pvpchat_resp(), output);
  }

  // optional .fgame.CSUseGiftCodeResp UseGiftCode_Resp = 64;
  if (has_usegiftcode_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, this->usegiftcode_resp(), output);
  }

  // optional .fgame.CSQueryPlayerInfoResp QueryPlayerInfo_Resp = 65;
  if (has_queryplayerinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->queryplayerinfo_resp(), output);
  }

  // optional .fgame.CSPersonalRoomCreateResp PersonalRoomCreate_Resp = 66;
  if (has_personalroomcreate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      66, this->personalroomcreate_resp(), output);
  }

  // optional .fgame.CSPersonalRoomEnterResp PersonalRoomEnter_Resp = 67;
  if (has_personalroomenter_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, this->personalroomenter_resp(), output);
  }

  // optional .fgame.CSPersonalRoomLeaveResp PersonalRoomLeave_Resp = 68;
  if (has_personalroomleave_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      68, this->personalroomleave_resp(), output);
  }

  // optional .fgame.CSPersonalRoomKickResp PersonalRoomKick_Resp = 69;
  if (has_personalroomkick_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      69, this->personalroomkick_resp(), output);
  }

  // optional .fgame.CSPersonalRoomInviteResp PersonalRoomInvite_Resp = 70;
  if (has_personalroominvite_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, this->personalroominvite_resp(), output);
  }

  // optional .fgame.CSPersonalRoomBroadcastResp PersonalRoomBroadcast_Resp = 71;
  if (has_personalroombroadcast_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, this->personalroombroadcast_resp(), output);
  }

  // optional .fgame.CSPersonalRoomChatResp PersonalRoomChat_Resp = 72;
  if (has_personalroomchat_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      72, this->personalroomchat_resp(), output);
  }

  // optional .fgame.CSPersonalRoomModeResp PersonalRoomMode_Resp = 73;
  if (has_personalroommode_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, this->personalroommode_resp(), output);
  }

  // optional .fgame.CSPersonalRoomBeginFightResp PersonalRoomBeginFight_Resp = 74;
  if (has_personalroombeginfight_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      74, this->personalroombeginfight_resp(), output);
  }

  // optional .fgame.CSPersonalRoomApplyOrRefuseInviteResp PersonalRoomApplyOrRefuseInvite_Resp = 76;
  if (has_personalroomapplyorrefuseinvite_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      76, this->personalroomapplyorrefuseinvite_resp(), output);
  }

  // optional .fgame.CSChangePlayerIconResp ChangePlayerIcon_Resp = 77;
  if (has_changeplayericon_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      77, this->changeplayericon_resp(), output);
  }

  // optional .fgame.CSPersonalRoomCountDownResp PersonalRoomCountDown_Resp = 78;
  if (has_personalroomcountdown_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      78, this->personalroomcountdown_resp(), output);
  }

  // optional .fgame.CSSyncPlayerDataResp SyncPlayerData_Resp = 79;
  if (has_syncplayerdata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, this->syncplayerdata_resp(), output);
  }

  // optional .fgame.CSGetPlayerDataResp GetPlayerData_Resp = 80;
  if (has_getplayerdata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, this->getplayerdata_resp(), output);
  }

  // optional .fgame.CSPvpAppearCreepResp AppearCreep_Resp = 81;
  if (has_appearcreep_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, this->appearcreep_resp(), output);
  }

  // optional .fgame.CSSaveCheckPtDataResp SaveCheckPtData_Resp = 82;
  if (has_savecheckptdata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      82, this->savecheckptdata_resp(), output);
  }

  // optional .fgame.CSGetCheckPtDataResp GetCheckPtData_Resp = 83;
  if (has_getcheckptdata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      83, this->getcheckptdata_resp(), output);
  }

  // optional .fgame.CSSetNewBieResp SetNewBie_Resp = 84;
  if (has_setnewbie_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      84, this->setnewbie_resp(), output);
  }

  // optional .fgame.CSGetNewBieListResp GetNewBieList_Resp = 85;
  if (has_getnewbielist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      85, this->getnewbielist_resp(), output);
  }

  // optional .fgame.CSPropertyUpdateResp PropertyUpdate_Resp = 86;
  if (has_propertyupdate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      86, this->propertyupdate_resp(), output);
  }

  // optional .fgame.CSEnterPointResp EnterPoint_Resp = 87;
  if (has_enterpoint_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      87, this->enterpoint_resp(), output);
  }

  // optional .fgame.CSShopGuideResp ShopGuide_Resp = 88;
  if (has_shopguide_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      88, this->shopguide_resp(), output);
  }

  // optional .fgame.CSActivityListResp ActivityList_Resp = 90;
  if (has_activitylist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      90, this->activitylist_resp(), output);
  }

  // optional .fgame.CSActivityUpdateResp ActivityUpdate_Resp = 91;
  if (has_activityupdate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      91, this->activityupdate_resp(), output);
  }

  // optional .fgame.CSActivitySubmitResp ActivitySubmit_Resp = 92;
  if (has_activitysubmit_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      92, this->activitysubmit_resp(), output);
  }

  // optional .fgame.CSSetTitleResp SetTitle_Resp = 93;
  if (has_settitle_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      93, this->settitle_resp(), output);
  }

  // optional .fgame.CSShopBuyResp ShopBuy_Resp = 94;
  if (has_shopbuy_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      94, this->shopbuy_resp(), output);
  }

  // optional .fgame.CSKickPlayerReq KickPlayer_Req = 95;
  if (has_kickplayer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      95, this->kickplayer_req(), output);
  }

  // optional .fgame.CSExchangeItemResp ExchangeItem_Resp = 96;
  if (has_exchangeitem_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      96, this->exchangeitem_resp(), output);
  }

  // optional .fgame.CSActivityCrazyDtlsResp ActivityCrazyDtls_Resp = 97;
  if (has_activitycrazydtls_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      97, this->activitycrazydtls_resp(), output);
  }

  // optional .fgame.CSActivityCrazyUsageResp ActivityCrazyUsage_Resp = 98;
  if (has_activitycrazyusage_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      98, this->activitycrazyusage_resp(), output);
  }

  // optional .fgame.CSActivityCrazyUsableResp ActivityCrazyUsable_Resp = 99;
  if (has_activitycrazyusable_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      99, this->activitycrazyusable_resp(), output);
  }

  // optional .fgame.CSShopListResp ShopList_Resp = 100;
  if (has_shoplist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->shoplist_resp(), output);
  }

  // optional .fgame.CSPvpObserverResp PvpObserver_Resp = 101;
  if (has_pvpobserver_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->pvpobserver_resp(), output);
  }

  // optional .fgame.CSSetNewBieOssResp SetNewBieOss_Resp = 102;
  if (has_setnewbieoss_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->setnewbieoss_resp(), output);
  }

  // optional .fgame.CSUpdateAchievementResp UpdateAchievement_Resp = 103;
  if (has_updateachievement_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103, this->updateachievement_resp(), output);
  }

  // optional .fgame.CSPvpResultResp PvpResult_Resp = 104;
  if (has_pvpresult_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104, this->pvpresult_resp(), output);
  }

  // optional .fgame.CSPvpSelfRankListResp PvpSelfRankList_Resp = 105;
  if (has_pvpselfranklist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      105, this->pvpselfranklist_resp(), output);
  }

  // optional .fgame.CSGWGetMatchInfoResp GWGetMatchInfo_Resp = 106;
  if (has_gwgetmatchinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      106, this->gwgetmatchinfo_resp(), output);
  }

  // optional .fgame.CSGWGetRankResp GWGetRank_Resp = 107;
  if (has_gwgetrank_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      107, this->gwgetrank_resp(), output);
  }

  // optional .fgame.CSGWMatchResp GWMatch_Resp = 108;
  if (has_gwmatch_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      108, this->gwmatch_resp(), output);
  }

  // optional .fgame.CSGWMatchStopResp GWMatchStop_Resp = 109;
  if (has_gwmatchstop_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      109, this->gwmatchstop_resp(), output);
  }

  // optional .fgame.CSGWBuyEnergyResp GWBuyEnergy_Resp = 110;
  if (has_gwbuyenergy_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      110, this->gwbuyenergy_resp(), output);
  }

  // optional .fgame.CSRequestPKeyResp RequestPKey_Resp = 114;
  if (has_requestpkey_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      114, this->requestpkey_resp(), output);
  }

  // optional .fgame.CSSendClientKeyResp SendClientKey_Resp = 115;
  if (has_sendclientkey_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      115, this->sendclientkey_resp(), output);
  }

  // optional .fgame.CSUpdateExchangeListResp UpdateExchangeList_Resp = 116;
  if (has_updateexchangelist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      116, this->updateexchangelist_resp(), output);
  }

  // optional .fgame.CSGlyphsRequestInfoResp GlyphsRequestInfo_Resp = 120;
  if (has_glyphsrequestinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      120, this->glyphsrequestinfo_resp(), output);
  }

  // optional .fgame.CSGlyphsRequestBasicInfoResp GlyphsRequestBasicInfo_Resp = 121;
  if (has_glyphsrequestbasicinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      121, this->glyphsrequestbasicinfo_resp(), output);
  }

  // optional .fgame.CSGlyphsActiveResp GlyphsActive_Resp = 122;
  if (has_glyphsactive_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      122, this->glyphsactive_resp(), output);
  }

  // optional .fgame.CSGlyphsUpgradeResp GlyphsUpgrade_Resp = 123;
  if (has_glyphsupgrade_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      123, this->glyphsupgrade_resp(), output);
  }

  // optional .fgame.CSGlyphsPvpInfoResp GlyphsPvpInfo_Resp = 124;
  if (has_glyphspvpinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      124, this->glyphspvpinfo_resp(), output);
  }

  // optional .fgame.CSBuyVipResp BuyVip_Resp = 125;
  if (has_buyvip_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      125, this->buyvip_resp(), output);
  }

  // optional .fgame.CSGlyphGuideResp GlyphGuide_Resp = 126;
  if (has_glyphguide_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      126, this->glyphguide_resp(), output);
  }

  // optional .fgame.CSNewYearGetInfoResp NewYearGetInfo_Resp = 127;
  if (has_newyeargetinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      127, this->newyeargetinfo_resp(), output);
  }

  // optional .fgame.CSNewYearRewardResp NewYearReward_Resp = 128;
  if (has_newyearreward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      128, this->newyearreward_resp(), output);
  }

  // optional .fgame.CSOpenChestResp OpenChest_Resp = 129;
  if (has_openchest_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      129, this->openchest_resp(), output);
  }

  // optional .fgame.CSChristmasDecorateResp ChristmasDecorate_Resp = 130;
  if (has_christmasdecorate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      130, this->christmasdecorate_resp(), output);
  }

  // optional .fgame.CSChristmasTakeBonusResp ChristmasTakeBonus_Resp = 131;
  if (has_christmastakebonus_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      131, this->christmastakebonus_resp(), output);
  }

  // optional .fgame.CSChristmasGetDataResp ChristmasGetDate_Resp = 132;
  if (has_christmasgetdate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      132, this->christmasgetdate_resp(), output);
  }

  // optional .fgame.CSChristmasGetRankResp ChristmasGetRank_Resp = 133;
  if (has_christmasgetrank_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      133, this->christmasgetrank_resp(), output);
  }

  // optional .fgame.CSRetriveCheckPtRewardResp RetriveCheckPtReward_Resp = 134;
  if (has_retrivecheckptreward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      134, this->retrivecheckptreward_resp(), output);
  }

  // optional .fgame.CSNewYearCmpResp NewYearCmp_Resp = 136;
  if (has_newyearcmp_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      136, this->newyearcmp_resp(), output);
  }

  // optional .fgame.CSNotifyGlyphsUpdateResp NotifyGlyphsUpdate_Resp = 137;
  if (has_notifyglyphsupdate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      137, this->notifyglyphsupdate_resp(), output);
  }

  // optional .fgame.CSPvpRecoverItemResp RecoverItem_Resp = 138;
  if (has_recoveritem_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      138, this->recoveritem_resp(), output);
  }

  // optional .fgame.CSSetSignatureResp SetSignature_Resp = 139;
  if (has_setsignature_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      139, this->setsignature_resp(), output);
  }

  // optional .fgame.CSSetExtraInfoVisibleResp SetExtraInfoVisible_Resp = 140;
  if (has_setextrainfovisible_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      140, this->setextrainfovisible_resp(), output);
  }

  // optional .fgame.CSGetExtraInfoResp GetExtraInfo_Resp = 141;
  if (has_getextrainfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      141, this->getextrainfo_resp(), output);
  }

  // optional .fgame.CSStopKickPlayerReq StopKickPlayer_Req = 142;
  if (has_stopkickplayer_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      142, this->stopkickplayer_req(), output);
  }

  // optional .fgame.CSValentineDataResp ValentineData_Resp = 143;
  if (has_valentinedata_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      143, this->valentinedata_resp(), output);
  }

  // optional .fgame.CSValentineExchangeResp ValentineExchange_Resp = 144;
  if (has_valentineexchange_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      144, this->valentineexchange_resp(), output);
  }

  // optional .fgame.CSRedPacketsGetInfoResp RedPacketsGetInfo_Resp = 145;
  if (has_redpacketsgetinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      145, this->redpacketsgetinfo_resp(), output);
  }

  // optional .fgame.CSRedPacketsGrebResp RedPacketsGreb_Resp = 146;
  if (has_redpacketsgreb_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      146, this->redpacketsgreb_resp(), output);
  }

  // optional .fgame.CSRedPacketsOpenedResp RedPacketsOpened_Resp = 147;
  if (has_redpacketsopened_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      147, this->redpacketsopened_resp(), output);
  }

  // optional .fgame.CSChapterUnlockResp ChapterUnlock_Resp = 148;
  if (has_chapterunlock_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      148, this->chapterunlock_resp(), output);
  }

  // optional .fgame.CSGetChestResp GetChest_Resp = 149;
  if (has_getchest_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      149, this->getchest_resp(), output);
  }

  // optional .fgame.CSPveNotifyResp PveNotify_Resp = 150;
  if (has_pvenotify_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      150, this->pvenotify_resp(), output);
  }

  // optional .fgame.CSPvpGetAwardResp PvpGetAward_Resp = 151;
  if (has_pvpgetaward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      151, this->pvpgetaward_resp(), output);
  }

  // optional .fgame.CSDailyTaskStatusResp DailyTaskStatus_Resp = 152;
  if (has_dailytaskstatus_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      152, this->dailytaskstatus_resp(), output);
  }

  // optional .fgame.CSRequestDailyTaskResp RequestDailyTask_Resp = 153;
  if (has_requestdailytask_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      153, this->requestdailytask_resp(), output);
  }

  // optional .fgame.CSChangeDailyTaskResp ChangeDailyTask_Resp = 154;
  if (has_changedailytask_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      154, this->changedailytask_resp(), output);
  }

  // optional .fgame.CSOpenDailyTaskAwardResp OpenDailyTaskAward_Resp = 155;
  if (has_opendailytaskaward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      155, this->opendailytaskaward_resp(), output);
  }

  // optional .fgame.CSUpdateDailyTaskProgressResp UpdateDailyTaskProgress_Resp = 156;
  if (has_updatedailytaskprogress_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      156, this->updatedailytaskprogress_resp(), output);
  }

  // optional .fgame.CSNewDailyTaskResp NewDailyTask_Resp = 157;
  if (has_newdailytask_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      157, this->newdailytask_resp(), output);
  }

  // optional .fgame.CSPveCheckAwardResp PveCheckAward_Resp = 159;
  if (has_pvecheckaward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      159, this->pvecheckaward_resp(), output);
  }

  // optional .fgame.CSRankWeekRewardInfoResp RankWeekRewardInfo_Resp = 160;
  if (has_rankweekrewardinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      160, this->rankweekrewardinfo_resp(), output);
  }

  // optional .fgame.CSRankWeekRewardRewardResp RankWeekRewardReward_Resp = 161;
  if (has_rankweekrewardreward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      161, this->rankweekrewardreward_resp(), output);
  }

  // optional .fgame.CSShareRewardGetResq ShareReward_Resp = 162;
  if (has_sharereward_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      162, this->sharereward_resp(), output);
  }

  // optional .fgame.CSGetSevenGoalListResp GetSevenGoalList_Resp = 163;
  if (has_getsevengoallist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      163, this->getsevengoallist_resp(), output);
  }

  // optional .fgame.CSRetriveSevenGoalResp RetriveSevenGoal_Resp = 164;
  if (has_retrivesevengoal_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      164, this->retrivesevengoal_resp(), output);
  }

  // optional .fgame.CSNoticeSevenGoalResp NoticeSevenGoal_Resp = 165;
  if (has_noticesevengoal_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      165, this->noticesevengoal_resp(), output);
  }

  // optional .fgame.CSPveRankResp PveRank_Resp = 166;
  if (has_pverank_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      166, this->pverank_resp(), output);
  }

  // optional .fgame.CSTopRankResp TopRank_Resp = 167;
  if (has_toprank_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      167, this->toprank_resp(), output);
  }

  // optional .fgame.CSTopRankTimeResp TopRankTime_Resp = 168;
  if (has_topranktime_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      168, this->topranktime_resp(), output);
  }

  // optional .fgame.CSUpdateTaskStatusResp UpdateTaskStatus_Resp = 201;
  if (has_updatetaskstatus_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      201, this->updatetaskstatus_resp(), output);
  }

  // optional .fgame.CSAsSyncInfoResp AsSyncInfo_Resp = 202;
  if (has_assyncinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      202, this->assyncinfo_resp(), output);
  }

  // optional .fgame.CSAsNewAddResp AsNewAdd_Resp = 203;
  if (has_asnewadd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      203, this->asnewadd_resp(), output);
  }

  // optional .fgame.CSAsOperateResp AsOperate_Resp = 204;
  if (has_asoperate_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      204, this->asoperate_resp(), output);
  }

  // optional .fgame.CSAsUseCardResp AsUseCard_Resp = 205;
  if (has_asusecard_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      205, this->asusecard_resp(), output);
  }

  // optional .fgame.CSPvpUseSkillResp PvpUseSkill_Resp = 206;
  if (has_pvpuseskill_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      206, this->pvpuseskill_resp(), output);
  }

  // optional .fgame.CSPvpAssistantInfoResp PvpAssistantInfo_Resp = 207;
  if (has_pvpassistantinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      207, this->pvpassistantinfo_resp(), output);
  }

  // optional .fgame.CSInstituteInfoResp InstituteInfo_Resp = 208;
  if (has_instituteinfo_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      208, this->instituteinfo_resp(), output);
  }

  // optional .fgame.CSInstituteBuyResp InstituteBuy_Resp = 209;
  if (has_institutebuy_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      209, this->institutebuy_resp(), output);
  }

  // optional .fgame.CSOpActAddResp OpActAdd_Resp = 300;
  if (has_opactadd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      300, this->opactadd_resp(), output);
  }

  // optional .fgame.CSOpActStateChangedResp OpActStateChanged_Resp = 301;
  if (has_opactstatechanged_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      301, this->opactstatechanged_resp(), output);
  }

  // optional .fgame.CSActSelfDataChangedResp OpActSelfDataChanged_Resp = 302;
  if (has_opactselfdatachanged_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      302, this->opactselfdatachanged_resp(), output);
  }

  // optional .fgame.CSActGlobalDataChangedResp OpActGlobalDataChanged_Resp = 303;
  if (has_opactglobaldatachanged_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      303, this->opactglobaldatachanged_resp(), output);
  }

  // optional .fgame.CSOpActConfigListResp OpActConfigList_Resp = 304;
  if (has_opactconfiglist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      304, this->opactconfiglist_resp(), output);
  }

  // optional .fgame.CSOpActSelfDataListResp OpActSelfDataList_Resp = 305;
  if (has_opactselfdatalist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      305, this->opactselfdatalist_resp(), output);
  }

  // optional .fgame.CSOpActGlobalDataListResp OpActGlobalDataList_Resp = 306;
  if (has_opactglobaldatalist_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      306, this->opactglobaldatalist_resp(), output);
  }

  // optional .fgame.CSOpActDemoTakeResp OpActDemoTake_Resp = 310;
  if (has_opactdemotake_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      310, this->opactdemotake_resp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.S2ClientMsg)
}

int S2ClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fgame.CSErrorMsg Error_Msg = 1;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error_msg());
    }

    // optional .fgame.CSLoginResp Login_Resp = 2;
    if (has_login_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_resp());
    }

    // optional .fgame.CSRegResp Reg_Resp = 3;
    if (has_reg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reg_resp());
    }

    // optional .fgame.CSHeartBeatResp HeartBeat_Resp = 4;
    if (has_heartbeat_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_resp());
    }

    // optional .fgame.CSPvpMatchResp Match_Resp = 5;
    if (has_match_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match_resp());
    }

    // optional .fgame.CSPvpStartResp Start_Resp = 6;
    if (has_start_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_resp());
    }

    // optional .fgame.CSPvpFightResp Fight_Resp = 7;
    if (has_fight_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_resp());
    }

    // optional .fgame.CSPvpEndResp End_Resp = 8;
    if (has_end_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_resp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .fgame.CSPvpMapResp Map_Resp = 9;
    if (has_map_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_resp());
    }

    // optional .fgame.CSPvpUpgradeResp Upgrade_Resp = 10;
    if (has_upgrade_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgrade_resp());
    }

    // optional .fgame.CSPvpPingResp Ping_Resp = 13;
    if (has_ping_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_resp());
    }

    // optional .fgame.CSBuyItemResp BuyItem_Resp = 14;
    if (has_buyitem_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyitem_resp());
    }

    // optional .fgame.CSUseItemResp UseItem_Resp = 15;
    if (has_useitem_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useitem_resp());
    }

    // optional .fgame.CSPvpLeaveResp Leave_Resp = 18;
    if (has_leave_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leave_resp());
    }

    // optional .fgame.CSGetAchievementResp GetAchievement_Resp = 19;
    if (has_getachievement_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getachievement_resp());
    }

    // optional .fgame.CSReceiveAchievementResp ReceiveAchievement_Resp = 20;
    if (has_receiveachievement_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveachievement_resp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .fgame.CSReceiveAchievementRewardResp ReceiveAchievementReward_Resp = 21;
    if (has_receiveachievementreward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveachievementreward_resp());
    }

    // optional .fgame.CSEnterServerResp EnterServer_Resp = 22;
    if (has_enterserver_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterserver_resp());
    }

    // optional .fgame.CSCanEnterReq CanEnter_Req = 23;
    if (has_canenter_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canenter_req());
    }

    // optional .fgame.CSQueueReq Queue_Req = 24;
    if (has_queue_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queue_req());
    }

    // optional .fgame.CSDircetEnterResp DirectEnter_Resp = 25;
    if (has_directenter_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directenter_resp());
    }

    // optional .fgame.CSPvpRankingGetListResp PvpRankingGetList_Resp = 26;
    if (has_pvprankinggetlist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvprankinggetlist_resp());
    }

    // optional .fgame.CSStreakWinValueResp StreakWinValue_Resp = 27;
    if (has_streakwinvalue_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streakwinvalue_resp());
    }

    // optional .fgame.CSStreakWinGetResp StreakWinGet_Resp = 28;
    if (has_streakwinget_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streakwinget_resp());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .fgame.CSOpenBigStageResp OpenBigStage_Resp = 29;
    if (has_openbigstage_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openbigstage_resp());
    }

    // optional .fgame.CSPvpUseItemResp PvpUseItem_Resp = 30;
    if (has_pvpuseitem_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpuseitem_resp());
    }

    // optional .fgame.CSSevenDaySignListResp SevenDaySignList_Resp = 31;
    if (has_sevendaysignlist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevendaysignlist_resp());
    }

    // optional .fgame.CSSevenDaySignResp SevenDaySign_Resp = 32;
    if (has_sevendaysign_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sevendaysign_resp());
    }

    // optional .fgame.CSGetServerResp GetServer_Resp = 33;
    if (has_getserver_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getserver_resp());
    }

    // optional .fgame.CSSycPlayerInfoResp SycPlayerInfo_Resp = 34;
    if (has_sycplayerinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sycplayerinfo_resp());
    }

    // optional .fgame.CSNoticeReq Notice_Req = 35;
    if (has_notice_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notice_req());
    }

    // optional .fgame.CSPvpStopMatchResp StopMatch_Resp = 36;
    if (has_stopmatch_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopmatch_resp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .fgame.CSChangeNameResp ChangeName_Resp = 37;
    if (has_changename_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changename_resp());
    }

    // optional .fgame.CSGMCmdReq GMCmd_Req = 40;
    if (has_gmcmd_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmcmd_req());
    }

    // optional .fgame.CSXinShouRecodeResp XinShouRecode_Resp = 41;
    if (has_xinshourecode_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xinshourecode_resp());
    }

    // optional .fgame.CSPvpRankingPlayerInfoResp PvpRankingPlayerInfo_Resp = 42;
    if (has_pvprankingplayerinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvprankingplayerinfo_resp());
    }

    // optional .fgame.CSGetOpenActivityResp GetOpenActivity_Resp = 43;
    if (has_getopenactivity_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getopenactivity_resp());
    }

    // optional .fgame.CSGetActivityDataResp GetActivityData_Resp = 44;
    if (has_getactivitydata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getactivitydata_resp());
    }

    // optional .fgame.CSReceiveActivityRewardResp ReceiveActivityReward_Resp = 45;
    if (has_receiveactivityreward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiveactivityreward_resp());
    }

    // optional .fgame.CSMissionListResp MissionList_Resp = 46;
    if (has_missionlist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionlist_resp());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .fgame.CSMissionCompleteResp MissionComplete_Resp = 47;
    if (has_missioncomplete_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missioncomplete_resp());
    }

    // optional .fgame.CSMissionUpdateResp MissionUpdate_Resp = 48;
    if (has_missionupdate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionupdate_resp());
    }

    // optional .fgame.CSGetPowerEnergyActivityResp GetPowerEnergyActivity_Resp = 49;
    if (has_getpowerenergyactivity_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getpowerenergyactivity_resp());
    }

    // optional .fgame.CSReceivePowerEnergyResp ReceivePowerEnergy_Resp = 50;
    if (has_receivepowerenergy_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receivepowerenergy_resp());
    }

    // optional .fgame.CSGetMailResp GetMail_Resp = 51;
    if (has_getmail_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getmail_resp());
    }

    // optional .fgame.CSDelMailResp DelMail_Resp = 52;
    if (has_delmail_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delmail_resp());
    }

    // optional .fgame.CSNoticeMailReq NoticeMail_Req = 53;
    if (has_noticemail_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noticemail_req());
    }

    // optional .fgame.CSBuyNewbieGiftResp BuyNewbieGift_Resp = 54;
    if (has_buynewbiegift_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buynewbiegift_resp());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .fgame.CSRechargeCallbackResp RechargeCallback_Resp = 55;
    if (has_rechargecallback_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargecallback_resp());
    }

    // optional .fgame.CSFriendQueryResp FriendQuery_Resp = 56;
    if (has_friendquery_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendquery_resp());
    }

    // optional .fgame.CSFriendRequestAddResp FriendRequestAdd_Resp = 57;
    if (has_friendrequestadd_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrequestadd_resp());
    }

    // optional .fgame.CSFriendConfirmAddResp FriendConfirmAdd_Resp = 58;
    if (has_friendconfirmadd_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendconfirmadd_resp());
    }

    // optional .fgame.CSFriendGetInfoResp FriendGetInfo_Resp = 59;
    if (has_friendgetinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendgetinfo_resp());
    }

    // optional .fgame.CSFriendRequestRemoveResp FriendRequestRemove_Resp = 60;
    if (has_friendrequestremove_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrequestremove_resp());
    }

    // optional .fgame.CSFriendAddBlackListResp FriendAddBlackList_Resp = 61;
    if (has_friendaddblacklist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendaddblacklist_resp());
    }

    // optional .fgame.CSFriendRemoveBlackListResp FriendRemoveBlackList_Resp = 62;
    if (has_friendremoveblacklist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendremoveblacklist_resp());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .fgame.CSPvpChatResp PvpChat_Resp = 63;
    if (has_pvpchat_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpchat_resp());
    }

    // optional .fgame.CSUseGiftCodeResp UseGiftCode_Resp = 64;
    if (has_usegiftcode_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usegiftcode_resp());
    }

    // optional .fgame.CSQueryPlayerInfoResp QueryPlayerInfo_Resp = 65;
    if (has_queryplayerinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryplayerinfo_resp());
    }

    // optional .fgame.CSPersonalRoomCreateResp PersonalRoomCreate_Resp = 66;
    if (has_personalroomcreate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomcreate_resp());
    }

    // optional .fgame.CSPersonalRoomEnterResp PersonalRoomEnter_Resp = 67;
    if (has_personalroomenter_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomenter_resp());
    }

    // optional .fgame.CSPersonalRoomLeaveResp PersonalRoomLeave_Resp = 68;
    if (has_personalroomleave_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomleave_resp());
    }

    // optional .fgame.CSPersonalRoomKickResp PersonalRoomKick_Resp = 69;
    if (has_personalroomkick_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomkick_resp());
    }

    // optional .fgame.CSPersonalRoomInviteResp PersonalRoomInvite_Resp = 70;
    if (has_personalroominvite_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroominvite_resp());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .fgame.CSPersonalRoomBroadcastResp PersonalRoomBroadcast_Resp = 71;
    if (has_personalroombroadcast_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroombroadcast_resp());
    }

    // optional .fgame.CSPersonalRoomChatResp PersonalRoomChat_Resp = 72;
    if (has_personalroomchat_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomchat_resp());
    }

    // optional .fgame.CSPersonalRoomModeResp PersonalRoomMode_Resp = 73;
    if (has_personalroommode_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroommode_resp());
    }

    // optional .fgame.CSPersonalRoomBeginFightResp PersonalRoomBeginFight_Resp = 74;
    if (has_personalroombeginfight_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroombeginfight_resp());
    }

    // optional .fgame.CSPersonalRoomApplyOrRefuseInviteResp PersonalRoomApplyOrRefuseInvite_Resp = 76;
    if (has_personalroomapplyorrefuseinvite_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomapplyorrefuseinvite_resp());
    }

    // optional .fgame.CSChangePlayerIconResp ChangePlayerIcon_Resp = 77;
    if (has_changeplayericon_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeplayericon_resp());
    }

    // optional .fgame.CSPersonalRoomCountDownResp PersonalRoomCountDown_Resp = 78;
    if (has_personalroomcountdown_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->personalroomcountdown_resp());
    }

    // optional .fgame.CSSyncPlayerDataResp SyncPlayerData_Resp = 79;
    if (has_syncplayerdata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncplayerdata_resp());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .fgame.CSGetPlayerDataResp GetPlayerData_Resp = 80;
    if (has_getplayerdata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getplayerdata_resp());
    }

    // optional .fgame.CSPvpAppearCreepResp AppearCreep_Resp = 81;
    if (has_appearcreep_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appearcreep_resp());
    }

    // optional .fgame.CSSaveCheckPtDataResp SaveCheckPtData_Resp = 82;
    if (has_savecheckptdata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->savecheckptdata_resp());
    }

    // optional .fgame.CSGetCheckPtDataResp GetCheckPtData_Resp = 83;
    if (has_getcheckptdata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getcheckptdata_resp());
    }

    // optional .fgame.CSSetNewBieResp SetNewBie_Resp = 84;
    if (has_setnewbie_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setnewbie_resp());
    }

    // optional .fgame.CSGetNewBieListResp GetNewBieList_Resp = 85;
    if (has_getnewbielist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getnewbielist_resp());
    }

    // optional .fgame.CSPropertyUpdateResp PropertyUpdate_Resp = 86;
    if (has_propertyupdate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propertyupdate_resp());
    }

    // optional .fgame.CSEnterPointResp EnterPoint_Resp = 87;
    if (has_enterpoint_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterpoint_resp());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .fgame.CSShopGuideResp ShopGuide_Resp = 88;
    if (has_shopguide_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopguide_resp());
    }

    // optional .fgame.CSActivityListResp ActivityList_Resp = 90;
    if (has_activitylist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitylist_resp());
    }

    // optional .fgame.CSActivityUpdateResp ActivityUpdate_Resp = 91;
    if (has_activityupdate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activityupdate_resp());
    }

    // optional .fgame.CSActivitySubmitResp ActivitySubmit_Resp = 92;
    if (has_activitysubmit_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitysubmit_resp());
    }

    // optional .fgame.CSSetTitleResp SetTitle_Resp = 93;
    if (has_settitle_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settitle_resp());
    }

    // optional .fgame.CSShopBuyResp ShopBuy_Resp = 94;
    if (has_shopbuy_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopbuy_resp());
    }

    // optional .fgame.CSKickPlayerReq KickPlayer_Req = 95;
    if (has_kickplayer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickplayer_req());
    }

    // optional .fgame.CSExchangeItemResp ExchangeItem_Resp = 96;
    if (has_exchangeitem_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchangeitem_resp());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .fgame.CSActivityCrazyDtlsResp ActivityCrazyDtls_Resp = 97;
    if (has_activitycrazydtls_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitycrazydtls_resp());
    }

    // optional .fgame.CSActivityCrazyUsageResp ActivityCrazyUsage_Resp = 98;
    if (has_activitycrazyusage_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitycrazyusage_resp());
    }

    // optional .fgame.CSActivityCrazyUsableResp ActivityCrazyUsable_Resp = 99;
    if (has_activitycrazyusable_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitycrazyusable_resp());
    }

    // optional .fgame.CSShopListResp ShopList_Resp = 100;
    if (has_shoplist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shoplist_resp());
    }

    // optional .fgame.CSPvpObserverResp PvpObserver_Resp = 101;
    if (has_pvpobserver_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpobserver_resp());
    }

    // optional .fgame.CSSetNewBieOssResp SetNewBieOss_Resp = 102;
    if (has_setnewbieoss_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setnewbieoss_resp());
    }

    // optional .fgame.CSUpdateAchievementResp UpdateAchievement_Resp = 103;
    if (has_updateachievement_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updateachievement_resp());
    }

    // optional .fgame.CSPvpResultResp PvpResult_Resp = 104;
    if (has_pvpresult_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpresult_resp());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .fgame.CSPvpSelfRankListResp PvpSelfRankList_Resp = 105;
    if (has_pvpselfranklist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpselfranklist_resp());
    }

    // optional .fgame.CSGWGetMatchInfoResp GWGetMatchInfo_Resp = 106;
    if (has_gwgetmatchinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwgetmatchinfo_resp());
    }

    // optional .fgame.CSGWGetRankResp GWGetRank_Resp = 107;
    if (has_gwgetrank_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwgetrank_resp());
    }

    // optional .fgame.CSGWMatchResp GWMatch_Resp = 108;
    if (has_gwmatch_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwmatch_resp());
    }

    // optional .fgame.CSGWMatchStopResp GWMatchStop_Resp = 109;
    if (has_gwmatchstop_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwmatchstop_resp());
    }

    // optional .fgame.CSGWBuyEnergyResp GWBuyEnergy_Resp = 110;
    if (has_gwbuyenergy_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwbuyenergy_resp());
    }

    // optional .fgame.CSRequestPKeyResp RequestPKey_Resp = 114;
    if (has_requestpkey_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestpkey_resp());
    }

    // optional .fgame.CSSendClientKeyResp SendClientKey_Resp = 115;
    if (has_sendclientkey_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendclientkey_resp());
    }

  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional .fgame.CSUpdateExchangeListResp UpdateExchangeList_Resp = 116;
    if (has_updateexchangelist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updateexchangelist_resp());
    }

    // optional .fgame.CSGlyphsRequestInfoResp GlyphsRequestInfo_Resp = 120;
    if (has_glyphsrequestinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsrequestinfo_resp());
    }

    // optional .fgame.CSGlyphsRequestBasicInfoResp GlyphsRequestBasicInfo_Resp = 121;
    if (has_glyphsrequestbasicinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsrequestbasicinfo_resp());
    }

    // optional .fgame.CSGlyphsActiveResp GlyphsActive_Resp = 122;
    if (has_glyphsactive_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsactive_resp());
    }

    // optional .fgame.CSGlyphsUpgradeResp GlyphsUpgrade_Resp = 123;
    if (has_glyphsupgrade_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphsupgrade_resp());
    }

    // optional .fgame.CSGlyphsPvpInfoResp GlyphsPvpInfo_Resp = 124;
    if (has_glyphspvpinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphspvpinfo_resp());
    }

    // optional .fgame.CSBuyVipResp BuyVip_Resp = 125;
    if (has_buyvip_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyvip_resp());
    }

    // optional .fgame.CSGlyphGuideResp GlyphGuide_Resp = 126;
    if (has_glyphguide_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphguide_resp());
    }

  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional .fgame.CSNewYearGetInfoResp NewYearGetInfo_Resp = 127;
    if (has_newyeargetinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyeargetinfo_resp());
    }

    // optional .fgame.CSNewYearRewardResp NewYearReward_Resp = 128;
    if (has_newyearreward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearreward_resp());
    }

    // optional .fgame.CSOpenChestResp OpenChest_Resp = 129;
    if (has_openchest_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openchest_resp());
    }

    // optional .fgame.CSChristmasDecorateResp ChristmasDecorate_Resp = 130;
    if (has_christmasdecorate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasdecorate_resp());
    }

    // optional .fgame.CSChristmasTakeBonusResp ChristmasTakeBonus_Resp = 131;
    if (has_christmastakebonus_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmastakebonus_resp());
    }

    // optional .fgame.CSChristmasGetDataResp ChristmasGetDate_Resp = 132;
    if (has_christmasgetdate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasgetdate_resp());
    }

    // optional .fgame.CSChristmasGetRankResp ChristmasGetRank_Resp = 133;
    if (has_christmasgetrank_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasgetrank_resp());
    }

    // optional .fgame.CSRetriveCheckPtRewardResp RetriveCheckPtReward_Resp = 134;
    if (has_retrivecheckptreward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrivecheckptreward_resp());
    }

  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional .fgame.CSNewYearCmpResp NewYearCmp_Resp = 136;
    if (has_newyearcmp_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearcmp_resp());
    }

    // optional .fgame.CSNotifyGlyphsUpdateResp NotifyGlyphsUpdate_Resp = 137;
    if (has_notifyglyphsupdate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifyglyphsupdate_resp());
    }

    // optional .fgame.CSPvpRecoverItemResp RecoverItem_Resp = 138;
    if (has_recoveritem_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recoveritem_resp());
    }

    // optional .fgame.CSSetSignatureResp SetSignature_Resp = 139;
    if (has_setsignature_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setsignature_resp());
    }

    // optional .fgame.CSSetExtraInfoVisibleResp SetExtraInfoVisible_Resp = 140;
    if (has_setextrainfovisible_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setextrainfovisible_resp());
    }

    // optional .fgame.CSGetExtraInfoResp GetExtraInfo_Resp = 141;
    if (has_getextrainfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getextrainfo_resp());
    }

    // optional .fgame.CSStopKickPlayerReq StopKickPlayer_Req = 142;
    if (has_stopkickplayer_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopkickplayer_req());
    }

    // optional .fgame.CSValentineDataResp ValentineData_Resp = 143;
    if (has_valentinedata_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valentinedata_resp());
    }

  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    // optional .fgame.CSValentineExchangeResp ValentineExchange_Resp = 144;
    if (has_valentineexchange_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valentineexchange_resp());
    }

    // optional .fgame.CSRedPacketsGetInfoResp RedPacketsGetInfo_Resp = 145;
    if (has_redpacketsgetinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsgetinfo_resp());
    }

    // optional .fgame.CSRedPacketsGrebResp RedPacketsGreb_Resp = 146;
    if (has_redpacketsgreb_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsgreb_resp());
    }

    // optional .fgame.CSRedPacketsOpenedResp RedPacketsOpened_Resp = 147;
    if (has_redpacketsopened_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketsopened_resp());
    }

    // optional .fgame.CSChapterUnlockResp ChapterUnlock_Resp = 148;
    if (has_chapterunlock_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chapterunlock_resp());
    }

    // optional .fgame.CSGetChestResp GetChest_Resp = 149;
    if (has_getchest_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getchest_resp());
    }

    // optional .fgame.CSPveNotifyResp PveNotify_Resp = 150;
    if (has_pvenotify_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvenotify_resp());
    }

    // optional .fgame.CSPvpGetAwardResp PvpGetAward_Resp = 151;
    if (has_pvpgetaward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpgetaward_resp());
    }

  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    // optional .fgame.CSDailyTaskStatusResp DailyTaskStatus_Resp = 152;
    if (has_dailytaskstatus_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailytaskstatus_resp());
    }

    // optional .fgame.CSRequestDailyTaskResp RequestDailyTask_Resp = 153;
    if (has_requestdailytask_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestdailytask_resp());
    }

    // optional .fgame.CSChangeDailyTaskResp ChangeDailyTask_Resp = 154;
    if (has_changedailytask_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changedailytask_resp());
    }

    // optional .fgame.CSOpenDailyTaskAwardResp OpenDailyTaskAward_Resp = 155;
    if (has_opendailytaskaward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opendailytaskaward_resp());
    }

    // optional .fgame.CSUpdateDailyTaskProgressResp UpdateDailyTaskProgress_Resp = 156;
    if (has_updatedailytaskprogress_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatedailytaskprogress_resp());
    }

    // optional .fgame.CSNewDailyTaskResp NewDailyTask_Resp = 157;
    if (has_newdailytask_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newdailytask_resp());
    }

    // optional .fgame.CSPveCheckAwardResp PveCheckAward_Resp = 159;
    if (has_pvecheckaward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvecheckaward_resp());
    }

    // optional .fgame.CSRankWeekRewardInfoResp RankWeekRewardInfo_Resp = 160;
    if (has_rankweekrewardinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankweekrewardinfo_resp());
    }

  }
  if (_has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    // optional .fgame.CSRankWeekRewardRewardResp RankWeekRewardReward_Resp = 161;
    if (has_rankweekrewardreward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankweekrewardreward_resp());
    }

    // optional .fgame.CSShareRewardGetResq ShareReward_Resp = 162;
    if (has_sharereward_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sharereward_resp());
    }

    // optional .fgame.CSGetSevenGoalListResp GetSevenGoalList_Resp = 163;
    if (has_getsevengoallist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsevengoallist_resp());
    }

    // optional .fgame.CSRetriveSevenGoalResp RetriveSevenGoal_Resp = 164;
    if (has_retrivesevengoal_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retrivesevengoal_resp());
    }

    // optional .fgame.CSNoticeSevenGoalResp NoticeSevenGoal_Resp = 165;
    if (has_noticesevengoal_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noticesevengoal_resp());
    }

    // optional .fgame.CSPveRankResp PveRank_Resp = 166;
    if (has_pverank_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pverank_resp());
    }

    // optional .fgame.CSTopRankResp TopRank_Resp = 167;
    if (has_toprank_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toprank_resp());
    }

    // optional .fgame.CSTopRankTimeResp TopRankTime_Resp = 168;
    if (has_topranktime_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topranktime_resp());
    }

  }
  if (_has_bits_[152 / 32] & (0xffu << (152 % 32))) {
    // optional .fgame.CSUpdateTaskStatusResp UpdateTaskStatus_Resp = 201;
    if (has_updatetaskstatus_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatetaskstatus_resp());
    }

    // optional .fgame.CSAsSyncInfoResp AsSyncInfo_Resp = 202;
    if (has_assyncinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assyncinfo_resp());
    }

    // optional .fgame.CSAsNewAddResp AsNewAdd_Resp = 203;
    if (has_asnewadd_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asnewadd_resp());
    }

    // optional .fgame.CSAsOperateResp AsOperate_Resp = 204;
    if (has_asoperate_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asoperate_resp());
    }

    // optional .fgame.CSAsUseCardResp AsUseCard_Resp = 205;
    if (has_asusecard_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asusecard_resp());
    }

    // optional .fgame.CSPvpUseSkillResp PvpUseSkill_Resp = 206;
    if (has_pvpuseskill_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpuseskill_resp());
    }

    // optional .fgame.CSPvpAssistantInfoResp PvpAssistantInfo_Resp = 207;
    if (has_pvpassistantinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpassistantinfo_resp());
    }

    // optional .fgame.CSInstituteInfoResp InstituteInfo_Resp = 208;
    if (has_instituteinfo_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instituteinfo_resp());
    }

  }
  if (_has_bits_[160 / 32] & (0xffu << (160 % 32))) {
    // optional .fgame.CSInstituteBuyResp InstituteBuy_Resp = 209;
    if (has_institutebuy_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->institutebuy_resp());
    }

    // optional .fgame.CSOpActAddResp OpActAdd_Resp = 300;
    if (has_opactadd_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactadd_resp());
    }

    // optional .fgame.CSOpActStateChangedResp OpActStateChanged_Resp = 301;
    if (has_opactstatechanged_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactstatechanged_resp());
    }

    // optional .fgame.CSActSelfDataChangedResp OpActSelfDataChanged_Resp = 302;
    if (has_opactselfdatachanged_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactselfdatachanged_resp());
    }

    // optional .fgame.CSActGlobalDataChangedResp OpActGlobalDataChanged_Resp = 303;
    if (has_opactglobaldatachanged_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactglobaldatachanged_resp());
    }

    // optional .fgame.CSOpActConfigListResp OpActConfigList_Resp = 304;
    if (has_opactconfiglist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactconfiglist_resp());
    }

    // optional .fgame.CSOpActSelfDataListResp OpActSelfDataList_Resp = 305;
    if (has_opactselfdatalist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactselfdatalist_resp());
    }

    // optional .fgame.CSOpActGlobalDataListResp OpActGlobalDataList_Resp = 306;
    if (has_opactglobaldatalist_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactglobaldatalist_resp());
    }

  }
  if (_has_bits_[168 / 32] & (0xffu << (168 % 32))) {
    // optional .fgame.CSOpActDemoTakeResp OpActDemoTake_Resp = 310;
    if (has_opactdemotake_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opactdemotake_resp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2ClientMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const S2ClientMsg*>(&from));
}

void S2ClientMsg::MergeFrom(const S2ClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_msg()) {
      mutable_error_msg()->::fgame::CSErrorMsg::MergeFrom(from.error_msg());
    }
    if (from.has_login_resp()) {
      mutable_login_resp()->::fgame::CSLoginResp::MergeFrom(from.login_resp());
    }
    if (from.has_reg_resp()) {
      mutable_reg_resp()->::fgame::CSRegResp::MergeFrom(from.reg_resp());
    }
    if (from.has_heartbeat_resp()) {
      mutable_heartbeat_resp()->::fgame::CSHeartBeatResp::MergeFrom(from.heartbeat_resp());
    }
    if (from.has_match_resp()) {
      mutable_match_resp()->::fgame::CSPvpMatchResp::MergeFrom(from.match_resp());
    }
    if (from.has_start_resp()) {
      mutable_start_resp()->::fgame::CSPvpStartResp::MergeFrom(from.start_resp());
    }
    if (from.has_fight_resp()) {
      mutable_fight_resp()->::fgame::CSPvpFightResp::MergeFrom(from.fight_resp());
    }
    if (from.has_end_resp()) {
      mutable_end_resp()->::fgame::CSPvpEndResp::MergeFrom(from.end_resp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map_resp()) {
      mutable_map_resp()->::fgame::CSPvpMapResp::MergeFrom(from.map_resp());
    }
    if (from.has_upgrade_resp()) {
      mutable_upgrade_resp()->::fgame::CSPvpUpgradeResp::MergeFrom(from.upgrade_resp());
    }
    if (from.has_ping_resp()) {
      mutable_ping_resp()->::fgame::CSPvpPingResp::MergeFrom(from.ping_resp());
    }
    if (from.has_buyitem_resp()) {
      mutable_buyitem_resp()->::fgame::CSBuyItemResp::MergeFrom(from.buyitem_resp());
    }
    if (from.has_useitem_resp()) {
      mutable_useitem_resp()->::fgame::CSUseItemResp::MergeFrom(from.useitem_resp());
    }
    if (from.has_leave_resp()) {
      mutable_leave_resp()->::fgame::CSPvpLeaveResp::MergeFrom(from.leave_resp());
    }
    if (from.has_getachievement_resp()) {
      mutable_getachievement_resp()->::fgame::CSGetAchievementResp::MergeFrom(from.getachievement_resp());
    }
    if (from.has_receiveachievement_resp()) {
      mutable_receiveachievement_resp()->::fgame::CSReceiveAchievementResp::MergeFrom(from.receiveachievement_resp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_receiveachievementreward_resp()) {
      mutable_receiveachievementreward_resp()->::fgame::CSReceiveAchievementRewardResp::MergeFrom(from.receiveachievementreward_resp());
    }
    if (from.has_enterserver_resp()) {
      mutable_enterserver_resp()->::fgame::CSEnterServerResp::MergeFrom(from.enterserver_resp());
    }
    if (from.has_canenter_req()) {
      mutable_canenter_req()->::fgame::CSCanEnterReq::MergeFrom(from.canenter_req());
    }
    if (from.has_queue_req()) {
      mutable_queue_req()->::fgame::CSQueueReq::MergeFrom(from.queue_req());
    }
    if (from.has_directenter_resp()) {
      mutable_directenter_resp()->::fgame::CSDircetEnterResp::MergeFrom(from.directenter_resp());
    }
    if (from.has_pvprankinggetlist_resp()) {
      mutable_pvprankinggetlist_resp()->::fgame::CSPvpRankingGetListResp::MergeFrom(from.pvprankinggetlist_resp());
    }
    if (from.has_streakwinvalue_resp()) {
      mutable_streakwinvalue_resp()->::fgame::CSStreakWinValueResp::MergeFrom(from.streakwinvalue_resp());
    }
    if (from.has_streakwinget_resp()) {
      mutable_streakwinget_resp()->::fgame::CSStreakWinGetResp::MergeFrom(from.streakwinget_resp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_openbigstage_resp()) {
      mutable_openbigstage_resp()->::fgame::CSOpenBigStageResp::MergeFrom(from.openbigstage_resp());
    }
    if (from.has_pvpuseitem_resp()) {
      mutable_pvpuseitem_resp()->::fgame::CSPvpUseItemResp::MergeFrom(from.pvpuseitem_resp());
    }
    if (from.has_sevendaysignlist_resp()) {
      mutable_sevendaysignlist_resp()->::fgame::CSSevenDaySignListResp::MergeFrom(from.sevendaysignlist_resp());
    }
    if (from.has_sevendaysign_resp()) {
      mutable_sevendaysign_resp()->::fgame::CSSevenDaySignResp::MergeFrom(from.sevendaysign_resp());
    }
    if (from.has_getserver_resp()) {
      mutable_getserver_resp()->::fgame::CSGetServerResp::MergeFrom(from.getserver_resp());
    }
    if (from.has_sycplayerinfo_resp()) {
      mutable_sycplayerinfo_resp()->::fgame::CSSycPlayerInfoResp::MergeFrom(from.sycplayerinfo_resp());
    }
    if (from.has_notice_req()) {
      mutable_notice_req()->::fgame::CSNoticeReq::MergeFrom(from.notice_req());
    }
    if (from.has_stopmatch_resp()) {
      mutable_stopmatch_resp()->::fgame::CSPvpStopMatchResp::MergeFrom(from.stopmatch_resp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_changename_resp()) {
      mutable_changename_resp()->::fgame::CSChangeNameResp::MergeFrom(from.changename_resp());
    }
    if (from.has_gmcmd_req()) {
      mutable_gmcmd_req()->::fgame::CSGMCmdReq::MergeFrom(from.gmcmd_req());
    }
    if (from.has_xinshourecode_resp()) {
      mutable_xinshourecode_resp()->::fgame::CSXinShouRecodeResp::MergeFrom(from.xinshourecode_resp());
    }
    if (from.has_pvprankingplayerinfo_resp()) {
      mutable_pvprankingplayerinfo_resp()->::fgame::CSPvpRankingPlayerInfoResp::MergeFrom(from.pvprankingplayerinfo_resp());
    }
    if (from.has_getopenactivity_resp()) {
      mutable_getopenactivity_resp()->::fgame::CSGetOpenActivityResp::MergeFrom(from.getopenactivity_resp());
    }
    if (from.has_getactivitydata_resp()) {
      mutable_getactivitydata_resp()->::fgame::CSGetActivityDataResp::MergeFrom(from.getactivitydata_resp());
    }
    if (from.has_receiveactivityreward_resp()) {
      mutable_receiveactivityreward_resp()->::fgame::CSReceiveActivityRewardResp::MergeFrom(from.receiveactivityreward_resp());
    }
    if (from.has_missionlist_resp()) {
      mutable_missionlist_resp()->::fgame::CSMissionListResp::MergeFrom(from.missionlist_resp());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_missioncomplete_resp()) {
      mutable_missioncomplete_resp()->::fgame::CSMissionCompleteResp::MergeFrom(from.missioncomplete_resp());
    }
    if (from.has_missionupdate_resp()) {
      mutable_missionupdate_resp()->::fgame::CSMissionUpdateResp::MergeFrom(from.missionupdate_resp());
    }
    if (from.has_getpowerenergyactivity_resp()) {
      mutable_getpowerenergyactivity_resp()->::fgame::CSGetPowerEnergyActivityResp::MergeFrom(from.getpowerenergyactivity_resp());
    }
    if (from.has_receivepowerenergy_resp()) {
      mutable_receivepowerenergy_resp()->::fgame::CSReceivePowerEnergyResp::MergeFrom(from.receivepowerenergy_resp());
    }
    if (from.has_getmail_resp()) {
      mutable_getmail_resp()->::fgame::CSGetMailResp::MergeFrom(from.getmail_resp());
    }
    if (from.has_delmail_resp()) {
      mutable_delmail_resp()->::fgame::CSDelMailResp::MergeFrom(from.delmail_resp());
    }
    if (from.has_noticemail_req()) {
      mutable_noticemail_req()->::fgame::CSNoticeMailReq::MergeFrom(from.noticemail_req());
    }
    if (from.has_buynewbiegift_resp()) {
      mutable_buynewbiegift_resp()->::fgame::CSBuyNewbieGiftResp::MergeFrom(from.buynewbiegift_resp());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_rechargecallback_resp()) {
      mutable_rechargecallback_resp()->::fgame::CSRechargeCallbackResp::MergeFrom(from.rechargecallback_resp());
    }
    if (from.has_friendquery_resp()) {
      mutable_friendquery_resp()->::fgame::CSFriendQueryResp::MergeFrom(from.friendquery_resp());
    }
    if (from.has_friendrequestadd_resp()) {
      mutable_friendrequestadd_resp()->::fgame::CSFriendRequestAddResp::MergeFrom(from.friendrequestadd_resp());
    }
    if (from.has_friendconfirmadd_resp()) {
      mutable_friendconfirmadd_resp()->::fgame::CSFriendConfirmAddResp::MergeFrom(from.friendconfirmadd_resp());
    }
    if (from.has_friendgetinfo_resp()) {
      mutable_friendgetinfo_resp()->::fgame::CSFriendGetInfoResp::MergeFrom(from.friendgetinfo_resp());
    }
    if (from.has_friendrequestremove_resp()) {
      mutable_friendrequestremove_resp()->::fgame::CSFriendRequestRemoveResp::MergeFrom(from.friendrequestremove_resp());
    }
    if (from.has_friendaddblacklist_resp()) {
      mutable_friendaddblacklist_resp()->::fgame::CSFriendAddBlackListResp::MergeFrom(from.friendaddblacklist_resp());
    }
    if (from.has_friendremoveblacklist_resp()) {
      mutable_friendremoveblacklist_resp()->::fgame::CSFriendRemoveBlackListResp::MergeFrom(from.friendremoveblacklist_resp());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_pvpchat_resp()) {
      mutable_pvpchat_resp()->::fgame::CSPvpChatResp::MergeFrom(from.pvpchat_resp());
    }
    if (from.has_usegiftcode_resp()) {
      mutable_usegiftcode_resp()->::fgame::CSUseGiftCodeResp::MergeFrom(from.usegiftcode_resp());
    }
    if (from.has_queryplayerinfo_resp()) {
      mutable_queryplayerinfo_resp()->::fgame::CSQueryPlayerInfoResp::MergeFrom(from.queryplayerinfo_resp());
    }
    if (from.has_personalroomcreate_resp()) {
      mutable_personalroomcreate_resp()->::fgame::CSPersonalRoomCreateResp::MergeFrom(from.personalroomcreate_resp());
    }
    if (from.has_personalroomenter_resp()) {
      mutable_personalroomenter_resp()->::fgame::CSPersonalRoomEnterResp::MergeFrom(from.personalroomenter_resp());
    }
    if (from.has_personalroomleave_resp()) {
      mutable_personalroomleave_resp()->::fgame::CSPersonalRoomLeaveResp::MergeFrom(from.personalroomleave_resp());
    }
    if (from.has_personalroomkick_resp()) {
      mutable_personalroomkick_resp()->::fgame::CSPersonalRoomKickResp::MergeFrom(from.personalroomkick_resp());
    }
    if (from.has_personalroominvite_resp()) {
      mutable_personalroominvite_resp()->::fgame::CSPersonalRoomInviteResp::MergeFrom(from.personalroominvite_resp());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_personalroombroadcast_resp()) {
      mutable_personalroombroadcast_resp()->::fgame::CSPersonalRoomBroadcastResp::MergeFrom(from.personalroombroadcast_resp());
    }
    if (from.has_personalroomchat_resp()) {
      mutable_personalroomchat_resp()->::fgame::CSPersonalRoomChatResp::MergeFrom(from.personalroomchat_resp());
    }
    if (from.has_personalroommode_resp()) {
      mutable_personalroommode_resp()->::fgame::CSPersonalRoomModeResp::MergeFrom(from.personalroommode_resp());
    }
    if (from.has_personalroombeginfight_resp()) {
      mutable_personalroombeginfight_resp()->::fgame::CSPersonalRoomBeginFightResp::MergeFrom(from.personalroombeginfight_resp());
    }
    if (from.has_personalroomapplyorrefuseinvite_resp()) {
      mutable_personalroomapplyorrefuseinvite_resp()->::fgame::CSPersonalRoomApplyOrRefuseInviteResp::MergeFrom(from.personalroomapplyorrefuseinvite_resp());
    }
    if (from.has_changeplayericon_resp()) {
      mutable_changeplayericon_resp()->::fgame::CSChangePlayerIconResp::MergeFrom(from.changeplayericon_resp());
    }
    if (from.has_personalroomcountdown_resp()) {
      mutable_personalroomcountdown_resp()->::fgame::CSPersonalRoomCountDownResp::MergeFrom(from.personalroomcountdown_resp());
    }
    if (from.has_syncplayerdata_resp()) {
      mutable_syncplayerdata_resp()->::fgame::CSSyncPlayerDataResp::MergeFrom(from.syncplayerdata_resp());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_getplayerdata_resp()) {
      mutable_getplayerdata_resp()->::fgame::CSGetPlayerDataResp::MergeFrom(from.getplayerdata_resp());
    }
    if (from.has_appearcreep_resp()) {
      mutable_appearcreep_resp()->::fgame::CSPvpAppearCreepResp::MergeFrom(from.appearcreep_resp());
    }
    if (from.has_savecheckptdata_resp()) {
      mutable_savecheckptdata_resp()->::fgame::CSSaveCheckPtDataResp::MergeFrom(from.savecheckptdata_resp());
    }
    if (from.has_getcheckptdata_resp()) {
      mutable_getcheckptdata_resp()->::fgame::CSGetCheckPtDataResp::MergeFrom(from.getcheckptdata_resp());
    }
    if (from.has_setnewbie_resp()) {
      mutable_setnewbie_resp()->::fgame::CSSetNewBieResp::MergeFrom(from.setnewbie_resp());
    }
    if (from.has_getnewbielist_resp()) {
      mutable_getnewbielist_resp()->::fgame::CSGetNewBieListResp::MergeFrom(from.getnewbielist_resp());
    }
    if (from.has_propertyupdate_resp()) {
      mutable_propertyupdate_resp()->::fgame::CSPropertyUpdateResp::MergeFrom(from.propertyupdate_resp());
    }
    if (from.has_enterpoint_resp()) {
      mutable_enterpoint_resp()->::fgame::CSEnterPointResp::MergeFrom(from.enterpoint_resp());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_shopguide_resp()) {
      mutable_shopguide_resp()->::fgame::CSShopGuideResp::MergeFrom(from.shopguide_resp());
    }
    if (from.has_activitylist_resp()) {
      mutable_activitylist_resp()->::fgame::CSActivityListResp::MergeFrom(from.activitylist_resp());
    }
    if (from.has_activityupdate_resp()) {
      mutable_activityupdate_resp()->::fgame::CSActivityUpdateResp::MergeFrom(from.activityupdate_resp());
    }
    if (from.has_activitysubmit_resp()) {
      mutable_activitysubmit_resp()->::fgame::CSActivitySubmitResp::MergeFrom(from.activitysubmit_resp());
    }
    if (from.has_settitle_resp()) {
      mutable_settitle_resp()->::fgame::CSSetTitleResp::MergeFrom(from.settitle_resp());
    }
    if (from.has_shopbuy_resp()) {
      mutable_shopbuy_resp()->::fgame::CSShopBuyResp::MergeFrom(from.shopbuy_resp());
    }
    if (from.has_kickplayer_req()) {
      mutable_kickplayer_req()->::fgame::CSKickPlayerReq::MergeFrom(from.kickplayer_req());
    }
    if (from.has_exchangeitem_resp()) {
      mutable_exchangeitem_resp()->::fgame::CSExchangeItemResp::MergeFrom(from.exchangeitem_resp());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_activitycrazydtls_resp()) {
      mutable_activitycrazydtls_resp()->::fgame::CSActivityCrazyDtlsResp::MergeFrom(from.activitycrazydtls_resp());
    }
    if (from.has_activitycrazyusage_resp()) {
      mutable_activitycrazyusage_resp()->::fgame::CSActivityCrazyUsageResp::MergeFrom(from.activitycrazyusage_resp());
    }
    if (from.has_activitycrazyusable_resp()) {
      mutable_activitycrazyusable_resp()->::fgame::CSActivityCrazyUsableResp::MergeFrom(from.activitycrazyusable_resp());
    }
    if (from.has_shoplist_resp()) {
      mutable_shoplist_resp()->::fgame::CSShopListResp::MergeFrom(from.shoplist_resp());
    }
    if (from.has_pvpobserver_resp()) {
      mutable_pvpobserver_resp()->::fgame::CSPvpObserverResp::MergeFrom(from.pvpobserver_resp());
    }
    if (from.has_setnewbieoss_resp()) {
      mutable_setnewbieoss_resp()->::fgame::CSSetNewBieOssResp::MergeFrom(from.setnewbieoss_resp());
    }
    if (from.has_updateachievement_resp()) {
      mutable_updateachievement_resp()->::fgame::CSUpdateAchievementResp::MergeFrom(from.updateachievement_resp());
    }
    if (from.has_pvpresult_resp()) {
      mutable_pvpresult_resp()->::fgame::CSPvpResultResp::MergeFrom(from.pvpresult_resp());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_pvpselfranklist_resp()) {
      mutable_pvpselfranklist_resp()->::fgame::CSPvpSelfRankListResp::MergeFrom(from.pvpselfranklist_resp());
    }
    if (from.has_gwgetmatchinfo_resp()) {
      mutable_gwgetmatchinfo_resp()->::fgame::CSGWGetMatchInfoResp::MergeFrom(from.gwgetmatchinfo_resp());
    }
    if (from.has_gwgetrank_resp()) {
      mutable_gwgetrank_resp()->::fgame::CSGWGetRankResp::MergeFrom(from.gwgetrank_resp());
    }
    if (from.has_gwmatch_resp()) {
      mutable_gwmatch_resp()->::fgame::CSGWMatchResp::MergeFrom(from.gwmatch_resp());
    }
    if (from.has_gwmatchstop_resp()) {
      mutable_gwmatchstop_resp()->::fgame::CSGWMatchStopResp::MergeFrom(from.gwmatchstop_resp());
    }
    if (from.has_gwbuyenergy_resp()) {
      mutable_gwbuyenergy_resp()->::fgame::CSGWBuyEnergyResp::MergeFrom(from.gwbuyenergy_resp());
    }
    if (from.has_requestpkey_resp()) {
      mutable_requestpkey_resp()->::fgame::CSRequestPKeyResp::MergeFrom(from.requestpkey_resp());
    }
    if (from.has_sendclientkey_resp()) {
      mutable_sendclientkey_resp()->::fgame::CSSendClientKeyResp::MergeFrom(from.sendclientkey_resp());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_updateexchangelist_resp()) {
      mutable_updateexchangelist_resp()->::fgame::CSUpdateExchangeListResp::MergeFrom(from.updateexchangelist_resp());
    }
    if (from.has_glyphsrequestinfo_resp()) {
      mutable_glyphsrequestinfo_resp()->::fgame::CSGlyphsRequestInfoResp::MergeFrom(from.glyphsrequestinfo_resp());
    }
    if (from.has_glyphsrequestbasicinfo_resp()) {
      mutable_glyphsrequestbasicinfo_resp()->::fgame::CSGlyphsRequestBasicInfoResp::MergeFrom(from.glyphsrequestbasicinfo_resp());
    }
    if (from.has_glyphsactive_resp()) {
      mutable_glyphsactive_resp()->::fgame::CSGlyphsActiveResp::MergeFrom(from.glyphsactive_resp());
    }
    if (from.has_glyphsupgrade_resp()) {
      mutable_glyphsupgrade_resp()->::fgame::CSGlyphsUpgradeResp::MergeFrom(from.glyphsupgrade_resp());
    }
    if (from.has_glyphspvpinfo_resp()) {
      mutable_glyphspvpinfo_resp()->::fgame::CSGlyphsPvpInfoResp::MergeFrom(from.glyphspvpinfo_resp());
    }
    if (from.has_buyvip_resp()) {
      mutable_buyvip_resp()->::fgame::CSBuyVipResp::MergeFrom(from.buyvip_resp());
    }
    if (from.has_glyphguide_resp()) {
      mutable_glyphguide_resp()->::fgame::CSGlyphGuideResp::MergeFrom(from.glyphguide_resp());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_newyeargetinfo_resp()) {
      mutable_newyeargetinfo_resp()->::fgame::CSNewYearGetInfoResp::MergeFrom(from.newyeargetinfo_resp());
    }
    if (from.has_newyearreward_resp()) {
      mutable_newyearreward_resp()->::fgame::CSNewYearRewardResp::MergeFrom(from.newyearreward_resp());
    }
    if (from.has_openchest_resp()) {
      mutable_openchest_resp()->::fgame::CSOpenChestResp::MergeFrom(from.openchest_resp());
    }
    if (from.has_christmasdecorate_resp()) {
      mutable_christmasdecorate_resp()->::fgame::CSChristmasDecorateResp::MergeFrom(from.christmasdecorate_resp());
    }
    if (from.has_christmastakebonus_resp()) {
      mutable_christmastakebonus_resp()->::fgame::CSChristmasTakeBonusResp::MergeFrom(from.christmastakebonus_resp());
    }
    if (from.has_christmasgetdate_resp()) {
      mutable_christmasgetdate_resp()->::fgame::CSChristmasGetDataResp::MergeFrom(from.christmasgetdate_resp());
    }
    if (from.has_christmasgetrank_resp()) {
      mutable_christmasgetrank_resp()->::fgame::CSChristmasGetRankResp::MergeFrom(from.christmasgetrank_resp());
    }
    if (from.has_retrivecheckptreward_resp()) {
      mutable_retrivecheckptreward_resp()->::fgame::CSRetriveCheckPtRewardResp::MergeFrom(from.retrivecheckptreward_resp());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from.has_newyearcmp_resp()) {
      mutable_newyearcmp_resp()->::fgame::CSNewYearCmpResp::MergeFrom(from.newyearcmp_resp());
    }
    if (from.has_notifyglyphsupdate_resp()) {
      mutable_notifyglyphsupdate_resp()->::fgame::CSNotifyGlyphsUpdateResp::MergeFrom(from.notifyglyphsupdate_resp());
    }
    if (from.has_recoveritem_resp()) {
      mutable_recoveritem_resp()->::fgame::CSPvpRecoverItemResp::MergeFrom(from.recoveritem_resp());
    }
    if (from.has_setsignature_resp()) {
      mutable_setsignature_resp()->::fgame::CSSetSignatureResp::MergeFrom(from.setsignature_resp());
    }
    if (from.has_setextrainfovisible_resp()) {
      mutable_setextrainfovisible_resp()->::fgame::CSSetExtraInfoVisibleResp::MergeFrom(from.setextrainfovisible_resp());
    }
    if (from.has_getextrainfo_resp()) {
      mutable_getextrainfo_resp()->::fgame::CSGetExtraInfoResp::MergeFrom(from.getextrainfo_resp());
    }
    if (from.has_stopkickplayer_req()) {
      mutable_stopkickplayer_req()->::fgame::CSStopKickPlayerReq::MergeFrom(from.stopkickplayer_req());
    }
    if (from.has_valentinedata_resp()) {
      mutable_valentinedata_resp()->::fgame::CSValentineDataResp::MergeFrom(from.valentinedata_resp());
    }
  }
  if (from._has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    if (from.has_valentineexchange_resp()) {
      mutable_valentineexchange_resp()->::fgame::CSValentineExchangeResp::MergeFrom(from.valentineexchange_resp());
    }
    if (from.has_redpacketsgetinfo_resp()) {
      mutable_redpacketsgetinfo_resp()->::fgame::CSRedPacketsGetInfoResp::MergeFrom(from.redpacketsgetinfo_resp());
    }
    if (from.has_redpacketsgreb_resp()) {
      mutable_redpacketsgreb_resp()->::fgame::CSRedPacketsGrebResp::MergeFrom(from.redpacketsgreb_resp());
    }
    if (from.has_redpacketsopened_resp()) {
      mutable_redpacketsopened_resp()->::fgame::CSRedPacketsOpenedResp::MergeFrom(from.redpacketsopened_resp());
    }
    if (from.has_chapterunlock_resp()) {
      mutable_chapterunlock_resp()->::fgame::CSChapterUnlockResp::MergeFrom(from.chapterunlock_resp());
    }
    if (from.has_getchest_resp()) {
      mutable_getchest_resp()->::fgame::CSGetChestResp::MergeFrom(from.getchest_resp());
    }
    if (from.has_pvenotify_resp()) {
      mutable_pvenotify_resp()->::fgame::CSPveNotifyResp::MergeFrom(from.pvenotify_resp());
    }
    if (from.has_pvpgetaward_resp()) {
      mutable_pvpgetaward_resp()->::fgame::CSPvpGetAwardResp::MergeFrom(from.pvpgetaward_resp());
    }
  }
  if (from._has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    if (from.has_dailytaskstatus_resp()) {
      mutable_dailytaskstatus_resp()->::fgame::CSDailyTaskStatusResp::MergeFrom(from.dailytaskstatus_resp());
    }
    if (from.has_requestdailytask_resp()) {
      mutable_requestdailytask_resp()->::fgame::CSRequestDailyTaskResp::MergeFrom(from.requestdailytask_resp());
    }
    if (from.has_changedailytask_resp()) {
      mutable_changedailytask_resp()->::fgame::CSChangeDailyTaskResp::MergeFrom(from.changedailytask_resp());
    }
    if (from.has_opendailytaskaward_resp()) {
      mutable_opendailytaskaward_resp()->::fgame::CSOpenDailyTaskAwardResp::MergeFrom(from.opendailytaskaward_resp());
    }
    if (from.has_updatedailytaskprogress_resp()) {
      mutable_updatedailytaskprogress_resp()->::fgame::CSUpdateDailyTaskProgressResp::MergeFrom(from.updatedailytaskprogress_resp());
    }
    if (from.has_newdailytask_resp()) {
      mutable_newdailytask_resp()->::fgame::CSNewDailyTaskResp::MergeFrom(from.newdailytask_resp());
    }
    if (from.has_pvecheckaward_resp()) {
      mutable_pvecheckaward_resp()->::fgame::CSPveCheckAwardResp::MergeFrom(from.pvecheckaward_resp());
    }
    if (from.has_rankweekrewardinfo_resp()) {
      mutable_rankweekrewardinfo_resp()->::fgame::CSRankWeekRewardInfoResp::MergeFrom(from.rankweekrewardinfo_resp());
    }
  }
  if (from._has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    if (from.has_rankweekrewardreward_resp()) {
      mutable_rankweekrewardreward_resp()->::fgame::CSRankWeekRewardRewardResp::MergeFrom(from.rankweekrewardreward_resp());
    }
    if (from.has_sharereward_resp()) {
      mutable_sharereward_resp()->::fgame::CSShareRewardGetResq::MergeFrom(from.sharereward_resp());
    }
    if (from.has_getsevengoallist_resp()) {
      mutable_getsevengoallist_resp()->::fgame::CSGetSevenGoalListResp::MergeFrom(from.getsevengoallist_resp());
    }
    if (from.has_retrivesevengoal_resp()) {
      mutable_retrivesevengoal_resp()->::fgame::CSRetriveSevenGoalResp::MergeFrom(from.retrivesevengoal_resp());
    }
    if (from.has_noticesevengoal_resp()) {
      mutable_noticesevengoal_resp()->::fgame::CSNoticeSevenGoalResp::MergeFrom(from.noticesevengoal_resp());
    }
    if (from.has_pverank_resp()) {
      mutable_pverank_resp()->::fgame::CSPveRankResp::MergeFrom(from.pverank_resp());
    }
    if (from.has_toprank_resp()) {
      mutable_toprank_resp()->::fgame::CSTopRankResp::MergeFrom(from.toprank_resp());
    }
    if (from.has_topranktime_resp()) {
      mutable_topranktime_resp()->::fgame::CSTopRankTimeResp::MergeFrom(from.topranktime_resp());
    }
  }
  if (from._has_bits_[152 / 32] & (0xffu << (152 % 32))) {
    if (from.has_updatetaskstatus_resp()) {
      mutable_updatetaskstatus_resp()->::fgame::CSUpdateTaskStatusResp::MergeFrom(from.updatetaskstatus_resp());
    }
    if (from.has_assyncinfo_resp()) {
      mutable_assyncinfo_resp()->::fgame::CSAsSyncInfoResp::MergeFrom(from.assyncinfo_resp());
    }
    if (from.has_asnewadd_resp()) {
      mutable_asnewadd_resp()->::fgame::CSAsNewAddResp::MergeFrom(from.asnewadd_resp());
    }
    if (from.has_asoperate_resp()) {
      mutable_asoperate_resp()->::fgame::CSAsOperateResp::MergeFrom(from.asoperate_resp());
    }
    if (from.has_asusecard_resp()) {
      mutable_asusecard_resp()->::fgame::CSAsUseCardResp::MergeFrom(from.asusecard_resp());
    }
    if (from.has_pvpuseskill_resp()) {
      mutable_pvpuseskill_resp()->::fgame::CSPvpUseSkillResp::MergeFrom(from.pvpuseskill_resp());
    }
    if (from.has_pvpassistantinfo_resp()) {
      mutable_pvpassistantinfo_resp()->::fgame::CSPvpAssistantInfoResp::MergeFrom(from.pvpassistantinfo_resp());
    }
    if (from.has_instituteinfo_resp()) {
      mutable_instituteinfo_resp()->::fgame::CSInstituteInfoResp::MergeFrom(from.instituteinfo_resp());
    }
  }
  if (from._has_bits_[160 / 32] & (0xffu << (160 % 32))) {
    if (from.has_institutebuy_resp()) {
      mutable_institutebuy_resp()->::fgame::CSInstituteBuyResp::MergeFrom(from.institutebuy_resp());
    }
    if (from.has_opactadd_resp()) {
      mutable_opactadd_resp()->::fgame::CSOpActAddResp::MergeFrom(from.opactadd_resp());
    }
    if (from.has_opactstatechanged_resp()) {
      mutable_opactstatechanged_resp()->::fgame::CSOpActStateChangedResp::MergeFrom(from.opactstatechanged_resp());
    }
    if (from.has_opactselfdatachanged_resp()) {
      mutable_opactselfdatachanged_resp()->::fgame::CSActSelfDataChangedResp::MergeFrom(from.opactselfdatachanged_resp());
    }
    if (from.has_opactglobaldatachanged_resp()) {
      mutable_opactglobaldatachanged_resp()->::fgame::CSActGlobalDataChangedResp::MergeFrom(from.opactglobaldatachanged_resp());
    }
    if (from.has_opactconfiglist_resp()) {
      mutable_opactconfiglist_resp()->::fgame::CSOpActConfigListResp::MergeFrom(from.opactconfiglist_resp());
    }
    if (from.has_opactselfdatalist_resp()) {
      mutable_opactselfdatalist_resp()->::fgame::CSOpActSelfDataListResp::MergeFrom(from.opactselfdatalist_resp());
    }
    if (from.has_opactglobaldatalist_resp()) {
      mutable_opactglobaldatalist_resp()->::fgame::CSOpActGlobalDataListResp::MergeFrom(from.opactglobaldatalist_resp());
    }
  }
  if (from._has_bits_[168 / 32] & (0xffu << (168 % 32))) {
    if (from.has_opactdemotake_resp()) {
      mutable_opactdemotake_resp()->::fgame::CSOpActDemoTakeResp::MergeFrom(from.opactdemotake_resp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void S2ClientMsg::CopyFrom(const S2ClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2ClientMsg::IsInitialized() const {

  if (has_error_msg()) {
    if (!this->error_msg().IsInitialized()) return false;
  }
  if (has_login_resp()) {
    if (!this->login_resp().IsInitialized()) return false;
  }
  if (has_reg_resp()) {
    if (!this->reg_resp().IsInitialized()) return false;
  }
  if (has_heartbeat_resp()) {
    if (!this->heartbeat_resp().IsInitialized()) return false;
  }
  if (has_match_resp()) {
    if (!this->match_resp().IsInitialized()) return false;
  }
  if (has_start_resp()) {
    if (!this->start_resp().IsInitialized()) return false;
  }
  if (has_fight_resp()) {
    if (!this->fight_resp().IsInitialized()) return false;
  }
  if (has_end_resp()) {
    if (!this->end_resp().IsInitialized()) return false;
  }
  if (has_map_resp()) {
    if (!this->map_resp().IsInitialized()) return false;
  }
  if (has_upgrade_resp()) {
    if (!this->upgrade_resp().IsInitialized()) return false;
  }
  if (has_ping_resp()) {
    if (!this->ping_resp().IsInitialized()) return false;
  }
  if (has_buyitem_resp()) {
    if (!this->buyitem_resp().IsInitialized()) return false;
  }
  if (has_useitem_resp()) {
    if (!this->useitem_resp().IsInitialized()) return false;
  }
  if (has_leave_resp()) {
    if (!this->leave_resp().IsInitialized()) return false;
  }
  if (has_getachievement_resp()) {
    if (!this->getachievement_resp().IsInitialized()) return false;
  }
  if (has_receiveachievement_resp()) {
    if (!this->receiveachievement_resp().IsInitialized()) return false;
  }
  if (has_receiveachievementreward_resp()) {
    if (!this->receiveachievementreward_resp().IsInitialized()) return false;
  }
  if (has_enterserver_resp()) {
    if (!this->enterserver_resp().IsInitialized()) return false;
  }
  if (has_canenter_req()) {
    if (!this->canenter_req().IsInitialized()) return false;
  }
  if (has_queue_req()) {
    if (!this->queue_req().IsInitialized()) return false;
  }
  if (has_directenter_resp()) {
    if (!this->directenter_resp().IsInitialized()) return false;
  }
  if (has_pvprankinggetlist_resp()) {
    if (!this->pvprankinggetlist_resp().IsInitialized()) return false;
  }
  if (has_streakwinvalue_resp()) {
    if (!this->streakwinvalue_resp().IsInitialized()) return false;
  }
  if (has_streakwinget_resp()) {
    if (!this->streakwinget_resp().IsInitialized()) return false;
  }
  if (has_openbigstage_resp()) {
    if (!this->openbigstage_resp().IsInitialized()) return false;
  }
  if (has_pvpuseitem_resp()) {
    if (!this->pvpuseitem_resp().IsInitialized()) return false;
  }
  if (has_sevendaysignlist_resp()) {
    if (!this->sevendaysignlist_resp().IsInitialized()) return false;
  }
  if (has_sevendaysign_resp()) {
    if (!this->sevendaysign_resp().IsInitialized()) return false;
  }
  if (has_getserver_resp()) {
    if (!this->getserver_resp().IsInitialized()) return false;
  }
  if (has_sycplayerinfo_resp()) {
    if (!this->sycplayerinfo_resp().IsInitialized()) return false;
  }
  if (has_notice_req()) {
    if (!this->notice_req().IsInitialized()) return false;
  }
  if (has_changename_resp()) {
    if (!this->changename_resp().IsInitialized()) return false;
  }
  if (has_gmcmd_req()) {
    if (!this->gmcmd_req().IsInitialized()) return false;
  }
  if (has_pvprankingplayerinfo_resp()) {
    if (!this->pvprankingplayerinfo_resp().IsInitialized()) return false;
  }
  if (has_getopenactivity_resp()) {
    if (!this->getopenactivity_resp().IsInitialized()) return false;
  }
  if (has_getactivitydata_resp()) {
    if (!this->getactivitydata_resp().IsInitialized()) return false;
  }
  if (has_receiveactivityreward_resp()) {
    if (!this->receiveactivityreward_resp().IsInitialized()) return false;
  }
  if (has_missionlist_resp()) {
    if (!this->missionlist_resp().IsInitialized()) return false;
  }
  if (has_missioncomplete_resp()) {
    if (!this->missioncomplete_resp().IsInitialized()) return false;
  }
  if (has_missionupdate_resp()) {
    if (!this->missionupdate_resp().IsInitialized()) return false;
  }
  if (has_getpowerenergyactivity_resp()) {
    if (!this->getpowerenergyactivity_resp().IsInitialized()) return false;
  }
  if (has_receivepowerenergy_resp()) {
    if (!this->receivepowerenergy_resp().IsInitialized()) return false;
  }
  if (has_getmail_resp()) {
    if (!this->getmail_resp().IsInitialized()) return false;
  }
  if (has_buynewbiegift_resp()) {
    if (!this->buynewbiegift_resp().IsInitialized()) return false;
  }
  if (has_rechargecallback_resp()) {
    if (!this->rechargecallback_resp().IsInitialized()) return false;
  }
  if (has_friendquery_resp()) {
    if (!this->friendquery_resp().IsInitialized()) return false;
  }
  if (has_friendrequestadd_resp()) {
    if (!this->friendrequestadd_resp().IsInitialized()) return false;
  }
  if (has_friendconfirmadd_resp()) {
    if (!this->friendconfirmadd_resp().IsInitialized()) return false;
  }
  if (has_friendgetinfo_resp()) {
    if (!this->friendgetinfo_resp().IsInitialized()) return false;
  }
  if (has_friendrequestremove_resp()) {
    if (!this->friendrequestremove_resp().IsInitialized()) return false;
  }
  if (has_friendaddblacklist_resp()) {
    if (!this->friendaddblacklist_resp().IsInitialized()) return false;
  }
  if (has_friendremoveblacklist_resp()) {
    if (!this->friendremoveblacklist_resp().IsInitialized()) return false;
  }
  if (has_pvpchat_resp()) {
    if (!this->pvpchat_resp().IsInitialized()) return false;
  }
  if (has_usegiftcode_resp()) {
    if (!this->usegiftcode_resp().IsInitialized()) return false;
  }
  if (has_queryplayerinfo_resp()) {
    if (!this->queryplayerinfo_resp().IsInitialized()) return false;
  }
  if (has_personalroomcreate_resp()) {
    if (!this->personalroomcreate_resp().IsInitialized()) return false;
  }
  if (has_personalroomenter_resp()) {
    if (!this->personalroomenter_resp().IsInitialized()) return false;
  }
  if (has_personalroomleave_resp()) {
    if (!this->personalroomleave_resp().IsInitialized()) return false;
  }
  if (has_personalroomkick_resp()) {
    if (!this->personalroomkick_resp().IsInitialized()) return false;
  }
  if (has_personalroominvite_resp()) {
    if (!this->personalroominvite_resp().IsInitialized()) return false;
  }
  if (has_personalroombroadcast_resp()) {
    if (!this->personalroombroadcast_resp().IsInitialized()) return false;
  }
  if (has_personalroomchat_resp()) {
    if (!this->personalroomchat_resp().IsInitialized()) return false;
  }
  if (has_personalroommode_resp()) {
    if (!this->personalroommode_resp().IsInitialized()) return false;
  }
  if (has_personalroombeginfight_resp()) {
    if (!this->personalroombeginfight_resp().IsInitialized()) return false;
  }
  if (has_personalroomapplyorrefuseinvite_resp()) {
    if (!this->personalroomapplyorrefuseinvite_resp().IsInitialized()) return false;
  }
  if (has_changeplayericon_resp()) {
    if (!this->changeplayericon_resp().IsInitialized()) return false;
  }
  if (has_personalroomcountdown_resp()) {
    if (!this->personalroomcountdown_resp().IsInitialized()) return false;
  }
  if (has_syncplayerdata_resp()) {
    if (!this->syncplayerdata_resp().IsInitialized()) return false;
  }
  if (has_getplayerdata_resp()) {
    if (!this->getplayerdata_resp().IsInitialized()) return false;
  }
  if (has_appearcreep_resp()) {
    if (!this->appearcreep_resp().IsInitialized()) return false;
  }
  if (has_getcheckptdata_resp()) {
    if (!this->getcheckptdata_resp().IsInitialized()) return false;
  }
  if (has_getnewbielist_resp()) {
    if (!this->getnewbielist_resp().IsInitialized()) return false;
  }
  if (has_propertyupdate_resp()) {
    if (!this->propertyupdate_resp().IsInitialized()) return false;
  }
  if (has_enterpoint_resp()) {
    if (!this->enterpoint_resp().IsInitialized()) return false;
  }
  if (has_shopguide_resp()) {
    if (!this->shopguide_resp().IsInitialized()) return false;
  }
  if (has_activitylist_resp()) {
    if (!this->activitylist_resp().IsInitialized()) return false;
  }
  if (has_activityupdate_resp()) {
    if (!this->activityupdate_resp().IsInitialized()) return false;
  }
  if (has_activitysubmit_resp()) {
    if (!this->activitysubmit_resp().IsInitialized()) return false;
  }
  if (has_settitle_resp()) {
    if (!this->settitle_resp().IsInitialized()) return false;
  }
  if (has_shopbuy_resp()) {
    if (!this->shopbuy_resp().IsInitialized()) return false;
  }
  if (has_exchangeitem_resp()) {
    if (!this->exchangeitem_resp().IsInitialized()) return false;
  }
  if (has_shoplist_resp()) {
    if (!this->shoplist_resp().IsInitialized()) return false;
  }
  if (has_setnewbieoss_resp()) {
    if (!this->setnewbieoss_resp().IsInitialized()) return false;
  }
  if (has_pvpresult_resp()) {
    if (!this->pvpresult_resp().IsInitialized()) return false;
  }
  if (has_pvpselfranklist_resp()) {
    if (!this->pvpselfranklist_resp().IsInitialized()) return false;
  }
  if (has_gwgetmatchinfo_resp()) {
    if (!this->gwgetmatchinfo_resp().IsInitialized()) return false;
  }
  if (has_gwgetrank_resp()) {
    if (!this->gwgetrank_resp().IsInitialized()) return false;
  }
  if (has_gwmatch_resp()) {
    if (!this->gwmatch_resp().IsInitialized()) return false;
  }
  if (has_gwbuyenergy_resp()) {
    if (!this->gwbuyenergy_resp().IsInitialized()) return false;
  }
  if (has_requestpkey_resp()) {
    if (!this->requestpkey_resp().IsInitialized()) return false;
  }
  if (has_sendclientkey_resp()) {
    if (!this->sendclientkey_resp().IsInitialized()) return false;
  }
  if (has_updateexchangelist_resp()) {
    if (!this->updateexchangelist_resp().IsInitialized()) return false;
  }
  if (has_glyphsrequestinfo_resp()) {
    if (!this->glyphsrequestinfo_resp().IsInitialized()) return false;
  }
  if (has_glyphsrequestbasicinfo_resp()) {
    if (!this->glyphsrequestbasicinfo_resp().IsInitialized()) return false;
  }
  if (has_glyphsactive_resp()) {
    if (!this->glyphsactive_resp().IsInitialized()) return false;
  }
  if (has_glyphsupgrade_resp()) {
    if (!this->glyphsupgrade_resp().IsInitialized()) return false;
  }
  if (has_glyphspvpinfo_resp()) {
    if (!this->glyphspvpinfo_resp().IsInitialized()) return false;
  }
  if (has_glyphguide_resp()) {
    if (!this->glyphguide_resp().IsInitialized()) return false;
  }
  if (has_openchest_resp()) {
    if (!this->openchest_resp().IsInitialized()) return false;
  }
  if (has_christmasdecorate_resp()) {
    if (!this->christmasdecorate_resp().IsInitialized()) return false;
  }
  if (has_christmastakebonus_resp()) {
    if (!this->christmastakebonus_resp().IsInitialized()) return false;
  }
  if (has_christmasgetdate_resp()) {
    if (!this->christmasgetdate_resp().IsInitialized()) return false;
  }
  if (has_christmasgetrank_resp()) {
    if (!this->christmasgetrank_resp().IsInitialized()) return false;
  }
  if (has_retrivecheckptreward_resp()) {
    if (!this->retrivecheckptreward_resp().IsInitialized()) return false;
  }
  if (has_notifyglyphsupdate_resp()) {
    if (!this->notifyglyphsupdate_resp().IsInitialized()) return false;
  }
  if (has_recoveritem_resp()) {
    if (!this->recoveritem_resp().IsInitialized()) return false;
  }
  if (has_setsignature_resp()) {
    if (!this->setsignature_resp().IsInitialized()) return false;
  }
  if (has_setextrainfovisible_resp()) {
    if (!this->setextrainfovisible_resp().IsInitialized()) return false;
  }
  if (has_valentinedata_resp()) {
    if (!this->valentinedata_resp().IsInitialized()) return false;
  }
  if (has_chapterunlock_resp()) {
    if (!this->chapterunlock_resp().IsInitialized()) return false;
  }
  if (has_getchest_resp()) {
    if (!this->getchest_resp().IsInitialized()) return false;
  }
  if (has_pvenotify_resp()) {
    if (!this->pvenotify_resp().IsInitialized()) return false;
  }
  if (has_pvpgetaward_resp()) {
    if (!this->pvpgetaward_resp().IsInitialized()) return false;
  }
  if (has_dailytaskstatus_resp()) {
    if (!this->dailytaskstatus_resp().IsInitialized()) return false;
  }
  if (has_requestdailytask_resp()) {
    if (!this->requestdailytask_resp().IsInitialized()) return false;
  }
  if (has_changedailytask_resp()) {
    if (!this->changedailytask_resp().IsInitialized()) return false;
  }
  if (has_opendailytaskaward_resp()) {
    if (!this->opendailytaskaward_resp().IsInitialized()) return false;
  }
  if (has_updatedailytaskprogress_resp()) {
    if (!this->updatedailytaskprogress_resp().IsInitialized()) return false;
  }
  if (has_newdailytask_resp()) {
    if (!this->newdailytask_resp().IsInitialized()) return false;
  }
  if (has_pvecheckaward_resp()) {
    if (!this->pvecheckaward_resp().IsInitialized()) return false;
  }
  if (has_sharereward_resp()) {
    if (!this->sharereward_resp().IsInitialized()) return false;
  }
  if (has_getsevengoallist_resp()) {
    if (!this->getsevengoallist_resp().IsInitialized()) return false;
  }
  if (has_pverank_resp()) {
    if (!this->pverank_resp().IsInitialized()) return false;
  }
  if (has_toprank_resp()) {
    if (!this->toprank_resp().IsInitialized()) return false;
  }
  if (has_updatetaskstatus_resp()) {
    if (!this->updatetaskstatus_resp().IsInitialized()) return false;
  }
  if (has_assyncinfo_resp()) {
    if (!this->assyncinfo_resp().IsInitialized()) return false;
  }
  if (has_asnewadd_resp()) {
    if (!this->asnewadd_resp().IsInitialized()) return false;
  }
  if (has_asoperate_resp()) {
    if (!this->asoperate_resp().IsInitialized()) return false;
  }
  if (has_asusecard_resp()) {
    if (!this->asusecard_resp().IsInitialized()) return false;
  }
  if (has_pvpuseskill_resp()) {
    if (!this->pvpuseskill_resp().IsInitialized()) return false;
  }
  if (has_pvpassistantinfo_resp()) {
    if (!this->pvpassistantinfo_resp().IsInitialized()) return false;
  }
  if (has_instituteinfo_resp()) {
    if (!this->instituteinfo_resp().IsInitialized()) return false;
  }
  if (has_institutebuy_resp()) {
    if (!this->institutebuy_resp().IsInitialized()) return false;
  }
  if (has_opactadd_resp()) {
    if (!this->opactadd_resp().IsInitialized()) return false;
  }
  if (has_opactstatechanged_resp()) {
    if (!this->opactstatechanged_resp().IsInitialized()) return false;
  }
  if (has_opactselfdatachanged_resp()) {
    if (!this->opactselfdatachanged_resp().IsInitialized()) return false;
  }
  if (has_opactglobaldatachanged_resp()) {
    if (!this->opactglobaldatachanged_resp().IsInitialized()) return false;
  }
  return true;
}

void S2ClientMsg::Swap(S2ClientMsg* other) {
  if (other != this) {
    std::swap(error_msg_, other->error_msg_);
    std::swap(login_resp_, other->login_resp_);
    std::swap(reg_resp_, other->reg_resp_);
    std::swap(heartbeat_resp_, other->heartbeat_resp_);
    std::swap(match_resp_, other->match_resp_);
    std::swap(start_resp_, other->start_resp_);
    std::swap(fight_resp_, other->fight_resp_);
    std::swap(end_resp_, other->end_resp_);
    std::swap(map_resp_, other->map_resp_);
    std::swap(upgrade_resp_, other->upgrade_resp_);
    std::swap(ping_resp_, other->ping_resp_);
    std::swap(buyitem_resp_, other->buyitem_resp_);
    std::swap(useitem_resp_, other->useitem_resp_);
    std::swap(leave_resp_, other->leave_resp_);
    std::swap(getachievement_resp_, other->getachievement_resp_);
    std::swap(receiveachievement_resp_, other->receiveachievement_resp_);
    std::swap(receiveachievementreward_resp_, other->receiveachievementreward_resp_);
    std::swap(enterserver_resp_, other->enterserver_resp_);
    std::swap(canenter_req_, other->canenter_req_);
    std::swap(queue_req_, other->queue_req_);
    std::swap(directenter_resp_, other->directenter_resp_);
    std::swap(pvprankinggetlist_resp_, other->pvprankinggetlist_resp_);
    std::swap(streakwinvalue_resp_, other->streakwinvalue_resp_);
    std::swap(streakwinget_resp_, other->streakwinget_resp_);
    std::swap(openbigstage_resp_, other->openbigstage_resp_);
    std::swap(pvpuseitem_resp_, other->pvpuseitem_resp_);
    std::swap(sevendaysignlist_resp_, other->sevendaysignlist_resp_);
    std::swap(sevendaysign_resp_, other->sevendaysign_resp_);
    std::swap(getserver_resp_, other->getserver_resp_);
    std::swap(sycplayerinfo_resp_, other->sycplayerinfo_resp_);
    std::swap(notice_req_, other->notice_req_);
    std::swap(stopmatch_resp_, other->stopmatch_resp_);
    std::swap(changename_resp_, other->changename_resp_);
    std::swap(gmcmd_req_, other->gmcmd_req_);
    std::swap(xinshourecode_resp_, other->xinshourecode_resp_);
    std::swap(pvprankingplayerinfo_resp_, other->pvprankingplayerinfo_resp_);
    std::swap(getopenactivity_resp_, other->getopenactivity_resp_);
    std::swap(getactivitydata_resp_, other->getactivitydata_resp_);
    std::swap(receiveactivityreward_resp_, other->receiveactivityreward_resp_);
    std::swap(missionlist_resp_, other->missionlist_resp_);
    std::swap(missioncomplete_resp_, other->missioncomplete_resp_);
    std::swap(missionupdate_resp_, other->missionupdate_resp_);
    std::swap(getpowerenergyactivity_resp_, other->getpowerenergyactivity_resp_);
    std::swap(receivepowerenergy_resp_, other->receivepowerenergy_resp_);
    std::swap(getmail_resp_, other->getmail_resp_);
    std::swap(delmail_resp_, other->delmail_resp_);
    std::swap(noticemail_req_, other->noticemail_req_);
    std::swap(buynewbiegift_resp_, other->buynewbiegift_resp_);
    std::swap(rechargecallback_resp_, other->rechargecallback_resp_);
    std::swap(friendquery_resp_, other->friendquery_resp_);
    std::swap(friendrequestadd_resp_, other->friendrequestadd_resp_);
    std::swap(friendconfirmadd_resp_, other->friendconfirmadd_resp_);
    std::swap(friendgetinfo_resp_, other->friendgetinfo_resp_);
    std::swap(friendrequestremove_resp_, other->friendrequestremove_resp_);
    std::swap(friendaddblacklist_resp_, other->friendaddblacklist_resp_);
    std::swap(friendremoveblacklist_resp_, other->friendremoveblacklist_resp_);
    std::swap(pvpchat_resp_, other->pvpchat_resp_);
    std::swap(usegiftcode_resp_, other->usegiftcode_resp_);
    std::swap(queryplayerinfo_resp_, other->queryplayerinfo_resp_);
    std::swap(personalroomcreate_resp_, other->personalroomcreate_resp_);
    std::swap(personalroomenter_resp_, other->personalroomenter_resp_);
    std::swap(personalroomleave_resp_, other->personalroomleave_resp_);
    std::swap(personalroomkick_resp_, other->personalroomkick_resp_);
    std::swap(personalroominvite_resp_, other->personalroominvite_resp_);
    std::swap(personalroombroadcast_resp_, other->personalroombroadcast_resp_);
    std::swap(personalroomchat_resp_, other->personalroomchat_resp_);
    std::swap(personalroommode_resp_, other->personalroommode_resp_);
    std::swap(personalroombeginfight_resp_, other->personalroombeginfight_resp_);
    std::swap(personalroomapplyorrefuseinvite_resp_, other->personalroomapplyorrefuseinvite_resp_);
    std::swap(changeplayericon_resp_, other->changeplayericon_resp_);
    std::swap(personalroomcountdown_resp_, other->personalroomcountdown_resp_);
    std::swap(syncplayerdata_resp_, other->syncplayerdata_resp_);
    std::swap(getplayerdata_resp_, other->getplayerdata_resp_);
    std::swap(appearcreep_resp_, other->appearcreep_resp_);
    std::swap(savecheckptdata_resp_, other->savecheckptdata_resp_);
    std::swap(getcheckptdata_resp_, other->getcheckptdata_resp_);
    std::swap(setnewbie_resp_, other->setnewbie_resp_);
    std::swap(getnewbielist_resp_, other->getnewbielist_resp_);
    std::swap(propertyupdate_resp_, other->propertyupdate_resp_);
    std::swap(enterpoint_resp_, other->enterpoint_resp_);
    std::swap(shopguide_resp_, other->shopguide_resp_);
    std::swap(activitylist_resp_, other->activitylist_resp_);
    std::swap(activityupdate_resp_, other->activityupdate_resp_);
    std::swap(activitysubmit_resp_, other->activitysubmit_resp_);
    std::swap(settitle_resp_, other->settitle_resp_);
    std::swap(shopbuy_resp_, other->shopbuy_resp_);
    std::swap(kickplayer_req_, other->kickplayer_req_);
    std::swap(exchangeitem_resp_, other->exchangeitem_resp_);
    std::swap(activitycrazydtls_resp_, other->activitycrazydtls_resp_);
    std::swap(activitycrazyusage_resp_, other->activitycrazyusage_resp_);
    std::swap(activitycrazyusable_resp_, other->activitycrazyusable_resp_);
    std::swap(shoplist_resp_, other->shoplist_resp_);
    std::swap(pvpobserver_resp_, other->pvpobserver_resp_);
    std::swap(setnewbieoss_resp_, other->setnewbieoss_resp_);
    std::swap(updateachievement_resp_, other->updateachievement_resp_);
    std::swap(pvpresult_resp_, other->pvpresult_resp_);
    std::swap(pvpselfranklist_resp_, other->pvpselfranklist_resp_);
    std::swap(gwgetmatchinfo_resp_, other->gwgetmatchinfo_resp_);
    std::swap(gwgetrank_resp_, other->gwgetrank_resp_);
    std::swap(gwmatch_resp_, other->gwmatch_resp_);
    std::swap(gwmatchstop_resp_, other->gwmatchstop_resp_);
    std::swap(gwbuyenergy_resp_, other->gwbuyenergy_resp_);
    std::swap(requestpkey_resp_, other->requestpkey_resp_);
    std::swap(sendclientkey_resp_, other->sendclientkey_resp_);
    std::swap(updateexchangelist_resp_, other->updateexchangelist_resp_);
    std::swap(glyphsrequestinfo_resp_, other->glyphsrequestinfo_resp_);
    std::swap(glyphsrequestbasicinfo_resp_, other->glyphsrequestbasicinfo_resp_);
    std::swap(glyphsactive_resp_, other->glyphsactive_resp_);
    std::swap(glyphsupgrade_resp_, other->glyphsupgrade_resp_);
    std::swap(glyphspvpinfo_resp_, other->glyphspvpinfo_resp_);
    std::swap(buyvip_resp_, other->buyvip_resp_);
    std::swap(glyphguide_resp_, other->glyphguide_resp_);
    std::swap(newyeargetinfo_resp_, other->newyeargetinfo_resp_);
    std::swap(newyearreward_resp_, other->newyearreward_resp_);
    std::swap(openchest_resp_, other->openchest_resp_);
    std::swap(christmasdecorate_resp_, other->christmasdecorate_resp_);
    std::swap(christmastakebonus_resp_, other->christmastakebonus_resp_);
    std::swap(christmasgetdate_resp_, other->christmasgetdate_resp_);
    std::swap(christmasgetrank_resp_, other->christmasgetrank_resp_);
    std::swap(retrivecheckptreward_resp_, other->retrivecheckptreward_resp_);
    std::swap(newyearcmp_resp_, other->newyearcmp_resp_);
    std::swap(notifyglyphsupdate_resp_, other->notifyglyphsupdate_resp_);
    std::swap(recoveritem_resp_, other->recoveritem_resp_);
    std::swap(setsignature_resp_, other->setsignature_resp_);
    std::swap(setextrainfovisible_resp_, other->setextrainfovisible_resp_);
    std::swap(getextrainfo_resp_, other->getextrainfo_resp_);
    std::swap(stopkickplayer_req_, other->stopkickplayer_req_);
    std::swap(valentinedata_resp_, other->valentinedata_resp_);
    std::swap(valentineexchange_resp_, other->valentineexchange_resp_);
    std::swap(redpacketsgetinfo_resp_, other->redpacketsgetinfo_resp_);
    std::swap(redpacketsgreb_resp_, other->redpacketsgreb_resp_);
    std::swap(redpacketsopened_resp_, other->redpacketsopened_resp_);
    std::swap(chapterunlock_resp_, other->chapterunlock_resp_);
    std::swap(getchest_resp_, other->getchest_resp_);
    std::swap(pvenotify_resp_, other->pvenotify_resp_);
    std::swap(pvpgetaward_resp_, other->pvpgetaward_resp_);
    std::swap(dailytaskstatus_resp_, other->dailytaskstatus_resp_);
    std::swap(requestdailytask_resp_, other->requestdailytask_resp_);
    std::swap(changedailytask_resp_, other->changedailytask_resp_);
    std::swap(opendailytaskaward_resp_, other->opendailytaskaward_resp_);
    std::swap(updatedailytaskprogress_resp_, other->updatedailytaskprogress_resp_);
    std::swap(newdailytask_resp_, other->newdailytask_resp_);
    std::swap(pvecheckaward_resp_, other->pvecheckaward_resp_);
    std::swap(rankweekrewardinfo_resp_, other->rankweekrewardinfo_resp_);
    std::swap(rankweekrewardreward_resp_, other->rankweekrewardreward_resp_);
    std::swap(sharereward_resp_, other->sharereward_resp_);
    std::swap(getsevengoallist_resp_, other->getsevengoallist_resp_);
    std::swap(retrivesevengoal_resp_, other->retrivesevengoal_resp_);
    std::swap(noticesevengoal_resp_, other->noticesevengoal_resp_);
    std::swap(pverank_resp_, other->pverank_resp_);
    std::swap(toprank_resp_, other->toprank_resp_);
    std::swap(topranktime_resp_, other->topranktime_resp_);
    std::swap(updatetaskstatus_resp_, other->updatetaskstatus_resp_);
    std::swap(assyncinfo_resp_, other->assyncinfo_resp_);
    std::swap(asnewadd_resp_, other->asnewadd_resp_);
    std::swap(asoperate_resp_, other->asoperate_resp_);
    std::swap(asusecard_resp_, other->asusecard_resp_);
    std::swap(pvpuseskill_resp_, other->pvpuseskill_resp_);
    std::swap(pvpassistantinfo_resp_, other->pvpassistantinfo_resp_);
    std::swap(instituteinfo_resp_, other->instituteinfo_resp_);
    std::swap(institutebuy_resp_, other->institutebuy_resp_);
    std::swap(opactadd_resp_, other->opactadd_resp_);
    std::swap(opactstatechanged_resp_, other->opactstatechanged_resp_);
    std::swap(opactselfdatachanged_resp_, other->opactselfdatachanged_resp_);
    std::swap(opactglobaldatachanged_resp_, other->opactglobaldatachanged_resp_);
    std::swap(opactconfiglist_resp_, other->opactconfiglist_resp_);
    std::swap(opactselfdatalist_resp_, other->opactselfdatalist_resp_);
    std::swap(opactglobaldatalist_resp_, other->opactglobaldatalist_resp_);
    std::swap(opactdemotake_resp_, other->opactdemotake_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_has_bits_[4], other->_has_bits_[4]);
    std::swap(_has_bits_[5], other->_has_bits_[5]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string S2ClientMsg::GetTypeName() const {
  return "fgame.S2ClientMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
