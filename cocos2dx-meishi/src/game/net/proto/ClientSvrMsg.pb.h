// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientSvrMsg.proto

#ifndef PROTOBUF_ClientSvrMsg_2eproto__INCLUDED
#define PROTOBUF_ClientSvrMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Message.pb.h"
#include "Base.pb.h"
#include "Glyphs.pb.h"
#include "PvpPersonalRoom.pb.h"
#include "Pvp.pb.h"
#include "Friend.pb.h"
#include "Match.pb.h"
#include "Activity.pb.h"
#include "Player.pb.h"
#include "Assistant.pb.h"
#include "Institute.pb.h"
// @@protoc_insertion_point(includes)

namespace fgame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientSvrMsg_2eproto();
void protobuf_AssignDesc_ClientSvrMsg_2eproto();
void protobuf_ShutdownFile_ClientSvrMsg_2eproto();

class Dummy;
class C2ServerMsg;
class S2ClientMsg;

// ===================================================================

class Dummy : public ::google::protobuf::MessageLite {
 public:
  Dummy();
  virtual ~Dummy();

  Dummy(const Dummy& from);

  inline Dummy& operator=(const Dummy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Dummy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Dummy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Dummy* other);

  // implements Message ----------------------------------------------

  Dummy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Dummy& from);
  void MergeFrom(const Dummy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fgame.CS_CMD_ID dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::fgame::CS_CMD_ID dummy() const;
  inline void set_dummy(::fgame::CS_CMD_ID value);

  // @@protoc_insertion_point(class_scope:fgame.Dummy)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int dummy_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientSvrMsg_2eproto();
  friend void protobuf_ShutdownFile_ClientSvrMsg_2eproto();

  void InitAsDefaultInstance();
  static Dummy* default_instance_;
};
// -------------------------------------------------------------------

class C2ServerMsg : public ::google::protobuf::MessageLite {
 public:
  C2ServerMsg();
  virtual ~C2ServerMsg();

  C2ServerMsg(const C2ServerMsg& from);

  inline C2ServerMsg& operator=(const C2ServerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const C2ServerMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const C2ServerMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(C2ServerMsg* other);

  // implements Message ----------------------------------------------

  C2ServerMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const C2ServerMsg& from);
  void MergeFrom(const C2ServerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fgame.CSLoginReq Login_Req = 2;
  inline bool has_login_req() const;
  inline void clear_login_req();
  static const int kLoginReqFieldNumber = 2;
  inline const ::fgame::CSLoginReq& login_req() const;
  inline ::fgame::CSLoginReq* mutable_login_req();
  inline ::fgame::CSLoginReq* release_login_req();
  inline void set_allocated_login_req(::fgame::CSLoginReq* login_req);

  // optional .fgame.CSRegReq Reg_Req = 3;
  inline bool has_reg_req() const;
  inline void clear_reg_req();
  static const int kRegReqFieldNumber = 3;
  inline const ::fgame::CSRegReq& reg_req() const;
  inline ::fgame::CSRegReq* mutable_reg_req();
  inline ::fgame::CSRegReq* release_reg_req();
  inline void set_allocated_reg_req(::fgame::CSRegReq* reg_req);

  // optional .fgame.CSHeartBeatReq HeartBeat_Req = 4;
  inline bool has_heartbeat_req() const;
  inline void clear_heartbeat_req();
  static const int kHeartBeatReqFieldNumber = 4;
  inline const ::fgame::CSHeartBeatReq& heartbeat_req() const;
  inline ::fgame::CSHeartBeatReq* mutable_heartbeat_req();
  inline ::fgame::CSHeartBeatReq* release_heartbeat_req();
  inline void set_allocated_heartbeat_req(::fgame::CSHeartBeatReq* heartbeat_req);

  // optional .fgame.CSPvpMatchReq Match_Req = 5;
  inline bool has_match_req() const;
  inline void clear_match_req();
  static const int kMatchReqFieldNumber = 5;
  inline const ::fgame::CSPvpMatchReq& match_req() const;
  inline ::fgame::CSPvpMatchReq* mutable_match_req();
  inline ::fgame::CSPvpMatchReq* release_match_req();
  inline void set_allocated_match_req(::fgame::CSPvpMatchReq* match_req);

  // optional .fgame.CSPvpStartReq Start_Req = 6;
  inline bool has_start_req() const;
  inline void clear_start_req();
  static const int kStartReqFieldNumber = 6;
  inline const ::fgame::CSPvpStartReq& start_req() const;
  inline ::fgame::CSPvpStartReq* mutable_start_req();
  inline ::fgame::CSPvpStartReq* release_start_req();
  inline void set_allocated_start_req(::fgame::CSPvpStartReq* start_req);

  // optional .fgame.CSPvpFightReq Fight_Req = 7;
  inline bool has_fight_req() const;
  inline void clear_fight_req();
  static const int kFightReqFieldNumber = 7;
  inline const ::fgame::CSPvpFightReq& fight_req() const;
  inline ::fgame::CSPvpFightReq* mutable_fight_req();
  inline ::fgame::CSPvpFightReq* release_fight_req();
  inline void set_allocated_fight_req(::fgame::CSPvpFightReq* fight_req);

  // optional .fgame.CSPvpEndReq End_Req = 8;
  inline bool has_end_req() const;
  inline void clear_end_req();
  static const int kEndReqFieldNumber = 8;
  inline const ::fgame::CSPvpEndReq& end_req() const;
  inline ::fgame::CSPvpEndReq* mutable_end_req();
  inline ::fgame::CSPvpEndReq* release_end_req();
  inline void set_allocated_end_req(::fgame::CSPvpEndReq* end_req);

  // optional .fgame.CSPvpMapReq Map_Req = 9;
  inline bool has_map_req() const;
  inline void clear_map_req();
  static const int kMapReqFieldNumber = 9;
  inline const ::fgame::CSPvpMapReq& map_req() const;
  inline ::fgame::CSPvpMapReq* mutable_map_req();
  inline ::fgame::CSPvpMapReq* release_map_req();
  inline void set_allocated_map_req(::fgame::CSPvpMapReq* map_req);

  // optional .fgame.CSPvpUpgradeReq Upgrade_Req = 10;
  inline bool has_upgrade_req() const;
  inline void clear_upgrade_req();
  static const int kUpgradeReqFieldNumber = 10;
  inline const ::fgame::CSPvpUpgradeReq& upgrade_req() const;
  inline ::fgame::CSPvpUpgradeReq* mutable_upgrade_req();
  inline ::fgame::CSPvpUpgradeReq* release_upgrade_req();
  inline void set_allocated_upgrade_req(::fgame::CSPvpUpgradeReq* upgrade_req);

  // optional .fgame.CSPvpPingReq Ping_Req = 13;
  inline bool has_ping_req() const;
  inline void clear_ping_req();
  static const int kPingReqFieldNumber = 13;
  inline const ::fgame::CSPvpPingReq& ping_req() const;
  inline ::fgame::CSPvpPingReq* mutable_ping_req();
  inline ::fgame::CSPvpPingReq* release_ping_req();
  inline void set_allocated_ping_req(::fgame::CSPvpPingReq* ping_req);

  // optional .fgame.CSBuyITtemReq BuyItem_Req = 14;
  inline bool has_buyitem_req() const;
  inline void clear_buyitem_req();
  static const int kBuyItemReqFieldNumber = 14;
  inline const ::fgame::CSBuyITtemReq& buyitem_req() const;
  inline ::fgame::CSBuyITtemReq* mutable_buyitem_req();
  inline ::fgame::CSBuyITtemReq* release_buyitem_req();
  inline void set_allocated_buyitem_req(::fgame::CSBuyITtemReq* buyitem_req);

  // optional .fgame.CSUseItemReq UseItem_Req = 15;
  inline bool has_useitem_req() const;
  inline void clear_useitem_req();
  static const int kUseItemReqFieldNumber = 15;
  inline const ::fgame::CSUseItemReq& useitem_req() const;
  inline ::fgame::CSUseItemReq* mutable_useitem_req();
  inline ::fgame::CSUseItemReq* release_useitem_req();
  inline void set_allocated_useitem_req(::fgame::CSUseItemReq* useitem_req);

  // optional .fgame.CSPvpLeaveReq Leave_Req = 18;
  inline bool has_leave_req() const;
  inline void clear_leave_req();
  static const int kLeaveReqFieldNumber = 18;
  inline const ::fgame::CSPvpLeaveReq& leave_req() const;
  inline ::fgame::CSPvpLeaveReq* mutable_leave_req();
  inline ::fgame::CSPvpLeaveReq* release_leave_req();
  inline void set_allocated_leave_req(::fgame::CSPvpLeaveReq* leave_req);

  // optional .fgame.CSGetAchievementReq GetAchievementReq = 19;
  inline bool has_getachievementreq() const;
  inline void clear_getachievementreq();
  static const int kGetAchievementReqFieldNumber = 19;
  inline const ::fgame::CSGetAchievementReq& getachievementreq() const;
  inline ::fgame::CSGetAchievementReq* mutable_getachievementreq();
  inline ::fgame::CSGetAchievementReq* release_getachievementreq();
  inline void set_allocated_getachievementreq(::fgame::CSGetAchievementReq* getachievementreq);

  // optional .fgame.CSReceiveAchievementReq ReceiveAchievement_Req = 20;
  inline bool has_receiveachievement_req() const;
  inline void clear_receiveachievement_req();
  static const int kReceiveAchievementReqFieldNumber = 20;
  inline const ::fgame::CSReceiveAchievementReq& receiveachievement_req() const;
  inline ::fgame::CSReceiveAchievementReq* mutable_receiveachievement_req();
  inline ::fgame::CSReceiveAchievementReq* release_receiveachievement_req();
  inline void set_allocated_receiveachievement_req(::fgame::CSReceiveAchievementReq* receiveachievement_req);

  // optional .fgame.CSReceiveAchievementRewardReq ReceiveAchievementReward_Req = 21;
  inline bool has_receiveachievementreward_req() const;
  inline void clear_receiveachievementreward_req();
  static const int kReceiveAchievementRewardReqFieldNumber = 21;
  inline const ::fgame::CSReceiveAchievementRewardReq& receiveachievementreward_req() const;
  inline ::fgame::CSReceiveAchievementRewardReq* mutable_receiveachievementreward_req();
  inline ::fgame::CSReceiveAchievementRewardReq* release_receiveachievementreward_req();
  inline void set_allocated_receiveachievementreward_req(::fgame::CSReceiveAchievementRewardReq* receiveachievementreward_req);

  // optional .fgame.CSEnterServerReq EnterServer_Req = 22;
  inline bool has_enterserver_req() const;
  inline void clear_enterserver_req();
  static const int kEnterServerReqFieldNumber = 22;
  inline const ::fgame::CSEnterServerReq& enterserver_req() const;
  inline ::fgame::CSEnterServerReq* mutable_enterserver_req();
  inline ::fgame::CSEnterServerReq* release_enterserver_req();
  inline void set_allocated_enterserver_req(::fgame::CSEnterServerReq* enterserver_req);

  // optional .fgame.CSDirectEnterReq DirectEnter_Req = 25;
  inline bool has_directenter_req() const;
  inline void clear_directenter_req();
  static const int kDirectEnterReqFieldNumber = 25;
  inline const ::fgame::CSDirectEnterReq& directenter_req() const;
  inline ::fgame::CSDirectEnterReq* mutable_directenter_req();
  inline ::fgame::CSDirectEnterReq* release_directenter_req();
  inline void set_allocated_directenter_req(::fgame::CSDirectEnterReq* directenter_req);

  // optional .fgame.CSPvpRankingGetListReq PvpRankingGetList_Req = 26;
  inline bool has_pvprankinggetlist_req() const;
  inline void clear_pvprankinggetlist_req();
  static const int kPvpRankingGetListReqFieldNumber = 26;
  inline const ::fgame::CSPvpRankingGetListReq& pvprankinggetlist_req() const;
  inline ::fgame::CSPvpRankingGetListReq* mutable_pvprankinggetlist_req();
  inline ::fgame::CSPvpRankingGetListReq* release_pvprankinggetlist_req();
  inline void set_allocated_pvprankinggetlist_req(::fgame::CSPvpRankingGetListReq* pvprankinggetlist_req);

  // optional .fgame.CSStreakWinValueReq StreakWinValue_Req = 27;
  inline bool has_streakwinvalue_req() const;
  inline void clear_streakwinvalue_req();
  static const int kStreakWinValueReqFieldNumber = 27;
  inline const ::fgame::CSStreakWinValueReq& streakwinvalue_req() const;
  inline ::fgame::CSStreakWinValueReq* mutable_streakwinvalue_req();
  inline ::fgame::CSStreakWinValueReq* release_streakwinvalue_req();
  inline void set_allocated_streakwinvalue_req(::fgame::CSStreakWinValueReq* streakwinvalue_req);

  // optional .fgame.CSStreakWinGetReq StreakWinGet_Req = 28;
  inline bool has_streakwinget_req() const;
  inline void clear_streakwinget_req();
  static const int kStreakWinGetReqFieldNumber = 28;
  inline const ::fgame::CSStreakWinGetReq& streakwinget_req() const;
  inline ::fgame::CSStreakWinGetReq* mutable_streakwinget_req();
  inline ::fgame::CSStreakWinGetReq* release_streakwinget_req();
  inline void set_allocated_streakwinget_req(::fgame::CSStreakWinGetReq* streakwinget_req);

  // optional .fgame.CSOpenBigStageReq OpenBigStage_Req = 29;
  inline bool has_openbigstage_req() const;
  inline void clear_openbigstage_req();
  static const int kOpenBigStageReqFieldNumber = 29;
  inline const ::fgame::CSOpenBigStageReq& openbigstage_req() const;
  inline ::fgame::CSOpenBigStageReq* mutable_openbigstage_req();
  inline ::fgame::CSOpenBigStageReq* release_openbigstage_req();
  inline void set_allocated_openbigstage_req(::fgame::CSOpenBigStageReq* openbigstage_req);

  // optional .fgame.CSPvpUseItemReq PvpUseItem_Req = 30;
  inline bool has_pvpuseitem_req() const;
  inline void clear_pvpuseitem_req();
  static const int kPvpUseItemReqFieldNumber = 30;
  inline const ::fgame::CSPvpUseItemReq& pvpuseitem_req() const;
  inline ::fgame::CSPvpUseItemReq* mutable_pvpuseitem_req();
  inline ::fgame::CSPvpUseItemReq* release_pvpuseitem_req();
  inline void set_allocated_pvpuseitem_req(::fgame::CSPvpUseItemReq* pvpuseitem_req);

  // optional .fgame.CSSevenDaySignListReq SevenDaySignList_Req = 31;
  inline bool has_sevendaysignlist_req() const;
  inline void clear_sevendaysignlist_req();
  static const int kSevenDaySignListReqFieldNumber = 31;
  inline const ::fgame::CSSevenDaySignListReq& sevendaysignlist_req() const;
  inline ::fgame::CSSevenDaySignListReq* mutable_sevendaysignlist_req();
  inline ::fgame::CSSevenDaySignListReq* release_sevendaysignlist_req();
  inline void set_allocated_sevendaysignlist_req(::fgame::CSSevenDaySignListReq* sevendaysignlist_req);

  // optional .fgame.CSSevenDaySignReq SevenDaySign_Req = 32;
  inline bool has_sevendaysign_req() const;
  inline void clear_sevendaysign_req();
  static const int kSevenDaySignReqFieldNumber = 32;
  inline const ::fgame::CSSevenDaySignReq& sevendaysign_req() const;
  inline ::fgame::CSSevenDaySignReq* mutable_sevendaysign_req();
  inline ::fgame::CSSevenDaySignReq* release_sevendaysign_req();
  inline void set_allocated_sevendaysign_req(::fgame::CSSevenDaySignReq* sevendaysign_req);

  // optional .fgame.CSGetServerReq GetServer_Req = 33;
  inline bool has_getserver_req() const;
  inline void clear_getserver_req();
  static const int kGetServerReqFieldNumber = 33;
  inline const ::fgame::CSGetServerReq& getserver_req() const;
  inline ::fgame::CSGetServerReq* mutable_getserver_req();
  inline ::fgame::CSGetServerReq* release_getserver_req();
  inline void set_allocated_getserver_req(::fgame::CSGetServerReq* getserver_req);

  // optional .fgame.CSSycPlayerInfoReq SycPlayerInfo_Req = 34;
  inline bool has_sycplayerinfo_req() const;
  inline void clear_sycplayerinfo_req();
  static const int kSycPlayerInfoReqFieldNumber = 34;
  inline const ::fgame::CSSycPlayerInfoReq& sycplayerinfo_req() const;
  inline ::fgame::CSSycPlayerInfoReq* mutable_sycplayerinfo_req();
  inline ::fgame::CSSycPlayerInfoReq* release_sycplayerinfo_req();
  inline void set_allocated_sycplayerinfo_req(::fgame::CSSycPlayerInfoReq* sycplayerinfo_req);

  // optional .fgame.CSPvpStopMatchReq StopMatch_Req = 36;
  inline bool has_stopmatch_req() const;
  inline void clear_stopmatch_req();
  static const int kStopMatchReqFieldNumber = 36;
  inline const ::fgame::CSPvpStopMatchReq& stopmatch_req() const;
  inline ::fgame::CSPvpStopMatchReq* mutable_stopmatch_req();
  inline ::fgame::CSPvpStopMatchReq* release_stopmatch_req();
  inline void set_allocated_stopmatch_req(::fgame::CSPvpStopMatchReq* stopmatch_req);

  // optional .fgame.CSChangeNameReq ChangeName_Req = 37;
  inline bool has_changename_req() const;
  inline void clear_changename_req();
  static const int kChangeNameReqFieldNumber = 37;
  inline const ::fgame::CSChangeNameReq& changename_req() const;
  inline ::fgame::CSChangeNameReq* mutable_changename_req();
  inline ::fgame::CSChangeNameReq* release_changename_req();
  inline void set_allocated_changename_req(::fgame::CSChangeNameReq* changename_req);

  // optional .fgame.CSLogoutReq Logout_Req = 38;
  inline bool has_logout_req() const;
  inline void clear_logout_req();
  static const int kLogoutReqFieldNumber = 38;
  inline const ::fgame::CSLogoutReq& logout_req() const;
  inline ::fgame::CSLogoutReq* mutable_logout_req();
  inline ::fgame::CSLogoutReq* release_logout_req();
  inline void set_allocated_logout_req(::fgame::CSLogoutReq* logout_req);

  // optional .fgame.CSXinShouRecodeReq XinShouRecode_Req = 41;
  inline bool has_xinshourecode_req() const;
  inline void clear_xinshourecode_req();
  static const int kXinShouRecodeReqFieldNumber = 41;
  inline const ::fgame::CSXinShouRecodeReq& xinshourecode_req() const;
  inline ::fgame::CSXinShouRecodeReq* mutable_xinshourecode_req();
  inline ::fgame::CSXinShouRecodeReq* release_xinshourecode_req();
  inline void set_allocated_xinshourecode_req(::fgame::CSXinShouRecodeReq* xinshourecode_req);

  // optional .fgame.CSPvpRankingPlayerInfoReq PvpRankingPlayerInfo_Req = 42;
  inline bool has_pvprankingplayerinfo_req() const;
  inline void clear_pvprankingplayerinfo_req();
  static const int kPvpRankingPlayerInfoReqFieldNumber = 42;
  inline const ::fgame::CSPvpRankingPlayerInfoReq& pvprankingplayerinfo_req() const;
  inline ::fgame::CSPvpRankingPlayerInfoReq* mutable_pvprankingplayerinfo_req();
  inline ::fgame::CSPvpRankingPlayerInfoReq* release_pvprankingplayerinfo_req();
  inline void set_allocated_pvprankingplayerinfo_req(::fgame::CSPvpRankingPlayerInfoReq* pvprankingplayerinfo_req);

  // optional .fgame.CSGetOpenActivityReq GetOpenActivity_Req = 43;
  inline bool has_getopenactivity_req() const;
  inline void clear_getopenactivity_req();
  static const int kGetOpenActivityReqFieldNumber = 43;
  inline const ::fgame::CSGetOpenActivityReq& getopenactivity_req() const;
  inline ::fgame::CSGetOpenActivityReq* mutable_getopenactivity_req();
  inline ::fgame::CSGetOpenActivityReq* release_getopenactivity_req();
  inline void set_allocated_getopenactivity_req(::fgame::CSGetOpenActivityReq* getopenactivity_req);

  // optional .fgame.CSGetActivityDataReq GetActivityData_Req = 44;
  inline bool has_getactivitydata_req() const;
  inline void clear_getactivitydata_req();
  static const int kGetActivityDataReqFieldNumber = 44;
  inline const ::fgame::CSGetActivityDataReq& getactivitydata_req() const;
  inline ::fgame::CSGetActivityDataReq* mutable_getactivitydata_req();
  inline ::fgame::CSGetActivityDataReq* release_getactivitydata_req();
  inline void set_allocated_getactivitydata_req(::fgame::CSGetActivityDataReq* getactivitydata_req);

  // optional .fgame.CSReceiveActivityRewardReq ReceiveActivityReward_Req = 45;
  inline bool has_receiveactivityreward_req() const;
  inline void clear_receiveactivityreward_req();
  static const int kReceiveActivityRewardReqFieldNumber = 45;
  inline const ::fgame::CSReceiveActivityRewardReq& receiveactivityreward_req() const;
  inline ::fgame::CSReceiveActivityRewardReq* mutable_receiveactivityreward_req();
  inline ::fgame::CSReceiveActivityRewardReq* release_receiveactivityreward_req();
  inline void set_allocated_receiveactivityreward_req(::fgame::CSReceiveActivityRewardReq* receiveactivityreward_req);

  // optional .fgame.CSMissionListReq MissionList_Req = 46;
  inline bool has_missionlist_req() const;
  inline void clear_missionlist_req();
  static const int kMissionListReqFieldNumber = 46;
  inline const ::fgame::CSMissionListReq& missionlist_req() const;
  inline ::fgame::CSMissionListReq* mutable_missionlist_req();
  inline ::fgame::CSMissionListReq* release_missionlist_req();
  inline void set_allocated_missionlist_req(::fgame::CSMissionListReq* missionlist_req);

  // optional .fgame.CSMissionCompleteReq MissionComplete_Req = 47;
  inline bool has_missioncomplete_req() const;
  inline void clear_missioncomplete_req();
  static const int kMissionCompleteReqFieldNumber = 47;
  inline const ::fgame::CSMissionCompleteReq& missioncomplete_req() const;
  inline ::fgame::CSMissionCompleteReq* mutable_missioncomplete_req();
  inline ::fgame::CSMissionCompleteReq* release_missioncomplete_req();
  inline void set_allocated_missioncomplete_req(::fgame::CSMissionCompleteReq* missioncomplete_req);

  // optional .fgame.CSGetPowerEnergyActivityDataReq GetPowerEnergyActivityData_Req = 49;
  inline bool has_getpowerenergyactivitydata_req() const;
  inline void clear_getpowerenergyactivitydata_req();
  static const int kGetPowerEnergyActivityDataReqFieldNumber = 49;
  inline const ::fgame::CSGetPowerEnergyActivityDataReq& getpowerenergyactivitydata_req() const;
  inline ::fgame::CSGetPowerEnergyActivityDataReq* mutable_getpowerenergyactivitydata_req();
  inline ::fgame::CSGetPowerEnergyActivityDataReq* release_getpowerenergyactivitydata_req();
  inline void set_allocated_getpowerenergyactivitydata_req(::fgame::CSGetPowerEnergyActivityDataReq* getpowerenergyactivitydata_req);

  // optional .fgame.CSReceivePowerEnergyReq ReceivePowerEnergy_Req = 50;
  inline bool has_receivepowerenergy_req() const;
  inline void clear_receivepowerenergy_req();
  static const int kReceivePowerEnergyReqFieldNumber = 50;
  inline const ::fgame::CSReceivePowerEnergyReq& receivepowerenergy_req() const;
  inline ::fgame::CSReceivePowerEnergyReq* mutable_receivepowerenergy_req();
  inline ::fgame::CSReceivePowerEnergyReq* release_receivepowerenergy_req();
  inline void set_allocated_receivepowerenergy_req(::fgame::CSReceivePowerEnergyReq* receivepowerenergy_req);

  // optional .fgame.CSGetMailReq GetMail_Req = 51;
  inline bool has_getmail_req() const;
  inline void clear_getmail_req();
  static const int kGetMailReqFieldNumber = 51;
  inline const ::fgame::CSGetMailReq& getmail_req() const;
  inline ::fgame::CSGetMailReq* mutable_getmail_req();
  inline ::fgame::CSGetMailReq* release_getmail_req();
  inline void set_allocated_getmail_req(::fgame::CSGetMailReq* getmail_req);

  // optional .fgame.CSDelMailReq DelMail_Req = 52;
  inline bool has_delmail_req() const;
  inline void clear_delmail_req();
  static const int kDelMailReqFieldNumber = 52;
  inline const ::fgame::CSDelMailReq& delmail_req() const;
  inline ::fgame::CSDelMailReq* mutable_delmail_req();
  inline ::fgame::CSDelMailReq* release_delmail_req();
  inline void set_allocated_delmail_req(::fgame::CSDelMailReq* delmail_req);

  // optional .fgame.CSBuyNewbieGiftReq BuyNewbieGift_Req = 54;
  inline bool has_buynewbiegift_req() const;
  inline void clear_buynewbiegift_req();
  static const int kBuyNewbieGiftReqFieldNumber = 54;
  inline const ::fgame::CSBuyNewbieGiftReq& buynewbiegift_req() const;
  inline ::fgame::CSBuyNewbieGiftReq* mutable_buynewbiegift_req();
  inline ::fgame::CSBuyNewbieGiftReq* release_buynewbiegift_req();
  inline void set_allocated_buynewbiegift_req(::fgame::CSBuyNewbieGiftReq* buynewbiegift_req);

  // optional .fgame.CSRechargeCallbackReq RechargeCallback_Req = 55;
  inline bool has_rechargecallback_req() const;
  inline void clear_rechargecallback_req();
  static const int kRechargeCallbackReqFieldNumber = 55;
  inline const ::fgame::CSRechargeCallbackReq& rechargecallback_req() const;
  inline ::fgame::CSRechargeCallbackReq* mutable_rechargecallback_req();
  inline ::fgame::CSRechargeCallbackReq* release_rechargecallback_req();
  inline void set_allocated_rechargecallback_req(::fgame::CSRechargeCallbackReq* rechargecallback_req);

  // optional .fgame.CSFriendQueryReq FriendQuery_Req = 56;
  inline bool has_friendquery_req() const;
  inline void clear_friendquery_req();
  static const int kFriendQueryReqFieldNumber = 56;
  inline const ::fgame::CSFriendQueryReq& friendquery_req() const;
  inline ::fgame::CSFriendQueryReq* mutable_friendquery_req();
  inline ::fgame::CSFriendQueryReq* release_friendquery_req();
  inline void set_allocated_friendquery_req(::fgame::CSFriendQueryReq* friendquery_req);

  // optional .fgame.CSFriendRequestAddReq FriendRequestAdd_Req = 57;
  inline bool has_friendrequestadd_req() const;
  inline void clear_friendrequestadd_req();
  static const int kFriendRequestAddReqFieldNumber = 57;
  inline const ::fgame::CSFriendRequestAddReq& friendrequestadd_req() const;
  inline ::fgame::CSFriendRequestAddReq* mutable_friendrequestadd_req();
  inline ::fgame::CSFriendRequestAddReq* release_friendrequestadd_req();
  inline void set_allocated_friendrequestadd_req(::fgame::CSFriendRequestAddReq* friendrequestadd_req);

  // optional .fgame.CSFriendConfirmAddReq FriendConfirmAdd_Req = 58;
  inline bool has_friendconfirmadd_req() const;
  inline void clear_friendconfirmadd_req();
  static const int kFriendConfirmAddReqFieldNumber = 58;
  inline const ::fgame::CSFriendConfirmAddReq& friendconfirmadd_req() const;
  inline ::fgame::CSFriendConfirmAddReq* mutable_friendconfirmadd_req();
  inline ::fgame::CSFriendConfirmAddReq* release_friendconfirmadd_req();
  inline void set_allocated_friendconfirmadd_req(::fgame::CSFriendConfirmAddReq* friendconfirmadd_req);

  // optional .fgame.CSFriendGetInfoReq FriendGetInfo_Req = 59;
  inline bool has_friendgetinfo_req() const;
  inline void clear_friendgetinfo_req();
  static const int kFriendGetInfoReqFieldNumber = 59;
  inline const ::fgame::CSFriendGetInfoReq& friendgetinfo_req() const;
  inline ::fgame::CSFriendGetInfoReq* mutable_friendgetinfo_req();
  inline ::fgame::CSFriendGetInfoReq* release_friendgetinfo_req();
  inline void set_allocated_friendgetinfo_req(::fgame::CSFriendGetInfoReq* friendgetinfo_req);

  // optional .fgame.CSFriendRequestRemoveReq FriendRequestRemove_Req = 60;
  inline bool has_friendrequestremove_req() const;
  inline void clear_friendrequestremove_req();
  static const int kFriendRequestRemoveReqFieldNumber = 60;
  inline const ::fgame::CSFriendRequestRemoveReq& friendrequestremove_req() const;
  inline ::fgame::CSFriendRequestRemoveReq* mutable_friendrequestremove_req();
  inline ::fgame::CSFriendRequestRemoveReq* release_friendrequestremove_req();
  inline void set_allocated_friendrequestremove_req(::fgame::CSFriendRequestRemoveReq* friendrequestremove_req);

  // optional .fgame.CSFriendAddBlackListReq FriendAddBlackList_Req = 61;
  inline bool has_friendaddblacklist_req() const;
  inline void clear_friendaddblacklist_req();
  static const int kFriendAddBlackListReqFieldNumber = 61;
  inline const ::fgame::CSFriendAddBlackListReq& friendaddblacklist_req() const;
  inline ::fgame::CSFriendAddBlackListReq* mutable_friendaddblacklist_req();
  inline ::fgame::CSFriendAddBlackListReq* release_friendaddblacklist_req();
  inline void set_allocated_friendaddblacklist_req(::fgame::CSFriendAddBlackListReq* friendaddblacklist_req);

  // optional .fgame.CSFriendRemoveBlackListReq FriendRemoveBlackList_Req = 62;
  inline bool has_friendremoveblacklist_req() const;
  inline void clear_friendremoveblacklist_req();
  static const int kFriendRemoveBlackListReqFieldNumber = 62;
  inline const ::fgame::CSFriendRemoveBlackListReq& friendremoveblacklist_req() const;
  inline ::fgame::CSFriendRemoveBlackListReq* mutable_friendremoveblacklist_req();
  inline ::fgame::CSFriendRemoveBlackListReq* release_friendremoveblacklist_req();
  inline void set_allocated_friendremoveblacklist_req(::fgame::CSFriendRemoveBlackListReq* friendremoveblacklist_req);

  // optional .fgame.CSPvpChatReq PvpChat_Req = 63;
  inline bool has_pvpchat_req() const;
  inline void clear_pvpchat_req();
  static const int kPvpChatReqFieldNumber = 63;
  inline const ::fgame::CSPvpChatReq& pvpchat_req() const;
  inline ::fgame::CSPvpChatReq* mutable_pvpchat_req();
  inline ::fgame::CSPvpChatReq* release_pvpchat_req();
  inline void set_allocated_pvpchat_req(::fgame::CSPvpChatReq* pvpchat_req);

  // optional .fgame.CSUseGiftCodeReq UseGiftCode_Req = 64;
  inline bool has_usegiftcode_req() const;
  inline void clear_usegiftcode_req();
  static const int kUseGiftCodeReqFieldNumber = 64;
  inline const ::fgame::CSUseGiftCodeReq& usegiftcode_req() const;
  inline ::fgame::CSUseGiftCodeReq* mutable_usegiftcode_req();
  inline ::fgame::CSUseGiftCodeReq* release_usegiftcode_req();
  inline void set_allocated_usegiftcode_req(::fgame::CSUseGiftCodeReq* usegiftcode_req);

  // optional .fgame.CSQueryPlayerInfoReq QueryPlayerInfo_Req = 65;
  inline bool has_queryplayerinfo_req() const;
  inline void clear_queryplayerinfo_req();
  static const int kQueryPlayerInfoReqFieldNumber = 65;
  inline const ::fgame::CSQueryPlayerInfoReq& queryplayerinfo_req() const;
  inline ::fgame::CSQueryPlayerInfoReq* mutable_queryplayerinfo_req();
  inline ::fgame::CSQueryPlayerInfoReq* release_queryplayerinfo_req();
  inline void set_allocated_queryplayerinfo_req(::fgame::CSQueryPlayerInfoReq* queryplayerinfo_req);

  // optional .fgame.CSPersonalRoomCreateReq PersonalRoomCreate_Req = 66;
  inline bool has_personalroomcreate_req() const;
  inline void clear_personalroomcreate_req();
  static const int kPersonalRoomCreateReqFieldNumber = 66;
  inline const ::fgame::CSPersonalRoomCreateReq& personalroomcreate_req() const;
  inline ::fgame::CSPersonalRoomCreateReq* mutable_personalroomcreate_req();
  inline ::fgame::CSPersonalRoomCreateReq* release_personalroomcreate_req();
  inline void set_allocated_personalroomcreate_req(::fgame::CSPersonalRoomCreateReq* personalroomcreate_req);

  // optional .fgame.CSPersonalRoomEnterReq PersonalRoomEnter_Req = 67;
  inline bool has_personalroomenter_req() const;
  inline void clear_personalroomenter_req();
  static const int kPersonalRoomEnterReqFieldNumber = 67;
  inline const ::fgame::CSPersonalRoomEnterReq& personalroomenter_req() const;
  inline ::fgame::CSPersonalRoomEnterReq* mutable_personalroomenter_req();
  inline ::fgame::CSPersonalRoomEnterReq* release_personalroomenter_req();
  inline void set_allocated_personalroomenter_req(::fgame::CSPersonalRoomEnterReq* personalroomenter_req);

  // optional .fgame.CSPersonalRoomLeaveReq PersonalRoomLeave_Req = 68;
  inline bool has_personalroomleave_req() const;
  inline void clear_personalroomleave_req();
  static const int kPersonalRoomLeaveReqFieldNumber = 68;
  inline const ::fgame::CSPersonalRoomLeaveReq& personalroomleave_req() const;
  inline ::fgame::CSPersonalRoomLeaveReq* mutable_personalroomleave_req();
  inline ::fgame::CSPersonalRoomLeaveReq* release_personalroomleave_req();
  inline void set_allocated_personalroomleave_req(::fgame::CSPersonalRoomLeaveReq* personalroomleave_req);

  // optional .fgame.CSPersonalRoomKickReq PersonalRoomKick_Req = 69;
  inline bool has_personalroomkick_req() const;
  inline void clear_personalroomkick_req();
  static const int kPersonalRoomKickReqFieldNumber = 69;
  inline const ::fgame::CSPersonalRoomKickReq& personalroomkick_req() const;
  inline ::fgame::CSPersonalRoomKickReq* mutable_personalroomkick_req();
  inline ::fgame::CSPersonalRoomKickReq* release_personalroomkick_req();
  inline void set_allocated_personalroomkick_req(::fgame::CSPersonalRoomKickReq* personalroomkick_req);

  // optional .fgame.CSPersonalRoomInviteReq PersonalRoomInvite_Req = 70;
  inline bool has_personalroominvite_req() const;
  inline void clear_personalroominvite_req();
  static const int kPersonalRoomInviteReqFieldNumber = 70;
  inline const ::fgame::CSPersonalRoomInviteReq& personalroominvite_req() const;
  inline ::fgame::CSPersonalRoomInviteReq* mutable_personalroominvite_req();
  inline ::fgame::CSPersonalRoomInviteReq* release_personalroominvite_req();
  inline void set_allocated_personalroominvite_req(::fgame::CSPersonalRoomInviteReq* personalroominvite_req);

  // optional .fgame.CSPersonalRoomBroadcastReq PersonalRoomBroadcast_Req = 71;
  inline bool has_personalroombroadcast_req() const;
  inline void clear_personalroombroadcast_req();
  static const int kPersonalRoomBroadcastReqFieldNumber = 71;
  inline const ::fgame::CSPersonalRoomBroadcastReq& personalroombroadcast_req() const;
  inline ::fgame::CSPersonalRoomBroadcastReq* mutable_personalroombroadcast_req();
  inline ::fgame::CSPersonalRoomBroadcastReq* release_personalroombroadcast_req();
  inline void set_allocated_personalroombroadcast_req(::fgame::CSPersonalRoomBroadcastReq* personalroombroadcast_req);

  // optional .fgame.CSPersonalRoomChatReq PersonalRoomChat_Req = 72;
  inline bool has_personalroomchat_req() const;
  inline void clear_personalroomchat_req();
  static const int kPersonalRoomChatReqFieldNumber = 72;
  inline const ::fgame::CSPersonalRoomChatReq& personalroomchat_req() const;
  inline ::fgame::CSPersonalRoomChatReq* mutable_personalroomchat_req();
  inline ::fgame::CSPersonalRoomChatReq* release_personalroomchat_req();
  inline void set_allocated_personalroomchat_req(::fgame::CSPersonalRoomChatReq* personalroomchat_req);

  // optional .fgame.CSPersonalRoomModeReq PersonalRoomMode_Req = 73;
  inline bool has_personalroommode_req() const;
  inline void clear_personalroommode_req();
  static const int kPersonalRoomModeReqFieldNumber = 73;
  inline const ::fgame::CSPersonalRoomModeReq& personalroommode_req() const;
  inline ::fgame::CSPersonalRoomModeReq* mutable_personalroommode_req();
  inline ::fgame::CSPersonalRoomModeReq* release_personalroommode_req();
  inline void set_allocated_personalroommode_req(::fgame::CSPersonalRoomModeReq* personalroommode_req);

  // optional .fgame.CSPersonalRoomBeginFightReq PersonalRoomBeginFight_Req = 74;
  inline bool has_personalroombeginfight_req() const;
  inline void clear_personalroombeginfight_req();
  static const int kPersonalRoomBeginFightReqFieldNumber = 74;
  inline const ::fgame::CSPersonalRoomBeginFightReq& personalroombeginfight_req() const;
  inline ::fgame::CSPersonalRoomBeginFightReq* mutable_personalroombeginfight_req();
  inline ::fgame::CSPersonalRoomBeginFightReq* release_personalroombeginfight_req();
  inline void set_allocated_personalroombeginfight_req(::fgame::CSPersonalRoomBeginFightReq* personalroombeginfight_req);

  // optional .fgame.CSPersonalRoomApplyOrRefuseInviteReq PersonalRoomApplyOrRefuseInvite_Req = 76;
  inline bool has_personalroomapplyorrefuseinvite_req() const;
  inline void clear_personalroomapplyorrefuseinvite_req();
  static const int kPersonalRoomApplyOrRefuseInviteReqFieldNumber = 76;
  inline const ::fgame::CSPersonalRoomApplyOrRefuseInviteReq& personalroomapplyorrefuseinvite_req() const;
  inline ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* mutable_personalroomapplyorrefuseinvite_req();
  inline ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* release_personalroomapplyorrefuseinvite_req();
  inline void set_allocated_personalroomapplyorrefuseinvite_req(::fgame::CSPersonalRoomApplyOrRefuseInviteReq* personalroomapplyorrefuseinvite_req);

  // optional .fgame.CSChangePlayerIconReq ChangePlayerIcon_Req = 77;
  inline bool has_changeplayericon_req() const;
  inline void clear_changeplayericon_req();
  static const int kChangePlayerIconReqFieldNumber = 77;
  inline const ::fgame::CSChangePlayerIconReq& changeplayericon_req() const;
  inline ::fgame::CSChangePlayerIconReq* mutable_changeplayericon_req();
  inline ::fgame::CSChangePlayerIconReq* release_changeplayericon_req();
  inline void set_allocated_changeplayericon_req(::fgame::CSChangePlayerIconReq* changeplayericon_req);

  // optional .fgame.CSPersonalRoomCountDownReq PersonalRoomCountDown_Req = 78;
  inline bool has_personalroomcountdown_req() const;
  inline void clear_personalroomcountdown_req();
  static const int kPersonalRoomCountDownReqFieldNumber = 78;
  inline const ::fgame::CSPersonalRoomCountDownReq& personalroomcountdown_req() const;
  inline ::fgame::CSPersonalRoomCountDownReq* mutable_personalroomcountdown_req();
  inline ::fgame::CSPersonalRoomCountDownReq* release_personalroomcountdown_req();
  inline void set_allocated_personalroomcountdown_req(::fgame::CSPersonalRoomCountDownReq* personalroomcountdown_req);

  // optional .fgame.CSSyncPlayerDataReq SyncPlayerData_Req = 79;
  inline bool has_syncplayerdata_req() const;
  inline void clear_syncplayerdata_req();
  static const int kSyncPlayerDataReqFieldNumber = 79;
  inline const ::fgame::CSSyncPlayerDataReq& syncplayerdata_req() const;
  inline ::fgame::CSSyncPlayerDataReq* mutable_syncplayerdata_req();
  inline ::fgame::CSSyncPlayerDataReq* release_syncplayerdata_req();
  inline void set_allocated_syncplayerdata_req(::fgame::CSSyncPlayerDataReq* syncplayerdata_req);

  // optional .fgame.CSGetPlayerDataReq GetPlayerData_Req = 80;
  inline bool has_getplayerdata_req() const;
  inline void clear_getplayerdata_req();
  static const int kGetPlayerDataReqFieldNumber = 80;
  inline const ::fgame::CSGetPlayerDataReq& getplayerdata_req() const;
  inline ::fgame::CSGetPlayerDataReq* mutable_getplayerdata_req();
  inline ::fgame::CSGetPlayerDataReq* release_getplayerdata_req();
  inline void set_allocated_getplayerdata_req(::fgame::CSGetPlayerDataReq* getplayerdata_req);

  // optional .fgame.CSPvpAppearCreepReq AppearCreep_Req = 81;
  inline bool has_appearcreep_req() const;
  inline void clear_appearcreep_req();
  static const int kAppearCreepReqFieldNumber = 81;
  inline const ::fgame::CSPvpAppearCreepReq& appearcreep_req() const;
  inline ::fgame::CSPvpAppearCreepReq* mutable_appearcreep_req();
  inline ::fgame::CSPvpAppearCreepReq* release_appearcreep_req();
  inline void set_allocated_appearcreep_req(::fgame::CSPvpAppearCreepReq* appearcreep_req);

  // optional .fgame.CSSaveCheckPtDataReq SaveCheckPtData_Req = 82;
  inline bool has_savecheckptdata_req() const;
  inline void clear_savecheckptdata_req();
  static const int kSaveCheckPtDataReqFieldNumber = 82;
  inline const ::fgame::CSSaveCheckPtDataReq& savecheckptdata_req() const;
  inline ::fgame::CSSaveCheckPtDataReq* mutable_savecheckptdata_req();
  inline ::fgame::CSSaveCheckPtDataReq* release_savecheckptdata_req();
  inline void set_allocated_savecheckptdata_req(::fgame::CSSaveCheckPtDataReq* savecheckptdata_req);

  // optional .fgame.CSGetCheckPtDataReq GetCheckPtData_Req = 83;
  inline bool has_getcheckptdata_req() const;
  inline void clear_getcheckptdata_req();
  static const int kGetCheckPtDataReqFieldNumber = 83;
  inline const ::fgame::CSGetCheckPtDataReq& getcheckptdata_req() const;
  inline ::fgame::CSGetCheckPtDataReq* mutable_getcheckptdata_req();
  inline ::fgame::CSGetCheckPtDataReq* release_getcheckptdata_req();
  inline void set_allocated_getcheckptdata_req(::fgame::CSGetCheckPtDataReq* getcheckptdata_req);

  // optional .fgame.CSSetNewBieReq SetNewBie_Req = 84;
  inline bool has_setnewbie_req() const;
  inline void clear_setnewbie_req();
  static const int kSetNewBieReqFieldNumber = 84;
  inline const ::fgame::CSSetNewBieReq& setnewbie_req() const;
  inline ::fgame::CSSetNewBieReq* mutable_setnewbie_req();
  inline ::fgame::CSSetNewBieReq* release_setnewbie_req();
  inline void set_allocated_setnewbie_req(::fgame::CSSetNewBieReq* setnewbie_req);

  // optional .fgame.CSGetNewBieListReq GetNewBieList_Req = 85;
  inline bool has_getnewbielist_req() const;
  inline void clear_getnewbielist_req();
  static const int kGetNewBieListReqFieldNumber = 85;
  inline const ::fgame::CSGetNewBieListReq& getnewbielist_req() const;
  inline ::fgame::CSGetNewBieListReq* mutable_getnewbielist_req();
  inline ::fgame::CSGetNewBieListReq* release_getnewbielist_req();
  inline void set_allocated_getnewbielist_req(::fgame::CSGetNewBieListReq* getnewbielist_req);

  // optional .fgame.CSEnterPointReq EnterPoint_Req = 87;
  inline bool has_enterpoint_req() const;
  inline void clear_enterpoint_req();
  static const int kEnterPointReqFieldNumber = 87;
  inline const ::fgame::CSEnterPointReq& enterpoint_req() const;
  inline ::fgame::CSEnterPointReq* mutable_enterpoint_req();
  inline ::fgame::CSEnterPointReq* release_enterpoint_req();
  inline void set_allocated_enterpoint_req(::fgame::CSEnterPointReq* enterpoint_req);

  // optional .fgame.CSShopGuideReq ShopGuide_Req = 88;
  inline bool has_shopguide_req() const;
  inline void clear_shopguide_req();
  static const int kShopGuideReqFieldNumber = 88;
  inline const ::fgame::CSShopGuideReq& shopguide_req() const;
  inline ::fgame::CSShopGuideReq* mutable_shopguide_req();
  inline ::fgame::CSShopGuideReq* release_shopguide_req();
  inline void set_allocated_shopguide_req(::fgame::CSShopGuideReq* shopguide_req);

  // optional .fgame.CSTestAddDiamondReq TestAddDiamond_Req = 89;
  inline bool has_testadddiamond_req() const;
  inline void clear_testadddiamond_req();
  static const int kTestAddDiamondReqFieldNumber = 89;
  inline const ::fgame::CSTestAddDiamondReq& testadddiamond_req() const;
  inline ::fgame::CSTestAddDiamondReq* mutable_testadddiamond_req();
  inline ::fgame::CSTestAddDiamondReq* release_testadddiamond_req();
  inline void set_allocated_testadddiamond_req(::fgame::CSTestAddDiamondReq* testadddiamond_req);

  // optional .fgame.CSActivityListReq ActivityList_Req = 90;
  inline bool has_activitylist_req() const;
  inline void clear_activitylist_req();
  static const int kActivityListReqFieldNumber = 90;
  inline const ::fgame::CSActivityListReq& activitylist_req() const;
  inline ::fgame::CSActivityListReq* mutable_activitylist_req();
  inline ::fgame::CSActivityListReq* release_activitylist_req();
  inline void set_allocated_activitylist_req(::fgame::CSActivityListReq* activitylist_req);

  // optional .fgame.CSActivitySubmitReq ActivitySubmit_Req = 92;
  inline bool has_activitysubmit_req() const;
  inline void clear_activitysubmit_req();
  static const int kActivitySubmitReqFieldNumber = 92;
  inline const ::fgame::CSActivitySubmitReq& activitysubmit_req() const;
  inline ::fgame::CSActivitySubmitReq* mutable_activitysubmit_req();
  inline ::fgame::CSActivitySubmitReq* release_activitysubmit_req();
  inline void set_allocated_activitysubmit_req(::fgame::CSActivitySubmitReq* activitysubmit_req);

  // optional .fgame.CSSetTitleReq SetTitle_Req = 93;
  inline bool has_settitle_req() const;
  inline void clear_settitle_req();
  static const int kSetTitleReqFieldNumber = 93;
  inline const ::fgame::CSSetTitleReq& settitle_req() const;
  inline ::fgame::CSSetTitleReq* mutable_settitle_req();
  inline ::fgame::CSSetTitleReq* release_settitle_req();
  inline void set_allocated_settitle_req(::fgame::CSSetTitleReq* settitle_req);

  // optional .fgame.CSShopBuyReq ShopBuy_Req = 94;
  inline bool has_shopbuy_req() const;
  inline void clear_shopbuy_req();
  static const int kShopBuyReqFieldNumber = 94;
  inline const ::fgame::CSShopBuyReq& shopbuy_req() const;
  inline ::fgame::CSShopBuyReq* mutable_shopbuy_req();
  inline ::fgame::CSShopBuyReq* release_shopbuy_req();
  inline void set_allocated_shopbuy_req(::fgame::CSShopBuyReq* shopbuy_req);

  // optional .fgame.CSExchangeItemReq ExchangeItem_Req = 96;
  inline bool has_exchangeitem_req() const;
  inline void clear_exchangeitem_req();
  static const int kExchangeItemReqFieldNumber = 96;
  inline const ::fgame::CSExchangeItemReq& exchangeitem_req() const;
  inline ::fgame::CSExchangeItemReq* mutable_exchangeitem_req();
  inline ::fgame::CSExchangeItemReq* release_exchangeitem_req();
  inline void set_allocated_exchangeitem_req(::fgame::CSExchangeItemReq* exchangeitem_req);

  // optional .fgame.CSActivityCrazyDtlsReq ActivityCrazyDtls_Req = 97;
  inline bool has_activitycrazydtls_req() const;
  inline void clear_activitycrazydtls_req();
  static const int kActivityCrazyDtlsReqFieldNumber = 97;
  inline const ::fgame::CSActivityCrazyDtlsReq& activitycrazydtls_req() const;
  inline ::fgame::CSActivityCrazyDtlsReq* mutable_activitycrazydtls_req();
  inline ::fgame::CSActivityCrazyDtlsReq* release_activitycrazydtls_req();
  inline void set_allocated_activitycrazydtls_req(::fgame::CSActivityCrazyDtlsReq* activitycrazydtls_req);

  // optional .fgame.CSActivityCrazyUsageReq ActivityCrazyUsage_Req = 98;
  inline bool has_activitycrazyusage_req() const;
  inline void clear_activitycrazyusage_req();
  static const int kActivityCrazyUsageReqFieldNumber = 98;
  inline const ::fgame::CSActivityCrazyUsageReq& activitycrazyusage_req() const;
  inline ::fgame::CSActivityCrazyUsageReq* mutable_activitycrazyusage_req();
  inline ::fgame::CSActivityCrazyUsageReq* release_activitycrazyusage_req();
  inline void set_allocated_activitycrazyusage_req(::fgame::CSActivityCrazyUsageReq* activitycrazyusage_req);

  // optional .fgame.CSShopListReq ShopList_Req = 100;
  inline bool has_shoplist_req() const;
  inline void clear_shoplist_req();
  static const int kShopListReqFieldNumber = 100;
  inline const ::fgame::CSShopListReq& shoplist_req() const;
  inline ::fgame::CSShopListReq* mutable_shoplist_req();
  inline ::fgame::CSShopListReq* release_shoplist_req();
  inline void set_allocated_shoplist_req(::fgame::CSShopListReq* shoplist_req);

  // optional .fgame.CSPvpObserverReq PvpObserver_Req = 101;
  inline bool has_pvpobserver_req() const;
  inline void clear_pvpobserver_req();
  static const int kPvpObserverReqFieldNumber = 101;
  inline const ::fgame::CSPvpObserverReq& pvpobserver_req() const;
  inline ::fgame::CSPvpObserverReq* mutable_pvpobserver_req();
  inline ::fgame::CSPvpObserverReq* release_pvpobserver_req();
  inline void set_allocated_pvpobserver_req(::fgame::CSPvpObserverReq* pvpobserver_req);

  // optional .fgame.CSSetNewBieOssReq SetNewBieOss_Req = 102;
  inline bool has_setnewbieoss_req() const;
  inline void clear_setnewbieoss_req();
  static const int kSetNewBieOssReqFieldNumber = 102;
  inline const ::fgame::CSSetNewBieOssReq& setnewbieoss_req() const;
  inline ::fgame::CSSetNewBieOssReq* mutable_setnewbieoss_req();
  inline ::fgame::CSSetNewBieOssReq* release_setnewbieoss_req();
  inline void set_allocated_setnewbieoss_req(::fgame::CSSetNewBieOssReq* setnewbieoss_req);

  // optional .fgame.CSPvpResultReq PvpResult_Req = 104;
  inline bool has_pvpresult_req() const;
  inline void clear_pvpresult_req();
  static const int kPvpResultReqFieldNumber = 104;
  inline const ::fgame::CSPvpResultReq& pvpresult_req() const;
  inline ::fgame::CSPvpResultReq* mutable_pvpresult_req();
  inline ::fgame::CSPvpResultReq* release_pvpresult_req();
  inline void set_allocated_pvpresult_req(::fgame::CSPvpResultReq* pvpresult_req);

  // optional .fgame.CSPvpSelfRankListReq PvpSelfRankList_Req = 105;
  inline bool has_pvpselfranklist_req() const;
  inline void clear_pvpselfranklist_req();
  static const int kPvpSelfRankListReqFieldNumber = 105;
  inline const ::fgame::CSPvpSelfRankListReq& pvpselfranklist_req() const;
  inline ::fgame::CSPvpSelfRankListReq* mutable_pvpselfranklist_req();
  inline ::fgame::CSPvpSelfRankListReq* release_pvpselfranklist_req();
  inline void set_allocated_pvpselfranklist_req(::fgame::CSPvpSelfRankListReq* pvpselfranklist_req);

  // optional .fgame.CSGWGetMatchInfoReq GWGetMatchInfo_Req = 106;
  inline bool has_gwgetmatchinfo_req() const;
  inline void clear_gwgetmatchinfo_req();
  static const int kGWGetMatchInfoReqFieldNumber = 106;
  inline const ::fgame::CSGWGetMatchInfoReq& gwgetmatchinfo_req() const;
  inline ::fgame::CSGWGetMatchInfoReq* mutable_gwgetmatchinfo_req();
  inline ::fgame::CSGWGetMatchInfoReq* release_gwgetmatchinfo_req();
  inline void set_allocated_gwgetmatchinfo_req(::fgame::CSGWGetMatchInfoReq* gwgetmatchinfo_req);

  // optional .fgame.CSGWMatchReq GWMatch_Req = 107;
  inline bool has_gwmatch_req() const;
  inline void clear_gwmatch_req();
  static const int kGWMatchReqFieldNumber = 107;
  inline const ::fgame::CSGWMatchReq& gwmatch_req() const;
  inline ::fgame::CSGWMatchReq* mutable_gwmatch_req();
  inline ::fgame::CSGWMatchReq* release_gwmatch_req();
  inline void set_allocated_gwmatch_req(::fgame::CSGWMatchReq* gwmatch_req);

  // optional .fgame.CSGWMatchStopReq GWMatchStop_Req = 108;
  inline bool has_gwmatchstop_req() const;
  inline void clear_gwmatchstop_req();
  static const int kGWMatchStopReqFieldNumber = 108;
  inline const ::fgame::CSGWMatchStopReq& gwmatchstop_req() const;
  inline ::fgame::CSGWMatchStopReq* mutable_gwmatchstop_req();
  inline ::fgame::CSGWMatchStopReq* release_gwmatchstop_req();
  inline void set_allocated_gwmatchstop_req(::fgame::CSGWMatchStopReq* gwmatchstop_req);

  // optional .fgame.CSGWGetRankReq GWGetRank_Req = 109;
  inline bool has_gwgetrank_req() const;
  inline void clear_gwgetrank_req();
  static const int kGWGetRankReqFieldNumber = 109;
  inline const ::fgame::CSGWGetRankReq& gwgetrank_req() const;
  inline ::fgame::CSGWGetRankReq* mutable_gwgetrank_req();
  inline ::fgame::CSGWGetRankReq* release_gwgetrank_req();
  inline void set_allocated_gwgetrank_req(::fgame::CSGWGetRankReq* gwgetrank_req);

  // optional .fgame.CSGWBuyEnergyReq GWBuyEnergy_Req = 110;
  inline bool has_gwbuyenergy_req() const;
  inline void clear_gwbuyenergy_req();
  static const int kGWBuyEnergyReqFieldNumber = 110;
  inline const ::fgame::CSGWBuyEnergyReq& gwbuyenergy_req() const;
  inline ::fgame::CSGWBuyEnergyReq* mutable_gwbuyenergy_req();
  inline ::fgame::CSGWBuyEnergyReq* release_gwbuyenergy_req();
  inline void set_allocated_gwbuyenergy_req(::fgame::CSGWBuyEnergyReq* gwbuyenergy_req);

  // optional .fgame.CSRequestPKeyReq RequestPKey_Req = 114;
  inline bool has_requestpkey_req() const;
  inline void clear_requestpkey_req();
  static const int kRequestPKeyReqFieldNumber = 114;
  inline const ::fgame::CSRequestPKeyReq& requestpkey_req() const;
  inline ::fgame::CSRequestPKeyReq* mutable_requestpkey_req();
  inline ::fgame::CSRequestPKeyReq* release_requestpkey_req();
  inline void set_allocated_requestpkey_req(::fgame::CSRequestPKeyReq* requestpkey_req);

  // optional .fgame.CSSendClientKeyReq SendClientKey_Req = 115;
  inline bool has_sendclientkey_req() const;
  inline void clear_sendclientkey_req();
  static const int kSendClientKeyReqFieldNumber = 115;
  inline const ::fgame::CSSendClientKeyReq& sendclientkey_req() const;
  inline ::fgame::CSSendClientKeyReq* mutable_sendclientkey_req();
  inline ::fgame::CSSendClientKeyReq* release_sendclientkey_req();
  inline void set_allocated_sendclientkey_req(::fgame::CSSendClientKeyReq* sendclientkey_req);

  // optional .fgame.CSUpdateExchangeListReq UpdateExchangeList_Req = 116;
  inline bool has_updateexchangelist_req() const;
  inline void clear_updateexchangelist_req();
  static const int kUpdateExchangeListReqFieldNumber = 116;
  inline const ::fgame::CSUpdateExchangeListReq& updateexchangelist_req() const;
  inline ::fgame::CSUpdateExchangeListReq* mutable_updateexchangelist_req();
  inline ::fgame::CSUpdateExchangeListReq* release_updateexchangelist_req();
  inline void set_allocated_updateexchangelist_req(::fgame::CSUpdateExchangeListReq* updateexchangelist_req);

  // optional .fgame.CSGlyphsRequestInfoReq GlyphsRequestInfo_Req = 120;
  inline bool has_glyphsrequestinfo_req() const;
  inline void clear_glyphsrequestinfo_req();
  static const int kGlyphsRequestInfoReqFieldNumber = 120;
  inline const ::fgame::CSGlyphsRequestInfoReq& glyphsrequestinfo_req() const;
  inline ::fgame::CSGlyphsRequestInfoReq* mutable_glyphsrequestinfo_req();
  inline ::fgame::CSGlyphsRequestInfoReq* release_glyphsrequestinfo_req();
  inline void set_allocated_glyphsrequestinfo_req(::fgame::CSGlyphsRequestInfoReq* glyphsrequestinfo_req);

  // optional .fgame.CSGlyphsRequestBasicInfoReq GlyphsRequestBasicInfo_Req = 121;
  inline bool has_glyphsrequestbasicinfo_req() const;
  inline void clear_glyphsrequestbasicinfo_req();
  static const int kGlyphsRequestBasicInfoReqFieldNumber = 121;
  inline const ::fgame::CSGlyphsRequestBasicInfoReq& glyphsrequestbasicinfo_req() const;
  inline ::fgame::CSGlyphsRequestBasicInfoReq* mutable_glyphsrequestbasicinfo_req();
  inline ::fgame::CSGlyphsRequestBasicInfoReq* release_glyphsrequestbasicinfo_req();
  inline void set_allocated_glyphsrequestbasicinfo_req(::fgame::CSGlyphsRequestBasicInfoReq* glyphsrequestbasicinfo_req);

  // optional .fgame.CSGlyphsActiveReq GlyphsActive_Req = 122;
  inline bool has_glyphsactive_req() const;
  inline void clear_glyphsactive_req();
  static const int kGlyphsActiveReqFieldNumber = 122;
  inline const ::fgame::CSGlyphsActiveReq& glyphsactive_req() const;
  inline ::fgame::CSGlyphsActiveReq* mutable_glyphsactive_req();
  inline ::fgame::CSGlyphsActiveReq* release_glyphsactive_req();
  inline void set_allocated_glyphsactive_req(::fgame::CSGlyphsActiveReq* glyphsactive_req);

  // optional .fgame.CSGlyphsUpgradeReq GlyphsUpgrade_Req = 123;
  inline bool has_glyphsupgrade_req() const;
  inline void clear_glyphsupgrade_req();
  static const int kGlyphsUpgradeReqFieldNumber = 123;
  inline const ::fgame::CSGlyphsUpgradeReq& glyphsupgrade_req() const;
  inline ::fgame::CSGlyphsUpgradeReq* mutable_glyphsupgrade_req();
  inline ::fgame::CSGlyphsUpgradeReq* release_glyphsupgrade_req();
  inline void set_allocated_glyphsupgrade_req(::fgame::CSGlyphsUpgradeReq* glyphsupgrade_req);

  // optional .fgame.CSGlyphsPvpInfoReq GlyphsPvpInfo_Req = 124;
  inline bool has_glyphspvpinfo_req() const;
  inline void clear_glyphspvpinfo_req();
  static const int kGlyphsPvpInfoReqFieldNumber = 124;
  inline const ::fgame::CSGlyphsPvpInfoReq& glyphspvpinfo_req() const;
  inline ::fgame::CSGlyphsPvpInfoReq* mutable_glyphspvpinfo_req();
  inline ::fgame::CSGlyphsPvpInfoReq* release_glyphspvpinfo_req();
  inline void set_allocated_glyphspvpinfo_req(::fgame::CSGlyphsPvpInfoReq* glyphspvpinfo_req);

  // optional .fgame.CSBuyVipReq BuyVip_Req = 125;
  inline bool has_buyvip_req() const;
  inline void clear_buyvip_req();
  static const int kBuyVipReqFieldNumber = 125;
  inline const ::fgame::CSBuyVipReq& buyvip_req() const;
  inline ::fgame::CSBuyVipReq* mutable_buyvip_req();
  inline ::fgame::CSBuyVipReq* release_buyvip_req();
  inline void set_allocated_buyvip_req(::fgame::CSBuyVipReq* buyvip_req);

  // optional .fgame.CSGlyphGuideReq GlyphGuide_Req = 126;
  inline bool has_glyphguide_req() const;
  inline void clear_glyphguide_req();
  static const int kGlyphGuideReqFieldNumber = 126;
  inline const ::fgame::CSGlyphGuideReq& glyphguide_req() const;
  inline ::fgame::CSGlyphGuideReq* mutable_glyphguide_req();
  inline ::fgame::CSGlyphGuideReq* release_glyphguide_req();
  inline void set_allocated_glyphguide_req(::fgame::CSGlyphGuideReq* glyphguide_req);

  // optional .fgame.CSNewYearGetInfoReq NewYearGetInfo_Req = 127;
  inline bool has_newyeargetinfo_req() const;
  inline void clear_newyeargetinfo_req();
  static const int kNewYearGetInfoReqFieldNumber = 127;
  inline const ::fgame::CSNewYearGetInfoReq& newyeargetinfo_req() const;
  inline ::fgame::CSNewYearGetInfoReq* mutable_newyeargetinfo_req();
  inline ::fgame::CSNewYearGetInfoReq* release_newyeargetinfo_req();
  inline void set_allocated_newyeargetinfo_req(::fgame::CSNewYearGetInfoReq* newyeargetinfo_req);

  // optional .fgame.CSNewYearRewardReq NewYearReward_Req = 128;
  inline bool has_newyearreward_req() const;
  inline void clear_newyearreward_req();
  static const int kNewYearRewardReqFieldNumber = 128;
  inline const ::fgame::CSNewYearRewardReq& newyearreward_req() const;
  inline ::fgame::CSNewYearRewardReq* mutable_newyearreward_req();
  inline ::fgame::CSNewYearRewardReq* release_newyearreward_req();
  inline void set_allocated_newyearreward_req(::fgame::CSNewYearRewardReq* newyearreward_req);

  // optional .fgame.CSOpenChestReq OpenChest_Req = 129;
  inline bool has_openchest_req() const;
  inline void clear_openchest_req();
  static const int kOpenChestReqFieldNumber = 129;
  inline const ::fgame::CSOpenChestReq& openchest_req() const;
  inline ::fgame::CSOpenChestReq* mutable_openchest_req();
  inline ::fgame::CSOpenChestReq* release_openchest_req();
  inline void set_allocated_openchest_req(::fgame::CSOpenChestReq* openchest_req);

  // optional .fgame.CSChristmasDecorateReq ChristmasDecorate_Req = 130;
  inline bool has_christmasdecorate_req() const;
  inline void clear_christmasdecorate_req();
  static const int kChristmasDecorateReqFieldNumber = 130;
  inline const ::fgame::CSChristmasDecorateReq& christmasdecorate_req() const;
  inline ::fgame::CSChristmasDecorateReq* mutable_christmasdecorate_req();
  inline ::fgame::CSChristmasDecorateReq* release_christmasdecorate_req();
  inline void set_allocated_christmasdecorate_req(::fgame::CSChristmasDecorateReq* christmasdecorate_req);

  // optional .fgame.CSChristmasTakeBonusReq ChristmasTakeBonus_Req = 131;
  inline bool has_christmastakebonus_req() const;
  inline void clear_christmastakebonus_req();
  static const int kChristmasTakeBonusReqFieldNumber = 131;
  inline const ::fgame::CSChristmasTakeBonusReq& christmastakebonus_req() const;
  inline ::fgame::CSChristmasTakeBonusReq* mutable_christmastakebonus_req();
  inline ::fgame::CSChristmasTakeBonusReq* release_christmastakebonus_req();
  inline void set_allocated_christmastakebonus_req(::fgame::CSChristmasTakeBonusReq* christmastakebonus_req);

  // optional .fgame.CSChristmasGetDataReq ChristmasGetDate_Req = 132;
  inline bool has_christmasgetdate_req() const;
  inline void clear_christmasgetdate_req();
  static const int kChristmasGetDateReqFieldNumber = 132;
  inline const ::fgame::CSChristmasGetDataReq& christmasgetdate_req() const;
  inline ::fgame::CSChristmasGetDataReq* mutable_christmasgetdate_req();
  inline ::fgame::CSChristmasGetDataReq* release_christmasgetdate_req();
  inline void set_allocated_christmasgetdate_req(::fgame::CSChristmasGetDataReq* christmasgetdate_req);

  // optional .fgame.CSChristmasGetRankReq ChristmasGetRank_Req = 133;
  inline bool has_christmasgetrank_req() const;
  inline void clear_christmasgetrank_req();
  static const int kChristmasGetRankReqFieldNumber = 133;
  inline const ::fgame::CSChristmasGetRankReq& christmasgetrank_req() const;
  inline ::fgame::CSChristmasGetRankReq* mutable_christmasgetrank_req();
  inline ::fgame::CSChristmasGetRankReq* release_christmasgetrank_req();
  inline void set_allocated_christmasgetrank_req(::fgame::CSChristmasGetRankReq* christmasgetrank_req);

  // optional .fgame.CSRetriveCheckPtRewardReq RetriveCheckPtReward_Req = 134;
  inline bool has_retrivecheckptreward_req() const;
  inline void clear_retrivecheckptreward_req();
  static const int kRetriveCheckPtRewardReqFieldNumber = 134;
  inline const ::fgame::CSRetriveCheckPtRewardReq& retrivecheckptreward_req() const;
  inline ::fgame::CSRetriveCheckPtRewardReq* mutable_retrivecheckptreward_req();
  inline ::fgame::CSRetriveCheckPtRewardReq* release_retrivecheckptreward_req();
  inline void set_allocated_retrivecheckptreward_req(::fgame::CSRetriveCheckPtRewardReq* retrivecheckptreward_req);

  // optional .fgame.CSVipTimeReq VipTime_Req = 135;
  inline bool has_viptime_req() const;
  inline void clear_viptime_req();
  static const int kVipTimeReqFieldNumber = 135;
  inline const ::fgame::CSVipTimeReq& viptime_req() const;
  inline ::fgame::CSVipTimeReq* mutable_viptime_req();
  inline ::fgame::CSVipTimeReq* release_viptime_req();
  inline void set_allocated_viptime_req(::fgame::CSVipTimeReq* viptime_req);

  // optional .fgame.CSNewYearCmpReq NewYearCmp_Req = 136;
  inline bool has_newyearcmp_req() const;
  inline void clear_newyearcmp_req();
  static const int kNewYearCmpReqFieldNumber = 136;
  inline const ::fgame::CSNewYearCmpReq& newyearcmp_req() const;
  inline ::fgame::CSNewYearCmpReq* mutable_newyearcmp_req();
  inline ::fgame::CSNewYearCmpReq* release_newyearcmp_req();
  inline void set_allocated_newyearcmp_req(::fgame::CSNewYearCmpReq* newyearcmp_req);

  // optional .fgame.CSNotifyGlyphsUpdateReq NotifyGlyphsUpdate_Req = 137;
  inline bool has_notifyglyphsupdate_req() const;
  inline void clear_notifyglyphsupdate_req();
  static const int kNotifyGlyphsUpdateReqFieldNumber = 137;
  inline const ::fgame::CSNotifyGlyphsUpdateReq& notifyglyphsupdate_req() const;
  inline ::fgame::CSNotifyGlyphsUpdateReq* mutable_notifyglyphsupdate_req();
  inline ::fgame::CSNotifyGlyphsUpdateReq* release_notifyglyphsupdate_req();
  inline void set_allocated_notifyglyphsupdate_req(::fgame::CSNotifyGlyphsUpdateReq* notifyglyphsupdate_req);

  // optional .fgame.CSPvpRecoverItemReq RecoverItem_Req = 138;
  inline bool has_recoveritem_req() const;
  inline void clear_recoveritem_req();
  static const int kRecoverItemReqFieldNumber = 138;
  inline const ::fgame::CSPvpRecoverItemReq& recoveritem_req() const;
  inline ::fgame::CSPvpRecoverItemReq* mutable_recoveritem_req();
  inline ::fgame::CSPvpRecoverItemReq* release_recoveritem_req();
  inline void set_allocated_recoveritem_req(::fgame::CSPvpRecoverItemReq* recoveritem_req);

  // optional .fgame.CSSetSignatureReq SetSignature_Req = 139;
  inline bool has_setsignature_req() const;
  inline void clear_setsignature_req();
  static const int kSetSignatureReqFieldNumber = 139;
  inline const ::fgame::CSSetSignatureReq& setsignature_req() const;
  inline ::fgame::CSSetSignatureReq* mutable_setsignature_req();
  inline ::fgame::CSSetSignatureReq* release_setsignature_req();
  inline void set_allocated_setsignature_req(::fgame::CSSetSignatureReq* setsignature_req);

  // optional .fgame.CSSetExtraInfoVisibleReq SetExtraInfoVisible_Req = 140;
  inline bool has_setextrainfovisible_req() const;
  inline void clear_setextrainfovisible_req();
  static const int kSetExtraInfoVisibleReqFieldNumber = 140;
  inline const ::fgame::CSSetExtraInfoVisibleReq& setextrainfovisible_req() const;
  inline ::fgame::CSSetExtraInfoVisibleReq* mutable_setextrainfovisible_req();
  inline ::fgame::CSSetExtraInfoVisibleReq* release_setextrainfovisible_req();
  inline void set_allocated_setextrainfovisible_req(::fgame::CSSetExtraInfoVisibleReq* setextrainfovisible_req);

  // optional .fgame.CSGetExtraInfoReq GetExtraInfo_Req = 141;
  inline bool has_getextrainfo_req() const;
  inline void clear_getextrainfo_req();
  static const int kGetExtraInfoReqFieldNumber = 141;
  inline const ::fgame::CSGetExtraInfoReq& getextrainfo_req() const;
  inline ::fgame::CSGetExtraInfoReq* mutable_getextrainfo_req();
  inline ::fgame::CSGetExtraInfoReq* release_getextrainfo_req();
  inline void set_allocated_getextrainfo_req(::fgame::CSGetExtraInfoReq* getextrainfo_req);

  // optional .fgame.CSValentineDataReq ValentineData_Req = 143;
  inline bool has_valentinedata_req() const;
  inline void clear_valentinedata_req();
  static const int kValentineDataReqFieldNumber = 143;
  inline const ::fgame::CSValentineDataReq& valentinedata_req() const;
  inline ::fgame::CSValentineDataReq* mutable_valentinedata_req();
  inline ::fgame::CSValentineDataReq* release_valentinedata_req();
  inline void set_allocated_valentinedata_req(::fgame::CSValentineDataReq* valentinedata_req);

  // optional .fgame.CSValentineExchangeReq ValentineExchange_Req = 144;
  inline bool has_valentineexchange_req() const;
  inline void clear_valentineexchange_req();
  static const int kValentineExchangeReqFieldNumber = 144;
  inline const ::fgame::CSValentineExchangeReq& valentineexchange_req() const;
  inline ::fgame::CSValentineExchangeReq* mutable_valentineexchange_req();
  inline ::fgame::CSValentineExchangeReq* release_valentineexchange_req();
  inline void set_allocated_valentineexchange_req(::fgame::CSValentineExchangeReq* valentineexchange_req);

  // optional .fgame.CSRedPacketsGetInfoReq RedPacketsGetInfo_Req = 145;
  inline bool has_redpacketsgetinfo_req() const;
  inline void clear_redpacketsgetinfo_req();
  static const int kRedPacketsGetInfoReqFieldNumber = 145;
  inline const ::fgame::CSRedPacketsGetInfoReq& redpacketsgetinfo_req() const;
  inline ::fgame::CSRedPacketsGetInfoReq* mutable_redpacketsgetinfo_req();
  inline ::fgame::CSRedPacketsGetInfoReq* release_redpacketsgetinfo_req();
  inline void set_allocated_redpacketsgetinfo_req(::fgame::CSRedPacketsGetInfoReq* redpacketsgetinfo_req);

  // optional .fgame.CSRedPacketsGrebReq RedPacketsGreb_Req = 146;
  inline bool has_redpacketsgreb_req() const;
  inline void clear_redpacketsgreb_req();
  static const int kRedPacketsGrebReqFieldNumber = 146;
  inline const ::fgame::CSRedPacketsGrebReq& redpacketsgreb_req() const;
  inline ::fgame::CSRedPacketsGrebReq* mutable_redpacketsgreb_req();
  inline ::fgame::CSRedPacketsGrebReq* release_redpacketsgreb_req();
  inline void set_allocated_redpacketsgreb_req(::fgame::CSRedPacketsGrebReq* redpacketsgreb_req);

  // optional .fgame.CSRedPacketsOpenedReq RedPacketsOpened_Req = 147;
  inline bool has_redpacketsopened_req() const;
  inline void clear_redpacketsopened_req();
  static const int kRedPacketsOpenedReqFieldNumber = 147;
  inline const ::fgame::CSRedPacketsOpenedReq& redpacketsopened_req() const;
  inline ::fgame::CSRedPacketsOpenedReq* mutable_redpacketsopened_req();
  inline ::fgame::CSRedPacketsOpenedReq* release_redpacketsopened_req();
  inline void set_allocated_redpacketsopened_req(::fgame::CSRedPacketsOpenedReq* redpacketsopened_req);

  // optional .fgame.CSChapterUnlockReq ChapterUnlock_Req = 148;
  inline bool has_chapterunlock_req() const;
  inline void clear_chapterunlock_req();
  static const int kChapterUnlockReqFieldNumber = 148;
  inline const ::fgame::CSChapterUnlockReq& chapterunlock_req() const;
  inline ::fgame::CSChapterUnlockReq* mutable_chapterunlock_req();
  inline ::fgame::CSChapterUnlockReq* release_chapterunlock_req();
  inline void set_allocated_chapterunlock_req(::fgame::CSChapterUnlockReq* chapterunlock_req);

  // optional .fgame.CSGetChestReq GetChest_Req = 149;
  inline bool has_getchest_req() const;
  inline void clear_getchest_req();
  static const int kGetChestReqFieldNumber = 149;
  inline const ::fgame::CSGetChestReq& getchest_req() const;
  inline ::fgame::CSGetChestReq* mutable_getchest_req();
  inline ::fgame::CSGetChestReq* release_getchest_req();
  inline void set_allocated_getchest_req(::fgame::CSGetChestReq* getchest_req);

  // optional .fgame.CSPveNotifyReq PveNotify_Req = 150;
  inline bool has_pvenotify_req() const;
  inline void clear_pvenotify_req();
  static const int kPveNotifyReqFieldNumber = 150;
  inline const ::fgame::CSPveNotifyReq& pvenotify_req() const;
  inline ::fgame::CSPveNotifyReq* mutable_pvenotify_req();
  inline ::fgame::CSPveNotifyReq* release_pvenotify_req();
  inline void set_allocated_pvenotify_req(::fgame::CSPveNotifyReq* pvenotify_req);

  // optional .fgame.CSDailyTaskStatusReq DailyTaskStatus_Req = 152;
  inline bool has_dailytaskstatus_req() const;
  inline void clear_dailytaskstatus_req();
  static const int kDailyTaskStatusReqFieldNumber = 152;
  inline const ::fgame::CSDailyTaskStatusReq& dailytaskstatus_req() const;
  inline ::fgame::CSDailyTaskStatusReq* mutable_dailytaskstatus_req();
  inline ::fgame::CSDailyTaskStatusReq* release_dailytaskstatus_req();
  inline void set_allocated_dailytaskstatus_req(::fgame::CSDailyTaskStatusReq* dailytaskstatus_req);

  // optional .fgame.CSRequestDailyTaskReq RequestDailyTask_Req = 153;
  inline bool has_requestdailytask_req() const;
  inline void clear_requestdailytask_req();
  static const int kRequestDailyTaskReqFieldNumber = 153;
  inline const ::fgame::CSRequestDailyTaskReq& requestdailytask_req() const;
  inline ::fgame::CSRequestDailyTaskReq* mutable_requestdailytask_req();
  inline ::fgame::CSRequestDailyTaskReq* release_requestdailytask_req();
  inline void set_allocated_requestdailytask_req(::fgame::CSRequestDailyTaskReq* requestdailytask_req);

  // optional .fgame.CSChangeDailyTaskReq ChangeDailyTask_Req = 154;
  inline bool has_changedailytask_req() const;
  inline void clear_changedailytask_req();
  static const int kChangeDailyTaskReqFieldNumber = 154;
  inline const ::fgame::CSChangeDailyTaskReq& changedailytask_req() const;
  inline ::fgame::CSChangeDailyTaskReq* mutable_changedailytask_req();
  inline ::fgame::CSChangeDailyTaskReq* release_changedailytask_req();
  inline void set_allocated_changedailytask_req(::fgame::CSChangeDailyTaskReq* changedailytask_req);

  // optional .fgame.CSOpenDailyTaskAwardReq OpenDailyTaskAward_Req = 155;
  inline bool has_opendailytaskaward_req() const;
  inline void clear_opendailytaskaward_req();
  static const int kOpenDailyTaskAwardReqFieldNumber = 155;
  inline const ::fgame::CSOpenDailyTaskAwardReq& opendailytaskaward_req() const;
  inline ::fgame::CSOpenDailyTaskAwardReq* mutable_opendailytaskaward_req();
  inline ::fgame::CSOpenDailyTaskAwardReq* release_opendailytaskaward_req();
  inline void set_allocated_opendailytaskaward_req(::fgame::CSOpenDailyTaskAwardReq* opendailytaskaward_req);

  // optional .fgame.CSUpdateDailyTaskProgressReq UpdateDailyTaskProgress_Req = 156;
  inline bool has_updatedailytaskprogress_req() const;
  inline void clear_updatedailytaskprogress_req();
  static const int kUpdateDailyTaskProgressReqFieldNumber = 156;
  inline const ::fgame::CSUpdateDailyTaskProgressReq& updatedailytaskprogress_req() const;
  inline ::fgame::CSUpdateDailyTaskProgressReq* mutable_updatedailytaskprogress_req();
  inline ::fgame::CSUpdateDailyTaskProgressReq* release_updatedailytaskprogress_req();
  inline void set_allocated_updatedailytaskprogress_req(::fgame::CSUpdateDailyTaskProgressReq* updatedailytaskprogress_req);

  // optional .fgame.CSRankWeekRewardInfoReq RankWeekRewardInfo_Req = 157;
  inline bool has_rankweekrewardinfo_req() const;
  inline void clear_rankweekrewardinfo_req();
  static const int kRankWeekRewardInfoReqFieldNumber = 157;
  inline const ::fgame::CSRankWeekRewardInfoReq& rankweekrewardinfo_req() const;
  inline ::fgame::CSRankWeekRewardInfoReq* mutable_rankweekrewardinfo_req();
  inline ::fgame::CSRankWeekRewardInfoReq* release_rankweekrewardinfo_req();
  inline void set_allocated_rankweekrewardinfo_req(::fgame::CSRankWeekRewardInfoReq* rankweekrewardinfo_req);

  // optional .fgame.CSRankWeekRewardRewardReq RankWeekRewardReward_Req = 158;
  inline bool has_rankweekrewardreward_req() const;
  inline void clear_rankweekrewardreward_req();
  static const int kRankWeekRewardRewardReqFieldNumber = 158;
  inline const ::fgame::CSRankWeekRewardRewardReq& rankweekrewardreward_req() const;
  inline ::fgame::CSRankWeekRewardRewardReq* mutable_rankweekrewardreward_req();
  inline ::fgame::CSRankWeekRewardRewardReq* release_rankweekrewardreward_req();
  inline void set_allocated_rankweekrewardreward_req(::fgame::CSRankWeekRewardRewardReq* rankweekrewardreward_req);

  // optional .fgame.CSPveCheckAwardReq PveCheckAward_Req = 159;
  inline bool has_pvecheckaward_req() const;
  inline void clear_pvecheckaward_req();
  static const int kPveCheckAwardReqFieldNumber = 159;
  inline const ::fgame::CSPveCheckAwardReq& pvecheckaward_req() const;
  inline ::fgame::CSPveCheckAwardReq* mutable_pvecheckaward_req();
  inline ::fgame::CSPveCheckAwardReq* release_pvecheckaward_req();
  inline void set_allocated_pvecheckaward_req(::fgame::CSPveCheckAwardReq* pvecheckaward_req);

  // optional .fgame.CSShareRewardGetReq ShareReward_Req = 162;
  inline bool has_sharereward_req() const;
  inline void clear_sharereward_req();
  static const int kShareRewardReqFieldNumber = 162;
  inline const ::fgame::CSShareRewardGetReq& sharereward_req() const;
  inline ::fgame::CSShareRewardGetReq* mutable_sharereward_req();
  inline ::fgame::CSShareRewardGetReq* release_sharereward_req();
  inline void set_allocated_sharereward_req(::fgame::CSShareRewardGetReq* sharereward_req);

  // optional .fgame.CSGetSevenGoalListReq GetSevenGoalList_Req = 163;
  inline bool has_getsevengoallist_req() const;
  inline void clear_getsevengoallist_req();
  static const int kGetSevenGoalListReqFieldNumber = 163;
  inline const ::fgame::CSGetSevenGoalListReq& getsevengoallist_req() const;
  inline ::fgame::CSGetSevenGoalListReq* mutable_getsevengoallist_req();
  inline ::fgame::CSGetSevenGoalListReq* release_getsevengoallist_req();
  inline void set_allocated_getsevengoallist_req(::fgame::CSGetSevenGoalListReq* getsevengoallist_req);

  // optional .fgame.CSRetriveSevenGoalReq RetriveSevenGoal_Req = 164;
  inline bool has_retrivesevengoal_req() const;
  inline void clear_retrivesevengoal_req();
  static const int kRetriveSevenGoalReqFieldNumber = 164;
  inline const ::fgame::CSRetriveSevenGoalReq& retrivesevengoal_req() const;
  inline ::fgame::CSRetriveSevenGoalReq* mutable_retrivesevengoal_req();
  inline ::fgame::CSRetriveSevenGoalReq* release_retrivesevengoal_req();
  inline void set_allocated_retrivesevengoal_req(::fgame::CSRetriveSevenGoalReq* retrivesevengoal_req);

  // optional .fgame.CSPveRankReq PveRank_Req = 166;
  inline bool has_pverank_req() const;
  inline void clear_pverank_req();
  static const int kPveRankReqFieldNumber = 166;
  inline const ::fgame::CSPveRankReq& pverank_req() const;
  inline ::fgame::CSPveRankReq* mutable_pverank_req();
  inline ::fgame::CSPveRankReq* release_pverank_req();
  inline void set_allocated_pverank_req(::fgame::CSPveRankReq* pverank_req);

  // optional .fgame.CSTopRankReq TopRank_Req = 167;
  inline bool has_toprank_req() const;
  inline void clear_toprank_req();
  static const int kTopRankReqFieldNumber = 167;
  inline const ::fgame::CSTopRankReq& toprank_req() const;
  inline ::fgame::CSTopRankReq* mutable_toprank_req();
  inline ::fgame::CSTopRankReq* release_toprank_req();
  inline void set_allocated_toprank_req(::fgame::CSTopRankReq* toprank_req);

  // optional .fgame.CSTopRankTimeReq TopRankTime_Req = 168;
  inline bool has_topranktime_req() const;
  inline void clear_topranktime_req();
  static const int kTopRankTimeReqFieldNumber = 168;
  inline const ::fgame::CSTopRankTimeReq& topranktime_req() const;
  inline ::fgame::CSTopRankTimeReq* mutable_topranktime_req();
  inline ::fgame::CSTopRankTimeReq* release_topranktime_req();
  inline void set_allocated_topranktime_req(::fgame::CSTopRankTimeReq* topranktime_req);

  // optional .fgame.CSUpdateTaskStatusReq UpdateTaskStatus_Req = 201;
  inline bool has_updatetaskstatus_req() const;
  inline void clear_updatetaskstatus_req();
  static const int kUpdateTaskStatusReqFieldNumber = 201;
  inline const ::fgame::CSUpdateTaskStatusReq& updatetaskstatus_req() const;
  inline ::fgame::CSUpdateTaskStatusReq* mutable_updatetaskstatus_req();
  inline ::fgame::CSUpdateTaskStatusReq* release_updatetaskstatus_req();
  inline void set_allocated_updatetaskstatus_req(::fgame::CSUpdateTaskStatusReq* updatetaskstatus_req);

  // optional .fgame.CSAsSyncInfoReq AsSyncInfo_Req = 202;
  inline bool has_assyncinfo_req() const;
  inline void clear_assyncinfo_req();
  static const int kAsSyncInfoReqFieldNumber = 202;
  inline const ::fgame::CSAsSyncInfoReq& assyncinfo_req() const;
  inline ::fgame::CSAsSyncInfoReq* mutable_assyncinfo_req();
  inline ::fgame::CSAsSyncInfoReq* release_assyncinfo_req();
  inline void set_allocated_assyncinfo_req(::fgame::CSAsSyncInfoReq* assyncinfo_req);

  // optional .fgame.CSAsNewAddReq AsNewAdd_Req = 203;
  inline bool has_asnewadd_req() const;
  inline void clear_asnewadd_req();
  static const int kAsNewAddReqFieldNumber = 203;
  inline const ::fgame::CSAsNewAddReq& asnewadd_req() const;
  inline ::fgame::CSAsNewAddReq* mutable_asnewadd_req();
  inline ::fgame::CSAsNewAddReq* release_asnewadd_req();
  inline void set_allocated_asnewadd_req(::fgame::CSAsNewAddReq* asnewadd_req);

  // optional .fgame.CSAsOperateReq AsOperate_Req = 204;
  inline bool has_asoperate_req() const;
  inline void clear_asoperate_req();
  static const int kAsOperateReqFieldNumber = 204;
  inline const ::fgame::CSAsOperateReq& asoperate_req() const;
  inline ::fgame::CSAsOperateReq* mutable_asoperate_req();
  inline ::fgame::CSAsOperateReq* release_asoperate_req();
  inline void set_allocated_asoperate_req(::fgame::CSAsOperateReq* asoperate_req);

  // optional .fgame.CSAsUseCardReq AsUseCard_Req = 205;
  inline bool has_asusecard_req() const;
  inline void clear_asusecard_req();
  static const int kAsUseCardReqFieldNumber = 205;
  inline const ::fgame::CSAsUseCardReq& asusecard_req() const;
  inline ::fgame::CSAsUseCardReq* mutable_asusecard_req();
  inline ::fgame::CSAsUseCardReq* release_asusecard_req();
  inline void set_allocated_asusecard_req(::fgame::CSAsUseCardReq* asusecard_req);

  // optional .fgame.CSPvpUseSkillReq PvpUseSkill_Req = 206;
  inline bool has_pvpuseskill_req() const;
  inline void clear_pvpuseskill_req();
  static const int kPvpUseSkillReqFieldNumber = 206;
  inline const ::fgame::CSPvpUseSkillReq& pvpuseskill_req() const;
  inline ::fgame::CSPvpUseSkillReq* mutable_pvpuseskill_req();
  inline ::fgame::CSPvpUseSkillReq* release_pvpuseskill_req();
  inline void set_allocated_pvpuseskill_req(::fgame::CSPvpUseSkillReq* pvpuseskill_req);

  // optional .fgame.CSInstituteInfoReq InstituteInfo_Req = 208;
  inline bool has_instituteinfo_req() const;
  inline void clear_instituteinfo_req();
  static const int kInstituteInfoReqFieldNumber = 208;
  inline const ::fgame::CSInstituteInfoReq& instituteinfo_req() const;
  inline ::fgame::CSInstituteInfoReq* mutable_instituteinfo_req();
  inline ::fgame::CSInstituteInfoReq* release_instituteinfo_req();
  inline void set_allocated_instituteinfo_req(::fgame::CSInstituteInfoReq* instituteinfo_req);

  // optional .fgame.CSInstituteBuyReq InstituteBuy_Req = 209;
  inline bool has_institutebuy_req() const;
  inline void clear_institutebuy_req();
  static const int kInstituteBuyReqFieldNumber = 209;
  inline const ::fgame::CSInstituteBuyReq& institutebuy_req() const;
  inline ::fgame::CSInstituteBuyReq* mutable_institutebuy_req();
  inline ::fgame::CSInstituteBuyReq* release_institutebuy_req();
  inline void set_allocated_institutebuy_req(::fgame::CSInstituteBuyReq* institutebuy_req);

  // optional .fgame.CSOpActConfigListReq OpActConfigList_Req = 304;
  inline bool has_opactconfiglist_req() const;
  inline void clear_opactconfiglist_req();
  static const int kOpActConfigListReqFieldNumber = 304;
  inline const ::fgame::CSOpActConfigListReq& opactconfiglist_req() const;
  inline ::fgame::CSOpActConfigListReq* mutable_opactconfiglist_req();
  inline ::fgame::CSOpActConfigListReq* release_opactconfiglist_req();
  inline void set_allocated_opactconfiglist_req(::fgame::CSOpActConfigListReq* opactconfiglist_req);

  // optional .fgame.CSOpActSelfDataListReq OpActSelfDataList_Req = 305;
  inline bool has_opactselfdatalist_req() const;
  inline void clear_opactselfdatalist_req();
  static const int kOpActSelfDataListReqFieldNumber = 305;
  inline const ::fgame::CSOpActSelfDataListReq& opactselfdatalist_req() const;
  inline ::fgame::CSOpActSelfDataListReq* mutable_opactselfdatalist_req();
  inline ::fgame::CSOpActSelfDataListReq* release_opactselfdatalist_req();
  inline void set_allocated_opactselfdatalist_req(::fgame::CSOpActSelfDataListReq* opactselfdatalist_req);

  // optional .fgame.CSOpActGlobalDataListReq OpActGlobalDataList_Req = 306;
  inline bool has_opactglobaldatalist_req() const;
  inline void clear_opactglobaldatalist_req();
  static const int kOpActGlobalDataListReqFieldNumber = 306;
  inline const ::fgame::CSOpActGlobalDataListReq& opactglobaldatalist_req() const;
  inline ::fgame::CSOpActGlobalDataListReq* mutable_opactglobaldatalist_req();
  inline ::fgame::CSOpActGlobalDataListReq* release_opactglobaldatalist_req();
  inline void set_allocated_opactglobaldatalist_req(::fgame::CSOpActGlobalDataListReq* opactglobaldatalist_req);

  // optional .fgame.CSOpActDemoTakeReq OpActDemoTake_Req = 310;
  inline bool has_opactdemotake_req() const;
  inline void clear_opactdemotake_req();
  static const int kOpActDemoTakeReqFieldNumber = 310;
  inline const ::fgame::CSOpActDemoTakeReq& opactdemotake_req() const;
  inline ::fgame::CSOpActDemoTakeReq* mutable_opactdemotake_req();
  inline ::fgame::CSOpActDemoTakeReq* release_opactdemotake_req();
  inline void set_allocated_opactdemotake_req(::fgame::CSOpActDemoTakeReq* opactdemotake_req);

  // @@protoc_insertion_point(class_scope:fgame.C2ServerMsg)
 private:
  inline void set_has_login_req();
  inline void clear_has_login_req();
  inline void set_has_reg_req();
  inline void clear_has_reg_req();
  inline void set_has_heartbeat_req();
  inline void clear_has_heartbeat_req();
  inline void set_has_match_req();
  inline void clear_has_match_req();
  inline void set_has_start_req();
  inline void clear_has_start_req();
  inline void set_has_fight_req();
  inline void clear_has_fight_req();
  inline void set_has_end_req();
  inline void clear_has_end_req();
  inline void set_has_map_req();
  inline void clear_has_map_req();
  inline void set_has_upgrade_req();
  inline void clear_has_upgrade_req();
  inline void set_has_ping_req();
  inline void clear_has_ping_req();
  inline void set_has_buyitem_req();
  inline void clear_has_buyitem_req();
  inline void set_has_useitem_req();
  inline void clear_has_useitem_req();
  inline void set_has_leave_req();
  inline void clear_has_leave_req();
  inline void set_has_getachievementreq();
  inline void clear_has_getachievementreq();
  inline void set_has_receiveachievement_req();
  inline void clear_has_receiveachievement_req();
  inline void set_has_receiveachievementreward_req();
  inline void clear_has_receiveachievementreward_req();
  inline void set_has_enterserver_req();
  inline void clear_has_enterserver_req();
  inline void set_has_directenter_req();
  inline void clear_has_directenter_req();
  inline void set_has_pvprankinggetlist_req();
  inline void clear_has_pvprankinggetlist_req();
  inline void set_has_streakwinvalue_req();
  inline void clear_has_streakwinvalue_req();
  inline void set_has_streakwinget_req();
  inline void clear_has_streakwinget_req();
  inline void set_has_openbigstage_req();
  inline void clear_has_openbigstage_req();
  inline void set_has_pvpuseitem_req();
  inline void clear_has_pvpuseitem_req();
  inline void set_has_sevendaysignlist_req();
  inline void clear_has_sevendaysignlist_req();
  inline void set_has_sevendaysign_req();
  inline void clear_has_sevendaysign_req();
  inline void set_has_getserver_req();
  inline void clear_has_getserver_req();
  inline void set_has_sycplayerinfo_req();
  inline void clear_has_sycplayerinfo_req();
  inline void set_has_stopmatch_req();
  inline void clear_has_stopmatch_req();
  inline void set_has_changename_req();
  inline void clear_has_changename_req();
  inline void set_has_logout_req();
  inline void clear_has_logout_req();
  inline void set_has_xinshourecode_req();
  inline void clear_has_xinshourecode_req();
  inline void set_has_pvprankingplayerinfo_req();
  inline void clear_has_pvprankingplayerinfo_req();
  inline void set_has_getopenactivity_req();
  inline void clear_has_getopenactivity_req();
  inline void set_has_getactivitydata_req();
  inline void clear_has_getactivitydata_req();
  inline void set_has_receiveactivityreward_req();
  inline void clear_has_receiveactivityreward_req();
  inline void set_has_missionlist_req();
  inline void clear_has_missionlist_req();
  inline void set_has_missioncomplete_req();
  inline void clear_has_missioncomplete_req();
  inline void set_has_getpowerenergyactivitydata_req();
  inline void clear_has_getpowerenergyactivitydata_req();
  inline void set_has_receivepowerenergy_req();
  inline void clear_has_receivepowerenergy_req();
  inline void set_has_getmail_req();
  inline void clear_has_getmail_req();
  inline void set_has_delmail_req();
  inline void clear_has_delmail_req();
  inline void set_has_buynewbiegift_req();
  inline void clear_has_buynewbiegift_req();
  inline void set_has_rechargecallback_req();
  inline void clear_has_rechargecallback_req();
  inline void set_has_friendquery_req();
  inline void clear_has_friendquery_req();
  inline void set_has_friendrequestadd_req();
  inline void clear_has_friendrequestadd_req();
  inline void set_has_friendconfirmadd_req();
  inline void clear_has_friendconfirmadd_req();
  inline void set_has_friendgetinfo_req();
  inline void clear_has_friendgetinfo_req();
  inline void set_has_friendrequestremove_req();
  inline void clear_has_friendrequestremove_req();
  inline void set_has_friendaddblacklist_req();
  inline void clear_has_friendaddblacklist_req();
  inline void set_has_friendremoveblacklist_req();
  inline void clear_has_friendremoveblacklist_req();
  inline void set_has_pvpchat_req();
  inline void clear_has_pvpchat_req();
  inline void set_has_usegiftcode_req();
  inline void clear_has_usegiftcode_req();
  inline void set_has_queryplayerinfo_req();
  inline void clear_has_queryplayerinfo_req();
  inline void set_has_personalroomcreate_req();
  inline void clear_has_personalroomcreate_req();
  inline void set_has_personalroomenter_req();
  inline void clear_has_personalroomenter_req();
  inline void set_has_personalroomleave_req();
  inline void clear_has_personalroomleave_req();
  inline void set_has_personalroomkick_req();
  inline void clear_has_personalroomkick_req();
  inline void set_has_personalroominvite_req();
  inline void clear_has_personalroominvite_req();
  inline void set_has_personalroombroadcast_req();
  inline void clear_has_personalroombroadcast_req();
  inline void set_has_personalroomchat_req();
  inline void clear_has_personalroomchat_req();
  inline void set_has_personalroommode_req();
  inline void clear_has_personalroommode_req();
  inline void set_has_personalroombeginfight_req();
  inline void clear_has_personalroombeginfight_req();
  inline void set_has_personalroomapplyorrefuseinvite_req();
  inline void clear_has_personalroomapplyorrefuseinvite_req();
  inline void set_has_changeplayericon_req();
  inline void clear_has_changeplayericon_req();
  inline void set_has_personalroomcountdown_req();
  inline void clear_has_personalroomcountdown_req();
  inline void set_has_syncplayerdata_req();
  inline void clear_has_syncplayerdata_req();
  inline void set_has_getplayerdata_req();
  inline void clear_has_getplayerdata_req();
  inline void set_has_appearcreep_req();
  inline void clear_has_appearcreep_req();
  inline void set_has_savecheckptdata_req();
  inline void clear_has_savecheckptdata_req();
  inline void set_has_getcheckptdata_req();
  inline void clear_has_getcheckptdata_req();
  inline void set_has_setnewbie_req();
  inline void clear_has_setnewbie_req();
  inline void set_has_getnewbielist_req();
  inline void clear_has_getnewbielist_req();
  inline void set_has_enterpoint_req();
  inline void clear_has_enterpoint_req();
  inline void set_has_shopguide_req();
  inline void clear_has_shopguide_req();
  inline void set_has_testadddiamond_req();
  inline void clear_has_testadddiamond_req();
  inline void set_has_activitylist_req();
  inline void clear_has_activitylist_req();
  inline void set_has_activitysubmit_req();
  inline void clear_has_activitysubmit_req();
  inline void set_has_settitle_req();
  inline void clear_has_settitle_req();
  inline void set_has_shopbuy_req();
  inline void clear_has_shopbuy_req();
  inline void set_has_exchangeitem_req();
  inline void clear_has_exchangeitem_req();
  inline void set_has_activitycrazydtls_req();
  inline void clear_has_activitycrazydtls_req();
  inline void set_has_activitycrazyusage_req();
  inline void clear_has_activitycrazyusage_req();
  inline void set_has_shoplist_req();
  inline void clear_has_shoplist_req();
  inline void set_has_pvpobserver_req();
  inline void clear_has_pvpobserver_req();
  inline void set_has_setnewbieoss_req();
  inline void clear_has_setnewbieoss_req();
  inline void set_has_pvpresult_req();
  inline void clear_has_pvpresult_req();
  inline void set_has_pvpselfranklist_req();
  inline void clear_has_pvpselfranklist_req();
  inline void set_has_gwgetmatchinfo_req();
  inline void clear_has_gwgetmatchinfo_req();
  inline void set_has_gwmatch_req();
  inline void clear_has_gwmatch_req();
  inline void set_has_gwmatchstop_req();
  inline void clear_has_gwmatchstop_req();
  inline void set_has_gwgetrank_req();
  inline void clear_has_gwgetrank_req();
  inline void set_has_gwbuyenergy_req();
  inline void clear_has_gwbuyenergy_req();
  inline void set_has_requestpkey_req();
  inline void clear_has_requestpkey_req();
  inline void set_has_sendclientkey_req();
  inline void clear_has_sendclientkey_req();
  inline void set_has_updateexchangelist_req();
  inline void clear_has_updateexchangelist_req();
  inline void set_has_glyphsrequestinfo_req();
  inline void clear_has_glyphsrequestinfo_req();
  inline void set_has_glyphsrequestbasicinfo_req();
  inline void clear_has_glyphsrequestbasicinfo_req();
  inline void set_has_glyphsactive_req();
  inline void clear_has_glyphsactive_req();
  inline void set_has_glyphsupgrade_req();
  inline void clear_has_glyphsupgrade_req();
  inline void set_has_glyphspvpinfo_req();
  inline void clear_has_glyphspvpinfo_req();
  inline void set_has_buyvip_req();
  inline void clear_has_buyvip_req();
  inline void set_has_glyphguide_req();
  inline void clear_has_glyphguide_req();
  inline void set_has_newyeargetinfo_req();
  inline void clear_has_newyeargetinfo_req();
  inline void set_has_newyearreward_req();
  inline void clear_has_newyearreward_req();
  inline void set_has_openchest_req();
  inline void clear_has_openchest_req();
  inline void set_has_christmasdecorate_req();
  inline void clear_has_christmasdecorate_req();
  inline void set_has_christmastakebonus_req();
  inline void clear_has_christmastakebonus_req();
  inline void set_has_christmasgetdate_req();
  inline void clear_has_christmasgetdate_req();
  inline void set_has_christmasgetrank_req();
  inline void clear_has_christmasgetrank_req();
  inline void set_has_retrivecheckptreward_req();
  inline void clear_has_retrivecheckptreward_req();
  inline void set_has_viptime_req();
  inline void clear_has_viptime_req();
  inline void set_has_newyearcmp_req();
  inline void clear_has_newyearcmp_req();
  inline void set_has_notifyglyphsupdate_req();
  inline void clear_has_notifyglyphsupdate_req();
  inline void set_has_recoveritem_req();
  inline void clear_has_recoveritem_req();
  inline void set_has_setsignature_req();
  inline void clear_has_setsignature_req();
  inline void set_has_setextrainfovisible_req();
  inline void clear_has_setextrainfovisible_req();
  inline void set_has_getextrainfo_req();
  inline void clear_has_getextrainfo_req();
  inline void set_has_valentinedata_req();
  inline void clear_has_valentinedata_req();
  inline void set_has_valentineexchange_req();
  inline void clear_has_valentineexchange_req();
  inline void set_has_redpacketsgetinfo_req();
  inline void clear_has_redpacketsgetinfo_req();
  inline void set_has_redpacketsgreb_req();
  inline void clear_has_redpacketsgreb_req();
  inline void set_has_redpacketsopened_req();
  inline void clear_has_redpacketsopened_req();
  inline void set_has_chapterunlock_req();
  inline void clear_has_chapterunlock_req();
  inline void set_has_getchest_req();
  inline void clear_has_getchest_req();
  inline void set_has_pvenotify_req();
  inline void clear_has_pvenotify_req();
  inline void set_has_dailytaskstatus_req();
  inline void clear_has_dailytaskstatus_req();
  inline void set_has_requestdailytask_req();
  inline void clear_has_requestdailytask_req();
  inline void set_has_changedailytask_req();
  inline void clear_has_changedailytask_req();
  inline void set_has_opendailytaskaward_req();
  inline void clear_has_opendailytaskaward_req();
  inline void set_has_updatedailytaskprogress_req();
  inline void clear_has_updatedailytaskprogress_req();
  inline void set_has_rankweekrewardinfo_req();
  inline void clear_has_rankweekrewardinfo_req();
  inline void set_has_rankweekrewardreward_req();
  inline void clear_has_rankweekrewardreward_req();
  inline void set_has_pvecheckaward_req();
  inline void clear_has_pvecheckaward_req();
  inline void set_has_sharereward_req();
  inline void clear_has_sharereward_req();
  inline void set_has_getsevengoallist_req();
  inline void clear_has_getsevengoallist_req();
  inline void set_has_retrivesevengoal_req();
  inline void clear_has_retrivesevengoal_req();
  inline void set_has_pverank_req();
  inline void clear_has_pverank_req();
  inline void set_has_toprank_req();
  inline void clear_has_toprank_req();
  inline void set_has_topranktime_req();
  inline void clear_has_topranktime_req();
  inline void set_has_updatetaskstatus_req();
  inline void clear_has_updatetaskstatus_req();
  inline void set_has_assyncinfo_req();
  inline void clear_has_assyncinfo_req();
  inline void set_has_asnewadd_req();
  inline void clear_has_asnewadd_req();
  inline void set_has_asoperate_req();
  inline void clear_has_asoperate_req();
  inline void set_has_asusecard_req();
  inline void clear_has_asusecard_req();
  inline void set_has_pvpuseskill_req();
  inline void clear_has_pvpuseskill_req();
  inline void set_has_instituteinfo_req();
  inline void clear_has_instituteinfo_req();
  inline void set_has_institutebuy_req();
  inline void clear_has_institutebuy_req();
  inline void set_has_opactconfiglist_req();
  inline void clear_has_opactconfiglist_req();
  inline void set_has_opactselfdatalist_req();
  inline void clear_has_opactselfdatalist_req();
  inline void set_has_opactglobaldatalist_req();
  inline void clear_has_opactglobaldatalist_req();
  inline void set_has_opactdemotake_req();
  inline void clear_has_opactdemotake_req();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[5];
  mutable int _cached_size_;
  ::fgame::CSLoginReq* login_req_;
  ::fgame::CSRegReq* reg_req_;
  ::fgame::CSHeartBeatReq* heartbeat_req_;
  ::fgame::CSPvpMatchReq* match_req_;
  ::fgame::CSPvpStartReq* start_req_;
  ::fgame::CSPvpFightReq* fight_req_;
  ::fgame::CSPvpEndReq* end_req_;
  ::fgame::CSPvpMapReq* map_req_;
  ::fgame::CSPvpUpgradeReq* upgrade_req_;
  ::fgame::CSPvpPingReq* ping_req_;
  ::fgame::CSBuyITtemReq* buyitem_req_;
  ::fgame::CSUseItemReq* useitem_req_;
  ::fgame::CSPvpLeaveReq* leave_req_;
  ::fgame::CSGetAchievementReq* getachievementreq_;
  ::fgame::CSReceiveAchievementReq* receiveachievement_req_;
  ::fgame::CSReceiveAchievementRewardReq* receiveachievementreward_req_;
  ::fgame::CSEnterServerReq* enterserver_req_;
  ::fgame::CSDirectEnterReq* directenter_req_;
  ::fgame::CSPvpRankingGetListReq* pvprankinggetlist_req_;
  ::fgame::CSStreakWinValueReq* streakwinvalue_req_;
  ::fgame::CSStreakWinGetReq* streakwinget_req_;
  ::fgame::CSOpenBigStageReq* openbigstage_req_;
  ::fgame::CSPvpUseItemReq* pvpuseitem_req_;
  ::fgame::CSSevenDaySignListReq* sevendaysignlist_req_;
  ::fgame::CSSevenDaySignReq* sevendaysign_req_;
  ::fgame::CSGetServerReq* getserver_req_;
  ::fgame::CSSycPlayerInfoReq* sycplayerinfo_req_;
  ::fgame::CSPvpStopMatchReq* stopmatch_req_;
  ::fgame::CSChangeNameReq* changename_req_;
  ::fgame::CSLogoutReq* logout_req_;
  ::fgame::CSXinShouRecodeReq* xinshourecode_req_;
  ::fgame::CSPvpRankingPlayerInfoReq* pvprankingplayerinfo_req_;
  ::fgame::CSGetOpenActivityReq* getopenactivity_req_;
  ::fgame::CSGetActivityDataReq* getactivitydata_req_;
  ::fgame::CSReceiveActivityRewardReq* receiveactivityreward_req_;
  ::fgame::CSMissionListReq* missionlist_req_;
  ::fgame::CSMissionCompleteReq* missioncomplete_req_;
  ::fgame::CSGetPowerEnergyActivityDataReq* getpowerenergyactivitydata_req_;
  ::fgame::CSReceivePowerEnergyReq* receivepowerenergy_req_;
  ::fgame::CSGetMailReq* getmail_req_;
  ::fgame::CSDelMailReq* delmail_req_;
  ::fgame::CSBuyNewbieGiftReq* buynewbiegift_req_;
  ::fgame::CSRechargeCallbackReq* rechargecallback_req_;
  ::fgame::CSFriendQueryReq* friendquery_req_;
  ::fgame::CSFriendRequestAddReq* friendrequestadd_req_;
  ::fgame::CSFriendConfirmAddReq* friendconfirmadd_req_;
  ::fgame::CSFriendGetInfoReq* friendgetinfo_req_;
  ::fgame::CSFriendRequestRemoveReq* friendrequestremove_req_;
  ::fgame::CSFriendAddBlackListReq* friendaddblacklist_req_;
  ::fgame::CSFriendRemoveBlackListReq* friendremoveblacklist_req_;
  ::fgame::CSPvpChatReq* pvpchat_req_;
  ::fgame::CSUseGiftCodeReq* usegiftcode_req_;
  ::fgame::CSQueryPlayerInfoReq* queryplayerinfo_req_;
  ::fgame::CSPersonalRoomCreateReq* personalroomcreate_req_;
  ::fgame::CSPersonalRoomEnterReq* personalroomenter_req_;
  ::fgame::CSPersonalRoomLeaveReq* personalroomleave_req_;
  ::fgame::CSPersonalRoomKickReq* personalroomkick_req_;
  ::fgame::CSPersonalRoomInviteReq* personalroominvite_req_;
  ::fgame::CSPersonalRoomBroadcastReq* personalroombroadcast_req_;
  ::fgame::CSPersonalRoomChatReq* personalroomchat_req_;
  ::fgame::CSPersonalRoomModeReq* personalroommode_req_;
  ::fgame::CSPersonalRoomBeginFightReq* personalroombeginfight_req_;
  ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* personalroomapplyorrefuseinvite_req_;
  ::fgame::CSChangePlayerIconReq* changeplayericon_req_;
  ::fgame::CSPersonalRoomCountDownReq* personalroomcountdown_req_;
  ::fgame::CSSyncPlayerDataReq* syncplayerdata_req_;
  ::fgame::CSGetPlayerDataReq* getplayerdata_req_;
  ::fgame::CSPvpAppearCreepReq* appearcreep_req_;
  ::fgame::CSSaveCheckPtDataReq* savecheckptdata_req_;
  ::fgame::CSGetCheckPtDataReq* getcheckptdata_req_;
  ::fgame::CSSetNewBieReq* setnewbie_req_;
  ::fgame::CSGetNewBieListReq* getnewbielist_req_;
  ::fgame::CSEnterPointReq* enterpoint_req_;
  ::fgame::CSShopGuideReq* shopguide_req_;
  ::fgame::CSTestAddDiamondReq* testadddiamond_req_;
  ::fgame::CSActivityListReq* activitylist_req_;
  ::fgame::CSActivitySubmitReq* activitysubmit_req_;
  ::fgame::CSSetTitleReq* settitle_req_;
  ::fgame::CSShopBuyReq* shopbuy_req_;
  ::fgame::CSExchangeItemReq* exchangeitem_req_;
  ::fgame::CSActivityCrazyDtlsReq* activitycrazydtls_req_;
  ::fgame::CSActivityCrazyUsageReq* activitycrazyusage_req_;
  ::fgame::CSShopListReq* shoplist_req_;
  ::fgame::CSPvpObserverReq* pvpobserver_req_;
  ::fgame::CSSetNewBieOssReq* setnewbieoss_req_;
  ::fgame::CSPvpResultReq* pvpresult_req_;
  ::fgame::CSPvpSelfRankListReq* pvpselfranklist_req_;
  ::fgame::CSGWGetMatchInfoReq* gwgetmatchinfo_req_;
  ::fgame::CSGWMatchReq* gwmatch_req_;
  ::fgame::CSGWMatchStopReq* gwmatchstop_req_;
  ::fgame::CSGWGetRankReq* gwgetrank_req_;
  ::fgame::CSGWBuyEnergyReq* gwbuyenergy_req_;
  ::fgame::CSRequestPKeyReq* requestpkey_req_;
  ::fgame::CSSendClientKeyReq* sendclientkey_req_;
  ::fgame::CSUpdateExchangeListReq* updateexchangelist_req_;
  ::fgame::CSGlyphsRequestInfoReq* glyphsrequestinfo_req_;
  ::fgame::CSGlyphsRequestBasicInfoReq* glyphsrequestbasicinfo_req_;
  ::fgame::CSGlyphsActiveReq* glyphsactive_req_;
  ::fgame::CSGlyphsUpgradeReq* glyphsupgrade_req_;
  ::fgame::CSGlyphsPvpInfoReq* glyphspvpinfo_req_;
  ::fgame::CSBuyVipReq* buyvip_req_;
  ::fgame::CSGlyphGuideReq* glyphguide_req_;
  ::fgame::CSNewYearGetInfoReq* newyeargetinfo_req_;
  ::fgame::CSNewYearRewardReq* newyearreward_req_;
  ::fgame::CSOpenChestReq* openchest_req_;
  ::fgame::CSChristmasDecorateReq* christmasdecorate_req_;
  ::fgame::CSChristmasTakeBonusReq* christmastakebonus_req_;
  ::fgame::CSChristmasGetDataReq* christmasgetdate_req_;
  ::fgame::CSChristmasGetRankReq* christmasgetrank_req_;
  ::fgame::CSRetriveCheckPtRewardReq* retrivecheckptreward_req_;
  ::fgame::CSVipTimeReq* viptime_req_;
  ::fgame::CSNewYearCmpReq* newyearcmp_req_;
  ::fgame::CSNotifyGlyphsUpdateReq* notifyglyphsupdate_req_;
  ::fgame::CSPvpRecoverItemReq* recoveritem_req_;
  ::fgame::CSSetSignatureReq* setsignature_req_;
  ::fgame::CSSetExtraInfoVisibleReq* setextrainfovisible_req_;
  ::fgame::CSGetExtraInfoReq* getextrainfo_req_;
  ::fgame::CSValentineDataReq* valentinedata_req_;
  ::fgame::CSValentineExchangeReq* valentineexchange_req_;
  ::fgame::CSRedPacketsGetInfoReq* redpacketsgetinfo_req_;
  ::fgame::CSRedPacketsGrebReq* redpacketsgreb_req_;
  ::fgame::CSRedPacketsOpenedReq* redpacketsopened_req_;
  ::fgame::CSChapterUnlockReq* chapterunlock_req_;
  ::fgame::CSGetChestReq* getchest_req_;
  ::fgame::CSPveNotifyReq* pvenotify_req_;
  ::fgame::CSDailyTaskStatusReq* dailytaskstatus_req_;
  ::fgame::CSRequestDailyTaskReq* requestdailytask_req_;
  ::fgame::CSChangeDailyTaskReq* changedailytask_req_;
  ::fgame::CSOpenDailyTaskAwardReq* opendailytaskaward_req_;
  ::fgame::CSUpdateDailyTaskProgressReq* updatedailytaskprogress_req_;
  ::fgame::CSRankWeekRewardInfoReq* rankweekrewardinfo_req_;
  ::fgame::CSRankWeekRewardRewardReq* rankweekrewardreward_req_;
  ::fgame::CSPveCheckAwardReq* pvecheckaward_req_;
  ::fgame::CSShareRewardGetReq* sharereward_req_;
  ::fgame::CSGetSevenGoalListReq* getsevengoallist_req_;
  ::fgame::CSRetriveSevenGoalReq* retrivesevengoal_req_;
  ::fgame::CSPveRankReq* pverank_req_;
  ::fgame::CSTopRankReq* toprank_req_;
  ::fgame::CSTopRankTimeReq* topranktime_req_;
  ::fgame::CSUpdateTaskStatusReq* updatetaskstatus_req_;
  ::fgame::CSAsSyncInfoReq* assyncinfo_req_;
  ::fgame::CSAsNewAddReq* asnewadd_req_;
  ::fgame::CSAsOperateReq* asoperate_req_;
  ::fgame::CSAsUseCardReq* asusecard_req_;
  ::fgame::CSPvpUseSkillReq* pvpuseskill_req_;
  ::fgame::CSInstituteInfoReq* instituteinfo_req_;
  ::fgame::CSInstituteBuyReq* institutebuy_req_;
  ::fgame::CSOpActConfigListReq* opactconfiglist_req_;
  ::fgame::CSOpActSelfDataListReq* opactselfdatalist_req_;
  ::fgame::CSOpActGlobalDataListReq* opactglobaldatalist_req_;
  ::fgame::CSOpActDemoTakeReq* opactdemotake_req_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientSvrMsg_2eproto();
  friend void protobuf_ShutdownFile_ClientSvrMsg_2eproto();

  void InitAsDefaultInstance();
  static C2ServerMsg* default_instance_;
};
// -------------------------------------------------------------------

class S2ClientMsg : public ::google::protobuf::MessageLite {
 public:
  S2ClientMsg();
  virtual ~S2ClientMsg();

  S2ClientMsg(const S2ClientMsg& from);

  inline S2ClientMsg& operator=(const S2ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const S2ClientMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const S2ClientMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(S2ClientMsg* other);

  // implements Message ----------------------------------------------

  S2ClientMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const S2ClientMsg& from);
  void MergeFrom(const S2ClientMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fgame.CSErrorMsg Error_Msg = 1;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 1;
  inline const ::fgame::CSErrorMsg& error_msg() const;
  inline ::fgame::CSErrorMsg* mutable_error_msg();
  inline ::fgame::CSErrorMsg* release_error_msg();
  inline void set_allocated_error_msg(::fgame::CSErrorMsg* error_msg);

  // optional .fgame.CSLoginResp Login_Resp = 2;
  inline bool has_login_resp() const;
  inline void clear_login_resp();
  static const int kLoginRespFieldNumber = 2;
  inline const ::fgame::CSLoginResp& login_resp() const;
  inline ::fgame::CSLoginResp* mutable_login_resp();
  inline ::fgame::CSLoginResp* release_login_resp();
  inline void set_allocated_login_resp(::fgame::CSLoginResp* login_resp);

  // optional .fgame.CSRegResp Reg_Resp = 3;
  inline bool has_reg_resp() const;
  inline void clear_reg_resp();
  static const int kRegRespFieldNumber = 3;
  inline const ::fgame::CSRegResp& reg_resp() const;
  inline ::fgame::CSRegResp* mutable_reg_resp();
  inline ::fgame::CSRegResp* release_reg_resp();
  inline void set_allocated_reg_resp(::fgame::CSRegResp* reg_resp);

  // optional .fgame.CSHeartBeatResp HeartBeat_Resp = 4;
  inline bool has_heartbeat_resp() const;
  inline void clear_heartbeat_resp();
  static const int kHeartBeatRespFieldNumber = 4;
  inline const ::fgame::CSHeartBeatResp& heartbeat_resp() const;
  inline ::fgame::CSHeartBeatResp* mutable_heartbeat_resp();
  inline ::fgame::CSHeartBeatResp* release_heartbeat_resp();
  inline void set_allocated_heartbeat_resp(::fgame::CSHeartBeatResp* heartbeat_resp);

  // optional .fgame.CSPvpMatchResp Match_Resp = 5;
  inline bool has_match_resp() const;
  inline void clear_match_resp();
  static const int kMatchRespFieldNumber = 5;
  inline const ::fgame::CSPvpMatchResp& match_resp() const;
  inline ::fgame::CSPvpMatchResp* mutable_match_resp();
  inline ::fgame::CSPvpMatchResp* release_match_resp();
  inline void set_allocated_match_resp(::fgame::CSPvpMatchResp* match_resp);

  // optional .fgame.CSPvpStartResp Start_Resp = 6;
  inline bool has_start_resp() const;
  inline void clear_start_resp();
  static const int kStartRespFieldNumber = 6;
  inline const ::fgame::CSPvpStartResp& start_resp() const;
  inline ::fgame::CSPvpStartResp* mutable_start_resp();
  inline ::fgame::CSPvpStartResp* release_start_resp();
  inline void set_allocated_start_resp(::fgame::CSPvpStartResp* start_resp);

  // optional .fgame.CSPvpFightResp Fight_Resp = 7;
  inline bool has_fight_resp() const;
  inline void clear_fight_resp();
  static const int kFightRespFieldNumber = 7;
  inline const ::fgame::CSPvpFightResp& fight_resp() const;
  inline ::fgame::CSPvpFightResp* mutable_fight_resp();
  inline ::fgame::CSPvpFightResp* release_fight_resp();
  inline void set_allocated_fight_resp(::fgame::CSPvpFightResp* fight_resp);

  // optional .fgame.CSPvpEndResp End_Resp = 8;
  inline bool has_end_resp() const;
  inline void clear_end_resp();
  static const int kEndRespFieldNumber = 8;
  inline const ::fgame::CSPvpEndResp& end_resp() const;
  inline ::fgame::CSPvpEndResp* mutable_end_resp();
  inline ::fgame::CSPvpEndResp* release_end_resp();
  inline void set_allocated_end_resp(::fgame::CSPvpEndResp* end_resp);

  // optional .fgame.CSPvpMapResp Map_Resp = 9;
  inline bool has_map_resp() const;
  inline void clear_map_resp();
  static const int kMapRespFieldNumber = 9;
  inline const ::fgame::CSPvpMapResp& map_resp() const;
  inline ::fgame::CSPvpMapResp* mutable_map_resp();
  inline ::fgame::CSPvpMapResp* release_map_resp();
  inline void set_allocated_map_resp(::fgame::CSPvpMapResp* map_resp);

  // optional .fgame.CSPvpUpgradeResp Upgrade_Resp = 10;
  inline bool has_upgrade_resp() const;
  inline void clear_upgrade_resp();
  static const int kUpgradeRespFieldNumber = 10;
  inline const ::fgame::CSPvpUpgradeResp& upgrade_resp() const;
  inline ::fgame::CSPvpUpgradeResp* mutable_upgrade_resp();
  inline ::fgame::CSPvpUpgradeResp* release_upgrade_resp();
  inline void set_allocated_upgrade_resp(::fgame::CSPvpUpgradeResp* upgrade_resp);

  // optional .fgame.CSPvpPingResp Ping_Resp = 13;
  inline bool has_ping_resp() const;
  inline void clear_ping_resp();
  static const int kPingRespFieldNumber = 13;
  inline const ::fgame::CSPvpPingResp& ping_resp() const;
  inline ::fgame::CSPvpPingResp* mutable_ping_resp();
  inline ::fgame::CSPvpPingResp* release_ping_resp();
  inline void set_allocated_ping_resp(::fgame::CSPvpPingResp* ping_resp);

  // optional .fgame.CSBuyItemResp BuyItem_Resp = 14;
  inline bool has_buyitem_resp() const;
  inline void clear_buyitem_resp();
  static const int kBuyItemRespFieldNumber = 14;
  inline const ::fgame::CSBuyItemResp& buyitem_resp() const;
  inline ::fgame::CSBuyItemResp* mutable_buyitem_resp();
  inline ::fgame::CSBuyItemResp* release_buyitem_resp();
  inline void set_allocated_buyitem_resp(::fgame::CSBuyItemResp* buyitem_resp);

  // optional .fgame.CSUseItemResp UseItem_Resp = 15;
  inline bool has_useitem_resp() const;
  inline void clear_useitem_resp();
  static const int kUseItemRespFieldNumber = 15;
  inline const ::fgame::CSUseItemResp& useitem_resp() const;
  inline ::fgame::CSUseItemResp* mutable_useitem_resp();
  inline ::fgame::CSUseItemResp* release_useitem_resp();
  inline void set_allocated_useitem_resp(::fgame::CSUseItemResp* useitem_resp);

  // optional .fgame.CSPvpLeaveResp Leave_Resp = 18;
  inline bool has_leave_resp() const;
  inline void clear_leave_resp();
  static const int kLeaveRespFieldNumber = 18;
  inline const ::fgame::CSPvpLeaveResp& leave_resp() const;
  inline ::fgame::CSPvpLeaveResp* mutable_leave_resp();
  inline ::fgame::CSPvpLeaveResp* release_leave_resp();
  inline void set_allocated_leave_resp(::fgame::CSPvpLeaveResp* leave_resp);

  // optional .fgame.CSGetAchievementResp GetAchievement_Resp = 19;
  inline bool has_getachievement_resp() const;
  inline void clear_getachievement_resp();
  static const int kGetAchievementRespFieldNumber = 19;
  inline const ::fgame::CSGetAchievementResp& getachievement_resp() const;
  inline ::fgame::CSGetAchievementResp* mutable_getachievement_resp();
  inline ::fgame::CSGetAchievementResp* release_getachievement_resp();
  inline void set_allocated_getachievement_resp(::fgame::CSGetAchievementResp* getachievement_resp);

  // optional .fgame.CSReceiveAchievementResp ReceiveAchievement_Resp = 20;
  inline bool has_receiveachievement_resp() const;
  inline void clear_receiveachievement_resp();
  static const int kReceiveAchievementRespFieldNumber = 20;
  inline const ::fgame::CSReceiveAchievementResp& receiveachievement_resp() const;
  inline ::fgame::CSReceiveAchievementResp* mutable_receiveachievement_resp();
  inline ::fgame::CSReceiveAchievementResp* release_receiveachievement_resp();
  inline void set_allocated_receiveachievement_resp(::fgame::CSReceiveAchievementResp* receiveachievement_resp);

  // optional .fgame.CSReceiveAchievementRewardResp ReceiveAchievementReward_Resp = 21;
  inline bool has_receiveachievementreward_resp() const;
  inline void clear_receiveachievementreward_resp();
  static const int kReceiveAchievementRewardRespFieldNumber = 21;
  inline const ::fgame::CSReceiveAchievementRewardResp& receiveachievementreward_resp() const;
  inline ::fgame::CSReceiveAchievementRewardResp* mutable_receiveachievementreward_resp();
  inline ::fgame::CSReceiveAchievementRewardResp* release_receiveachievementreward_resp();
  inline void set_allocated_receiveachievementreward_resp(::fgame::CSReceiveAchievementRewardResp* receiveachievementreward_resp);

  // optional .fgame.CSEnterServerResp EnterServer_Resp = 22;
  inline bool has_enterserver_resp() const;
  inline void clear_enterserver_resp();
  static const int kEnterServerRespFieldNumber = 22;
  inline const ::fgame::CSEnterServerResp& enterserver_resp() const;
  inline ::fgame::CSEnterServerResp* mutable_enterserver_resp();
  inline ::fgame::CSEnterServerResp* release_enterserver_resp();
  inline void set_allocated_enterserver_resp(::fgame::CSEnterServerResp* enterserver_resp);

  // optional .fgame.CSCanEnterReq CanEnter_Req = 23;
  inline bool has_canenter_req() const;
  inline void clear_canenter_req();
  static const int kCanEnterReqFieldNumber = 23;
  inline const ::fgame::CSCanEnterReq& canenter_req() const;
  inline ::fgame::CSCanEnterReq* mutable_canenter_req();
  inline ::fgame::CSCanEnterReq* release_canenter_req();
  inline void set_allocated_canenter_req(::fgame::CSCanEnterReq* canenter_req);

  // optional .fgame.CSQueueReq Queue_Req = 24;
  inline bool has_queue_req() const;
  inline void clear_queue_req();
  static const int kQueueReqFieldNumber = 24;
  inline const ::fgame::CSQueueReq& queue_req() const;
  inline ::fgame::CSQueueReq* mutable_queue_req();
  inline ::fgame::CSQueueReq* release_queue_req();
  inline void set_allocated_queue_req(::fgame::CSQueueReq* queue_req);

  // optional .fgame.CSDircetEnterResp DirectEnter_Resp = 25;
  inline bool has_directenter_resp() const;
  inline void clear_directenter_resp();
  static const int kDirectEnterRespFieldNumber = 25;
  inline const ::fgame::CSDircetEnterResp& directenter_resp() const;
  inline ::fgame::CSDircetEnterResp* mutable_directenter_resp();
  inline ::fgame::CSDircetEnterResp* release_directenter_resp();
  inline void set_allocated_directenter_resp(::fgame::CSDircetEnterResp* directenter_resp);

  // optional .fgame.CSPvpRankingGetListResp PvpRankingGetList_Resp = 26;
  inline bool has_pvprankinggetlist_resp() const;
  inline void clear_pvprankinggetlist_resp();
  static const int kPvpRankingGetListRespFieldNumber = 26;
  inline const ::fgame::CSPvpRankingGetListResp& pvprankinggetlist_resp() const;
  inline ::fgame::CSPvpRankingGetListResp* mutable_pvprankinggetlist_resp();
  inline ::fgame::CSPvpRankingGetListResp* release_pvprankinggetlist_resp();
  inline void set_allocated_pvprankinggetlist_resp(::fgame::CSPvpRankingGetListResp* pvprankinggetlist_resp);

  // optional .fgame.CSStreakWinValueResp StreakWinValue_Resp = 27;
  inline bool has_streakwinvalue_resp() const;
  inline void clear_streakwinvalue_resp();
  static const int kStreakWinValueRespFieldNumber = 27;
  inline const ::fgame::CSStreakWinValueResp& streakwinvalue_resp() const;
  inline ::fgame::CSStreakWinValueResp* mutable_streakwinvalue_resp();
  inline ::fgame::CSStreakWinValueResp* release_streakwinvalue_resp();
  inline void set_allocated_streakwinvalue_resp(::fgame::CSStreakWinValueResp* streakwinvalue_resp);

  // optional .fgame.CSStreakWinGetResp StreakWinGet_Resp = 28;
  inline bool has_streakwinget_resp() const;
  inline void clear_streakwinget_resp();
  static const int kStreakWinGetRespFieldNumber = 28;
  inline const ::fgame::CSStreakWinGetResp& streakwinget_resp() const;
  inline ::fgame::CSStreakWinGetResp* mutable_streakwinget_resp();
  inline ::fgame::CSStreakWinGetResp* release_streakwinget_resp();
  inline void set_allocated_streakwinget_resp(::fgame::CSStreakWinGetResp* streakwinget_resp);

  // optional .fgame.CSOpenBigStageResp OpenBigStage_Resp = 29;
  inline bool has_openbigstage_resp() const;
  inline void clear_openbigstage_resp();
  static const int kOpenBigStageRespFieldNumber = 29;
  inline const ::fgame::CSOpenBigStageResp& openbigstage_resp() const;
  inline ::fgame::CSOpenBigStageResp* mutable_openbigstage_resp();
  inline ::fgame::CSOpenBigStageResp* release_openbigstage_resp();
  inline void set_allocated_openbigstage_resp(::fgame::CSOpenBigStageResp* openbigstage_resp);

  // optional .fgame.CSPvpUseItemResp PvpUseItem_Resp = 30;
  inline bool has_pvpuseitem_resp() const;
  inline void clear_pvpuseitem_resp();
  static const int kPvpUseItemRespFieldNumber = 30;
  inline const ::fgame::CSPvpUseItemResp& pvpuseitem_resp() const;
  inline ::fgame::CSPvpUseItemResp* mutable_pvpuseitem_resp();
  inline ::fgame::CSPvpUseItemResp* release_pvpuseitem_resp();
  inline void set_allocated_pvpuseitem_resp(::fgame::CSPvpUseItemResp* pvpuseitem_resp);

  // optional .fgame.CSSevenDaySignListResp SevenDaySignList_Resp = 31;
  inline bool has_sevendaysignlist_resp() const;
  inline void clear_sevendaysignlist_resp();
  static const int kSevenDaySignListRespFieldNumber = 31;
  inline const ::fgame::CSSevenDaySignListResp& sevendaysignlist_resp() const;
  inline ::fgame::CSSevenDaySignListResp* mutable_sevendaysignlist_resp();
  inline ::fgame::CSSevenDaySignListResp* release_sevendaysignlist_resp();
  inline void set_allocated_sevendaysignlist_resp(::fgame::CSSevenDaySignListResp* sevendaysignlist_resp);

  // optional .fgame.CSSevenDaySignResp SevenDaySign_Resp = 32;
  inline bool has_sevendaysign_resp() const;
  inline void clear_sevendaysign_resp();
  static const int kSevenDaySignRespFieldNumber = 32;
  inline const ::fgame::CSSevenDaySignResp& sevendaysign_resp() const;
  inline ::fgame::CSSevenDaySignResp* mutable_sevendaysign_resp();
  inline ::fgame::CSSevenDaySignResp* release_sevendaysign_resp();
  inline void set_allocated_sevendaysign_resp(::fgame::CSSevenDaySignResp* sevendaysign_resp);

  // optional .fgame.CSGetServerResp GetServer_Resp = 33;
  inline bool has_getserver_resp() const;
  inline void clear_getserver_resp();
  static const int kGetServerRespFieldNumber = 33;
  inline const ::fgame::CSGetServerResp& getserver_resp() const;
  inline ::fgame::CSGetServerResp* mutable_getserver_resp();
  inline ::fgame::CSGetServerResp* release_getserver_resp();
  inline void set_allocated_getserver_resp(::fgame::CSGetServerResp* getserver_resp);

  // optional .fgame.CSSycPlayerInfoResp SycPlayerInfo_Resp = 34;
  inline bool has_sycplayerinfo_resp() const;
  inline void clear_sycplayerinfo_resp();
  static const int kSycPlayerInfoRespFieldNumber = 34;
  inline const ::fgame::CSSycPlayerInfoResp& sycplayerinfo_resp() const;
  inline ::fgame::CSSycPlayerInfoResp* mutable_sycplayerinfo_resp();
  inline ::fgame::CSSycPlayerInfoResp* release_sycplayerinfo_resp();
  inline void set_allocated_sycplayerinfo_resp(::fgame::CSSycPlayerInfoResp* sycplayerinfo_resp);

  // optional .fgame.CSNoticeReq Notice_Req = 35;
  inline bool has_notice_req() const;
  inline void clear_notice_req();
  static const int kNoticeReqFieldNumber = 35;
  inline const ::fgame::CSNoticeReq& notice_req() const;
  inline ::fgame::CSNoticeReq* mutable_notice_req();
  inline ::fgame::CSNoticeReq* release_notice_req();
  inline void set_allocated_notice_req(::fgame::CSNoticeReq* notice_req);

  // optional .fgame.CSPvpStopMatchResp StopMatch_Resp = 36;
  inline bool has_stopmatch_resp() const;
  inline void clear_stopmatch_resp();
  static const int kStopMatchRespFieldNumber = 36;
  inline const ::fgame::CSPvpStopMatchResp& stopmatch_resp() const;
  inline ::fgame::CSPvpStopMatchResp* mutable_stopmatch_resp();
  inline ::fgame::CSPvpStopMatchResp* release_stopmatch_resp();
  inline void set_allocated_stopmatch_resp(::fgame::CSPvpStopMatchResp* stopmatch_resp);

  // optional .fgame.CSChangeNameResp ChangeName_Resp = 37;
  inline bool has_changename_resp() const;
  inline void clear_changename_resp();
  static const int kChangeNameRespFieldNumber = 37;
  inline const ::fgame::CSChangeNameResp& changename_resp() const;
  inline ::fgame::CSChangeNameResp* mutable_changename_resp();
  inline ::fgame::CSChangeNameResp* release_changename_resp();
  inline void set_allocated_changename_resp(::fgame::CSChangeNameResp* changename_resp);

  // optional .fgame.CSGMCmdReq GMCmd_Req = 40;
  inline bool has_gmcmd_req() const;
  inline void clear_gmcmd_req();
  static const int kGMCmdReqFieldNumber = 40;
  inline const ::fgame::CSGMCmdReq& gmcmd_req() const;
  inline ::fgame::CSGMCmdReq* mutable_gmcmd_req();
  inline ::fgame::CSGMCmdReq* release_gmcmd_req();
  inline void set_allocated_gmcmd_req(::fgame::CSGMCmdReq* gmcmd_req);

  // optional .fgame.CSXinShouRecodeResp XinShouRecode_Resp = 41;
  inline bool has_xinshourecode_resp() const;
  inline void clear_xinshourecode_resp();
  static const int kXinShouRecodeRespFieldNumber = 41;
  inline const ::fgame::CSXinShouRecodeResp& xinshourecode_resp() const;
  inline ::fgame::CSXinShouRecodeResp* mutable_xinshourecode_resp();
  inline ::fgame::CSXinShouRecodeResp* release_xinshourecode_resp();
  inline void set_allocated_xinshourecode_resp(::fgame::CSXinShouRecodeResp* xinshourecode_resp);

  // optional .fgame.CSPvpRankingPlayerInfoResp PvpRankingPlayerInfo_Resp = 42;
  inline bool has_pvprankingplayerinfo_resp() const;
  inline void clear_pvprankingplayerinfo_resp();
  static const int kPvpRankingPlayerInfoRespFieldNumber = 42;
  inline const ::fgame::CSPvpRankingPlayerInfoResp& pvprankingplayerinfo_resp() const;
  inline ::fgame::CSPvpRankingPlayerInfoResp* mutable_pvprankingplayerinfo_resp();
  inline ::fgame::CSPvpRankingPlayerInfoResp* release_pvprankingplayerinfo_resp();
  inline void set_allocated_pvprankingplayerinfo_resp(::fgame::CSPvpRankingPlayerInfoResp* pvprankingplayerinfo_resp);

  // optional .fgame.CSGetOpenActivityResp GetOpenActivity_Resp = 43;
  inline bool has_getopenactivity_resp() const;
  inline void clear_getopenactivity_resp();
  static const int kGetOpenActivityRespFieldNumber = 43;
  inline const ::fgame::CSGetOpenActivityResp& getopenactivity_resp() const;
  inline ::fgame::CSGetOpenActivityResp* mutable_getopenactivity_resp();
  inline ::fgame::CSGetOpenActivityResp* release_getopenactivity_resp();
  inline void set_allocated_getopenactivity_resp(::fgame::CSGetOpenActivityResp* getopenactivity_resp);

  // optional .fgame.CSGetActivityDataResp GetActivityData_Resp = 44;
  inline bool has_getactivitydata_resp() const;
  inline void clear_getactivitydata_resp();
  static const int kGetActivityDataRespFieldNumber = 44;
  inline const ::fgame::CSGetActivityDataResp& getactivitydata_resp() const;
  inline ::fgame::CSGetActivityDataResp* mutable_getactivitydata_resp();
  inline ::fgame::CSGetActivityDataResp* release_getactivitydata_resp();
  inline void set_allocated_getactivitydata_resp(::fgame::CSGetActivityDataResp* getactivitydata_resp);

  // optional .fgame.CSReceiveActivityRewardResp ReceiveActivityReward_Resp = 45;
  inline bool has_receiveactivityreward_resp() const;
  inline void clear_receiveactivityreward_resp();
  static const int kReceiveActivityRewardRespFieldNumber = 45;
  inline const ::fgame::CSReceiveActivityRewardResp& receiveactivityreward_resp() const;
  inline ::fgame::CSReceiveActivityRewardResp* mutable_receiveactivityreward_resp();
  inline ::fgame::CSReceiveActivityRewardResp* release_receiveactivityreward_resp();
  inline void set_allocated_receiveactivityreward_resp(::fgame::CSReceiveActivityRewardResp* receiveactivityreward_resp);

  // optional .fgame.CSMissionListResp MissionList_Resp = 46;
  inline bool has_missionlist_resp() const;
  inline void clear_missionlist_resp();
  static const int kMissionListRespFieldNumber = 46;
  inline const ::fgame::CSMissionListResp& missionlist_resp() const;
  inline ::fgame::CSMissionListResp* mutable_missionlist_resp();
  inline ::fgame::CSMissionListResp* release_missionlist_resp();
  inline void set_allocated_missionlist_resp(::fgame::CSMissionListResp* missionlist_resp);

  // optional .fgame.CSMissionCompleteResp MissionComplete_Resp = 47;
  inline bool has_missioncomplete_resp() const;
  inline void clear_missioncomplete_resp();
  static const int kMissionCompleteRespFieldNumber = 47;
  inline const ::fgame::CSMissionCompleteResp& missioncomplete_resp() const;
  inline ::fgame::CSMissionCompleteResp* mutable_missioncomplete_resp();
  inline ::fgame::CSMissionCompleteResp* release_missioncomplete_resp();
  inline void set_allocated_missioncomplete_resp(::fgame::CSMissionCompleteResp* missioncomplete_resp);

  // optional .fgame.CSMissionUpdateResp MissionUpdate_Resp = 48;
  inline bool has_missionupdate_resp() const;
  inline void clear_missionupdate_resp();
  static const int kMissionUpdateRespFieldNumber = 48;
  inline const ::fgame::CSMissionUpdateResp& missionupdate_resp() const;
  inline ::fgame::CSMissionUpdateResp* mutable_missionupdate_resp();
  inline ::fgame::CSMissionUpdateResp* release_missionupdate_resp();
  inline void set_allocated_missionupdate_resp(::fgame::CSMissionUpdateResp* missionupdate_resp);

  // optional .fgame.CSGetPowerEnergyActivityResp GetPowerEnergyActivity_Resp = 49;
  inline bool has_getpowerenergyactivity_resp() const;
  inline void clear_getpowerenergyactivity_resp();
  static const int kGetPowerEnergyActivityRespFieldNumber = 49;
  inline const ::fgame::CSGetPowerEnergyActivityResp& getpowerenergyactivity_resp() const;
  inline ::fgame::CSGetPowerEnergyActivityResp* mutable_getpowerenergyactivity_resp();
  inline ::fgame::CSGetPowerEnergyActivityResp* release_getpowerenergyactivity_resp();
  inline void set_allocated_getpowerenergyactivity_resp(::fgame::CSGetPowerEnergyActivityResp* getpowerenergyactivity_resp);

  // optional .fgame.CSReceivePowerEnergyResp ReceivePowerEnergy_Resp = 50;
  inline bool has_receivepowerenergy_resp() const;
  inline void clear_receivepowerenergy_resp();
  static const int kReceivePowerEnergyRespFieldNumber = 50;
  inline const ::fgame::CSReceivePowerEnergyResp& receivepowerenergy_resp() const;
  inline ::fgame::CSReceivePowerEnergyResp* mutable_receivepowerenergy_resp();
  inline ::fgame::CSReceivePowerEnergyResp* release_receivepowerenergy_resp();
  inline void set_allocated_receivepowerenergy_resp(::fgame::CSReceivePowerEnergyResp* receivepowerenergy_resp);

  // optional .fgame.CSGetMailResp GetMail_Resp = 51;
  inline bool has_getmail_resp() const;
  inline void clear_getmail_resp();
  static const int kGetMailRespFieldNumber = 51;
  inline const ::fgame::CSGetMailResp& getmail_resp() const;
  inline ::fgame::CSGetMailResp* mutable_getmail_resp();
  inline ::fgame::CSGetMailResp* release_getmail_resp();
  inline void set_allocated_getmail_resp(::fgame::CSGetMailResp* getmail_resp);

  // optional .fgame.CSDelMailResp DelMail_Resp = 52;
  inline bool has_delmail_resp() const;
  inline void clear_delmail_resp();
  static const int kDelMailRespFieldNumber = 52;
  inline const ::fgame::CSDelMailResp& delmail_resp() const;
  inline ::fgame::CSDelMailResp* mutable_delmail_resp();
  inline ::fgame::CSDelMailResp* release_delmail_resp();
  inline void set_allocated_delmail_resp(::fgame::CSDelMailResp* delmail_resp);

  // optional .fgame.CSNoticeMailReq NoticeMail_Req = 53;
  inline bool has_noticemail_req() const;
  inline void clear_noticemail_req();
  static const int kNoticeMailReqFieldNumber = 53;
  inline const ::fgame::CSNoticeMailReq& noticemail_req() const;
  inline ::fgame::CSNoticeMailReq* mutable_noticemail_req();
  inline ::fgame::CSNoticeMailReq* release_noticemail_req();
  inline void set_allocated_noticemail_req(::fgame::CSNoticeMailReq* noticemail_req);

  // optional .fgame.CSBuyNewbieGiftResp BuyNewbieGift_Resp = 54;
  inline bool has_buynewbiegift_resp() const;
  inline void clear_buynewbiegift_resp();
  static const int kBuyNewbieGiftRespFieldNumber = 54;
  inline const ::fgame::CSBuyNewbieGiftResp& buynewbiegift_resp() const;
  inline ::fgame::CSBuyNewbieGiftResp* mutable_buynewbiegift_resp();
  inline ::fgame::CSBuyNewbieGiftResp* release_buynewbiegift_resp();
  inline void set_allocated_buynewbiegift_resp(::fgame::CSBuyNewbieGiftResp* buynewbiegift_resp);

  // optional .fgame.CSRechargeCallbackResp RechargeCallback_Resp = 55;
  inline bool has_rechargecallback_resp() const;
  inline void clear_rechargecallback_resp();
  static const int kRechargeCallbackRespFieldNumber = 55;
  inline const ::fgame::CSRechargeCallbackResp& rechargecallback_resp() const;
  inline ::fgame::CSRechargeCallbackResp* mutable_rechargecallback_resp();
  inline ::fgame::CSRechargeCallbackResp* release_rechargecallback_resp();
  inline void set_allocated_rechargecallback_resp(::fgame::CSRechargeCallbackResp* rechargecallback_resp);

  // optional .fgame.CSFriendQueryResp FriendQuery_Resp = 56;
  inline bool has_friendquery_resp() const;
  inline void clear_friendquery_resp();
  static const int kFriendQueryRespFieldNumber = 56;
  inline const ::fgame::CSFriendQueryResp& friendquery_resp() const;
  inline ::fgame::CSFriendQueryResp* mutable_friendquery_resp();
  inline ::fgame::CSFriendQueryResp* release_friendquery_resp();
  inline void set_allocated_friendquery_resp(::fgame::CSFriendQueryResp* friendquery_resp);

  // optional .fgame.CSFriendRequestAddResp FriendRequestAdd_Resp = 57;
  inline bool has_friendrequestadd_resp() const;
  inline void clear_friendrequestadd_resp();
  static const int kFriendRequestAddRespFieldNumber = 57;
  inline const ::fgame::CSFriendRequestAddResp& friendrequestadd_resp() const;
  inline ::fgame::CSFriendRequestAddResp* mutable_friendrequestadd_resp();
  inline ::fgame::CSFriendRequestAddResp* release_friendrequestadd_resp();
  inline void set_allocated_friendrequestadd_resp(::fgame::CSFriendRequestAddResp* friendrequestadd_resp);

  // optional .fgame.CSFriendConfirmAddResp FriendConfirmAdd_Resp = 58;
  inline bool has_friendconfirmadd_resp() const;
  inline void clear_friendconfirmadd_resp();
  static const int kFriendConfirmAddRespFieldNumber = 58;
  inline const ::fgame::CSFriendConfirmAddResp& friendconfirmadd_resp() const;
  inline ::fgame::CSFriendConfirmAddResp* mutable_friendconfirmadd_resp();
  inline ::fgame::CSFriendConfirmAddResp* release_friendconfirmadd_resp();
  inline void set_allocated_friendconfirmadd_resp(::fgame::CSFriendConfirmAddResp* friendconfirmadd_resp);

  // optional .fgame.CSFriendGetInfoResp FriendGetInfo_Resp = 59;
  inline bool has_friendgetinfo_resp() const;
  inline void clear_friendgetinfo_resp();
  static const int kFriendGetInfoRespFieldNumber = 59;
  inline const ::fgame::CSFriendGetInfoResp& friendgetinfo_resp() const;
  inline ::fgame::CSFriendGetInfoResp* mutable_friendgetinfo_resp();
  inline ::fgame::CSFriendGetInfoResp* release_friendgetinfo_resp();
  inline void set_allocated_friendgetinfo_resp(::fgame::CSFriendGetInfoResp* friendgetinfo_resp);

  // optional .fgame.CSFriendRequestRemoveResp FriendRequestRemove_Resp = 60;
  inline bool has_friendrequestremove_resp() const;
  inline void clear_friendrequestremove_resp();
  static const int kFriendRequestRemoveRespFieldNumber = 60;
  inline const ::fgame::CSFriendRequestRemoveResp& friendrequestremove_resp() const;
  inline ::fgame::CSFriendRequestRemoveResp* mutable_friendrequestremove_resp();
  inline ::fgame::CSFriendRequestRemoveResp* release_friendrequestremove_resp();
  inline void set_allocated_friendrequestremove_resp(::fgame::CSFriendRequestRemoveResp* friendrequestremove_resp);

  // optional .fgame.CSFriendAddBlackListResp FriendAddBlackList_Resp = 61;
  inline bool has_friendaddblacklist_resp() const;
  inline void clear_friendaddblacklist_resp();
  static const int kFriendAddBlackListRespFieldNumber = 61;
  inline const ::fgame::CSFriendAddBlackListResp& friendaddblacklist_resp() const;
  inline ::fgame::CSFriendAddBlackListResp* mutable_friendaddblacklist_resp();
  inline ::fgame::CSFriendAddBlackListResp* release_friendaddblacklist_resp();
  inline void set_allocated_friendaddblacklist_resp(::fgame::CSFriendAddBlackListResp* friendaddblacklist_resp);

  // optional .fgame.CSFriendRemoveBlackListResp FriendRemoveBlackList_Resp = 62;
  inline bool has_friendremoveblacklist_resp() const;
  inline void clear_friendremoveblacklist_resp();
  static const int kFriendRemoveBlackListRespFieldNumber = 62;
  inline const ::fgame::CSFriendRemoveBlackListResp& friendremoveblacklist_resp() const;
  inline ::fgame::CSFriendRemoveBlackListResp* mutable_friendremoveblacklist_resp();
  inline ::fgame::CSFriendRemoveBlackListResp* release_friendremoveblacklist_resp();
  inline void set_allocated_friendremoveblacklist_resp(::fgame::CSFriendRemoveBlackListResp* friendremoveblacklist_resp);

  // optional .fgame.CSPvpChatResp PvpChat_Resp = 63;
  inline bool has_pvpchat_resp() const;
  inline void clear_pvpchat_resp();
  static const int kPvpChatRespFieldNumber = 63;
  inline const ::fgame::CSPvpChatResp& pvpchat_resp() const;
  inline ::fgame::CSPvpChatResp* mutable_pvpchat_resp();
  inline ::fgame::CSPvpChatResp* release_pvpchat_resp();
  inline void set_allocated_pvpchat_resp(::fgame::CSPvpChatResp* pvpchat_resp);

  // optional .fgame.CSUseGiftCodeResp UseGiftCode_Resp = 64;
  inline bool has_usegiftcode_resp() const;
  inline void clear_usegiftcode_resp();
  static const int kUseGiftCodeRespFieldNumber = 64;
  inline const ::fgame::CSUseGiftCodeResp& usegiftcode_resp() const;
  inline ::fgame::CSUseGiftCodeResp* mutable_usegiftcode_resp();
  inline ::fgame::CSUseGiftCodeResp* release_usegiftcode_resp();
  inline void set_allocated_usegiftcode_resp(::fgame::CSUseGiftCodeResp* usegiftcode_resp);

  // optional .fgame.CSQueryPlayerInfoResp QueryPlayerInfo_Resp = 65;
  inline bool has_queryplayerinfo_resp() const;
  inline void clear_queryplayerinfo_resp();
  static const int kQueryPlayerInfoRespFieldNumber = 65;
  inline const ::fgame::CSQueryPlayerInfoResp& queryplayerinfo_resp() const;
  inline ::fgame::CSQueryPlayerInfoResp* mutable_queryplayerinfo_resp();
  inline ::fgame::CSQueryPlayerInfoResp* release_queryplayerinfo_resp();
  inline void set_allocated_queryplayerinfo_resp(::fgame::CSQueryPlayerInfoResp* queryplayerinfo_resp);

  // optional .fgame.CSPersonalRoomCreateResp PersonalRoomCreate_Resp = 66;
  inline bool has_personalroomcreate_resp() const;
  inline void clear_personalroomcreate_resp();
  static const int kPersonalRoomCreateRespFieldNumber = 66;
  inline const ::fgame::CSPersonalRoomCreateResp& personalroomcreate_resp() const;
  inline ::fgame::CSPersonalRoomCreateResp* mutable_personalroomcreate_resp();
  inline ::fgame::CSPersonalRoomCreateResp* release_personalroomcreate_resp();
  inline void set_allocated_personalroomcreate_resp(::fgame::CSPersonalRoomCreateResp* personalroomcreate_resp);

  // optional .fgame.CSPersonalRoomEnterResp PersonalRoomEnter_Resp = 67;
  inline bool has_personalroomenter_resp() const;
  inline void clear_personalroomenter_resp();
  static const int kPersonalRoomEnterRespFieldNumber = 67;
  inline const ::fgame::CSPersonalRoomEnterResp& personalroomenter_resp() const;
  inline ::fgame::CSPersonalRoomEnterResp* mutable_personalroomenter_resp();
  inline ::fgame::CSPersonalRoomEnterResp* release_personalroomenter_resp();
  inline void set_allocated_personalroomenter_resp(::fgame::CSPersonalRoomEnterResp* personalroomenter_resp);

  // optional .fgame.CSPersonalRoomLeaveResp PersonalRoomLeave_Resp = 68;
  inline bool has_personalroomleave_resp() const;
  inline void clear_personalroomleave_resp();
  static const int kPersonalRoomLeaveRespFieldNumber = 68;
  inline const ::fgame::CSPersonalRoomLeaveResp& personalroomleave_resp() const;
  inline ::fgame::CSPersonalRoomLeaveResp* mutable_personalroomleave_resp();
  inline ::fgame::CSPersonalRoomLeaveResp* release_personalroomleave_resp();
  inline void set_allocated_personalroomleave_resp(::fgame::CSPersonalRoomLeaveResp* personalroomleave_resp);

  // optional .fgame.CSPersonalRoomKickResp PersonalRoomKick_Resp = 69;
  inline bool has_personalroomkick_resp() const;
  inline void clear_personalroomkick_resp();
  static const int kPersonalRoomKickRespFieldNumber = 69;
  inline const ::fgame::CSPersonalRoomKickResp& personalroomkick_resp() const;
  inline ::fgame::CSPersonalRoomKickResp* mutable_personalroomkick_resp();
  inline ::fgame::CSPersonalRoomKickResp* release_personalroomkick_resp();
  inline void set_allocated_personalroomkick_resp(::fgame::CSPersonalRoomKickResp* personalroomkick_resp);

  // optional .fgame.CSPersonalRoomInviteResp PersonalRoomInvite_Resp = 70;
  inline bool has_personalroominvite_resp() const;
  inline void clear_personalroominvite_resp();
  static const int kPersonalRoomInviteRespFieldNumber = 70;
  inline const ::fgame::CSPersonalRoomInviteResp& personalroominvite_resp() const;
  inline ::fgame::CSPersonalRoomInviteResp* mutable_personalroominvite_resp();
  inline ::fgame::CSPersonalRoomInviteResp* release_personalroominvite_resp();
  inline void set_allocated_personalroominvite_resp(::fgame::CSPersonalRoomInviteResp* personalroominvite_resp);

  // optional .fgame.CSPersonalRoomBroadcastResp PersonalRoomBroadcast_Resp = 71;
  inline bool has_personalroombroadcast_resp() const;
  inline void clear_personalroombroadcast_resp();
  static const int kPersonalRoomBroadcastRespFieldNumber = 71;
  inline const ::fgame::CSPersonalRoomBroadcastResp& personalroombroadcast_resp() const;
  inline ::fgame::CSPersonalRoomBroadcastResp* mutable_personalroombroadcast_resp();
  inline ::fgame::CSPersonalRoomBroadcastResp* release_personalroombroadcast_resp();
  inline void set_allocated_personalroombroadcast_resp(::fgame::CSPersonalRoomBroadcastResp* personalroombroadcast_resp);

  // optional .fgame.CSPersonalRoomChatResp PersonalRoomChat_Resp = 72;
  inline bool has_personalroomchat_resp() const;
  inline void clear_personalroomchat_resp();
  static const int kPersonalRoomChatRespFieldNumber = 72;
  inline const ::fgame::CSPersonalRoomChatResp& personalroomchat_resp() const;
  inline ::fgame::CSPersonalRoomChatResp* mutable_personalroomchat_resp();
  inline ::fgame::CSPersonalRoomChatResp* release_personalroomchat_resp();
  inline void set_allocated_personalroomchat_resp(::fgame::CSPersonalRoomChatResp* personalroomchat_resp);

  // optional .fgame.CSPersonalRoomModeResp PersonalRoomMode_Resp = 73;
  inline bool has_personalroommode_resp() const;
  inline void clear_personalroommode_resp();
  static const int kPersonalRoomModeRespFieldNumber = 73;
  inline const ::fgame::CSPersonalRoomModeResp& personalroommode_resp() const;
  inline ::fgame::CSPersonalRoomModeResp* mutable_personalroommode_resp();
  inline ::fgame::CSPersonalRoomModeResp* release_personalroommode_resp();
  inline void set_allocated_personalroommode_resp(::fgame::CSPersonalRoomModeResp* personalroommode_resp);

  // optional .fgame.CSPersonalRoomBeginFightResp PersonalRoomBeginFight_Resp = 74;
  inline bool has_personalroombeginfight_resp() const;
  inline void clear_personalroombeginfight_resp();
  static const int kPersonalRoomBeginFightRespFieldNumber = 74;
  inline const ::fgame::CSPersonalRoomBeginFightResp& personalroombeginfight_resp() const;
  inline ::fgame::CSPersonalRoomBeginFightResp* mutable_personalroombeginfight_resp();
  inline ::fgame::CSPersonalRoomBeginFightResp* release_personalroombeginfight_resp();
  inline void set_allocated_personalroombeginfight_resp(::fgame::CSPersonalRoomBeginFightResp* personalroombeginfight_resp);

  // optional .fgame.CSPersonalRoomApplyOrRefuseInviteResp PersonalRoomApplyOrRefuseInvite_Resp = 76;
  inline bool has_personalroomapplyorrefuseinvite_resp() const;
  inline void clear_personalroomapplyorrefuseinvite_resp();
  static const int kPersonalRoomApplyOrRefuseInviteRespFieldNumber = 76;
  inline const ::fgame::CSPersonalRoomApplyOrRefuseInviteResp& personalroomapplyorrefuseinvite_resp() const;
  inline ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* mutable_personalroomapplyorrefuseinvite_resp();
  inline ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* release_personalroomapplyorrefuseinvite_resp();
  inline void set_allocated_personalroomapplyorrefuseinvite_resp(::fgame::CSPersonalRoomApplyOrRefuseInviteResp* personalroomapplyorrefuseinvite_resp);

  // optional .fgame.CSChangePlayerIconResp ChangePlayerIcon_Resp = 77;
  inline bool has_changeplayericon_resp() const;
  inline void clear_changeplayericon_resp();
  static const int kChangePlayerIconRespFieldNumber = 77;
  inline const ::fgame::CSChangePlayerIconResp& changeplayericon_resp() const;
  inline ::fgame::CSChangePlayerIconResp* mutable_changeplayericon_resp();
  inline ::fgame::CSChangePlayerIconResp* release_changeplayericon_resp();
  inline void set_allocated_changeplayericon_resp(::fgame::CSChangePlayerIconResp* changeplayericon_resp);

  // optional .fgame.CSPersonalRoomCountDownResp PersonalRoomCountDown_Resp = 78;
  inline bool has_personalroomcountdown_resp() const;
  inline void clear_personalroomcountdown_resp();
  static const int kPersonalRoomCountDownRespFieldNumber = 78;
  inline const ::fgame::CSPersonalRoomCountDownResp& personalroomcountdown_resp() const;
  inline ::fgame::CSPersonalRoomCountDownResp* mutable_personalroomcountdown_resp();
  inline ::fgame::CSPersonalRoomCountDownResp* release_personalroomcountdown_resp();
  inline void set_allocated_personalroomcountdown_resp(::fgame::CSPersonalRoomCountDownResp* personalroomcountdown_resp);

  // optional .fgame.CSSyncPlayerDataResp SyncPlayerData_Resp = 79;
  inline bool has_syncplayerdata_resp() const;
  inline void clear_syncplayerdata_resp();
  static const int kSyncPlayerDataRespFieldNumber = 79;
  inline const ::fgame::CSSyncPlayerDataResp& syncplayerdata_resp() const;
  inline ::fgame::CSSyncPlayerDataResp* mutable_syncplayerdata_resp();
  inline ::fgame::CSSyncPlayerDataResp* release_syncplayerdata_resp();
  inline void set_allocated_syncplayerdata_resp(::fgame::CSSyncPlayerDataResp* syncplayerdata_resp);

  // optional .fgame.CSGetPlayerDataResp GetPlayerData_Resp = 80;
  inline bool has_getplayerdata_resp() const;
  inline void clear_getplayerdata_resp();
  static const int kGetPlayerDataRespFieldNumber = 80;
  inline const ::fgame::CSGetPlayerDataResp& getplayerdata_resp() const;
  inline ::fgame::CSGetPlayerDataResp* mutable_getplayerdata_resp();
  inline ::fgame::CSGetPlayerDataResp* release_getplayerdata_resp();
  inline void set_allocated_getplayerdata_resp(::fgame::CSGetPlayerDataResp* getplayerdata_resp);

  // optional .fgame.CSPvpAppearCreepResp AppearCreep_Resp = 81;
  inline bool has_appearcreep_resp() const;
  inline void clear_appearcreep_resp();
  static const int kAppearCreepRespFieldNumber = 81;
  inline const ::fgame::CSPvpAppearCreepResp& appearcreep_resp() const;
  inline ::fgame::CSPvpAppearCreepResp* mutable_appearcreep_resp();
  inline ::fgame::CSPvpAppearCreepResp* release_appearcreep_resp();
  inline void set_allocated_appearcreep_resp(::fgame::CSPvpAppearCreepResp* appearcreep_resp);

  // optional .fgame.CSSaveCheckPtDataResp SaveCheckPtData_Resp = 82;
  inline bool has_savecheckptdata_resp() const;
  inline void clear_savecheckptdata_resp();
  static const int kSaveCheckPtDataRespFieldNumber = 82;
  inline const ::fgame::CSSaveCheckPtDataResp& savecheckptdata_resp() const;
  inline ::fgame::CSSaveCheckPtDataResp* mutable_savecheckptdata_resp();
  inline ::fgame::CSSaveCheckPtDataResp* release_savecheckptdata_resp();
  inline void set_allocated_savecheckptdata_resp(::fgame::CSSaveCheckPtDataResp* savecheckptdata_resp);

  // optional .fgame.CSGetCheckPtDataResp GetCheckPtData_Resp = 83;
  inline bool has_getcheckptdata_resp() const;
  inline void clear_getcheckptdata_resp();
  static const int kGetCheckPtDataRespFieldNumber = 83;
  inline const ::fgame::CSGetCheckPtDataResp& getcheckptdata_resp() const;
  inline ::fgame::CSGetCheckPtDataResp* mutable_getcheckptdata_resp();
  inline ::fgame::CSGetCheckPtDataResp* release_getcheckptdata_resp();
  inline void set_allocated_getcheckptdata_resp(::fgame::CSGetCheckPtDataResp* getcheckptdata_resp);

  // optional .fgame.CSSetNewBieResp SetNewBie_Resp = 84;
  inline bool has_setnewbie_resp() const;
  inline void clear_setnewbie_resp();
  static const int kSetNewBieRespFieldNumber = 84;
  inline const ::fgame::CSSetNewBieResp& setnewbie_resp() const;
  inline ::fgame::CSSetNewBieResp* mutable_setnewbie_resp();
  inline ::fgame::CSSetNewBieResp* release_setnewbie_resp();
  inline void set_allocated_setnewbie_resp(::fgame::CSSetNewBieResp* setnewbie_resp);

  // optional .fgame.CSGetNewBieListResp GetNewBieList_Resp = 85;
  inline bool has_getnewbielist_resp() const;
  inline void clear_getnewbielist_resp();
  static const int kGetNewBieListRespFieldNumber = 85;
  inline const ::fgame::CSGetNewBieListResp& getnewbielist_resp() const;
  inline ::fgame::CSGetNewBieListResp* mutable_getnewbielist_resp();
  inline ::fgame::CSGetNewBieListResp* release_getnewbielist_resp();
  inline void set_allocated_getnewbielist_resp(::fgame::CSGetNewBieListResp* getnewbielist_resp);

  // optional .fgame.CSPropertyUpdateResp PropertyUpdate_Resp = 86;
  inline bool has_propertyupdate_resp() const;
  inline void clear_propertyupdate_resp();
  static const int kPropertyUpdateRespFieldNumber = 86;
  inline const ::fgame::CSPropertyUpdateResp& propertyupdate_resp() const;
  inline ::fgame::CSPropertyUpdateResp* mutable_propertyupdate_resp();
  inline ::fgame::CSPropertyUpdateResp* release_propertyupdate_resp();
  inline void set_allocated_propertyupdate_resp(::fgame::CSPropertyUpdateResp* propertyupdate_resp);

  // optional .fgame.CSEnterPointResp EnterPoint_Resp = 87;
  inline bool has_enterpoint_resp() const;
  inline void clear_enterpoint_resp();
  static const int kEnterPointRespFieldNumber = 87;
  inline const ::fgame::CSEnterPointResp& enterpoint_resp() const;
  inline ::fgame::CSEnterPointResp* mutable_enterpoint_resp();
  inline ::fgame::CSEnterPointResp* release_enterpoint_resp();
  inline void set_allocated_enterpoint_resp(::fgame::CSEnterPointResp* enterpoint_resp);

  // optional .fgame.CSShopGuideResp ShopGuide_Resp = 88;
  inline bool has_shopguide_resp() const;
  inline void clear_shopguide_resp();
  static const int kShopGuideRespFieldNumber = 88;
  inline const ::fgame::CSShopGuideResp& shopguide_resp() const;
  inline ::fgame::CSShopGuideResp* mutable_shopguide_resp();
  inline ::fgame::CSShopGuideResp* release_shopguide_resp();
  inline void set_allocated_shopguide_resp(::fgame::CSShopGuideResp* shopguide_resp);

  // optional .fgame.CSActivityListResp ActivityList_Resp = 90;
  inline bool has_activitylist_resp() const;
  inline void clear_activitylist_resp();
  static const int kActivityListRespFieldNumber = 90;
  inline const ::fgame::CSActivityListResp& activitylist_resp() const;
  inline ::fgame::CSActivityListResp* mutable_activitylist_resp();
  inline ::fgame::CSActivityListResp* release_activitylist_resp();
  inline void set_allocated_activitylist_resp(::fgame::CSActivityListResp* activitylist_resp);

  // optional .fgame.CSActivityUpdateResp ActivityUpdate_Resp = 91;
  inline bool has_activityupdate_resp() const;
  inline void clear_activityupdate_resp();
  static const int kActivityUpdateRespFieldNumber = 91;
  inline const ::fgame::CSActivityUpdateResp& activityupdate_resp() const;
  inline ::fgame::CSActivityUpdateResp* mutable_activityupdate_resp();
  inline ::fgame::CSActivityUpdateResp* release_activityupdate_resp();
  inline void set_allocated_activityupdate_resp(::fgame::CSActivityUpdateResp* activityupdate_resp);

  // optional .fgame.CSActivitySubmitResp ActivitySubmit_Resp = 92;
  inline bool has_activitysubmit_resp() const;
  inline void clear_activitysubmit_resp();
  static const int kActivitySubmitRespFieldNumber = 92;
  inline const ::fgame::CSActivitySubmitResp& activitysubmit_resp() const;
  inline ::fgame::CSActivitySubmitResp* mutable_activitysubmit_resp();
  inline ::fgame::CSActivitySubmitResp* release_activitysubmit_resp();
  inline void set_allocated_activitysubmit_resp(::fgame::CSActivitySubmitResp* activitysubmit_resp);

  // optional .fgame.CSSetTitleResp SetTitle_Resp = 93;
  inline bool has_settitle_resp() const;
  inline void clear_settitle_resp();
  static const int kSetTitleRespFieldNumber = 93;
  inline const ::fgame::CSSetTitleResp& settitle_resp() const;
  inline ::fgame::CSSetTitleResp* mutable_settitle_resp();
  inline ::fgame::CSSetTitleResp* release_settitle_resp();
  inline void set_allocated_settitle_resp(::fgame::CSSetTitleResp* settitle_resp);

  // optional .fgame.CSShopBuyResp ShopBuy_Resp = 94;
  inline bool has_shopbuy_resp() const;
  inline void clear_shopbuy_resp();
  static const int kShopBuyRespFieldNumber = 94;
  inline const ::fgame::CSShopBuyResp& shopbuy_resp() const;
  inline ::fgame::CSShopBuyResp* mutable_shopbuy_resp();
  inline ::fgame::CSShopBuyResp* release_shopbuy_resp();
  inline void set_allocated_shopbuy_resp(::fgame::CSShopBuyResp* shopbuy_resp);

  // optional .fgame.CSKickPlayerReq KickPlayer_Req = 95;
  inline bool has_kickplayer_req() const;
  inline void clear_kickplayer_req();
  static const int kKickPlayerReqFieldNumber = 95;
  inline const ::fgame::CSKickPlayerReq& kickplayer_req() const;
  inline ::fgame::CSKickPlayerReq* mutable_kickplayer_req();
  inline ::fgame::CSKickPlayerReq* release_kickplayer_req();
  inline void set_allocated_kickplayer_req(::fgame::CSKickPlayerReq* kickplayer_req);

  // optional .fgame.CSExchangeItemResp ExchangeItem_Resp = 96;
  inline bool has_exchangeitem_resp() const;
  inline void clear_exchangeitem_resp();
  static const int kExchangeItemRespFieldNumber = 96;
  inline const ::fgame::CSExchangeItemResp& exchangeitem_resp() const;
  inline ::fgame::CSExchangeItemResp* mutable_exchangeitem_resp();
  inline ::fgame::CSExchangeItemResp* release_exchangeitem_resp();
  inline void set_allocated_exchangeitem_resp(::fgame::CSExchangeItemResp* exchangeitem_resp);

  // optional .fgame.CSActivityCrazyDtlsResp ActivityCrazyDtls_Resp = 97;
  inline bool has_activitycrazydtls_resp() const;
  inline void clear_activitycrazydtls_resp();
  static const int kActivityCrazyDtlsRespFieldNumber = 97;
  inline const ::fgame::CSActivityCrazyDtlsResp& activitycrazydtls_resp() const;
  inline ::fgame::CSActivityCrazyDtlsResp* mutable_activitycrazydtls_resp();
  inline ::fgame::CSActivityCrazyDtlsResp* release_activitycrazydtls_resp();
  inline void set_allocated_activitycrazydtls_resp(::fgame::CSActivityCrazyDtlsResp* activitycrazydtls_resp);

  // optional .fgame.CSActivityCrazyUsageResp ActivityCrazyUsage_Resp = 98;
  inline bool has_activitycrazyusage_resp() const;
  inline void clear_activitycrazyusage_resp();
  static const int kActivityCrazyUsageRespFieldNumber = 98;
  inline const ::fgame::CSActivityCrazyUsageResp& activitycrazyusage_resp() const;
  inline ::fgame::CSActivityCrazyUsageResp* mutable_activitycrazyusage_resp();
  inline ::fgame::CSActivityCrazyUsageResp* release_activitycrazyusage_resp();
  inline void set_allocated_activitycrazyusage_resp(::fgame::CSActivityCrazyUsageResp* activitycrazyusage_resp);

  // optional .fgame.CSActivityCrazyUsableResp ActivityCrazyUsable_Resp = 99;
  inline bool has_activitycrazyusable_resp() const;
  inline void clear_activitycrazyusable_resp();
  static const int kActivityCrazyUsableRespFieldNumber = 99;
  inline const ::fgame::CSActivityCrazyUsableResp& activitycrazyusable_resp() const;
  inline ::fgame::CSActivityCrazyUsableResp* mutable_activitycrazyusable_resp();
  inline ::fgame::CSActivityCrazyUsableResp* release_activitycrazyusable_resp();
  inline void set_allocated_activitycrazyusable_resp(::fgame::CSActivityCrazyUsableResp* activitycrazyusable_resp);

  // optional .fgame.CSShopListResp ShopList_Resp = 100;
  inline bool has_shoplist_resp() const;
  inline void clear_shoplist_resp();
  static const int kShopListRespFieldNumber = 100;
  inline const ::fgame::CSShopListResp& shoplist_resp() const;
  inline ::fgame::CSShopListResp* mutable_shoplist_resp();
  inline ::fgame::CSShopListResp* release_shoplist_resp();
  inline void set_allocated_shoplist_resp(::fgame::CSShopListResp* shoplist_resp);

  // optional .fgame.CSPvpObserverResp PvpObserver_Resp = 101;
  inline bool has_pvpobserver_resp() const;
  inline void clear_pvpobserver_resp();
  static const int kPvpObserverRespFieldNumber = 101;
  inline const ::fgame::CSPvpObserverResp& pvpobserver_resp() const;
  inline ::fgame::CSPvpObserverResp* mutable_pvpobserver_resp();
  inline ::fgame::CSPvpObserverResp* release_pvpobserver_resp();
  inline void set_allocated_pvpobserver_resp(::fgame::CSPvpObserverResp* pvpobserver_resp);

  // optional .fgame.CSSetNewBieOssResp SetNewBieOss_Resp = 102;
  inline bool has_setnewbieoss_resp() const;
  inline void clear_setnewbieoss_resp();
  static const int kSetNewBieOssRespFieldNumber = 102;
  inline const ::fgame::CSSetNewBieOssResp& setnewbieoss_resp() const;
  inline ::fgame::CSSetNewBieOssResp* mutable_setnewbieoss_resp();
  inline ::fgame::CSSetNewBieOssResp* release_setnewbieoss_resp();
  inline void set_allocated_setnewbieoss_resp(::fgame::CSSetNewBieOssResp* setnewbieoss_resp);

  // optional .fgame.CSUpdateAchievementResp UpdateAchievement_Resp = 103;
  inline bool has_updateachievement_resp() const;
  inline void clear_updateachievement_resp();
  static const int kUpdateAchievementRespFieldNumber = 103;
  inline const ::fgame::CSUpdateAchievementResp& updateachievement_resp() const;
  inline ::fgame::CSUpdateAchievementResp* mutable_updateachievement_resp();
  inline ::fgame::CSUpdateAchievementResp* release_updateachievement_resp();
  inline void set_allocated_updateachievement_resp(::fgame::CSUpdateAchievementResp* updateachievement_resp);

  // optional .fgame.CSPvpResultResp PvpResult_Resp = 104;
  inline bool has_pvpresult_resp() const;
  inline void clear_pvpresult_resp();
  static const int kPvpResultRespFieldNumber = 104;
  inline const ::fgame::CSPvpResultResp& pvpresult_resp() const;
  inline ::fgame::CSPvpResultResp* mutable_pvpresult_resp();
  inline ::fgame::CSPvpResultResp* release_pvpresult_resp();
  inline void set_allocated_pvpresult_resp(::fgame::CSPvpResultResp* pvpresult_resp);

  // optional .fgame.CSPvpSelfRankListResp PvpSelfRankList_Resp = 105;
  inline bool has_pvpselfranklist_resp() const;
  inline void clear_pvpselfranklist_resp();
  static const int kPvpSelfRankListRespFieldNumber = 105;
  inline const ::fgame::CSPvpSelfRankListResp& pvpselfranklist_resp() const;
  inline ::fgame::CSPvpSelfRankListResp* mutable_pvpselfranklist_resp();
  inline ::fgame::CSPvpSelfRankListResp* release_pvpselfranklist_resp();
  inline void set_allocated_pvpselfranklist_resp(::fgame::CSPvpSelfRankListResp* pvpselfranklist_resp);

  // optional .fgame.CSGWGetMatchInfoResp GWGetMatchInfo_Resp = 106;
  inline bool has_gwgetmatchinfo_resp() const;
  inline void clear_gwgetmatchinfo_resp();
  static const int kGWGetMatchInfoRespFieldNumber = 106;
  inline const ::fgame::CSGWGetMatchInfoResp& gwgetmatchinfo_resp() const;
  inline ::fgame::CSGWGetMatchInfoResp* mutable_gwgetmatchinfo_resp();
  inline ::fgame::CSGWGetMatchInfoResp* release_gwgetmatchinfo_resp();
  inline void set_allocated_gwgetmatchinfo_resp(::fgame::CSGWGetMatchInfoResp* gwgetmatchinfo_resp);

  // optional .fgame.CSGWGetRankResp GWGetRank_Resp = 107;
  inline bool has_gwgetrank_resp() const;
  inline void clear_gwgetrank_resp();
  static const int kGWGetRankRespFieldNumber = 107;
  inline const ::fgame::CSGWGetRankResp& gwgetrank_resp() const;
  inline ::fgame::CSGWGetRankResp* mutable_gwgetrank_resp();
  inline ::fgame::CSGWGetRankResp* release_gwgetrank_resp();
  inline void set_allocated_gwgetrank_resp(::fgame::CSGWGetRankResp* gwgetrank_resp);

  // optional .fgame.CSGWMatchResp GWMatch_Resp = 108;
  inline bool has_gwmatch_resp() const;
  inline void clear_gwmatch_resp();
  static const int kGWMatchRespFieldNumber = 108;
  inline const ::fgame::CSGWMatchResp& gwmatch_resp() const;
  inline ::fgame::CSGWMatchResp* mutable_gwmatch_resp();
  inline ::fgame::CSGWMatchResp* release_gwmatch_resp();
  inline void set_allocated_gwmatch_resp(::fgame::CSGWMatchResp* gwmatch_resp);

  // optional .fgame.CSGWMatchStopResp GWMatchStop_Resp = 109;
  inline bool has_gwmatchstop_resp() const;
  inline void clear_gwmatchstop_resp();
  static const int kGWMatchStopRespFieldNumber = 109;
  inline const ::fgame::CSGWMatchStopResp& gwmatchstop_resp() const;
  inline ::fgame::CSGWMatchStopResp* mutable_gwmatchstop_resp();
  inline ::fgame::CSGWMatchStopResp* release_gwmatchstop_resp();
  inline void set_allocated_gwmatchstop_resp(::fgame::CSGWMatchStopResp* gwmatchstop_resp);

  // optional .fgame.CSGWBuyEnergyResp GWBuyEnergy_Resp = 110;
  inline bool has_gwbuyenergy_resp() const;
  inline void clear_gwbuyenergy_resp();
  static const int kGWBuyEnergyRespFieldNumber = 110;
  inline const ::fgame::CSGWBuyEnergyResp& gwbuyenergy_resp() const;
  inline ::fgame::CSGWBuyEnergyResp* mutable_gwbuyenergy_resp();
  inline ::fgame::CSGWBuyEnergyResp* release_gwbuyenergy_resp();
  inline void set_allocated_gwbuyenergy_resp(::fgame::CSGWBuyEnergyResp* gwbuyenergy_resp);

  // optional .fgame.CSRequestPKeyResp RequestPKey_Resp = 114;
  inline bool has_requestpkey_resp() const;
  inline void clear_requestpkey_resp();
  static const int kRequestPKeyRespFieldNumber = 114;
  inline const ::fgame::CSRequestPKeyResp& requestpkey_resp() const;
  inline ::fgame::CSRequestPKeyResp* mutable_requestpkey_resp();
  inline ::fgame::CSRequestPKeyResp* release_requestpkey_resp();
  inline void set_allocated_requestpkey_resp(::fgame::CSRequestPKeyResp* requestpkey_resp);

  // optional .fgame.CSSendClientKeyResp SendClientKey_Resp = 115;
  inline bool has_sendclientkey_resp() const;
  inline void clear_sendclientkey_resp();
  static const int kSendClientKeyRespFieldNumber = 115;
  inline const ::fgame::CSSendClientKeyResp& sendclientkey_resp() const;
  inline ::fgame::CSSendClientKeyResp* mutable_sendclientkey_resp();
  inline ::fgame::CSSendClientKeyResp* release_sendclientkey_resp();
  inline void set_allocated_sendclientkey_resp(::fgame::CSSendClientKeyResp* sendclientkey_resp);

  // optional .fgame.CSUpdateExchangeListResp UpdateExchangeList_Resp = 116;
  inline bool has_updateexchangelist_resp() const;
  inline void clear_updateexchangelist_resp();
  static const int kUpdateExchangeListRespFieldNumber = 116;
  inline const ::fgame::CSUpdateExchangeListResp& updateexchangelist_resp() const;
  inline ::fgame::CSUpdateExchangeListResp* mutable_updateexchangelist_resp();
  inline ::fgame::CSUpdateExchangeListResp* release_updateexchangelist_resp();
  inline void set_allocated_updateexchangelist_resp(::fgame::CSUpdateExchangeListResp* updateexchangelist_resp);

  // optional .fgame.CSGlyphsRequestInfoResp GlyphsRequestInfo_Resp = 120;
  inline bool has_glyphsrequestinfo_resp() const;
  inline void clear_glyphsrequestinfo_resp();
  static const int kGlyphsRequestInfoRespFieldNumber = 120;
  inline const ::fgame::CSGlyphsRequestInfoResp& glyphsrequestinfo_resp() const;
  inline ::fgame::CSGlyphsRequestInfoResp* mutable_glyphsrequestinfo_resp();
  inline ::fgame::CSGlyphsRequestInfoResp* release_glyphsrequestinfo_resp();
  inline void set_allocated_glyphsrequestinfo_resp(::fgame::CSGlyphsRequestInfoResp* glyphsrequestinfo_resp);

  // optional .fgame.CSGlyphsRequestBasicInfoResp GlyphsRequestBasicInfo_Resp = 121;
  inline bool has_glyphsrequestbasicinfo_resp() const;
  inline void clear_glyphsrequestbasicinfo_resp();
  static const int kGlyphsRequestBasicInfoRespFieldNumber = 121;
  inline const ::fgame::CSGlyphsRequestBasicInfoResp& glyphsrequestbasicinfo_resp() const;
  inline ::fgame::CSGlyphsRequestBasicInfoResp* mutable_glyphsrequestbasicinfo_resp();
  inline ::fgame::CSGlyphsRequestBasicInfoResp* release_glyphsrequestbasicinfo_resp();
  inline void set_allocated_glyphsrequestbasicinfo_resp(::fgame::CSGlyphsRequestBasicInfoResp* glyphsrequestbasicinfo_resp);

  // optional .fgame.CSGlyphsActiveResp GlyphsActive_Resp = 122;
  inline bool has_glyphsactive_resp() const;
  inline void clear_glyphsactive_resp();
  static const int kGlyphsActiveRespFieldNumber = 122;
  inline const ::fgame::CSGlyphsActiveResp& glyphsactive_resp() const;
  inline ::fgame::CSGlyphsActiveResp* mutable_glyphsactive_resp();
  inline ::fgame::CSGlyphsActiveResp* release_glyphsactive_resp();
  inline void set_allocated_glyphsactive_resp(::fgame::CSGlyphsActiveResp* glyphsactive_resp);

  // optional .fgame.CSGlyphsUpgradeResp GlyphsUpgrade_Resp = 123;
  inline bool has_glyphsupgrade_resp() const;
  inline void clear_glyphsupgrade_resp();
  static const int kGlyphsUpgradeRespFieldNumber = 123;
  inline const ::fgame::CSGlyphsUpgradeResp& glyphsupgrade_resp() const;
  inline ::fgame::CSGlyphsUpgradeResp* mutable_glyphsupgrade_resp();
  inline ::fgame::CSGlyphsUpgradeResp* release_glyphsupgrade_resp();
  inline void set_allocated_glyphsupgrade_resp(::fgame::CSGlyphsUpgradeResp* glyphsupgrade_resp);

  // optional .fgame.CSGlyphsPvpInfoResp GlyphsPvpInfo_Resp = 124;
  inline bool has_glyphspvpinfo_resp() const;
  inline void clear_glyphspvpinfo_resp();
  static const int kGlyphsPvpInfoRespFieldNumber = 124;
  inline const ::fgame::CSGlyphsPvpInfoResp& glyphspvpinfo_resp() const;
  inline ::fgame::CSGlyphsPvpInfoResp* mutable_glyphspvpinfo_resp();
  inline ::fgame::CSGlyphsPvpInfoResp* release_glyphspvpinfo_resp();
  inline void set_allocated_glyphspvpinfo_resp(::fgame::CSGlyphsPvpInfoResp* glyphspvpinfo_resp);

  // optional .fgame.CSBuyVipResp BuyVip_Resp = 125;
  inline bool has_buyvip_resp() const;
  inline void clear_buyvip_resp();
  static const int kBuyVipRespFieldNumber = 125;
  inline const ::fgame::CSBuyVipResp& buyvip_resp() const;
  inline ::fgame::CSBuyVipResp* mutable_buyvip_resp();
  inline ::fgame::CSBuyVipResp* release_buyvip_resp();
  inline void set_allocated_buyvip_resp(::fgame::CSBuyVipResp* buyvip_resp);

  // optional .fgame.CSGlyphGuideResp GlyphGuide_Resp = 126;
  inline bool has_glyphguide_resp() const;
  inline void clear_glyphguide_resp();
  static const int kGlyphGuideRespFieldNumber = 126;
  inline const ::fgame::CSGlyphGuideResp& glyphguide_resp() const;
  inline ::fgame::CSGlyphGuideResp* mutable_glyphguide_resp();
  inline ::fgame::CSGlyphGuideResp* release_glyphguide_resp();
  inline void set_allocated_glyphguide_resp(::fgame::CSGlyphGuideResp* glyphguide_resp);

  // optional .fgame.CSNewYearGetInfoResp NewYearGetInfo_Resp = 127;
  inline bool has_newyeargetinfo_resp() const;
  inline void clear_newyeargetinfo_resp();
  static const int kNewYearGetInfoRespFieldNumber = 127;
  inline const ::fgame::CSNewYearGetInfoResp& newyeargetinfo_resp() const;
  inline ::fgame::CSNewYearGetInfoResp* mutable_newyeargetinfo_resp();
  inline ::fgame::CSNewYearGetInfoResp* release_newyeargetinfo_resp();
  inline void set_allocated_newyeargetinfo_resp(::fgame::CSNewYearGetInfoResp* newyeargetinfo_resp);

  // optional .fgame.CSNewYearRewardResp NewYearReward_Resp = 128;
  inline bool has_newyearreward_resp() const;
  inline void clear_newyearreward_resp();
  static const int kNewYearRewardRespFieldNumber = 128;
  inline const ::fgame::CSNewYearRewardResp& newyearreward_resp() const;
  inline ::fgame::CSNewYearRewardResp* mutable_newyearreward_resp();
  inline ::fgame::CSNewYearRewardResp* release_newyearreward_resp();
  inline void set_allocated_newyearreward_resp(::fgame::CSNewYearRewardResp* newyearreward_resp);

  // optional .fgame.CSOpenChestResp OpenChest_Resp = 129;
  inline bool has_openchest_resp() const;
  inline void clear_openchest_resp();
  static const int kOpenChestRespFieldNumber = 129;
  inline const ::fgame::CSOpenChestResp& openchest_resp() const;
  inline ::fgame::CSOpenChestResp* mutable_openchest_resp();
  inline ::fgame::CSOpenChestResp* release_openchest_resp();
  inline void set_allocated_openchest_resp(::fgame::CSOpenChestResp* openchest_resp);

  // optional .fgame.CSChristmasDecorateResp ChristmasDecorate_Resp = 130;
  inline bool has_christmasdecorate_resp() const;
  inline void clear_christmasdecorate_resp();
  static const int kChristmasDecorateRespFieldNumber = 130;
  inline const ::fgame::CSChristmasDecorateResp& christmasdecorate_resp() const;
  inline ::fgame::CSChristmasDecorateResp* mutable_christmasdecorate_resp();
  inline ::fgame::CSChristmasDecorateResp* release_christmasdecorate_resp();
  inline void set_allocated_christmasdecorate_resp(::fgame::CSChristmasDecorateResp* christmasdecorate_resp);

  // optional .fgame.CSChristmasTakeBonusResp ChristmasTakeBonus_Resp = 131;
  inline bool has_christmastakebonus_resp() const;
  inline void clear_christmastakebonus_resp();
  static const int kChristmasTakeBonusRespFieldNumber = 131;
  inline const ::fgame::CSChristmasTakeBonusResp& christmastakebonus_resp() const;
  inline ::fgame::CSChristmasTakeBonusResp* mutable_christmastakebonus_resp();
  inline ::fgame::CSChristmasTakeBonusResp* release_christmastakebonus_resp();
  inline void set_allocated_christmastakebonus_resp(::fgame::CSChristmasTakeBonusResp* christmastakebonus_resp);

  // optional .fgame.CSChristmasGetDataResp ChristmasGetDate_Resp = 132;
  inline bool has_christmasgetdate_resp() const;
  inline void clear_christmasgetdate_resp();
  static const int kChristmasGetDateRespFieldNumber = 132;
  inline const ::fgame::CSChristmasGetDataResp& christmasgetdate_resp() const;
  inline ::fgame::CSChristmasGetDataResp* mutable_christmasgetdate_resp();
  inline ::fgame::CSChristmasGetDataResp* release_christmasgetdate_resp();
  inline void set_allocated_christmasgetdate_resp(::fgame::CSChristmasGetDataResp* christmasgetdate_resp);

  // optional .fgame.CSChristmasGetRankResp ChristmasGetRank_Resp = 133;
  inline bool has_christmasgetrank_resp() const;
  inline void clear_christmasgetrank_resp();
  static const int kChristmasGetRankRespFieldNumber = 133;
  inline const ::fgame::CSChristmasGetRankResp& christmasgetrank_resp() const;
  inline ::fgame::CSChristmasGetRankResp* mutable_christmasgetrank_resp();
  inline ::fgame::CSChristmasGetRankResp* release_christmasgetrank_resp();
  inline void set_allocated_christmasgetrank_resp(::fgame::CSChristmasGetRankResp* christmasgetrank_resp);

  // optional .fgame.CSRetriveCheckPtRewardResp RetriveCheckPtReward_Resp = 134;
  inline bool has_retrivecheckptreward_resp() const;
  inline void clear_retrivecheckptreward_resp();
  static const int kRetriveCheckPtRewardRespFieldNumber = 134;
  inline const ::fgame::CSRetriveCheckPtRewardResp& retrivecheckptreward_resp() const;
  inline ::fgame::CSRetriveCheckPtRewardResp* mutable_retrivecheckptreward_resp();
  inline ::fgame::CSRetriveCheckPtRewardResp* release_retrivecheckptreward_resp();
  inline void set_allocated_retrivecheckptreward_resp(::fgame::CSRetriveCheckPtRewardResp* retrivecheckptreward_resp);

  // optional .fgame.CSNewYearCmpResp NewYearCmp_Resp = 136;
  inline bool has_newyearcmp_resp() const;
  inline void clear_newyearcmp_resp();
  static const int kNewYearCmpRespFieldNumber = 136;
  inline const ::fgame::CSNewYearCmpResp& newyearcmp_resp() const;
  inline ::fgame::CSNewYearCmpResp* mutable_newyearcmp_resp();
  inline ::fgame::CSNewYearCmpResp* release_newyearcmp_resp();
  inline void set_allocated_newyearcmp_resp(::fgame::CSNewYearCmpResp* newyearcmp_resp);

  // optional .fgame.CSNotifyGlyphsUpdateResp NotifyGlyphsUpdate_Resp = 137;
  inline bool has_notifyglyphsupdate_resp() const;
  inline void clear_notifyglyphsupdate_resp();
  static const int kNotifyGlyphsUpdateRespFieldNumber = 137;
  inline const ::fgame::CSNotifyGlyphsUpdateResp& notifyglyphsupdate_resp() const;
  inline ::fgame::CSNotifyGlyphsUpdateResp* mutable_notifyglyphsupdate_resp();
  inline ::fgame::CSNotifyGlyphsUpdateResp* release_notifyglyphsupdate_resp();
  inline void set_allocated_notifyglyphsupdate_resp(::fgame::CSNotifyGlyphsUpdateResp* notifyglyphsupdate_resp);

  // optional .fgame.CSPvpRecoverItemResp RecoverItem_Resp = 138;
  inline bool has_recoveritem_resp() const;
  inline void clear_recoveritem_resp();
  static const int kRecoverItemRespFieldNumber = 138;
  inline const ::fgame::CSPvpRecoverItemResp& recoveritem_resp() const;
  inline ::fgame::CSPvpRecoverItemResp* mutable_recoveritem_resp();
  inline ::fgame::CSPvpRecoverItemResp* release_recoveritem_resp();
  inline void set_allocated_recoveritem_resp(::fgame::CSPvpRecoverItemResp* recoveritem_resp);

  // optional .fgame.CSSetSignatureResp SetSignature_Resp = 139;
  inline bool has_setsignature_resp() const;
  inline void clear_setsignature_resp();
  static const int kSetSignatureRespFieldNumber = 139;
  inline const ::fgame::CSSetSignatureResp& setsignature_resp() const;
  inline ::fgame::CSSetSignatureResp* mutable_setsignature_resp();
  inline ::fgame::CSSetSignatureResp* release_setsignature_resp();
  inline void set_allocated_setsignature_resp(::fgame::CSSetSignatureResp* setsignature_resp);

  // optional .fgame.CSSetExtraInfoVisibleResp SetExtraInfoVisible_Resp = 140;
  inline bool has_setextrainfovisible_resp() const;
  inline void clear_setextrainfovisible_resp();
  static const int kSetExtraInfoVisibleRespFieldNumber = 140;
  inline const ::fgame::CSSetExtraInfoVisibleResp& setextrainfovisible_resp() const;
  inline ::fgame::CSSetExtraInfoVisibleResp* mutable_setextrainfovisible_resp();
  inline ::fgame::CSSetExtraInfoVisibleResp* release_setextrainfovisible_resp();
  inline void set_allocated_setextrainfovisible_resp(::fgame::CSSetExtraInfoVisibleResp* setextrainfovisible_resp);

  // optional .fgame.CSGetExtraInfoResp GetExtraInfo_Resp = 141;
  inline bool has_getextrainfo_resp() const;
  inline void clear_getextrainfo_resp();
  static const int kGetExtraInfoRespFieldNumber = 141;
  inline const ::fgame::CSGetExtraInfoResp& getextrainfo_resp() const;
  inline ::fgame::CSGetExtraInfoResp* mutable_getextrainfo_resp();
  inline ::fgame::CSGetExtraInfoResp* release_getextrainfo_resp();
  inline void set_allocated_getextrainfo_resp(::fgame::CSGetExtraInfoResp* getextrainfo_resp);

  // optional .fgame.CSStopKickPlayerReq StopKickPlayer_Req = 142;
  inline bool has_stopkickplayer_req() const;
  inline void clear_stopkickplayer_req();
  static const int kStopKickPlayerReqFieldNumber = 142;
  inline const ::fgame::CSStopKickPlayerReq& stopkickplayer_req() const;
  inline ::fgame::CSStopKickPlayerReq* mutable_stopkickplayer_req();
  inline ::fgame::CSStopKickPlayerReq* release_stopkickplayer_req();
  inline void set_allocated_stopkickplayer_req(::fgame::CSStopKickPlayerReq* stopkickplayer_req);

  // optional .fgame.CSValentineDataResp ValentineData_Resp = 143;
  inline bool has_valentinedata_resp() const;
  inline void clear_valentinedata_resp();
  static const int kValentineDataRespFieldNumber = 143;
  inline const ::fgame::CSValentineDataResp& valentinedata_resp() const;
  inline ::fgame::CSValentineDataResp* mutable_valentinedata_resp();
  inline ::fgame::CSValentineDataResp* release_valentinedata_resp();
  inline void set_allocated_valentinedata_resp(::fgame::CSValentineDataResp* valentinedata_resp);

  // optional .fgame.CSValentineExchangeResp ValentineExchange_Resp = 144;
  inline bool has_valentineexchange_resp() const;
  inline void clear_valentineexchange_resp();
  static const int kValentineExchangeRespFieldNumber = 144;
  inline const ::fgame::CSValentineExchangeResp& valentineexchange_resp() const;
  inline ::fgame::CSValentineExchangeResp* mutable_valentineexchange_resp();
  inline ::fgame::CSValentineExchangeResp* release_valentineexchange_resp();
  inline void set_allocated_valentineexchange_resp(::fgame::CSValentineExchangeResp* valentineexchange_resp);

  // optional .fgame.CSRedPacketsGetInfoResp RedPacketsGetInfo_Resp = 145;
  inline bool has_redpacketsgetinfo_resp() const;
  inline void clear_redpacketsgetinfo_resp();
  static const int kRedPacketsGetInfoRespFieldNumber = 145;
  inline const ::fgame::CSRedPacketsGetInfoResp& redpacketsgetinfo_resp() const;
  inline ::fgame::CSRedPacketsGetInfoResp* mutable_redpacketsgetinfo_resp();
  inline ::fgame::CSRedPacketsGetInfoResp* release_redpacketsgetinfo_resp();
  inline void set_allocated_redpacketsgetinfo_resp(::fgame::CSRedPacketsGetInfoResp* redpacketsgetinfo_resp);

  // optional .fgame.CSRedPacketsGrebResp RedPacketsGreb_Resp = 146;
  inline bool has_redpacketsgreb_resp() const;
  inline void clear_redpacketsgreb_resp();
  static const int kRedPacketsGrebRespFieldNumber = 146;
  inline const ::fgame::CSRedPacketsGrebResp& redpacketsgreb_resp() const;
  inline ::fgame::CSRedPacketsGrebResp* mutable_redpacketsgreb_resp();
  inline ::fgame::CSRedPacketsGrebResp* release_redpacketsgreb_resp();
  inline void set_allocated_redpacketsgreb_resp(::fgame::CSRedPacketsGrebResp* redpacketsgreb_resp);

  // optional .fgame.CSRedPacketsOpenedResp RedPacketsOpened_Resp = 147;
  inline bool has_redpacketsopened_resp() const;
  inline void clear_redpacketsopened_resp();
  static const int kRedPacketsOpenedRespFieldNumber = 147;
  inline const ::fgame::CSRedPacketsOpenedResp& redpacketsopened_resp() const;
  inline ::fgame::CSRedPacketsOpenedResp* mutable_redpacketsopened_resp();
  inline ::fgame::CSRedPacketsOpenedResp* release_redpacketsopened_resp();
  inline void set_allocated_redpacketsopened_resp(::fgame::CSRedPacketsOpenedResp* redpacketsopened_resp);

  // optional .fgame.CSChapterUnlockResp ChapterUnlock_Resp = 148;
  inline bool has_chapterunlock_resp() const;
  inline void clear_chapterunlock_resp();
  static const int kChapterUnlockRespFieldNumber = 148;
  inline const ::fgame::CSChapterUnlockResp& chapterunlock_resp() const;
  inline ::fgame::CSChapterUnlockResp* mutable_chapterunlock_resp();
  inline ::fgame::CSChapterUnlockResp* release_chapterunlock_resp();
  inline void set_allocated_chapterunlock_resp(::fgame::CSChapterUnlockResp* chapterunlock_resp);

  // optional .fgame.CSGetChestResp GetChest_Resp = 149;
  inline bool has_getchest_resp() const;
  inline void clear_getchest_resp();
  static const int kGetChestRespFieldNumber = 149;
  inline const ::fgame::CSGetChestResp& getchest_resp() const;
  inline ::fgame::CSGetChestResp* mutable_getchest_resp();
  inline ::fgame::CSGetChestResp* release_getchest_resp();
  inline void set_allocated_getchest_resp(::fgame::CSGetChestResp* getchest_resp);

  // optional .fgame.CSPveNotifyResp PveNotify_Resp = 150;
  inline bool has_pvenotify_resp() const;
  inline void clear_pvenotify_resp();
  static const int kPveNotifyRespFieldNumber = 150;
  inline const ::fgame::CSPveNotifyResp& pvenotify_resp() const;
  inline ::fgame::CSPveNotifyResp* mutable_pvenotify_resp();
  inline ::fgame::CSPveNotifyResp* release_pvenotify_resp();
  inline void set_allocated_pvenotify_resp(::fgame::CSPveNotifyResp* pvenotify_resp);

  // optional .fgame.CSPvpGetAwardResp PvpGetAward_Resp = 151;
  inline bool has_pvpgetaward_resp() const;
  inline void clear_pvpgetaward_resp();
  static const int kPvpGetAwardRespFieldNumber = 151;
  inline const ::fgame::CSPvpGetAwardResp& pvpgetaward_resp() const;
  inline ::fgame::CSPvpGetAwardResp* mutable_pvpgetaward_resp();
  inline ::fgame::CSPvpGetAwardResp* release_pvpgetaward_resp();
  inline void set_allocated_pvpgetaward_resp(::fgame::CSPvpGetAwardResp* pvpgetaward_resp);

  // optional .fgame.CSDailyTaskStatusResp DailyTaskStatus_Resp = 152;
  inline bool has_dailytaskstatus_resp() const;
  inline void clear_dailytaskstatus_resp();
  static const int kDailyTaskStatusRespFieldNumber = 152;
  inline const ::fgame::CSDailyTaskStatusResp& dailytaskstatus_resp() const;
  inline ::fgame::CSDailyTaskStatusResp* mutable_dailytaskstatus_resp();
  inline ::fgame::CSDailyTaskStatusResp* release_dailytaskstatus_resp();
  inline void set_allocated_dailytaskstatus_resp(::fgame::CSDailyTaskStatusResp* dailytaskstatus_resp);

  // optional .fgame.CSRequestDailyTaskResp RequestDailyTask_Resp = 153;
  inline bool has_requestdailytask_resp() const;
  inline void clear_requestdailytask_resp();
  static const int kRequestDailyTaskRespFieldNumber = 153;
  inline const ::fgame::CSRequestDailyTaskResp& requestdailytask_resp() const;
  inline ::fgame::CSRequestDailyTaskResp* mutable_requestdailytask_resp();
  inline ::fgame::CSRequestDailyTaskResp* release_requestdailytask_resp();
  inline void set_allocated_requestdailytask_resp(::fgame::CSRequestDailyTaskResp* requestdailytask_resp);

  // optional .fgame.CSChangeDailyTaskResp ChangeDailyTask_Resp = 154;
  inline bool has_changedailytask_resp() const;
  inline void clear_changedailytask_resp();
  static const int kChangeDailyTaskRespFieldNumber = 154;
  inline const ::fgame::CSChangeDailyTaskResp& changedailytask_resp() const;
  inline ::fgame::CSChangeDailyTaskResp* mutable_changedailytask_resp();
  inline ::fgame::CSChangeDailyTaskResp* release_changedailytask_resp();
  inline void set_allocated_changedailytask_resp(::fgame::CSChangeDailyTaskResp* changedailytask_resp);

  // optional .fgame.CSOpenDailyTaskAwardResp OpenDailyTaskAward_Resp = 155;
  inline bool has_opendailytaskaward_resp() const;
  inline void clear_opendailytaskaward_resp();
  static const int kOpenDailyTaskAwardRespFieldNumber = 155;
  inline const ::fgame::CSOpenDailyTaskAwardResp& opendailytaskaward_resp() const;
  inline ::fgame::CSOpenDailyTaskAwardResp* mutable_opendailytaskaward_resp();
  inline ::fgame::CSOpenDailyTaskAwardResp* release_opendailytaskaward_resp();
  inline void set_allocated_opendailytaskaward_resp(::fgame::CSOpenDailyTaskAwardResp* opendailytaskaward_resp);

  // optional .fgame.CSUpdateDailyTaskProgressResp UpdateDailyTaskProgress_Resp = 156;
  inline bool has_updatedailytaskprogress_resp() const;
  inline void clear_updatedailytaskprogress_resp();
  static const int kUpdateDailyTaskProgressRespFieldNumber = 156;
  inline const ::fgame::CSUpdateDailyTaskProgressResp& updatedailytaskprogress_resp() const;
  inline ::fgame::CSUpdateDailyTaskProgressResp* mutable_updatedailytaskprogress_resp();
  inline ::fgame::CSUpdateDailyTaskProgressResp* release_updatedailytaskprogress_resp();
  inline void set_allocated_updatedailytaskprogress_resp(::fgame::CSUpdateDailyTaskProgressResp* updatedailytaskprogress_resp);

  // optional .fgame.CSNewDailyTaskResp NewDailyTask_Resp = 157;
  inline bool has_newdailytask_resp() const;
  inline void clear_newdailytask_resp();
  static const int kNewDailyTaskRespFieldNumber = 157;
  inline const ::fgame::CSNewDailyTaskResp& newdailytask_resp() const;
  inline ::fgame::CSNewDailyTaskResp* mutable_newdailytask_resp();
  inline ::fgame::CSNewDailyTaskResp* release_newdailytask_resp();
  inline void set_allocated_newdailytask_resp(::fgame::CSNewDailyTaskResp* newdailytask_resp);

  // optional .fgame.CSPveCheckAwardResp PveCheckAward_Resp = 159;
  inline bool has_pvecheckaward_resp() const;
  inline void clear_pvecheckaward_resp();
  static const int kPveCheckAwardRespFieldNumber = 159;
  inline const ::fgame::CSPveCheckAwardResp& pvecheckaward_resp() const;
  inline ::fgame::CSPveCheckAwardResp* mutable_pvecheckaward_resp();
  inline ::fgame::CSPveCheckAwardResp* release_pvecheckaward_resp();
  inline void set_allocated_pvecheckaward_resp(::fgame::CSPveCheckAwardResp* pvecheckaward_resp);

  // optional .fgame.CSRankWeekRewardInfoResp RankWeekRewardInfo_Resp = 160;
  inline bool has_rankweekrewardinfo_resp() const;
  inline void clear_rankweekrewardinfo_resp();
  static const int kRankWeekRewardInfoRespFieldNumber = 160;
  inline const ::fgame::CSRankWeekRewardInfoResp& rankweekrewardinfo_resp() const;
  inline ::fgame::CSRankWeekRewardInfoResp* mutable_rankweekrewardinfo_resp();
  inline ::fgame::CSRankWeekRewardInfoResp* release_rankweekrewardinfo_resp();
  inline void set_allocated_rankweekrewardinfo_resp(::fgame::CSRankWeekRewardInfoResp* rankweekrewardinfo_resp);

  // optional .fgame.CSRankWeekRewardRewardResp RankWeekRewardReward_Resp = 161;
  inline bool has_rankweekrewardreward_resp() const;
  inline void clear_rankweekrewardreward_resp();
  static const int kRankWeekRewardRewardRespFieldNumber = 161;
  inline const ::fgame::CSRankWeekRewardRewardResp& rankweekrewardreward_resp() const;
  inline ::fgame::CSRankWeekRewardRewardResp* mutable_rankweekrewardreward_resp();
  inline ::fgame::CSRankWeekRewardRewardResp* release_rankweekrewardreward_resp();
  inline void set_allocated_rankweekrewardreward_resp(::fgame::CSRankWeekRewardRewardResp* rankweekrewardreward_resp);

  // optional .fgame.CSShareRewardGetResq ShareReward_Resp = 162;
  inline bool has_sharereward_resp() const;
  inline void clear_sharereward_resp();
  static const int kShareRewardRespFieldNumber = 162;
  inline const ::fgame::CSShareRewardGetResq& sharereward_resp() const;
  inline ::fgame::CSShareRewardGetResq* mutable_sharereward_resp();
  inline ::fgame::CSShareRewardGetResq* release_sharereward_resp();
  inline void set_allocated_sharereward_resp(::fgame::CSShareRewardGetResq* sharereward_resp);

  // optional .fgame.CSGetSevenGoalListResp GetSevenGoalList_Resp = 163;
  inline bool has_getsevengoallist_resp() const;
  inline void clear_getsevengoallist_resp();
  static const int kGetSevenGoalListRespFieldNumber = 163;
  inline const ::fgame::CSGetSevenGoalListResp& getsevengoallist_resp() const;
  inline ::fgame::CSGetSevenGoalListResp* mutable_getsevengoallist_resp();
  inline ::fgame::CSGetSevenGoalListResp* release_getsevengoallist_resp();
  inline void set_allocated_getsevengoallist_resp(::fgame::CSGetSevenGoalListResp* getsevengoallist_resp);

  // optional .fgame.CSRetriveSevenGoalResp RetriveSevenGoal_Resp = 164;
  inline bool has_retrivesevengoal_resp() const;
  inline void clear_retrivesevengoal_resp();
  static const int kRetriveSevenGoalRespFieldNumber = 164;
  inline const ::fgame::CSRetriveSevenGoalResp& retrivesevengoal_resp() const;
  inline ::fgame::CSRetriveSevenGoalResp* mutable_retrivesevengoal_resp();
  inline ::fgame::CSRetriveSevenGoalResp* release_retrivesevengoal_resp();
  inline void set_allocated_retrivesevengoal_resp(::fgame::CSRetriveSevenGoalResp* retrivesevengoal_resp);

  // optional .fgame.CSNoticeSevenGoalResp NoticeSevenGoal_Resp = 165;
  inline bool has_noticesevengoal_resp() const;
  inline void clear_noticesevengoal_resp();
  static const int kNoticeSevenGoalRespFieldNumber = 165;
  inline const ::fgame::CSNoticeSevenGoalResp& noticesevengoal_resp() const;
  inline ::fgame::CSNoticeSevenGoalResp* mutable_noticesevengoal_resp();
  inline ::fgame::CSNoticeSevenGoalResp* release_noticesevengoal_resp();
  inline void set_allocated_noticesevengoal_resp(::fgame::CSNoticeSevenGoalResp* noticesevengoal_resp);

  // optional .fgame.CSPveRankResp PveRank_Resp = 166;
  inline bool has_pverank_resp() const;
  inline void clear_pverank_resp();
  static const int kPveRankRespFieldNumber = 166;
  inline const ::fgame::CSPveRankResp& pverank_resp() const;
  inline ::fgame::CSPveRankResp* mutable_pverank_resp();
  inline ::fgame::CSPveRankResp* release_pverank_resp();
  inline void set_allocated_pverank_resp(::fgame::CSPveRankResp* pverank_resp);

  // optional .fgame.CSTopRankResp TopRank_Resp = 167;
  inline bool has_toprank_resp() const;
  inline void clear_toprank_resp();
  static const int kTopRankRespFieldNumber = 167;
  inline const ::fgame::CSTopRankResp& toprank_resp() const;
  inline ::fgame::CSTopRankResp* mutable_toprank_resp();
  inline ::fgame::CSTopRankResp* release_toprank_resp();
  inline void set_allocated_toprank_resp(::fgame::CSTopRankResp* toprank_resp);

  // optional .fgame.CSTopRankTimeResp TopRankTime_Resp = 168;
  inline bool has_topranktime_resp() const;
  inline void clear_topranktime_resp();
  static const int kTopRankTimeRespFieldNumber = 168;
  inline const ::fgame::CSTopRankTimeResp& topranktime_resp() const;
  inline ::fgame::CSTopRankTimeResp* mutable_topranktime_resp();
  inline ::fgame::CSTopRankTimeResp* release_topranktime_resp();
  inline void set_allocated_topranktime_resp(::fgame::CSTopRankTimeResp* topranktime_resp);

  // optional .fgame.CSUpdateTaskStatusResp UpdateTaskStatus_Resp = 201;
  inline bool has_updatetaskstatus_resp() const;
  inline void clear_updatetaskstatus_resp();
  static const int kUpdateTaskStatusRespFieldNumber = 201;
  inline const ::fgame::CSUpdateTaskStatusResp& updatetaskstatus_resp() const;
  inline ::fgame::CSUpdateTaskStatusResp* mutable_updatetaskstatus_resp();
  inline ::fgame::CSUpdateTaskStatusResp* release_updatetaskstatus_resp();
  inline void set_allocated_updatetaskstatus_resp(::fgame::CSUpdateTaskStatusResp* updatetaskstatus_resp);

  // optional .fgame.CSAsSyncInfoResp AsSyncInfo_Resp = 202;
  inline bool has_assyncinfo_resp() const;
  inline void clear_assyncinfo_resp();
  static const int kAsSyncInfoRespFieldNumber = 202;
  inline const ::fgame::CSAsSyncInfoResp& assyncinfo_resp() const;
  inline ::fgame::CSAsSyncInfoResp* mutable_assyncinfo_resp();
  inline ::fgame::CSAsSyncInfoResp* release_assyncinfo_resp();
  inline void set_allocated_assyncinfo_resp(::fgame::CSAsSyncInfoResp* assyncinfo_resp);

  // optional .fgame.CSAsNewAddResp AsNewAdd_Resp = 203;
  inline bool has_asnewadd_resp() const;
  inline void clear_asnewadd_resp();
  static const int kAsNewAddRespFieldNumber = 203;
  inline const ::fgame::CSAsNewAddResp& asnewadd_resp() const;
  inline ::fgame::CSAsNewAddResp* mutable_asnewadd_resp();
  inline ::fgame::CSAsNewAddResp* release_asnewadd_resp();
  inline void set_allocated_asnewadd_resp(::fgame::CSAsNewAddResp* asnewadd_resp);

  // optional .fgame.CSAsOperateResp AsOperate_Resp = 204;
  inline bool has_asoperate_resp() const;
  inline void clear_asoperate_resp();
  static const int kAsOperateRespFieldNumber = 204;
  inline const ::fgame::CSAsOperateResp& asoperate_resp() const;
  inline ::fgame::CSAsOperateResp* mutable_asoperate_resp();
  inline ::fgame::CSAsOperateResp* release_asoperate_resp();
  inline void set_allocated_asoperate_resp(::fgame::CSAsOperateResp* asoperate_resp);

  // optional .fgame.CSAsUseCardResp AsUseCard_Resp = 205;
  inline bool has_asusecard_resp() const;
  inline void clear_asusecard_resp();
  static const int kAsUseCardRespFieldNumber = 205;
  inline const ::fgame::CSAsUseCardResp& asusecard_resp() const;
  inline ::fgame::CSAsUseCardResp* mutable_asusecard_resp();
  inline ::fgame::CSAsUseCardResp* release_asusecard_resp();
  inline void set_allocated_asusecard_resp(::fgame::CSAsUseCardResp* asusecard_resp);

  // optional .fgame.CSPvpUseSkillResp PvpUseSkill_Resp = 206;
  inline bool has_pvpuseskill_resp() const;
  inline void clear_pvpuseskill_resp();
  static const int kPvpUseSkillRespFieldNumber = 206;
  inline const ::fgame::CSPvpUseSkillResp& pvpuseskill_resp() const;
  inline ::fgame::CSPvpUseSkillResp* mutable_pvpuseskill_resp();
  inline ::fgame::CSPvpUseSkillResp* release_pvpuseskill_resp();
  inline void set_allocated_pvpuseskill_resp(::fgame::CSPvpUseSkillResp* pvpuseskill_resp);

  // optional .fgame.CSPvpAssistantInfoResp PvpAssistantInfo_Resp = 207;
  inline bool has_pvpassistantinfo_resp() const;
  inline void clear_pvpassistantinfo_resp();
  static const int kPvpAssistantInfoRespFieldNumber = 207;
  inline const ::fgame::CSPvpAssistantInfoResp& pvpassistantinfo_resp() const;
  inline ::fgame::CSPvpAssistantInfoResp* mutable_pvpassistantinfo_resp();
  inline ::fgame::CSPvpAssistantInfoResp* release_pvpassistantinfo_resp();
  inline void set_allocated_pvpassistantinfo_resp(::fgame::CSPvpAssistantInfoResp* pvpassistantinfo_resp);

  // optional .fgame.CSInstituteInfoResp InstituteInfo_Resp = 208;
  inline bool has_instituteinfo_resp() const;
  inline void clear_instituteinfo_resp();
  static const int kInstituteInfoRespFieldNumber = 208;
  inline const ::fgame::CSInstituteInfoResp& instituteinfo_resp() const;
  inline ::fgame::CSInstituteInfoResp* mutable_instituteinfo_resp();
  inline ::fgame::CSInstituteInfoResp* release_instituteinfo_resp();
  inline void set_allocated_instituteinfo_resp(::fgame::CSInstituteInfoResp* instituteinfo_resp);

  // optional .fgame.CSInstituteBuyResp InstituteBuy_Resp = 209;
  inline bool has_institutebuy_resp() const;
  inline void clear_institutebuy_resp();
  static const int kInstituteBuyRespFieldNumber = 209;
  inline const ::fgame::CSInstituteBuyResp& institutebuy_resp() const;
  inline ::fgame::CSInstituteBuyResp* mutable_institutebuy_resp();
  inline ::fgame::CSInstituteBuyResp* release_institutebuy_resp();
  inline void set_allocated_institutebuy_resp(::fgame::CSInstituteBuyResp* institutebuy_resp);

  // optional .fgame.CSOpActAddResp OpActAdd_Resp = 300;
  inline bool has_opactadd_resp() const;
  inline void clear_opactadd_resp();
  static const int kOpActAddRespFieldNumber = 300;
  inline const ::fgame::CSOpActAddResp& opactadd_resp() const;
  inline ::fgame::CSOpActAddResp* mutable_opactadd_resp();
  inline ::fgame::CSOpActAddResp* release_opactadd_resp();
  inline void set_allocated_opactadd_resp(::fgame::CSOpActAddResp* opactadd_resp);

  // optional .fgame.CSOpActStateChangedResp OpActStateChanged_Resp = 301;
  inline bool has_opactstatechanged_resp() const;
  inline void clear_opactstatechanged_resp();
  static const int kOpActStateChangedRespFieldNumber = 301;
  inline const ::fgame::CSOpActStateChangedResp& opactstatechanged_resp() const;
  inline ::fgame::CSOpActStateChangedResp* mutable_opactstatechanged_resp();
  inline ::fgame::CSOpActStateChangedResp* release_opactstatechanged_resp();
  inline void set_allocated_opactstatechanged_resp(::fgame::CSOpActStateChangedResp* opactstatechanged_resp);

  // optional .fgame.CSActSelfDataChangedResp OpActSelfDataChanged_Resp = 302;
  inline bool has_opactselfdatachanged_resp() const;
  inline void clear_opactselfdatachanged_resp();
  static const int kOpActSelfDataChangedRespFieldNumber = 302;
  inline const ::fgame::CSActSelfDataChangedResp& opactselfdatachanged_resp() const;
  inline ::fgame::CSActSelfDataChangedResp* mutable_opactselfdatachanged_resp();
  inline ::fgame::CSActSelfDataChangedResp* release_opactselfdatachanged_resp();
  inline void set_allocated_opactselfdatachanged_resp(::fgame::CSActSelfDataChangedResp* opactselfdatachanged_resp);

  // optional .fgame.CSActGlobalDataChangedResp OpActGlobalDataChanged_Resp = 303;
  inline bool has_opactglobaldatachanged_resp() const;
  inline void clear_opactglobaldatachanged_resp();
  static const int kOpActGlobalDataChangedRespFieldNumber = 303;
  inline const ::fgame::CSActGlobalDataChangedResp& opactglobaldatachanged_resp() const;
  inline ::fgame::CSActGlobalDataChangedResp* mutable_opactglobaldatachanged_resp();
  inline ::fgame::CSActGlobalDataChangedResp* release_opactglobaldatachanged_resp();
  inline void set_allocated_opactglobaldatachanged_resp(::fgame::CSActGlobalDataChangedResp* opactglobaldatachanged_resp);

  // optional .fgame.CSOpActConfigListResp OpActConfigList_Resp = 304;
  inline bool has_opactconfiglist_resp() const;
  inline void clear_opactconfiglist_resp();
  static const int kOpActConfigListRespFieldNumber = 304;
  inline const ::fgame::CSOpActConfigListResp& opactconfiglist_resp() const;
  inline ::fgame::CSOpActConfigListResp* mutable_opactconfiglist_resp();
  inline ::fgame::CSOpActConfigListResp* release_opactconfiglist_resp();
  inline void set_allocated_opactconfiglist_resp(::fgame::CSOpActConfigListResp* opactconfiglist_resp);

  // optional .fgame.CSOpActSelfDataListResp OpActSelfDataList_Resp = 305;
  inline bool has_opactselfdatalist_resp() const;
  inline void clear_opactselfdatalist_resp();
  static const int kOpActSelfDataListRespFieldNumber = 305;
  inline const ::fgame::CSOpActSelfDataListResp& opactselfdatalist_resp() const;
  inline ::fgame::CSOpActSelfDataListResp* mutable_opactselfdatalist_resp();
  inline ::fgame::CSOpActSelfDataListResp* release_opactselfdatalist_resp();
  inline void set_allocated_opactselfdatalist_resp(::fgame::CSOpActSelfDataListResp* opactselfdatalist_resp);

  // optional .fgame.CSOpActGlobalDataListResp OpActGlobalDataList_Resp = 306;
  inline bool has_opactglobaldatalist_resp() const;
  inline void clear_opactglobaldatalist_resp();
  static const int kOpActGlobalDataListRespFieldNumber = 306;
  inline const ::fgame::CSOpActGlobalDataListResp& opactglobaldatalist_resp() const;
  inline ::fgame::CSOpActGlobalDataListResp* mutable_opactglobaldatalist_resp();
  inline ::fgame::CSOpActGlobalDataListResp* release_opactglobaldatalist_resp();
  inline void set_allocated_opactglobaldatalist_resp(::fgame::CSOpActGlobalDataListResp* opactglobaldatalist_resp);

  // optional .fgame.CSOpActDemoTakeResp OpActDemoTake_Resp = 310;
  inline bool has_opactdemotake_resp() const;
  inline void clear_opactdemotake_resp();
  static const int kOpActDemoTakeRespFieldNumber = 310;
  inline const ::fgame::CSOpActDemoTakeResp& opactdemotake_resp() const;
  inline ::fgame::CSOpActDemoTakeResp* mutable_opactdemotake_resp();
  inline ::fgame::CSOpActDemoTakeResp* release_opactdemotake_resp();
  inline void set_allocated_opactdemotake_resp(::fgame::CSOpActDemoTakeResp* opactdemotake_resp);

  // @@protoc_insertion_point(class_scope:fgame.S2ClientMsg)
 private:
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_login_resp();
  inline void clear_has_login_resp();
  inline void set_has_reg_resp();
  inline void clear_has_reg_resp();
  inline void set_has_heartbeat_resp();
  inline void clear_has_heartbeat_resp();
  inline void set_has_match_resp();
  inline void clear_has_match_resp();
  inline void set_has_start_resp();
  inline void clear_has_start_resp();
  inline void set_has_fight_resp();
  inline void clear_has_fight_resp();
  inline void set_has_end_resp();
  inline void clear_has_end_resp();
  inline void set_has_map_resp();
  inline void clear_has_map_resp();
  inline void set_has_upgrade_resp();
  inline void clear_has_upgrade_resp();
  inline void set_has_ping_resp();
  inline void clear_has_ping_resp();
  inline void set_has_buyitem_resp();
  inline void clear_has_buyitem_resp();
  inline void set_has_useitem_resp();
  inline void clear_has_useitem_resp();
  inline void set_has_leave_resp();
  inline void clear_has_leave_resp();
  inline void set_has_getachievement_resp();
  inline void clear_has_getachievement_resp();
  inline void set_has_receiveachievement_resp();
  inline void clear_has_receiveachievement_resp();
  inline void set_has_receiveachievementreward_resp();
  inline void clear_has_receiveachievementreward_resp();
  inline void set_has_enterserver_resp();
  inline void clear_has_enterserver_resp();
  inline void set_has_canenter_req();
  inline void clear_has_canenter_req();
  inline void set_has_queue_req();
  inline void clear_has_queue_req();
  inline void set_has_directenter_resp();
  inline void clear_has_directenter_resp();
  inline void set_has_pvprankinggetlist_resp();
  inline void clear_has_pvprankinggetlist_resp();
  inline void set_has_streakwinvalue_resp();
  inline void clear_has_streakwinvalue_resp();
  inline void set_has_streakwinget_resp();
  inline void clear_has_streakwinget_resp();
  inline void set_has_openbigstage_resp();
  inline void clear_has_openbigstage_resp();
  inline void set_has_pvpuseitem_resp();
  inline void clear_has_pvpuseitem_resp();
  inline void set_has_sevendaysignlist_resp();
  inline void clear_has_sevendaysignlist_resp();
  inline void set_has_sevendaysign_resp();
  inline void clear_has_sevendaysign_resp();
  inline void set_has_getserver_resp();
  inline void clear_has_getserver_resp();
  inline void set_has_sycplayerinfo_resp();
  inline void clear_has_sycplayerinfo_resp();
  inline void set_has_notice_req();
  inline void clear_has_notice_req();
  inline void set_has_stopmatch_resp();
  inline void clear_has_stopmatch_resp();
  inline void set_has_changename_resp();
  inline void clear_has_changename_resp();
  inline void set_has_gmcmd_req();
  inline void clear_has_gmcmd_req();
  inline void set_has_xinshourecode_resp();
  inline void clear_has_xinshourecode_resp();
  inline void set_has_pvprankingplayerinfo_resp();
  inline void clear_has_pvprankingplayerinfo_resp();
  inline void set_has_getopenactivity_resp();
  inline void clear_has_getopenactivity_resp();
  inline void set_has_getactivitydata_resp();
  inline void clear_has_getactivitydata_resp();
  inline void set_has_receiveactivityreward_resp();
  inline void clear_has_receiveactivityreward_resp();
  inline void set_has_missionlist_resp();
  inline void clear_has_missionlist_resp();
  inline void set_has_missioncomplete_resp();
  inline void clear_has_missioncomplete_resp();
  inline void set_has_missionupdate_resp();
  inline void clear_has_missionupdate_resp();
  inline void set_has_getpowerenergyactivity_resp();
  inline void clear_has_getpowerenergyactivity_resp();
  inline void set_has_receivepowerenergy_resp();
  inline void clear_has_receivepowerenergy_resp();
  inline void set_has_getmail_resp();
  inline void clear_has_getmail_resp();
  inline void set_has_delmail_resp();
  inline void clear_has_delmail_resp();
  inline void set_has_noticemail_req();
  inline void clear_has_noticemail_req();
  inline void set_has_buynewbiegift_resp();
  inline void clear_has_buynewbiegift_resp();
  inline void set_has_rechargecallback_resp();
  inline void clear_has_rechargecallback_resp();
  inline void set_has_friendquery_resp();
  inline void clear_has_friendquery_resp();
  inline void set_has_friendrequestadd_resp();
  inline void clear_has_friendrequestadd_resp();
  inline void set_has_friendconfirmadd_resp();
  inline void clear_has_friendconfirmadd_resp();
  inline void set_has_friendgetinfo_resp();
  inline void clear_has_friendgetinfo_resp();
  inline void set_has_friendrequestremove_resp();
  inline void clear_has_friendrequestremove_resp();
  inline void set_has_friendaddblacklist_resp();
  inline void clear_has_friendaddblacklist_resp();
  inline void set_has_friendremoveblacklist_resp();
  inline void clear_has_friendremoveblacklist_resp();
  inline void set_has_pvpchat_resp();
  inline void clear_has_pvpchat_resp();
  inline void set_has_usegiftcode_resp();
  inline void clear_has_usegiftcode_resp();
  inline void set_has_queryplayerinfo_resp();
  inline void clear_has_queryplayerinfo_resp();
  inline void set_has_personalroomcreate_resp();
  inline void clear_has_personalroomcreate_resp();
  inline void set_has_personalroomenter_resp();
  inline void clear_has_personalroomenter_resp();
  inline void set_has_personalroomleave_resp();
  inline void clear_has_personalroomleave_resp();
  inline void set_has_personalroomkick_resp();
  inline void clear_has_personalroomkick_resp();
  inline void set_has_personalroominvite_resp();
  inline void clear_has_personalroominvite_resp();
  inline void set_has_personalroombroadcast_resp();
  inline void clear_has_personalroombroadcast_resp();
  inline void set_has_personalroomchat_resp();
  inline void clear_has_personalroomchat_resp();
  inline void set_has_personalroommode_resp();
  inline void clear_has_personalroommode_resp();
  inline void set_has_personalroombeginfight_resp();
  inline void clear_has_personalroombeginfight_resp();
  inline void set_has_personalroomapplyorrefuseinvite_resp();
  inline void clear_has_personalroomapplyorrefuseinvite_resp();
  inline void set_has_changeplayericon_resp();
  inline void clear_has_changeplayericon_resp();
  inline void set_has_personalroomcountdown_resp();
  inline void clear_has_personalroomcountdown_resp();
  inline void set_has_syncplayerdata_resp();
  inline void clear_has_syncplayerdata_resp();
  inline void set_has_getplayerdata_resp();
  inline void clear_has_getplayerdata_resp();
  inline void set_has_appearcreep_resp();
  inline void clear_has_appearcreep_resp();
  inline void set_has_savecheckptdata_resp();
  inline void clear_has_savecheckptdata_resp();
  inline void set_has_getcheckptdata_resp();
  inline void clear_has_getcheckptdata_resp();
  inline void set_has_setnewbie_resp();
  inline void clear_has_setnewbie_resp();
  inline void set_has_getnewbielist_resp();
  inline void clear_has_getnewbielist_resp();
  inline void set_has_propertyupdate_resp();
  inline void clear_has_propertyupdate_resp();
  inline void set_has_enterpoint_resp();
  inline void clear_has_enterpoint_resp();
  inline void set_has_shopguide_resp();
  inline void clear_has_shopguide_resp();
  inline void set_has_activitylist_resp();
  inline void clear_has_activitylist_resp();
  inline void set_has_activityupdate_resp();
  inline void clear_has_activityupdate_resp();
  inline void set_has_activitysubmit_resp();
  inline void clear_has_activitysubmit_resp();
  inline void set_has_settitle_resp();
  inline void clear_has_settitle_resp();
  inline void set_has_shopbuy_resp();
  inline void clear_has_shopbuy_resp();
  inline void set_has_kickplayer_req();
  inline void clear_has_kickplayer_req();
  inline void set_has_exchangeitem_resp();
  inline void clear_has_exchangeitem_resp();
  inline void set_has_activitycrazydtls_resp();
  inline void clear_has_activitycrazydtls_resp();
  inline void set_has_activitycrazyusage_resp();
  inline void clear_has_activitycrazyusage_resp();
  inline void set_has_activitycrazyusable_resp();
  inline void clear_has_activitycrazyusable_resp();
  inline void set_has_shoplist_resp();
  inline void clear_has_shoplist_resp();
  inline void set_has_pvpobserver_resp();
  inline void clear_has_pvpobserver_resp();
  inline void set_has_setnewbieoss_resp();
  inline void clear_has_setnewbieoss_resp();
  inline void set_has_updateachievement_resp();
  inline void clear_has_updateachievement_resp();
  inline void set_has_pvpresult_resp();
  inline void clear_has_pvpresult_resp();
  inline void set_has_pvpselfranklist_resp();
  inline void clear_has_pvpselfranklist_resp();
  inline void set_has_gwgetmatchinfo_resp();
  inline void clear_has_gwgetmatchinfo_resp();
  inline void set_has_gwgetrank_resp();
  inline void clear_has_gwgetrank_resp();
  inline void set_has_gwmatch_resp();
  inline void clear_has_gwmatch_resp();
  inline void set_has_gwmatchstop_resp();
  inline void clear_has_gwmatchstop_resp();
  inline void set_has_gwbuyenergy_resp();
  inline void clear_has_gwbuyenergy_resp();
  inline void set_has_requestpkey_resp();
  inline void clear_has_requestpkey_resp();
  inline void set_has_sendclientkey_resp();
  inline void clear_has_sendclientkey_resp();
  inline void set_has_updateexchangelist_resp();
  inline void clear_has_updateexchangelist_resp();
  inline void set_has_glyphsrequestinfo_resp();
  inline void clear_has_glyphsrequestinfo_resp();
  inline void set_has_glyphsrequestbasicinfo_resp();
  inline void clear_has_glyphsrequestbasicinfo_resp();
  inline void set_has_glyphsactive_resp();
  inline void clear_has_glyphsactive_resp();
  inline void set_has_glyphsupgrade_resp();
  inline void clear_has_glyphsupgrade_resp();
  inline void set_has_glyphspvpinfo_resp();
  inline void clear_has_glyphspvpinfo_resp();
  inline void set_has_buyvip_resp();
  inline void clear_has_buyvip_resp();
  inline void set_has_glyphguide_resp();
  inline void clear_has_glyphguide_resp();
  inline void set_has_newyeargetinfo_resp();
  inline void clear_has_newyeargetinfo_resp();
  inline void set_has_newyearreward_resp();
  inline void clear_has_newyearreward_resp();
  inline void set_has_openchest_resp();
  inline void clear_has_openchest_resp();
  inline void set_has_christmasdecorate_resp();
  inline void clear_has_christmasdecorate_resp();
  inline void set_has_christmastakebonus_resp();
  inline void clear_has_christmastakebonus_resp();
  inline void set_has_christmasgetdate_resp();
  inline void clear_has_christmasgetdate_resp();
  inline void set_has_christmasgetrank_resp();
  inline void clear_has_christmasgetrank_resp();
  inline void set_has_retrivecheckptreward_resp();
  inline void clear_has_retrivecheckptreward_resp();
  inline void set_has_newyearcmp_resp();
  inline void clear_has_newyearcmp_resp();
  inline void set_has_notifyglyphsupdate_resp();
  inline void clear_has_notifyglyphsupdate_resp();
  inline void set_has_recoveritem_resp();
  inline void clear_has_recoveritem_resp();
  inline void set_has_setsignature_resp();
  inline void clear_has_setsignature_resp();
  inline void set_has_setextrainfovisible_resp();
  inline void clear_has_setextrainfovisible_resp();
  inline void set_has_getextrainfo_resp();
  inline void clear_has_getextrainfo_resp();
  inline void set_has_stopkickplayer_req();
  inline void clear_has_stopkickplayer_req();
  inline void set_has_valentinedata_resp();
  inline void clear_has_valentinedata_resp();
  inline void set_has_valentineexchange_resp();
  inline void clear_has_valentineexchange_resp();
  inline void set_has_redpacketsgetinfo_resp();
  inline void clear_has_redpacketsgetinfo_resp();
  inline void set_has_redpacketsgreb_resp();
  inline void clear_has_redpacketsgreb_resp();
  inline void set_has_redpacketsopened_resp();
  inline void clear_has_redpacketsopened_resp();
  inline void set_has_chapterunlock_resp();
  inline void clear_has_chapterunlock_resp();
  inline void set_has_getchest_resp();
  inline void clear_has_getchest_resp();
  inline void set_has_pvenotify_resp();
  inline void clear_has_pvenotify_resp();
  inline void set_has_pvpgetaward_resp();
  inline void clear_has_pvpgetaward_resp();
  inline void set_has_dailytaskstatus_resp();
  inline void clear_has_dailytaskstatus_resp();
  inline void set_has_requestdailytask_resp();
  inline void clear_has_requestdailytask_resp();
  inline void set_has_changedailytask_resp();
  inline void clear_has_changedailytask_resp();
  inline void set_has_opendailytaskaward_resp();
  inline void clear_has_opendailytaskaward_resp();
  inline void set_has_updatedailytaskprogress_resp();
  inline void clear_has_updatedailytaskprogress_resp();
  inline void set_has_newdailytask_resp();
  inline void clear_has_newdailytask_resp();
  inline void set_has_pvecheckaward_resp();
  inline void clear_has_pvecheckaward_resp();
  inline void set_has_rankweekrewardinfo_resp();
  inline void clear_has_rankweekrewardinfo_resp();
  inline void set_has_rankweekrewardreward_resp();
  inline void clear_has_rankweekrewardreward_resp();
  inline void set_has_sharereward_resp();
  inline void clear_has_sharereward_resp();
  inline void set_has_getsevengoallist_resp();
  inline void clear_has_getsevengoallist_resp();
  inline void set_has_retrivesevengoal_resp();
  inline void clear_has_retrivesevengoal_resp();
  inline void set_has_noticesevengoal_resp();
  inline void clear_has_noticesevengoal_resp();
  inline void set_has_pverank_resp();
  inline void clear_has_pverank_resp();
  inline void set_has_toprank_resp();
  inline void clear_has_toprank_resp();
  inline void set_has_topranktime_resp();
  inline void clear_has_topranktime_resp();
  inline void set_has_updatetaskstatus_resp();
  inline void clear_has_updatetaskstatus_resp();
  inline void set_has_assyncinfo_resp();
  inline void clear_has_assyncinfo_resp();
  inline void set_has_asnewadd_resp();
  inline void clear_has_asnewadd_resp();
  inline void set_has_asoperate_resp();
  inline void clear_has_asoperate_resp();
  inline void set_has_asusecard_resp();
  inline void clear_has_asusecard_resp();
  inline void set_has_pvpuseskill_resp();
  inline void clear_has_pvpuseskill_resp();
  inline void set_has_pvpassistantinfo_resp();
  inline void clear_has_pvpassistantinfo_resp();
  inline void set_has_instituteinfo_resp();
  inline void clear_has_instituteinfo_resp();
  inline void set_has_institutebuy_resp();
  inline void clear_has_institutebuy_resp();
  inline void set_has_opactadd_resp();
  inline void clear_has_opactadd_resp();
  inline void set_has_opactstatechanged_resp();
  inline void clear_has_opactstatechanged_resp();
  inline void set_has_opactselfdatachanged_resp();
  inline void clear_has_opactselfdatachanged_resp();
  inline void set_has_opactglobaldatachanged_resp();
  inline void clear_has_opactglobaldatachanged_resp();
  inline void set_has_opactconfiglist_resp();
  inline void clear_has_opactconfiglist_resp();
  inline void set_has_opactselfdatalist_resp();
  inline void clear_has_opactselfdatalist_resp();
  inline void set_has_opactglobaldatalist_resp();
  inline void clear_has_opactglobaldatalist_resp();
  inline void set_has_opactdemotake_resp();
  inline void clear_has_opactdemotake_resp();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[6];
  ::fgame::CSErrorMsg* error_msg_;
  ::fgame::CSLoginResp* login_resp_;
  ::fgame::CSRegResp* reg_resp_;
  ::fgame::CSHeartBeatResp* heartbeat_resp_;
  ::fgame::CSPvpMatchResp* match_resp_;
  ::fgame::CSPvpStartResp* start_resp_;
  ::fgame::CSPvpFightResp* fight_resp_;
  ::fgame::CSPvpEndResp* end_resp_;
  ::fgame::CSPvpMapResp* map_resp_;
  ::fgame::CSPvpUpgradeResp* upgrade_resp_;
  ::fgame::CSPvpPingResp* ping_resp_;
  ::fgame::CSBuyItemResp* buyitem_resp_;
  ::fgame::CSUseItemResp* useitem_resp_;
  ::fgame::CSPvpLeaveResp* leave_resp_;
  ::fgame::CSGetAchievementResp* getachievement_resp_;
  ::fgame::CSReceiveAchievementResp* receiveachievement_resp_;
  ::fgame::CSReceiveAchievementRewardResp* receiveachievementreward_resp_;
  ::fgame::CSEnterServerResp* enterserver_resp_;
  ::fgame::CSCanEnterReq* canenter_req_;
  ::fgame::CSQueueReq* queue_req_;
  ::fgame::CSDircetEnterResp* directenter_resp_;
  ::fgame::CSPvpRankingGetListResp* pvprankinggetlist_resp_;
  ::fgame::CSStreakWinValueResp* streakwinvalue_resp_;
  ::fgame::CSStreakWinGetResp* streakwinget_resp_;
  ::fgame::CSOpenBigStageResp* openbigstage_resp_;
  ::fgame::CSPvpUseItemResp* pvpuseitem_resp_;
  ::fgame::CSSevenDaySignListResp* sevendaysignlist_resp_;
  ::fgame::CSSevenDaySignResp* sevendaysign_resp_;
  ::fgame::CSGetServerResp* getserver_resp_;
  ::fgame::CSSycPlayerInfoResp* sycplayerinfo_resp_;
  ::fgame::CSNoticeReq* notice_req_;
  ::fgame::CSPvpStopMatchResp* stopmatch_resp_;
  ::fgame::CSChangeNameResp* changename_resp_;
  ::fgame::CSGMCmdReq* gmcmd_req_;
  ::fgame::CSXinShouRecodeResp* xinshourecode_resp_;
  ::fgame::CSPvpRankingPlayerInfoResp* pvprankingplayerinfo_resp_;
  ::fgame::CSGetOpenActivityResp* getopenactivity_resp_;
  ::fgame::CSGetActivityDataResp* getactivitydata_resp_;
  ::fgame::CSReceiveActivityRewardResp* receiveactivityreward_resp_;
  ::fgame::CSMissionListResp* missionlist_resp_;
  ::fgame::CSMissionCompleteResp* missioncomplete_resp_;
  ::fgame::CSMissionUpdateResp* missionupdate_resp_;
  ::fgame::CSGetPowerEnergyActivityResp* getpowerenergyactivity_resp_;
  ::fgame::CSReceivePowerEnergyResp* receivepowerenergy_resp_;
  ::fgame::CSGetMailResp* getmail_resp_;
  ::fgame::CSDelMailResp* delmail_resp_;
  ::fgame::CSNoticeMailReq* noticemail_req_;
  ::fgame::CSBuyNewbieGiftResp* buynewbiegift_resp_;
  ::fgame::CSRechargeCallbackResp* rechargecallback_resp_;
  ::fgame::CSFriendQueryResp* friendquery_resp_;
  ::fgame::CSFriendRequestAddResp* friendrequestadd_resp_;
  ::fgame::CSFriendConfirmAddResp* friendconfirmadd_resp_;
  ::fgame::CSFriendGetInfoResp* friendgetinfo_resp_;
  ::fgame::CSFriendRequestRemoveResp* friendrequestremove_resp_;
  ::fgame::CSFriendAddBlackListResp* friendaddblacklist_resp_;
  ::fgame::CSFriendRemoveBlackListResp* friendremoveblacklist_resp_;
  ::fgame::CSPvpChatResp* pvpchat_resp_;
  ::fgame::CSUseGiftCodeResp* usegiftcode_resp_;
  ::fgame::CSQueryPlayerInfoResp* queryplayerinfo_resp_;
  ::fgame::CSPersonalRoomCreateResp* personalroomcreate_resp_;
  ::fgame::CSPersonalRoomEnterResp* personalroomenter_resp_;
  ::fgame::CSPersonalRoomLeaveResp* personalroomleave_resp_;
  ::fgame::CSPersonalRoomKickResp* personalroomkick_resp_;
  ::fgame::CSPersonalRoomInviteResp* personalroominvite_resp_;
  ::fgame::CSPersonalRoomBroadcastResp* personalroombroadcast_resp_;
  ::fgame::CSPersonalRoomChatResp* personalroomchat_resp_;
  ::fgame::CSPersonalRoomModeResp* personalroommode_resp_;
  ::fgame::CSPersonalRoomBeginFightResp* personalroombeginfight_resp_;
  ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* personalroomapplyorrefuseinvite_resp_;
  ::fgame::CSChangePlayerIconResp* changeplayericon_resp_;
  ::fgame::CSPersonalRoomCountDownResp* personalroomcountdown_resp_;
  ::fgame::CSSyncPlayerDataResp* syncplayerdata_resp_;
  ::fgame::CSGetPlayerDataResp* getplayerdata_resp_;
  ::fgame::CSPvpAppearCreepResp* appearcreep_resp_;
  ::fgame::CSSaveCheckPtDataResp* savecheckptdata_resp_;
  ::fgame::CSGetCheckPtDataResp* getcheckptdata_resp_;
  ::fgame::CSSetNewBieResp* setnewbie_resp_;
  ::fgame::CSGetNewBieListResp* getnewbielist_resp_;
  ::fgame::CSPropertyUpdateResp* propertyupdate_resp_;
  ::fgame::CSEnterPointResp* enterpoint_resp_;
  ::fgame::CSShopGuideResp* shopguide_resp_;
  ::fgame::CSActivityListResp* activitylist_resp_;
  ::fgame::CSActivityUpdateResp* activityupdate_resp_;
  ::fgame::CSActivitySubmitResp* activitysubmit_resp_;
  ::fgame::CSSetTitleResp* settitle_resp_;
  ::fgame::CSShopBuyResp* shopbuy_resp_;
  ::fgame::CSKickPlayerReq* kickplayer_req_;
  ::fgame::CSExchangeItemResp* exchangeitem_resp_;
  ::fgame::CSActivityCrazyDtlsResp* activitycrazydtls_resp_;
  ::fgame::CSActivityCrazyUsageResp* activitycrazyusage_resp_;
  ::fgame::CSActivityCrazyUsableResp* activitycrazyusable_resp_;
  ::fgame::CSShopListResp* shoplist_resp_;
  ::fgame::CSPvpObserverResp* pvpobserver_resp_;
  ::fgame::CSSetNewBieOssResp* setnewbieoss_resp_;
  ::fgame::CSUpdateAchievementResp* updateachievement_resp_;
  ::fgame::CSPvpResultResp* pvpresult_resp_;
  ::fgame::CSPvpSelfRankListResp* pvpselfranklist_resp_;
  ::fgame::CSGWGetMatchInfoResp* gwgetmatchinfo_resp_;
  ::fgame::CSGWGetRankResp* gwgetrank_resp_;
  ::fgame::CSGWMatchResp* gwmatch_resp_;
  ::fgame::CSGWMatchStopResp* gwmatchstop_resp_;
  ::fgame::CSGWBuyEnergyResp* gwbuyenergy_resp_;
  ::fgame::CSRequestPKeyResp* requestpkey_resp_;
  ::fgame::CSSendClientKeyResp* sendclientkey_resp_;
  ::fgame::CSUpdateExchangeListResp* updateexchangelist_resp_;
  ::fgame::CSGlyphsRequestInfoResp* glyphsrequestinfo_resp_;
  ::fgame::CSGlyphsRequestBasicInfoResp* glyphsrequestbasicinfo_resp_;
  ::fgame::CSGlyphsActiveResp* glyphsactive_resp_;
  ::fgame::CSGlyphsUpgradeResp* glyphsupgrade_resp_;
  ::fgame::CSGlyphsPvpInfoResp* glyphspvpinfo_resp_;
  ::fgame::CSBuyVipResp* buyvip_resp_;
  ::fgame::CSGlyphGuideResp* glyphguide_resp_;
  ::fgame::CSNewYearGetInfoResp* newyeargetinfo_resp_;
  ::fgame::CSNewYearRewardResp* newyearreward_resp_;
  ::fgame::CSOpenChestResp* openchest_resp_;
  ::fgame::CSChristmasDecorateResp* christmasdecorate_resp_;
  ::fgame::CSChristmasTakeBonusResp* christmastakebonus_resp_;
  ::fgame::CSChristmasGetDataResp* christmasgetdate_resp_;
  ::fgame::CSChristmasGetRankResp* christmasgetrank_resp_;
  ::fgame::CSRetriveCheckPtRewardResp* retrivecheckptreward_resp_;
  ::fgame::CSNewYearCmpResp* newyearcmp_resp_;
  ::fgame::CSNotifyGlyphsUpdateResp* notifyglyphsupdate_resp_;
  ::fgame::CSPvpRecoverItemResp* recoveritem_resp_;
  ::fgame::CSSetSignatureResp* setsignature_resp_;
  ::fgame::CSSetExtraInfoVisibleResp* setextrainfovisible_resp_;
  ::fgame::CSGetExtraInfoResp* getextrainfo_resp_;
  ::fgame::CSStopKickPlayerReq* stopkickplayer_req_;
  ::fgame::CSValentineDataResp* valentinedata_resp_;
  ::fgame::CSValentineExchangeResp* valentineexchange_resp_;
  ::fgame::CSRedPacketsGetInfoResp* redpacketsgetinfo_resp_;
  ::fgame::CSRedPacketsGrebResp* redpacketsgreb_resp_;
  ::fgame::CSRedPacketsOpenedResp* redpacketsopened_resp_;
  ::fgame::CSChapterUnlockResp* chapterunlock_resp_;
  ::fgame::CSGetChestResp* getchest_resp_;
  ::fgame::CSPveNotifyResp* pvenotify_resp_;
  ::fgame::CSPvpGetAwardResp* pvpgetaward_resp_;
  ::fgame::CSDailyTaskStatusResp* dailytaskstatus_resp_;
  ::fgame::CSRequestDailyTaskResp* requestdailytask_resp_;
  ::fgame::CSChangeDailyTaskResp* changedailytask_resp_;
  ::fgame::CSOpenDailyTaskAwardResp* opendailytaskaward_resp_;
  ::fgame::CSUpdateDailyTaskProgressResp* updatedailytaskprogress_resp_;
  ::fgame::CSNewDailyTaskResp* newdailytask_resp_;
  ::fgame::CSPveCheckAwardResp* pvecheckaward_resp_;
  ::fgame::CSRankWeekRewardInfoResp* rankweekrewardinfo_resp_;
  ::fgame::CSRankWeekRewardRewardResp* rankweekrewardreward_resp_;
  ::fgame::CSShareRewardGetResq* sharereward_resp_;
  ::fgame::CSGetSevenGoalListResp* getsevengoallist_resp_;
  ::fgame::CSRetriveSevenGoalResp* retrivesevengoal_resp_;
  ::fgame::CSNoticeSevenGoalResp* noticesevengoal_resp_;
  ::fgame::CSPveRankResp* pverank_resp_;
  ::fgame::CSTopRankResp* toprank_resp_;
  ::fgame::CSTopRankTimeResp* topranktime_resp_;
  ::fgame::CSUpdateTaskStatusResp* updatetaskstatus_resp_;
  ::fgame::CSAsSyncInfoResp* assyncinfo_resp_;
  ::fgame::CSAsNewAddResp* asnewadd_resp_;
  ::fgame::CSAsOperateResp* asoperate_resp_;
  ::fgame::CSAsUseCardResp* asusecard_resp_;
  ::fgame::CSPvpUseSkillResp* pvpuseskill_resp_;
  ::fgame::CSPvpAssistantInfoResp* pvpassistantinfo_resp_;
  ::fgame::CSInstituteInfoResp* instituteinfo_resp_;
  ::fgame::CSInstituteBuyResp* institutebuy_resp_;
  ::fgame::CSOpActAddResp* opactadd_resp_;
  ::fgame::CSOpActStateChangedResp* opactstatechanged_resp_;
  ::fgame::CSActSelfDataChangedResp* opactselfdatachanged_resp_;
  ::fgame::CSActGlobalDataChangedResp* opactglobaldatachanged_resp_;
  ::fgame::CSOpActConfigListResp* opactconfiglist_resp_;
  ::fgame::CSOpActSelfDataListResp* opactselfdatalist_resp_;
  ::fgame::CSOpActGlobalDataListResp* opactglobaldatalist_resp_;
  ::fgame::CSOpActDemoTakeResp* opactdemotake_resp_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ClientSvrMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ClientSvrMsg_2eproto();
  friend void protobuf_ShutdownFile_ClientSvrMsg_2eproto();

  void InitAsDefaultInstance();
  static S2ClientMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// Dummy

// optional .fgame.CS_CMD_ID dummy = 1;
inline bool Dummy::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dummy::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dummy::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dummy::clear_dummy() {
  dummy_ = 100;
  clear_has_dummy();
}
inline ::fgame::CS_CMD_ID Dummy::dummy() const {
  // @@protoc_insertion_point(field_get:fgame.Dummy.dummy)
  return static_cast< ::fgame::CS_CMD_ID >(dummy_);
}
inline void Dummy::set_dummy(::fgame::CS_CMD_ID value) {
  assert(::fgame::CS_CMD_ID_IsValid(value));
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:fgame.Dummy.dummy)
}

// -------------------------------------------------------------------

// C2ServerMsg

// optional .fgame.CSLoginReq Login_Req = 2;
inline bool C2ServerMsg::has_login_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2ServerMsg::set_has_login_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2ServerMsg::clear_has_login_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2ServerMsg::clear_login_req() {
  if (login_req_ != NULL) login_req_->::fgame::CSLoginReq::Clear();
  clear_has_login_req();
}
inline const ::fgame::CSLoginReq& C2ServerMsg::login_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Login_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return login_req_ != NULL ? *login_req_ : *default_instance().login_req_;
#else
  return login_req_ != NULL ? *login_req_ : *default_instance_->login_req_;
#endif
}
inline ::fgame::CSLoginReq* C2ServerMsg::mutable_login_req() {
  set_has_login_req();
  if (login_req_ == NULL) login_req_ = new ::fgame::CSLoginReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Login_Req)
  return login_req_;
}
inline ::fgame::CSLoginReq* C2ServerMsg::release_login_req() {
  clear_has_login_req();
  ::fgame::CSLoginReq* temp = login_req_;
  login_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_login_req(::fgame::CSLoginReq* login_req) {
  delete login_req_;
  login_req_ = login_req;
  if (login_req) {
    set_has_login_req();
  } else {
    clear_has_login_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Login_Req)
}

// optional .fgame.CSRegReq Reg_Req = 3;
inline bool C2ServerMsg::has_reg_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2ServerMsg::set_has_reg_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2ServerMsg::clear_has_reg_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2ServerMsg::clear_reg_req() {
  if (reg_req_ != NULL) reg_req_->::fgame::CSRegReq::Clear();
  clear_has_reg_req();
}
inline const ::fgame::CSRegReq& C2ServerMsg::reg_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Reg_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reg_req_ != NULL ? *reg_req_ : *default_instance().reg_req_;
#else
  return reg_req_ != NULL ? *reg_req_ : *default_instance_->reg_req_;
#endif
}
inline ::fgame::CSRegReq* C2ServerMsg::mutable_reg_req() {
  set_has_reg_req();
  if (reg_req_ == NULL) reg_req_ = new ::fgame::CSRegReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Reg_Req)
  return reg_req_;
}
inline ::fgame::CSRegReq* C2ServerMsg::release_reg_req() {
  clear_has_reg_req();
  ::fgame::CSRegReq* temp = reg_req_;
  reg_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_reg_req(::fgame::CSRegReq* reg_req) {
  delete reg_req_;
  reg_req_ = reg_req;
  if (reg_req) {
    set_has_reg_req();
  } else {
    clear_has_reg_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Reg_Req)
}

// optional .fgame.CSHeartBeatReq HeartBeat_Req = 4;
inline bool C2ServerMsg::has_heartbeat_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2ServerMsg::set_has_heartbeat_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2ServerMsg::clear_has_heartbeat_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2ServerMsg::clear_heartbeat_req() {
  if (heartbeat_req_ != NULL) heartbeat_req_->::fgame::CSHeartBeatReq::Clear();
  clear_has_heartbeat_req();
}
inline const ::fgame::CSHeartBeatReq& C2ServerMsg::heartbeat_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.HeartBeat_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return heartbeat_req_ != NULL ? *heartbeat_req_ : *default_instance().heartbeat_req_;
#else
  return heartbeat_req_ != NULL ? *heartbeat_req_ : *default_instance_->heartbeat_req_;
#endif
}
inline ::fgame::CSHeartBeatReq* C2ServerMsg::mutable_heartbeat_req() {
  set_has_heartbeat_req();
  if (heartbeat_req_ == NULL) heartbeat_req_ = new ::fgame::CSHeartBeatReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.HeartBeat_Req)
  return heartbeat_req_;
}
inline ::fgame::CSHeartBeatReq* C2ServerMsg::release_heartbeat_req() {
  clear_has_heartbeat_req();
  ::fgame::CSHeartBeatReq* temp = heartbeat_req_;
  heartbeat_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_heartbeat_req(::fgame::CSHeartBeatReq* heartbeat_req) {
  delete heartbeat_req_;
  heartbeat_req_ = heartbeat_req;
  if (heartbeat_req) {
    set_has_heartbeat_req();
  } else {
    clear_has_heartbeat_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.HeartBeat_Req)
}

// optional .fgame.CSPvpMatchReq Match_Req = 5;
inline bool C2ServerMsg::has_match_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2ServerMsg::set_has_match_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2ServerMsg::clear_has_match_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2ServerMsg::clear_match_req() {
  if (match_req_ != NULL) match_req_->::fgame::CSPvpMatchReq::Clear();
  clear_has_match_req();
}
inline const ::fgame::CSPvpMatchReq& C2ServerMsg::match_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Match_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return match_req_ != NULL ? *match_req_ : *default_instance().match_req_;
#else
  return match_req_ != NULL ? *match_req_ : *default_instance_->match_req_;
#endif
}
inline ::fgame::CSPvpMatchReq* C2ServerMsg::mutable_match_req() {
  set_has_match_req();
  if (match_req_ == NULL) match_req_ = new ::fgame::CSPvpMatchReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Match_Req)
  return match_req_;
}
inline ::fgame::CSPvpMatchReq* C2ServerMsg::release_match_req() {
  clear_has_match_req();
  ::fgame::CSPvpMatchReq* temp = match_req_;
  match_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_match_req(::fgame::CSPvpMatchReq* match_req) {
  delete match_req_;
  match_req_ = match_req;
  if (match_req) {
    set_has_match_req();
  } else {
    clear_has_match_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Match_Req)
}

// optional .fgame.CSPvpStartReq Start_Req = 6;
inline bool C2ServerMsg::has_start_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2ServerMsg::set_has_start_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2ServerMsg::clear_has_start_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2ServerMsg::clear_start_req() {
  if (start_req_ != NULL) start_req_->::fgame::CSPvpStartReq::Clear();
  clear_has_start_req();
}
inline const ::fgame::CSPvpStartReq& C2ServerMsg::start_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Start_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return start_req_ != NULL ? *start_req_ : *default_instance().start_req_;
#else
  return start_req_ != NULL ? *start_req_ : *default_instance_->start_req_;
#endif
}
inline ::fgame::CSPvpStartReq* C2ServerMsg::mutable_start_req() {
  set_has_start_req();
  if (start_req_ == NULL) start_req_ = new ::fgame::CSPvpStartReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Start_Req)
  return start_req_;
}
inline ::fgame::CSPvpStartReq* C2ServerMsg::release_start_req() {
  clear_has_start_req();
  ::fgame::CSPvpStartReq* temp = start_req_;
  start_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_start_req(::fgame::CSPvpStartReq* start_req) {
  delete start_req_;
  start_req_ = start_req;
  if (start_req) {
    set_has_start_req();
  } else {
    clear_has_start_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Start_Req)
}

// optional .fgame.CSPvpFightReq Fight_Req = 7;
inline bool C2ServerMsg::has_fight_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2ServerMsg::set_has_fight_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2ServerMsg::clear_has_fight_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2ServerMsg::clear_fight_req() {
  if (fight_req_ != NULL) fight_req_->::fgame::CSPvpFightReq::Clear();
  clear_has_fight_req();
}
inline const ::fgame::CSPvpFightReq& C2ServerMsg::fight_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Fight_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fight_req_ != NULL ? *fight_req_ : *default_instance().fight_req_;
#else
  return fight_req_ != NULL ? *fight_req_ : *default_instance_->fight_req_;
#endif
}
inline ::fgame::CSPvpFightReq* C2ServerMsg::mutable_fight_req() {
  set_has_fight_req();
  if (fight_req_ == NULL) fight_req_ = new ::fgame::CSPvpFightReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Fight_Req)
  return fight_req_;
}
inline ::fgame::CSPvpFightReq* C2ServerMsg::release_fight_req() {
  clear_has_fight_req();
  ::fgame::CSPvpFightReq* temp = fight_req_;
  fight_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_fight_req(::fgame::CSPvpFightReq* fight_req) {
  delete fight_req_;
  fight_req_ = fight_req;
  if (fight_req) {
    set_has_fight_req();
  } else {
    clear_has_fight_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Fight_Req)
}

// optional .fgame.CSPvpEndReq End_Req = 8;
inline bool C2ServerMsg::has_end_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void C2ServerMsg::set_has_end_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void C2ServerMsg::clear_has_end_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void C2ServerMsg::clear_end_req() {
  if (end_req_ != NULL) end_req_->::fgame::CSPvpEndReq::Clear();
  clear_has_end_req();
}
inline const ::fgame::CSPvpEndReq& C2ServerMsg::end_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.End_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return end_req_ != NULL ? *end_req_ : *default_instance().end_req_;
#else
  return end_req_ != NULL ? *end_req_ : *default_instance_->end_req_;
#endif
}
inline ::fgame::CSPvpEndReq* C2ServerMsg::mutable_end_req() {
  set_has_end_req();
  if (end_req_ == NULL) end_req_ = new ::fgame::CSPvpEndReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.End_Req)
  return end_req_;
}
inline ::fgame::CSPvpEndReq* C2ServerMsg::release_end_req() {
  clear_has_end_req();
  ::fgame::CSPvpEndReq* temp = end_req_;
  end_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_end_req(::fgame::CSPvpEndReq* end_req) {
  delete end_req_;
  end_req_ = end_req;
  if (end_req) {
    set_has_end_req();
  } else {
    clear_has_end_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.End_Req)
}

// optional .fgame.CSPvpMapReq Map_Req = 9;
inline bool C2ServerMsg::has_map_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2ServerMsg::set_has_map_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2ServerMsg::clear_has_map_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2ServerMsg::clear_map_req() {
  if (map_req_ != NULL) map_req_->::fgame::CSPvpMapReq::Clear();
  clear_has_map_req();
}
inline const ::fgame::CSPvpMapReq& C2ServerMsg::map_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Map_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return map_req_ != NULL ? *map_req_ : *default_instance().map_req_;
#else
  return map_req_ != NULL ? *map_req_ : *default_instance_->map_req_;
#endif
}
inline ::fgame::CSPvpMapReq* C2ServerMsg::mutable_map_req() {
  set_has_map_req();
  if (map_req_ == NULL) map_req_ = new ::fgame::CSPvpMapReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Map_Req)
  return map_req_;
}
inline ::fgame::CSPvpMapReq* C2ServerMsg::release_map_req() {
  clear_has_map_req();
  ::fgame::CSPvpMapReq* temp = map_req_;
  map_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_map_req(::fgame::CSPvpMapReq* map_req) {
  delete map_req_;
  map_req_ = map_req;
  if (map_req) {
    set_has_map_req();
  } else {
    clear_has_map_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Map_Req)
}

// optional .fgame.CSPvpUpgradeReq Upgrade_Req = 10;
inline bool C2ServerMsg::has_upgrade_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2ServerMsg::set_has_upgrade_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2ServerMsg::clear_has_upgrade_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2ServerMsg::clear_upgrade_req() {
  if (upgrade_req_ != NULL) upgrade_req_->::fgame::CSPvpUpgradeReq::Clear();
  clear_has_upgrade_req();
}
inline const ::fgame::CSPvpUpgradeReq& C2ServerMsg::upgrade_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Upgrade_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return upgrade_req_ != NULL ? *upgrade_req_ : *default_instance().upgrade_req_;
#else
  return upgrade_req_ != NULL ? *upgrade_req_ : *default_instance_->upgrade_req_;
#endif
}
inline ::fgame::CSPvpUpgradeReq* C2ServerMsg::mutable_upgrade_req() {
  set_has_upgrade_req();
  if (upgrade_req_ == NULL) upgrade_req_ = new ::fgame::CSPvpUpgradeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Upgrade_Req)
  return upgrade_req_;
}
inline ::fgame::CSPvpUpgradeReq* C2ServerMsg::release_upgrade_req() {
  clear_has_upgrade_req();
  ::fgame::CSPvpUpgradeReq* temp = upgrade_req_;
  upgrade_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_upgrade_req(::fgame::CSPvpUpgradeReq* upgrade_req) {
  delete upgrade_req_;
  upgrade_req_ = upgrade_req;
  if (upgrade_req) {
    set_has_upgrade_req();
  } else {
    clear_has_upgrade_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Upgrade_Req)
}

// optional .fgame.CSPvpPingReq Ping_Req = 13;
inline bool C2ServerMsg::has_ping_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void C2ServerMsg::set_has_ping_req() {
  _has_bits_[0] |= 0x00000200u;
}
inline void C2ServerMsg::clear_has_ping_req() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void C2ServerMsg::clear_ping_req() {
  if (ping_req_ != NULL) ping_req_->::fgame::CSPvpPingReq::Clear();
  clear_has_ping_req();
}
inline const ::fgame::CSPvpPingReq& C2ServerMsg::ping_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Ping_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ping_req_ != NULL ? *ping_req_ : *default_instance().ping_req_;
#else
  return ping_req_ != NULL ? *ping_req_ : *default_instance_->ping_req_;
#endif
}
inline ::fgame::CSPvpPingReq* C2ServerMsg::mutable_ping_req() {
  set_has_ping_req();
  if (ping_req_ == NULL) ping_req_ = new ::fgame::CSPvpPingReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Ping_Req)
  return ping_req_;
}
inline ::fgame::CSPvpPingReq* C2ServerMsg::release_ping_req() {
  clear_has_ping_req();
  ::fgame::CSPvpPingReq* temp = ping_req_;
  ping_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_ping_req(::fgame::CSPvpPingReq* ping_req) {
  delete ping_req_;
  ping_req_ = ping_req;
  if (ping_req) {
    set_has_ping_req();
  } else {
    clear_has_ping_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Ping_Req)
}

// optional .fgame.CSBuyITtemReq BuyItem_Req = 14;
inline bool C2ServerMsg::has_buyitem_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void C2ServerMsg::set_has_buyitem_req() {
  _has_bits_[0] |= 0x00000400u;
}
inline void C2ServerMsg::clear_has_buyitem_req() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void C2ServerMsg::clear_buyitem_req() {
  if (buyitem_req_ != NULL) buyitem_req_->::fgame::CSBuyITtemReq::Clear();
  clear_has_buyitem_req();
}
inline const ::fgame::CSBuyITtemReq& C2ServerMsg::buyitem_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.BuyItem_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buyitem_req_ != NULL ? *buyitem_req_ : *default_instance().buyitem_req_;
#else
  return buyitem_req_ != NULL ? *buyitem_req_ : *default_instance_->buyitem_req_;
#endif
}
inline ::fgame::CSBuyITtemReq* C2ServerMsg::mutable_buyitem_req() {
  set_has_buyitem_req();
  if (buyitem_req_ == NULL) buyitem_req_ = new ::fgame::CSBuyITtemReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.BuyItem_Req)
  return buyitem_req_;
}
inline ::fgame::CSBuyITtemReq* C2ServerMsg::release_buyitem_req() {
  clear_has_buyitem_req();
  ::fgame::CSBuyITtemReq* temp = buyitem_req_;
  buyitem_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_buyitem_req(::fgame::CSBuyITtemReq* buyitem_req) {
  delete buyitem_req_;
  buyitem_req_ = buyitem_req;
  if (buyitem_req) {
    set_has_buyitem_req();
  } else {
    clear_has_buyitem_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.BuyItem_Req)
}

// optional .fgame.CSUseItemReq UseItem_Req = 15;
inline bool C2ServerMsg::has_useitem_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void C2ServerMsg::set_has_useitem_req() {
  _has_bits_[0] |= 0x00000800u;
}
inline void C2ServerMsg::clear_has_useitem_req() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void C2ServerMsg::clear_useitem_req() {
  if (useitem_req_ != NULL) useitem_req_->::fgame::CSUseItemReq::Clear();
  clear_has_useitem_req();
}
inline const ::fgame::CSUseItemReq& C2ServerMsg::useitem_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.UseItem_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return useitem_req_ != NULL ? *useitem_req_ : *default_instance().useitem_req_;
#else
  return useitem_req_ != NULL ? *useitem_req_ : *default_instance_->useitem_req_;
#endif
}
inline ::fgame::CSUseItemReq* C2ServerMsg::mutable_useitem_req() {
  set_has_useitem_req();
  if (useitem_req_ == NULL) useitem_req_ = new ::fgame::CSUseItemReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.UseItem_Req)
  return useitem_req_;
}
inline ::fgame::CSUseItemReq* C2ServerMsg::release_useitem_req() {
  clear_has_useitem_req();
  ::fgame::CSUseItemReq* temp = useitem_req_;
  useitem_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_useitem_req(::fgame::CSUseItemReq* useitem_req) {
  delete useitem_req_;
  useitem_req_ = useitem_req;
  if (useitem_req) {
    set_has_useitem_req();
  } else {
    clear_has_useitem_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.UseItem_Req)
}

// optional .fgame.CSPvpLeaveReq Leave_Req = 18;
inline bool C2ServerMsg::has_leave_req() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void C2ServerMsg::set_has_leave_req() {
  _has_bits_[0] |= 0x00001000u;
}
inline void C2ServerMsg::clear_has_leave_req() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void C2ServerMsg::clear_leave_req() {
  if (leave_req_ != NULL) leave_req_->::fgame::CSPvpLeaveReq::Clear();
  clear_has_leave_req();
}
inline const ::fgame::CSPvpLeaveReq& C2ServerMsg::leave_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Leave_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return leave_req_ != NULL ? *leave_req_ : *default_instance().leave_req_;
#else
  return leave_req_ != NULL ? *leave_req_ : *default_instance_->leave_req_;
#endif
}
inline ::fgame::CSPvpLeaveReq* C2ServerMsg::mutable_leave_req() {
  set_has_leave_req();
  if (leave_req_ == NULL) leave_req_ = new ::fgame::CSPvpLeaveReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Leave_Req)
  return leave_req_;
}
inline ::fgame::CSPvpLeaveReq* C2ServerMsg::release_leave_req() {
  clear_has_leave_req();
  ::fgame::CSPvpLeaveReq* temp = leave_req_;
  leave_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_leave_req(::fgame::CSPvpLeaveReq* leave_req) {
  delete leave_req_;
  leave_req_ = leave_req;
  if (leave_req) {
    set_has_leave_req();
  } else {
    clear_has_leave_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Leave_Req)
}

// optional .fgame.CSGetAchievementReq GetAchievementReq = 19;
inline bool C2ServerMsg::has_getachievementreq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void C2ServerMsg::set_has_getachievementreq() {
  _has_bits_[0] |= 0x00002000u;
}
inline void C2ServerMsg::clear_has_getachievementreq() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void C2ServerMsg::clear_getachievementreq() {
  if (getachievementreq_ != NULL) getachievementreq_->::fgame::CSGetAchievementReq::Clear();
  clear_has_getachievementreq();
}
inline const ::fgame::CSGetAchievementReq& C2ServerMsg::getachievementreq() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetAchievementReq)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getachievementreq_ != NULL ? *getachievementreq_ : *default_instance().getachievementreq_;
#else
  return getachievementreq_ != NULL ? *getachievementreq_ : *default_instance_->getachievementreq_;
#endif
}
inline ::fgame::CSGetAchievementReq* C2ServerMsg::mutable_getachievementreq() {
  set_has_getachievementreq();
  if (getachievementreq_ == NULL) getachievementreq_ = new ::fgame::CSGetAchievementReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetAchievementReq)
  return getachievementreq_;
}
inline ::fgame::CSGetAchievementReq* C2ServerMsg::release_getachievementreq() {
  clear_has_getachievementreq();
  ::fgame::CSGetAchievementReq* temp = getachievementreq_;
  getachievementreq_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getachievementreq(::fgame::CSGetAchievementReq* getachievementreq) {
  delete getachievementreq_;
  getachievementreq_ = getachievementreq;
  if (getachievementreq) {
    set_has_getachievementreq();
  } else {
    clear_has_getachievementreq();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetAchievementReq)
}

// optional .fgame.CSReceiveAchievementReq ReceiveAchievement_Req = 20;
inline bool C2ServerMsg::has_receiveachievement_req() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void C2ServerMsg::set_has_receiveachievement_req() {
  _has_bits_[0] |= 0x00004000u;
}
inline void C2ServerMsg::clear_has_receiveachievement_req() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void C2ServerMsg::clear_receiveachievement_req() {
  if (receiveachievement_req_ != NULL) receiveachievement_req_->::fgame::CSReceiveAchievementReq::Clear();
  clear_has_receiveachievement_req();
}
inline const ::fgame::CSReceiveAchievementReq& C2ServerMsg::receiveachievement_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ReceiveAchievement_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveachievement_req_ != NULL ? *receiveachievement_req_ : *default_instance().receiveachievement_req_;
#else
  return receiveachievement_req_ != NULL ? *receiveachievement_req_ : *default_instance_->receiveachievement_req_;
#endif
}
inline ::fgame::CSReceiveAchievementReq* C2ServerMsg::mutable_receiveachievement_req() {
  set_has_receiveachievement_req();
  if (receiveachievement_req_ == NULL) receiveachievement_req_ = new ::fgame::CSReceiveAchievementReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ReceiveAchievement_Req)
  return receiveachievement_req_;
}
inline ::fgame::CSReceiveAchievementReq* C2ServerMsg::release_receiveachievement_req() {
  clear_has_receiveachievement_req();
  ::fgame::CSReceiveAchievementReq* temp = receiveachievement_req_;
  receiveachievement_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_receiveachievement_req(::fgame::CSReceiveAchievementReq* receiveachievement_req) {
  delete receiveachievement_req_;
  receiveachievement_req_ = receiveachievement_req;
  if (receiveachievement_req) {
    set_has_receiveachievement_req();
  } else {
    clear_has_receiveachievement_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ReceiveAchievement_Req)
}

// optional .fgame.CSReceiveAchievementRewardReq ReceiveAchievementReward_Req = 21;
inline bool C2ServerMsg::has_receiveachievementreward_req() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void C2ServerMsg::set_has_receiveachievementreward_req() {
  _has_bits_[0] |= 0x00008000u;
}
inline void C2ServerMsg::clear_has_receiveachievementreward_req() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void C2ServerMsg::clear_receiveachievementreward_req() {
  if (receiveachievementreward_req_ != NULL) receiveachievementreward_req_->::fgame::CSReceiveAchievementRewardReq::Clear();
  clear_has_receiveachievementreward_req();
}
inline const ::fgame::CSReceiveAchievementRewardReq& C2ServerMsg::receiveachievementreward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ReceiveAchievementReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveachievementreward_req_ != NULL ? *receiveachievementreward_req_ : *default_instance().receiveachievementreward_req_;
#else
  return receiveachievementreward_req_ != NULL ? *receiveachievementreward_req_ : *default_instance_->receiveachievementreward_req_;
#endif
}
inline ::fgame::CSReceiveAchievementRewardReq* C2ServerMsg::mutable_receiveachievementreward_req() {
  set_has_receiveachievementreward_req();
  if (receiveachievementreward_req_ == NULL) receiveachievementreward_req_ = new ::fgame::CSReceiveAchievementRewardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ReceiveAchievementReward_Req)
  return receiveachievementreward_req_;
}
inline ::fgame::CSReceiveAchievementRewardReq* C2ServerMsg::release_receiveachievementreward_req() {
  clear_has_receiveachievementreward_req();
  ::fgame::CSReceiveAchievementRewardReq* temp = receiveachievementreward_req_;
  receiveachievementreward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_receiveachievementreward_req(::fgame::CSReceiveAchievementRewardReq* receiveachievementreward_req) {
  delete receiveachievementreward_req_;
  receiveachievementreward_req_ = receiveachievementreward_req;
  if (receiveachievementreward_req) {
    set_has_receiveachievementreward_req();
  } else {
    clear_has_receiveachievementreward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ReceiveAchievementReward_Req)
}

// optional .fgame.CSEnterServerReq EnterServer_Req = 22;
inline bool C2ServerMsg::has_enterserver_req() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void C2ServerMsg::set_has_enterserver_req() {
  _has_bits_[0] |= 0x00010000u;
}
inline void C2ServerMsg::clear_has_enterserver_req() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void C2ServerMsg::clear_enterserver_req() {
  if (enterserver_req_ != NULL) enterserver_req_->::fgame::CSEnterServerReq::Clear();
  clear_has_enterserver_req();
}
inline const ::fgame::CSEnterServerReq& C2ServerMsg::enterserver_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.EnterServer_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return enterserver_req_ != NULL ? *enterserver_req_ : *default_instance().enterserver_req_;
#else
  return enterserver_req_ != NULL ? *enterserver_req_ : *default_instance_->enterserver_req_;
#endif
}
inline ::fgame::CSEnterServerReq* C2ServerMsg::mutable_enterserver_req() {
  set_has_enterserver_req();
  if (enterserver_req_ == NULL) enterserver_req_ = new ::fgame::CSEnterServerReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.EnterServer_Req)
  return enterserver_req_;
}
inline ::fgame::CSEnterServerReq* C2ServerMsg::release_enterserver_req() {
  clear_has_enterserver_req();
  ::fgame::CSEnterServerReq* temp = enterserver_req_;
  enterserver_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_enterserver_req(::fgame::CSEnterServerReq* enterserver_req) {
  delete enterserver_req_;
  enterserver_req_ = enterserver_req;
  if (enterserver_req) {
    set_has_enterserver_req();
  } else {
    clear_has_enterserver_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.EnterServer_Req)
}

// optional .fgame.CSDirectEnterReq DirectEnter_Req = 25;
inline bool C2ServerMsg::has_directenter_req() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void C2ServerMsg::set_has_directenter_req() {
  _has_bits_[0] |= 0x00020000u;
}
inline void C2ServerMsg::clear_has_directenter_req() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void C2ServerMsg::clear_directenter_req() {
  if (directenter_req_ != NULL) directenter_req_->::fgame::CSDirectEnterReq::Clear();
  clear_has_directenter_req();
}
inline const ::fgame::CSDirectEnterReq& C2ServerMsg::directenter_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.DirectEnter_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return directenter_req_ != NULL ? *directenter_req_ : *default_instance().directenter_req_;
#else
  return directenter_req_ != NULL ? *directenter_req_ : *default_instance_->directenter_req_;
#endif
}
inline ::fgame::CSDirectEnterReq* C2ServerMsg::mutable_directenter_req() {
  set_has_directenter_req();
  if (directenter_req_ == NULL) directenter_req_ = new ::fgame::CSDirectEnterReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.DirectEnter_Req)
  return directenter_req_;
}
inline ::fgame::CSDirectEnterReq* C2ServerMsg::release_directenter_req() {
  clear_has_directenter_req();
  ::fgame::CSDirectEnterReq* temp = directenter_req_;
  directenter_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_directenter_req(::fgame::CSDirectEnterReq* directenter_req) {
  delete directenter_req_;
  directenter_req_ = directenter_req;
  if (directenter_req) {
    set_has_directenter_req();
  } else {
    clear_has_directenter_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.DirectEnter_Req)
}

// optional .fgame.CSPvpRankingGetListReq PvpRankingGetList_Req = 26;
inline bool C2ServerMsg::has_pvprankinggetlist_req() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void C2ServerMsg::set_has_pvprankinggetlist_req() {
  _has_bits_[0] |= 0x00040000u;
}
inline void C2ServerMsg::clear_has_pvprankinggetlist_req() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void C2ServerMsg::clear_pvprankinggetlist_req() {
  if (pvprankinggetlist_req_ != NULL) pvprankinggetlist_req_->::fgame::CSPvpRankingGetListReq::Clear();
  clear_has_pvprankinggetlist_req();
}
inline const ::fgame::CSPvpRankingGetListReq& C2ServerMsg::pvprankinggetlist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpRankingGetList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvprankinggetlist_req_ != NULL ? *pvprankinggetlist_req_ : *default_instance().pvprankinggetlist_req_;
#else
  return pvprankinggetlist_req_ != NULL ? *pvprankinggetlist_req_ : *default_instance_->pvprankinggetlist_req_;
#endif
}
inline ::fgame::CSPvpRankingGetListReq* C2ServerMsg::mutable_pvprankinggetlist_req() {
  set_has_pvprankinggetlist_req();
  if (pvprankinggetlist_req_ == NULL) pvprankinggetlist_req_ = new ::fgame::CSPvpRankingGetListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpRankingGetList_Req)
  return pvprankinggetlist_req_;
}
inline ::fgame::CSPvpRankingGetListReq* C2ServerMsg::release_pvprankinggetlist_req() {
  clear_has_pvprankinggetlist_req();
  ::fgame::CSPvpRankingGetListReq* temp = pvprankinggetlist_req_;
  pvprankinggetlist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvprankinggetlist_req(::fgame::CSPvpRankingGetListReq* pvprankinggetlist_req) {
  delete pvprankinggetlist_req_;
  pvprankinggetlist_req_ = pvprankinggetlist_req;
  if (pvprankinggetlist_req) {
    set_has_pvprankinggetlist_req();
  } else {
    clear_has_pvprankinggetlist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpRankingGetList_Req)
}

// optional .fgame.CSStreakWinValueReq StreakWinValue_Req = 27;
inline bool C2ServerMsg::has_streakwinvalue_req() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void C2ServerMsg::set_has_streakwinvalue_req() {
  _has_bits_[0] |= 0x00080000u;
}
inline void C2ServerMsg::clear_has_streakwinvalue_req() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void C2ServerMsg::clear_streakwinvalue_req() {
  if (streakwinvalue_req_ != NULL) streakwinvalue_req_->::fgame::CSStreakWinValueReq::Clear();
  clear_has_streakwinvalue_req();
}
inline const ::fgame::CSStreakWinValueReq& C2ServerMsg::streakwinvalue_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.StreakWinValue_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return streakwinvalue_req_ != NULL ? *streakwinvalue_req_ : *default_instance().streakwinvalue_req_;
#else
  return streakwinvalue_req_ != NULL ? *streakwinvalue_req_ : *default_instance_->streakwinvalue_req_;
#endif
}
inline ::fgame::CSStreakWinValueReq* C2ServerMsg::mutable_streakwinvalue_req() {
  set_has_streakwinvalue_req();
  if (streakwinvalue_req_ == NULL) streakwinvalue_req_ = new ::fgame::CSStreakWinValueReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.StreakWinValue_Req)
  return streakwinvalue_req_;
}
inline ::fgame::CSStreakWinValueReq* C2ServerMsg::release_streakwinvalue_req() {
  clear_has_streakwinvalue_req();
  ::fgame::CSStreakWinValueReq* temp = streakwinvalue_req_;
  streakwinvalue_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_streakwinvalue_req(::fgame::CSStreakWinValueReq* streakwinvalue_req) {
  delete streakwinvalue_req_;
  streakwinvalue_req_ = streakwinvalue_req;
  if (streakwinvalue_req) {
    set_has_streakwinvalue_req();
  } else {
    clear_has_streakwinvalue_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.StreakWinValue_Req)
}

// optional .fgame.CSStreakWinGetReq StreakWinGet_Req = 28;
inline bool C2ServerMsg::has_streakwinget_req() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void C2ServerMsg::set_has_streakwinget_req() {
  _has_bits_[0] |= 0x00100000u;
}
inline void C2ServerMsg::clear_has_streakwinget_req() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void C2ServerMsg::clear_streakwinget_req() {
  if (streakwinget_req_ != NULL) streakwinget_req_->::fgame::CSStreakWinGetReq::Clear();
  clear_has_streakwinget_req();
}
inline const ::fgame::CSStreakWinGetReq& C2ServerMsg::streakwinget_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.StreakWinGet_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return streakwinget_req_ != NULL ? *streakwinget_req_ : *default_instance().streakwinget_req_;
#else
  return streakwinget_req_ != NULL ? *streakwinget_req_ : *default_instance_->streakwinget_req_;
#endif
}
inline ::fgame::CSStreakWinGetReq* C2ServerMsg::mutable_streakwinget_req() {
  set_has_streakwinget_req();
  if (streakwinget_req_ == NULL) streakwinget_req_ = new ::fgame::CSStreakWinGetReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.StreakWinGet_Req)
  return streakwinget_req_;
}
inline ::fgame::CSStreakWinGetReq* C2ServerMsg::release_streakwinget_req() {
  clear_has_streakwinget_req();
  ::fgame::CSStreakWinGetReq* temp = streakwinget_req_;
  streakwinget_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_streakwinget_req(::fgame::CSStreakWinGetReq* streakwinget_req) {
  delete streakwinget_req_;
  streakwinget_req_ = streakwinget_req;
  if (streakwinget_req) {
    set_has_streakwinget_req();
  } else {
    clear_has_streakwinget_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.StreakWinGet_Req)
}

// optional .fgame.CSOpenBigStageReq OpenBigStage_Req = 29;
inline bool C2ServerMsg::has_openbigstage_req() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void C2ServerMsg::set_has_openbigstage_req() {
  _has_bits_[0] |= 0x00200000u;
}
inline void C2ServerMsg::clear_has_openbigstage_req() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void C2ServerMsg::clear_openbigstage_req() {
  if (openbigstage_req_ != NULL) openbigstage_req_->::fgame::CSOpenBigStageReq::Clear();
  clear_has_openbigstage_req();
}
inline const ::fgame::CSOpenBigStageReq& C2ServerMsg::openbigstage_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpenBigStage_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return openbigstage_req_ != NULL ? *openbigstage_req_ : *default_instance().openbigstage_req_;
#else
  return openbigstage_req_ != NULL ? *openbigstage_req_ : *default_instance_->openbigstage_req_;
#endif
}
inline ::fgame::CSOpenBigStageReq* C2ServerMsg::mutable_openbigstage_req() {
  set_has_openbigstage_req();
  if (openbigstage_req_ == NULL) openbigstage_req_ = new ::fgame::CSOpenBigStageReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpenBigStage_Req)
  return openbigstage_req_;
}
inline ::fgame::CSOpenBigStageReq* C2ServerMsg::release_openbigstage_req() {
  clear_has_openbigstage_req();
  ::fgame::CSOpenBigStageReq* temp = openbigstage_req_;
  openbigstage_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_openbigstage_req(::fgame::CSOpenBigStageReq* openbigstage_req) {
  delete openbigstage_req_;
  openbigstage_req_ = openbigstage_req;
  if (openbigstage_req) {
    set_has_openbigstage_req();
  } else {
    clear_has_openbigstage_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpenBigStage_Req)
}

// optional .fgame.CSPvpUseItemReq PvpUseItem_Req = 30;
inline bool C2ServerMsg::has_pvpuseitem_req() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void C2ServerMsg::set_has_pvpuseitem_req() {
  _has_bits_[0] |= 0x00400000u;
}
inline void C2ServerMsg::clear_has_pvpuseitem_req() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void C2ServerMsg::clear_pvpuseitem_req() {
  if (pvpuseitem_req_ != NULL) pvpuseitem_req_->::fgame::CSPvpUseItemReq::Clear();
  clear_has_pvpuseitem_req();
}
inline const ::fgame::CSPvpUseItemReq& C2ServerMsg::pvpuseitem_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpUseItem_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpuseitem_req_ != NULL ? *pvpuseitem_req_ : *default_instance().pvpuseitem_req_;
#else
  return pvpuseitem_req_ != NULL ? *pvpuseitem_req_ : *default_instance_->pvpuseitem_req_;
#endif
}
inline ::fgame::CSPvpUseItemReq* C2ServerMsg::mutable_pvpuseitem_req() {
  set_has_pvpuseitem_req();
  if (pvpuseitem_req_ == NULL) pvpuseitem_req_ = new ::fgame::CSPvpUseItemReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpUseItem_Req)
  return pvpuseitem_req_;
}
inline ::fgame::CSPvpUseItemReq* C2ServerMsg::release_pvpuseitem_req() {
  clear_has_pvpuseitem_req();
  ::fgame::CSPvpUseItemReq* temp = pvpuseitem_req_;
  pvpuseitem_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpuseitem_req(::fgame::CSPvpUseItemReq* pvpuseitem_req) {
  delete pvpuseitem_req_;
  pvpuseitem_req_ = pvpuseitem_req;
  if (pvpuseitem_req) {
    set_has_pvpuseitem_req();
  } else {
    clear_has_pvpuseitem_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpUseItem_Req)
}

// optional .fgame.CSSevenDaySignListReq SevenDaySignList_Req = 31;
inline bool C2ServerMsg::has_sevendaysignlist_req() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void C2ServerMsg::set_has_sevendaysignlist_req() {
  _has_bits_[0] |= 0x00800000u;
}
inline void C2ServerMsg::clear_has_sevendaysignlist_req() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void C2ServerMsg::clear_sevendaysignlist_req() {
  if (sevendaysignlist_req_ != NULL) sevendaysignlist_req_->::fgame::CSSevenDaySignListReq::Clear();
  clear_has_sevendaysignlist_req();
}
inline const ::fgame::CSSevenDaySignListReq& C2ServerMsg::sevendaysignlist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SevenDaySignList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sevendaysignlist_req_ != NULL ? *sevendaysignlist_req_ : *default_instance().sevendaysignlist_req_;
#else
  return sevendaysignlist_req_ != NULL ? *sevendaysignlist_req_ : *default_instance_->sevendaysignlist_req_;
#endif
}
inline ::fgame::CSSevenDaySignListReq* C2ServerMsg::mutable_sevendaysignlist_req() {
  set_has_sevendaysignlist_req();
  if (sevendaysignlist_req_ == NULL) sevendaysignlist_req_ = new ::fgame::CSSevenDaySignListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SevenDaySignList_Req)
  return sevendaysignlist_req_;
}
inline ::fgame::CSSevenDaySignListReq* C2ServerMsg::release_sevendaysignlist_req() {
  clear_has_sevendaysignlist_req();
  ::fgame::CSSevenDaySignListReq* temp = sevendaysignlist_req_;
  sevendaysignlist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_sevendaysignlist_req(::fgame::CSSevenDaySignListReq* sevendaysignlist_req) {
  delete sevendaysignlist_req_;
  sevendaysignlist_req_ = sevendaysignlist_req;
  if (sevendaysignlist_req) {
    set_has_sevendaysignlist_req();
  } else {
    clear_has_sevendaysignlist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SevenDaySignList_Req)
}

// optional .fgame.CSSevenDaySignReq SevenDaySign_Req = 32;
inline bool C2ServerMsg::has_sevendaysign_req() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void C2ServerMsg::set_has_sevendaysign_req() {
  _has_bits_[0] |= 0x01000000u;
}
inline void C2ServerMsg::clear_has_sevendaysign_req() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void C2ServerMsg::clear_sevendaysign_req() {
  if (sevendaysign_req_ != NULL) sevendaysign_req_->::fgame::CSSevenDaySignReq::Clear();
  clear_has_sevendaysign_req();
}
inline const ::fgame::CSSevenDaySignReq& C2ServerMsg::sevendaysign_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SevenDaySign_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sevendaysign_req_ != NULL ? *sevendaysign_req_ : *default_instance().sevendaysign_req_;
#else
  return sevendaysign_req_ != NULL ? *sevendaysign_req_ : *default_instance_->sevendaysign_req_;
#endif
}
inline ::fgame::CSSevenDaySignReq* C2ServerMsg::mutable_sevendaysign_req() {
  set_has_sevendaysign_req();
  if (sevendaysign_req_ == NULL) sevendaysign_req_ = new ::fgame::CSSevenDaySignReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SevenDaySign_Req)
  return sevendaysign_req_;
}
inline ::fgame::CSSevenDaySignReq* C2ServerMsg::release_sevendaysign_req() {
  clear_has_sevendaysign_req();
  ::fgame::CSSevenDaySignReq* temp = sevendaysign_req_;
  sevendaysign_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_sevendaysign_req(::fgame::CSSevenDaySignReq* sevendaysign_req) {
  delete sevendaysign_req_;
  sevendaysign_req_ = sevendaysign_req;
  if (sevendaysign_req) {
    set_has_sevendaysign_req();
  } else {
    clear_has_sevendaysign_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SevenDaySign_Req)
}

// optional .fgame.CSGetServerReq GetServer_Req = 33;
inline bool C2ServerMsg::has_getserver_req() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void C2ServerMsg::set_has_getserver_req() {
  _has_bits_[0] |= 0x02000000u;
}
inline void C2ServerMsg::clear_has_getserver_req() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void C2ServerMsg::clear_getserver_req() {
  if (getserver_req_ != NULL) getserver_req_->::fgame::CSGetServerReq::Clear();
  clear_has_getserver_req();
}
inline const ::fgame::CSGetServerReq& C2ServerMsg::getserver_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetServer_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getserver_req_ != NULL ? *getserver_req_ : *default_instance().getserver_req_;
#else
  return getserver_req_ != NULL ? *getserver_req_ : *default_instance_->getserver_req_;
#endif
}
inline ::fgame::CSGetServerReq* C2ServerMsg::mutable_getserver_req() {
  set_has_getserver_req();
  if (getserver_req_ == NULL) getserver_req_ = new ::fgame::CSGetServerReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetServer_Req)
  return getserver_req_;
}
inline ::fgame::CSGetServerReq* C2ServerMsg::release_getserver_req() {
  clear_has_getserver_req();
  ::fgame::CSGetServerReq* temp = getserver_req_;
  getserver_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getserver_req(::fgame::CSGetServerReq* getserver_req) {
  delete getserver_req_;
  getserver_req_ = getserver_req;
  if (getserver_req) {
    set_has_getserver_req();
  } else {
    clear_has_getserver_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetServer_Req)
}

// optional .fgame.CSSycPlayerInfoReq SycPlayerInfo_Req = 34;
inline bool C2ServerMsg::has_sycplayerinfo_req() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void C2ServerMsg::set_has_sycplayerinfo_req() {
  _has_bits_[0] |= 0x04000000u;
}
inline void C2ServerMsg::clear_has_sycplayerinfo_req() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void C2ServerMsg::clear_sycplayerinfo_req() {
  if (sycplayerinfo_req_ != NULL) sycplayerinfo_req_->::fgame::CSSycPlayerInfoReq::Clear();
  clear_has_sycplayerinfo_req();
}
inline const ::fgame::CSSycPlayerInfoReq& C2ServerMsg::sycplayerinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SycPlayerInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sycplayerinfo_req_ != NULL ? *sycplayerinfo_req_ : *default_instance().sycplayerinfo_req_;
#else
  return sycplayerinfo_req_ != NULL ? *sycplayerinfo_req_ : *default_instance_->sycplayerinfo_req_;
#endif
}
inline ::fgame::CSSycPlayerInfoReq* C2ServerMsg::mutable_sycplayerinfo_req() {
  set_has_sycplayerinfo_req();
  if (sycplayerinfo_req_ == NULL) sycplayerinfo_req_ = new ::fgame::CSSycPlayerInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SycPlayerInfo_Req)
  return sycplayerinfo_req_;
}
inline ::fgame::CSSycPlayerInfoReq* C2ServerMsg::release_sycplayerinfo_req() {
  clear_has_sycplayerinfo_req();
  ::fgame::CSSycPlayerInfoReq* temp = sycplayerinfo_req_;
  sycplayerinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_sycplayerinfo_req(::fgame::CSSycPlayerInfoReq* sycplayerinfo_req) {
  delete sycplayerinfo_req_;
  sycplayerinfo_req_ = sycplayerinfo_req;
  if (sycplayerinfo_req) {
    set_has_sycplayerinfo_req();
  } else {
    clear_has_sycplayerinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SycPlayerInfo_Req)
}

// optional .fgame.CSPvpStopMatchReq StopMatch_Req = 36;
inline bool C2ServerMsg::has_stopmatch_req() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void C2ServerMsg::set_has_stopmatch_req() {
  _has_bits_[0] |= 0x08000000u;
}
inline void C2ServerMsg::clear_has_stopmatch_req() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void C2ServerMsg::clear_stopmatch_req() {
  if (stopmatch_req_ != NULL) stopmatch_req_->::fgame::CSPvpStopMatchReq::Clear();
  clear_has_stopmatch_req();
}
inline const ::fgame::CSPvpStopMatchReq& C2ServerMsg::stopmatch_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.StopMatch_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stopmatch_req_ != NULL ? *stopmatch_req_ : *default_instance().stopmatch_req_;
#else
  return stopmatch_req_ != NULL ? *stopmatch_req_ : *default_instance_->stopmatch_req_;
#endif
}
inline ::fgame::CSPvpStopMatchReq* C2ServerMsg::mutable_stopmatch_req() {
  set_has_stopmatch_req();
  if (stopmatch_req_ == NULL) stopmatch_req_ = new ::fgame::CSPvpStopMatchReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.StopMatch_Req)
  return stopmatch_req_;
}
inline ::fgame::CSPvpStopMatchReq* C2ServerMsg::release_stopmatch_req() {
  clear_has_stopmatch_req();
  ::fgame::CSPvpStopMatchReq* temp = stopmatch_req_;
  stopmatch_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_stopmatch_req(::fgame::CSPvpStopMatchReq* stopmatch_req) {
  delete stopmatch_req_;
  stopmatch_req_ = stopmatch_req;
  if (stopmatch_req) {
    set_has_stopmatch_req();
  } else {
    clear_has_stopmatch_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.StopMatch_Req)
}

// optional .fgame.CSChangeNameReq ChangeName_Req = 37;
inline bool C2ServerMsg::has_changename_req() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void C2ServerMsg::set_has_changename_req() {
  _has_bits_[0] |= 0x10000000u;
}
inline void C2ServerMsg::clear_has_changename_req() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void C2ServerMsg::clear_changename_req() {
  if (changename_req_ != NULL) changename_req_->::fgame::CSChangeNameReq::Clear();
  clear_has_changename_req();
}
inline const ::fgame::CSChangeNameReq& C2ServerMsg::changename_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChangeName_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changename_req_ != NULL ? *changename_req_ : *default_instance().changename_req_;
#else
  return changename_req_ != NULL ? *changename_req_ : *default_instance_->changename_req_;
#endif
}
inline ::fgame::CSChangeNameReq* C2ServerMsg::mutable_changename_req() {
  set_has_changename_req();
  if (changename_req_ == NULL) changename_req_ = new ::fgame::CSChangeNameReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChangeName_Req)
  return changename_req_;
}
inline ::fgame::CSChangeNameReq* C2ServerMsg::release_changename_req() {
  clear_has_changename_req();
  ::fgame::CSChangeNameReq* temp = changename_req_;
  changename_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_changename_req(::fgame::CSChangeNameReq* changename_req) {
  delete changename_req_;
  changename_req_ = changename_req;
  if (changename_req) {
    set_has_changename_req();
  } else {
    clear_has_changename_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChangeName_Req)
}

// optional .fgame.CSLogoutReq Logout_Req = 38;
inline bool C2ServerMsg::has_logout_req() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void C2ServerMsg::set_has_logout_req() {
  _has_bits_[0] |= 0x20000000u;
}
inline void C2ServerMsg::clear_has_logout_req() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void C2ServerMsg::clear_logout_req() {
  if (logout_req_ != NULL) logout_req_->::fgame::CSLogoutReq::Clear();
  clear_has_logout_req();
}
inline const ::fgame::CSLogoutReq& C2ServerMsg::logout_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.Logout_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return logout_req_ != NULL ? *logout_req_ : *default_instance().logout_req_;
#else
  return logout_req_ != NULL ? *logout_req_ : *default_instance_->logout_req_;
#endif
}
inline ::fgame::CSLogoutReq* C2ServerMsg::mutable_logout_req() {
  set_has_logout_req();
  if (logout_req_ == NULL) logout_req_ = new ::fgame::CSLogoutReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.Logout_Req)
  return logout_req_;
}
inline ::fgame::CSLogoutReq* C2ServerMsg::release_logout_req() {
  clear_has_logout_req();
  ::fgame::CSLogoutReq* temp = logout_req_;
  logout_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_logout_req(::fgame::CSLogoutReq* logout_req) {
  delete logout_req_;
  logout_req_ = logout_req;
  if (logout_req) {
    set_has_logout_req();
  } else {
    clear_has_logout_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.Logout_Req)
}

// optional .fgame.CSXinShouRecodeReq XinShouRecode_Req = 41;
inline bool C2ServerMsg::has_xinshourecode_req() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void C2ServerMsg::set_has_xinshourecode_req() {
  _has_bits_[0] |= 0x40000000u;
}
inline void C2ServerMsg::clear_has_xinshourecode_req() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void C2ServerMsg::clear_xinshourecode_req() {
  if (xinshourecode_req_ != NULL) xinshourecode_req_->::fgame::CSXinShouRecodeReq::Clear();
  clear_has_xinshourecode_req();
}
inline const ::fgame::CSXinShouRecodeReq& C2ServerMsg::xinshourecode_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.XinShouRecode_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return xinshourecode_req_ != NULL ? *xinshourecode_req_ : *default_instance().xinshourecode_req_;
#else
  return xinshourecode_req_ != NULL ? *xinshourecode_req_ : *default_instance_->xinshourecode_req_;
#endif
}
inline ::fgame::CSXinShouRecodeReq* C2ServerMsg::mutable_xinshourecode_req() {
  set_has_xinshourecode_req();
  if (xinshourecode_req_ == NULL) xinshourecode_req_ = new ::fgame::CSXinShouRecodeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.XinShouRecode_Req)
  return xinshourecode_req_;
}
inline ::fgame::CSXinShouRecodeReq* C2ServerMsg::release_xinshourecode_req() {
  clear_has_xinshourecode_req();
  ::fgame::CSXinShouRecodeReq* temp = xinshourecode_req_;
  xinshourecode_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_xinshourecode_req(::fgame::CSXinShouRecodeReq* xinshourecode_req) {
  delete xinshourecode_req_;
  xinshourecode_req_ = xinshourecode_req;
  if (xinshourecode_req) {
    set_has_xinshourecode_req();
  } else {
    clear_has_xinshourecode_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.XinShouRecode_Req)
}

// optional .fgame.CSPvpRankingPlayerInfoReq PvpRankingPlayerInfo_Req = 42;
inline bool C2ServerMsg::has_pvprankingplayerinfo_req() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void C2ServerMsg::set_has_pvprankingplayerinfo_req() {
  _has_bits_[0] |= 0x80000000u;
}
inline void C2ServerMsg::clear_has_pvprankingplayerinfo_req() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void C2ServerMsg::clear_pvprankingplayerinfo_req() {
  if (pvprankingplayerinfo_req_ != NULL) pvprankingplayerinfo_req_->::fgame::CSPvpRankingPlayerInfoReq::Clear();
  clear_has_pvprankingplayerinfo_req();
}
inline const ::fgame::CSPvpRankingPlayerInfoReq& C2ServerMsg::pvprankingplayerinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpRankingPlayerInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvprankingplayerinfo_req_ != NULL ? *pvprankingplayerinfo_req_ : *default_instance().pvprankingplayerinfo_req_;
#else
  return pvprankingplayerinfo_req_ != NULL ? *pvprankingplayerinfo_req_ : *default_instance_->pvprankingplayerinfo_req_;
#endif
}
inline ::fgame::CSPvpRankingPlayerInfoReq* C2ServerMsg::mutable_pvprankingplayerinfo_req() {
  set_has_pvprankingplayerinfo_req();
  if (pvprankingplayerinfo_req_ == NULL) pvprankingplayerinfo_req_ = new ::fgame::CSPvpRankingPlayerInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpRankingPlayerInfo_Req)
  return pvprankingplayerinfo_req_;
}
inline ::fgame::CSPvpRankingPlayerInfoReq* C2ServerMsg::release_pvprankingplayerinfo_req() {
  clear_has_pvprankingplayerinfo_req();
  ::fgame::CSPvpRankingPlayerInfoReq* temp = pvprankingplayerinfo_req_;
  pvprankingplayerinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvprankingplayerinfo_req(::fgame::CSPvpRankingPlayerInfoReq* pvprankingplayerinfo_req) {
  delete pvprankingplayerinfo_req_;
  pvprankingplayerinfo_req_ = pvprankingplayerinfo_req;
  if (pvprankingplayerinfo_req) {
    set_has_pvprankingplayerinfo_req();
  } else {
    clear_has_pvprankingplayerinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpRankingPlayerInfo_Req)
}

// optional .fgame.CSGetOpenActivityReq GetOpenActivity_Req = 43;
inline bool C2ServerMsg::has_getopenactivity_req() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void C2ServerMsg::set_has_getopenactivity_req() {
  _has_bits_[1] |= 0x00000001u;
}
inline void C2ServerMsg::clear_has_getopenactivity_req() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void C2ServerMsg::clear_getopenactivity_req() {
  if (getopenactivity_req_ != NULL) getopenactivity_req_->::fgame::CSGetOpenActivityReq::Clear();
  clear_has_getopenactivity_req();
}
inline const ::fgame::CSGetOpenActivityReq& C2ServerMsg::getopenactivity_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetOpenActivity_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getopenactivity_req_ != NULL ? *getopenactivity_req_ : *default_instance().getopenactivity_req_;
#else
  return getopenactivity_req_ != NULL ? *getopenactivity_req_ : *default_instance_->getopenactivity_req_;
#endif
}
inline ::fgame::CSGetOpenActivityReq* C2ServerMsg::mutable_getopenactivity_req() {
  set_has_getopenactivity_req();
  if (getopenactivity_req_ == NULL) getopenactivity_req_ = new ::fgame::CSGetOpenActivityReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetOpenActivity_Req)
  return getopenactivity_req_;
}
inline ::fgame::CSGetOpenActivityReq* C2ServerMsg::release_getopenactivity_req() {
  clear_has_getopenactivity_req();
  ::fgame::CSGetOpenActivityReq* temp = getopenactivity_req_;
  getopenactivity_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getopenactivity_req(::fgame::CSGetOpenActivityReq* getopenactivity_req) {
  delete getopenactivity_req_;
  getopenactivity_req_ = getopenactivity_req;
  if (getopenactivity_req) {
    set_has_getopenactivity_req();
  } else {
    clear_has_getopenactivity_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetOpenActivity_Req)
}

// optional .fgame.CSGetActivityDataReq GetActivityData_Req = 44;
inline bool C2ServerMsg::has_getactivitydata_req() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void C2ServerMsg::set_has_getactivitydata_req() {
  _has_bits_[1] |= 0x00000002u;
}
inline void C2ServerMsg::clear_has_getactivitydata_req() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void C2ServerMsg::clear_getactivitydata_req() {
  if (getactivitydata_req_ != NULL) getactivitydata_req_->::fgame::CSGetActivityDataReq::Clear();
  clear_has_getactivitydata_req();
}
inline const ::fgame::CSGetActivityDataReq& C2ServerMsg::getactivitydata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetActivityData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getactivitydata_req_ != NULL ? *getactivitydata_req_ : *default_instance().getactivitydata_req_;
#else
  return getactivitydata_req_ != NULL ? *getactivitydata_req_ : *default_instance_->getactivitydata_req_;
#endif
}
inline ::fgame::CSGetActivityDataReq* C2ServerMsg::mutable_getactivitydata_req() {
  set_has_getactivitydata_req();
  if (getactivitydata_req_ == NULL) getactivitydata_req_ = new ::fgame::CSGetActivityDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetActivityData_Req)
  return getactivitydata_req_;
}
inline ::fgame::CSGetActivityDataReq* C2ServerMsg::release_getactivitydata_req() {
  clear_has_getactivitydata_req();
  ::fgame::CSGetActivityDataReq* temp = getactivitydata_req_;
  getactivitydata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getactivitydata_req(::fgame::CSGetActivityDataReq* getactivitydata_req) {
  delete getactivitydata_req_;
  getactivitydata_req_ = getactivitydata_req;
  if (getactivitydata_req) {
    set_has_getactivitydata_req();
  } else {
    clear_has_getactivitydata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetActivityData_Req)
}

// optional .fgame.CSReceiveActivityRewardReq ReceiveActivityReward_Req = 45;
inline bool C2ServerMsg::has_receiveactivityreward_req() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void C2ServerMsg::set_has_receiveactivityreward_req() {
  _has_bits_[1] |= 0x00000004u;
}
inline void C2ServerMsg::clear_has_receiveactivityreward_req() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void C2ServerMsg::clear_receiveactivityreward_req() {
  if (receiveactivityreward_req_ != NULL) receiveactivityreward_req_->::fgame::CSReceiveActivityRewardReq::Clear();
  clear_has_receiveactivityreward_req();
}
inline const ::fgame::CSReceiveActivityRewardReq& C2ServerMsg::receiveactivityreward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ReceiveActivityReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveactivityreward_req_ != NULL ? *receiveactivityreward_req_ : *default_instance().receiveactivityreward_req_;
#else
  return receiveactivityreward_req_ != NULL ? *receiveactivityreward_req_ : *default_instance_->receiveactivityreward_req_;
#endif
}
inline ::fgame::CSReceiveActivityRewardReq* C2ServerMsg::mutable_receiveactivityreward_req() {
  set_has_receiveactivityreward_req();
  if (receiveactivityreward_req_ == NULL) receiveactivityreward_req_ = new ::fgame::CSReceiveActivityRewardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ReceiveActivityReward_Req)
  return receiveactivityreward_req_;
}
inline ::fgame::CSReceiveActivityRewardReq* C2ServerMsg::release_receiveactivityreward_req() {
  clear_has_receiveactivityreward_req();
  ::fgame::CSReceiveActivityRewardReq* temp = receiveactivityreward_req_;
  receiveactivityreward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_receiveactivityreward_req(::fgame::CSReceiveActivityRewardReq* receiveactivityreward_req) {
  delete receiveactivityreward_req_;
  receiveactivityreward_req_ = receiveactivityreward_req;
  if (receiveactivityreward_req) {
    set_has_receiveactivityreward_req();
  } else {
    clear_has_receiveactivityreward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ReceiveActivityReward_Req)
}

// optional .fgame.CSMissionListReq MissionList_Req = 46;
inline bool C2ServerMsg::has_missionlist_req() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void C2ServerMsg::set_has_missionlist_req() {
  _has_bits_[1] |= 0x00000008u;
}
inline void C2ServerMsg::clear_has_missionlist_req() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void C2ServerMsg::clear_missionlist_req() {
  if (missionlist_req_ != NULL) missionlist_req_->::fgame::CSMissionListReq::Clear();
  clear_has_missionlist_req();
}
inline const ::fgame::CSMissionListReq& C2ServerMsg::missionlist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.MissionList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return missionlist_req_ != NULL ? *missionlist_req_ : *default_instance().missionlist_req_;
#else
  return missionlist_req_ != NULL ? *missionlist_req_ : *default_instance_->missionlist_req_;
#endif
}
inline ::fgame::CSMissionListReq* C2ServerMsg::mutable_missionlist_req() {
  set_has_missionlist_req();
  if (missionlist_req_ == NULL) missionlist_req_ = new ::fgame::CSMissionListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.MissionList_Req)
  return missionlist_req_;
}
inline ::fgame::CSMissionListReq* C2ServerMsg::release_missionlist_req() {
  clear_has_missionlist_req();
  ::fgame::CSMissionListReq* temp = missionlist_req_;
  missionlist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_missionlist_req(::fgame::CSMissionListReq* missionlist_req) {
  delete missionlist_req_;
  missionlist_req_ = missionlist_req;
  if (missionlist_req) {
    set_has_missionlist_req();
  } else {
    clear_has_missionlist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.MissionList_Req)
}

// optional .fgame.CSMissionCompleteReq MissionComplete_Req = 47;
inline bool C2ServerMsg::has_missioncomplete_req() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void C2ServerMsg::set_has_missioncomplete_req() {
  _has_bits_[1] |= 0x00000010u;
}
inline void C2ServerMsg::clear_has_missioncomplete_req() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void C2ServerMsg::clear_missioncomplete_req() {
  if (missioncomplete_req_ != NULL) missioncomplete_req_->::fgame::CSMissionCompleteReq::Clear();
  clear_has_missioncomplete_req();
}
inline const ::fgame::CSMissionCompleteReq& C2ServerMsg::missioncomplete_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.MissionComplete_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return missioncomplete_req_ != NULL ? *missioncomplete_req_ : *default_instance().missioncomplete_req_;
#else
  return missioncomplete_req_ != NULL ? *missioncomplete_req_ : *default_instance_->missioncomplete_req_;
#endif
}
inline ::fgame::CSMissionCompleteReq* C2ServerMsg::mutable_missioncomplete_req() {
  set_has_missioncomplete_req();
  if (missioncomplete_req_ == NULL) missioncomplete_req_ = new ::fgame::CSMissionCompleteReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.MissionComplete_Req)
  return missioncomplete_req_;
}
inline ::fgame::CSMissionCompleteReq* C2ServerMsg::release_missioncomplete_req() {
  clear_has_missioncomplete_req();
  ::fgame::CSMissionCompleteReq* temp = missioncomplete_req_;
  missioncomplete_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_missioncomplete_req(::fgame::CSMissionCompleteReq* missioncomplete_req) {
  delete missioncomplete_req_;
  missioncomplete_req_ = missioncomplete_req;
  if (missioncomplete_req) {
    set_has_missioncomplete_req();
  } else {
    clear_has_missioncomplete_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.MissionComplete_Req)
}

// optional .fgame.CSGetPowerEnergyActivityDataReq GetPowerEnergyActivityData_Req = 49;
inline bool C2ServerMsg::has_getpowerenergyactivitydata_req() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void C2ServerMsg::set_has_getpowerenergyactivitydata_req() {
  _has_bits_[1] |= 0x00000020u;
}
inline void C2ServerMsg::clear_has_getpowerenergyactivitydata_req() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void C2ServerMsg::clear_getpowerenergyactivitydata_req() {
  if (getpowerenergyactivitydata_req_ != NULL) getpowerenergyactivitydata_req_->::fgame::CSGetPowerEnergyActivityDataReq::Clear();
  clear_has_getpowerenergyactivitydata_req();
}
inline const ::fgame::CSGetPowerEnergyActivityDataReq& C2ServerMsg::getpowerenergyactivitydata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetPowerEnergyActivityData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getpowerenergyactivitydata_req_ != NULL ? *getpowerenergyactivitydata_req_ : *default_instance().getpowerenergyactivitydata_req_;
#else
  return getpowerenergyactivitydata_req_ != NULL ? *getpowerenergyactivitydata_req_ : *default_instance_->getpowerenergyactivitydata_req_;
#endif
}
inline ::fgame::CSGetPowerEnergyActivityDataReq* C2ServerMsg::mutable_getpowerenergyactivitydata_req() {
  set_has_getpowerenergyactivitydata_req();
  if (getpowerenergyactivitydata_req_ == NULL) getpowerenergyactivitydata_req_ = new ::fgame::CSGetPowerEnergyActivityDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetPowerEnergyActivityData_Req)
  return getpowerenergyactivitydata_req_;
}
inline ::fgame::CSGetPowerEnergyActivityDataReq* C2ServerMsg::release_getpowerenergyactivitydata_req() {
  clear_has_getpowerenergyactivitydata_req();
  ::fgame::CSGetPowerEnergyActivityDataReq* temp = getpowerenergyactivitydata_req_;
  getpowerenergyactivitydata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getpowerenergyactivitydata_req(::fgame::CSGetPowerEnergyActivityDataReq* getpowerenergyactivitydata_req) {
  delete getpowerenergyactivitydata_req_;
  getpowerenergyactivitydata_req_ = getpowerenergyactivitydata_req;
  if (getpowerenergyactivitydata_req) {
    set_has_getpowerenergyactivitydata_req();
  } else {
    clear_has_getpowerenergyactivitydata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetPowerEnergyActivityData_Req)
}

// optional .fgame.CSReceivePowerEnergyReq ReceivePowerEnergy_Req = 50;
inline bool C2ServerMsg::has_receivepowerenergy_req() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void C2ServerMsg::set_has_receivepowerenergy_req() {
  _has_bits_[1] |= 0x00000040u;
}
inline void C2ServerMsg::clear_has_receivepowerenergy_req() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void C2ServerMsg::clear_receivepowerenergy_req() {
  if (receivepowerenergy_req_ != NULL) receivepowerenergy_req_->::fgame::CSReceivePowerEnergyReq::Clear();
  clear_has_receivepowerenergy_req();
}
inline const ::fgame::CSReceivePowerEnergyReq& C2ServerMsg::receivepowerenergy_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ReceivePowerEnergy_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receivepowerenergy_req_ != NULL ? *receivepowerenergy_req_ : *default_instance().receivepowerenergy_req_;
#else
  return receivepowerenergy_req_ != NULL ? *receivepowerenergy_req_ : *default_instance_->receivepowerenergy_req_;
#endif
}
inline ::fgame::CSReceivePowerEnergyReq* C2ServerMsg::mutable_receivepowerenergy_req() {
  set_has_receivepowerenergy_req();
  if (receivepowerenergy_req_ == NULL) receivepowerenergy_req_ = new ::fgame::CSReceivePowerEnergyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ReceivePowerEnergy_Req)
  return receivepowerenergy_req_;
}
inline ::fgame::CSReceivePowerEnergyReq* C2ServerMsg::release_receivepowerenergy_req() {
  clear_has_receivepowerenergy_req();
  ::fgame::CSReceivePowerEnergyReq* temp = receivepowerenergy_req_;
  receivepowerenergy_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_receivepowerenergy_req(::fgame::CSReceivePowerEnergyReq* receivepowerenergy_req) {
  delete receivepowerenergy_req_;
  receivepowerenergy_req_ = receivepowerenergy_req;
  if (receivepowerenergy_req) {
    set_has_receivepowerenergy_req();
  } else {
    clear_has_receivepowerenergy_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ReceivePowerEnergy_Req)
}

// optional .fgame.CSGetMailReq GetMail_Req = 51;
inline bool C2ServerMsg::has_getmail_req() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void C2ServerMsg::set_has_getmail_req() {
  _has_bits_[1] |= 0x00000080u;
}
inline void C2ServerMsg::clear_has_getmail_req() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void C2ServerMsg::clear_getmail_req() {
  if (getmail_req_ != NULL) getmail_req_->::fgame::CSGetMailReq::Clear();
  clear_has_getmail_req();
}
inline const ::fgame::CSGetMailReq& C2ServerMsg::getmail_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetMail_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getmail_req_ != NULL ? *getmail_req_ : *default_instance().getmail_req_;
#else
  return getmail_req_ != NULL ? *getmail_req_ : *default_instance_->getmail_req_;
#endif
}
inline ::fgame::CSGetMailReq* C2ServerMsg::mutable_getmail_req() {
  set_has_getmail_req();
  if (getmail_req_ == NULL) getmail_req_ = new ::fgame::CSGetMailReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetMail_Req)
  return getmail_req_;
}
inline ::fgame::CSGetMailReq* C2ServerMsg::release_getmail_req() {
  clear_has_getmail_req();
  ::fgame::CSGetMailReq* temp = getmail_req_;
  getmail_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getmail_req(::fgame::CSGetMailReq* getmail_req) {
  delete getmail_req_;
  getmail_req_ = getmail_req;
  if (getmail_req) {
    set_has_getmail_req();
  } else {
    clear_has_getmail_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetMail_Req)
}

// optional .fgame.CSDelMailReq DelMail_Req = 52;
inline bool C2ServerMsg::has_delmail_req() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void C2ServerMsg::set_has_delmail_req() {
  _has_bits_[1] |= 0x00000100u;
}
inline void C2ServerMsg::clear_has_delmail_req() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void C2ServerMsg::clear_delmail_req() {
  if (delmail_req_ != NULL) delmail_req_->::fgame::CSDelMailReq::Clear();
  clear_has_delmail_req();
}
inline const ::fgame::CSDelMailReq& C2ServerMsg::delmail_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.DelMail_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return delmail_req_ != NULL ? *delmail_req_ : *default_instance().delmail_req_;
#else
  return delmail_req_ != NULL ? *delmail_req_ : *default_instance_->delmail_req_;
#endif
}
inline ::fgame::CSDelMailReq* C2ServerMsg::mutable_delmail_req() {
  set_has_delmail_req();
  if (delmail_req_ == NULL) delmail_req_ = new ::fgame::CSDelMailReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.DelMail_Req)
  return delmail_req_;
}
inline ::fgame::CSDelMailReq* C2ServerMsg::release_delmail_req() {
  clear_has_delmail_req();
  ::fgame::CSDelMailReq* temp = delmail_req_;
  delmail_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_delmail_req(::fgame::CSDelMailReq* delmail_req) {
  delete delmail_req_;
  delmail_req_ = delmail_req;
  if (delmail_req) {
    set_has_delmail_req();
  } else {
    clear_has_delmail_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.DelMail_Req)
}

// optional .fgame.CSBuyNewbieGiftReq BuyNewbieGift_Req = 54;
inline bool C2ServerMsg::has_buynewbiegift_req() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void C2ServerMsg::set_has_buynewbiegift_req() {
  _has_bits_[1] |= 0x00000200u;
}
inline void C2ServerMsg::clear_has_buynewbiegift_req() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void C2ServerMsg::clear_buynewbiegift_req() {
  if (buynewbiegift_req_ != NULL) buynewbiegift_req_->::fgame::CSBuyNewbieGiftReq::Clear();
  clear_has_buynewbiegift_req();
}
inline const ::fgame::CSBuyNewbieGiftReq& C2ServerMsg::buynewbiegift_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.BuyNewbieGift_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buynewbiegift_req_ != NULL ? *buynewbiegift_req_ : *default_instance().buynewbiegift_req_;
#else
  return buynewbiegift_req_ != NULL ? *buynewbiegift_req_ : *default_instance_->buynewbiegift_req_;
#endif
}
inline ::fgame::CSBuyNewbieGiftReq* C2ServerMsg::mutable_buynewbiegift_req() {
  set_has_buynewbiegift_req();
  if (buynewbiegift_req_ == NULL) buynewbiegift_req_ = new ::fgame::CSBuyNewbieGiftReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.BuyNewbieGift_Req)
  return buynewbiegift_req_;
}
inline ::fgame::CSBuyNewbieGiftReq* C2ServerMsg::release_buynewbiegift_req() {
  clear_has_buynewbiegift_req();
  ::fgame::CSBuyNewbieGiftReq* temp = buynewbiegift_req_;
  buynewbiegift_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_buynewbiegift_req(::fgame::CSBuyNewbieGiftReq* buynewbiegift_req) {
  delete buynewbiegift_req_;
  buynewbiegift_req_ = buynewbiegift_req;
  if (buynewbiegift_req) {
    set_has_buynewbiegift_req();
  } else {
    clear_has_buynewbiegift_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.BuyNewbieGift_Req)
}

// optional .fgame.CSRechargeCallbackReq RechargeCallback_Req = 55;
inline bool C2ServerMsg::has_rechargecallback_req() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void C2ServerMsg::set_has_rechargecallback_req() {
  _has_bits_[1] |= 0x00000400u;
}
inline void C2ServerMsg::clear_has_rechargecallback_req() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void C2ServerMsg::clear_rechargecallback_req() {
  if (rechargecallback_req_ != NULL) rechargecallback_req_->::fgame::CSRechargeCallbackReq::Clear();
  clear_has_rechargecallback_req();
}
inline const ::fgame::CSRechargeCallbackReq& C2ServerMsg::rechargecallback_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RechargeCallback_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rechargecallback_req_ != NULL ? *rechargecallback_req_ : *default_instance().rechargecallback_req_;
#else
  return rechargecallback_req_ != NULL ? *rechargecallback_req_ : *default_instance_->rechargecallback_req_;
#endif
}
inline ::fgame::CSRechargeCallbackReq* C2ServerMsg::mutable_rechargecallback_req() {
  set_has_rechargecallback_req();
  if (rechargecallback_req_ == NULL) rechargecallback_req_ = new ::fgame::CSRechargeCallbackReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RechargeCallback_Req)
  return rechargecallback_req_;
}
inline ::fgame::CSRechargeCallbackReq* C2ServerMsg::release_rechargecallback_req() {
  clear_has_rechargecallback_req();
  ::fgame::CSRechargeCallbackReq* temp = rechargecallback_req_;
  rechargecallback_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_rechargecallback_req(::fgame::CSRechargeCallbackReq* rechargecallback_req) {
  delete rechargecallback_req_;
  rechargecallback_req_ = rechargecallback_req;
  if (rechargecallback_req) {
    set_has_rechargecallback_req();
  } else {
    clear_has_rechargecallback_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RechargeCallback_Req)
}

// optional .fgame.CSFriendQueryReq FriendQuery_Req = 56;
inline bool C2ServerMsg::has_friendquery_req() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void C2ServerMsg::set_has_friendquery_req() {
  _has_bits_[1] |= 0x00000800u;
}
inline void C2ServerMsg::clear_has_friendquery_req() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void C2ServerMsg::clear_friendquery_req() {
  if (friendquery_req_ != NULL) friendquery_req_->::fgame::CSFriendQueryReq::Clear();
  clear_has_friendquery_req();
}
inline const ::fgame::CSFriendQueryReq& C2ServerMsg::friendquery_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendQuery_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendquery_req_ != NULL ? *friendquery_req_ : *default_instance().friendquery_req_;
#else
  return friendquery_req_ != NULL ? *friendquery_req_ : *default_instance_->friendquery_req_;
#endif
}
inline ::fgame::CSFriendQueryReq* C2ServerMsg::mutable_friendquery_req() {
  set_has_friendquery_req();
  if (friendquery_req_ == NULL) friendquery_req_ = new ::fgame::CSFriendQueryReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendQuery_Req)
  return friendquery_req_;
}
inline ::fgame::CSFriendQueryReq* C2ServerMsg::release_friendquery_req() {
  clear_has_friendquery_req();
  ::fgame::CSFriendQueryReq* temp = friendquery_req_;
  friendquery_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendquery_req(::fgame::CSFriendQueryReq* friendquery_req) {
  delete friendquery_req_;
  friendquery_req_ = friendquery_req;
  if (friendquery_req) {
    set_has_friendquery_req();
  } else {
    clear_has_friendquery_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendQuery_Req)
}

// optional .fgame.CSFriendRequestAddReq FriendRequestAdd_Req = 57;
inline bool C2ServerMsg::has_friendrequestadd_req() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void C2ServerMsg::set_has_friendrequestadd_req() {
  _has_bits_[1] |= 0x00001000u;
}
inline void C2ServerMsg::clear_has_friendrequestadd_req() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void C2ServerMsg::clear_friendrequestadd_req() {
  if (friendrequestadd_req_ != NULL) friendrequestadd_req_->::fgame::CSFriendRequestAddReq::Clear();
  clear_has_friendrequestadd_req();
}
inline const ::fgame::CSFriendRequestAddReq& C2ServerMsg::friendrequestadd_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendRequestAdd_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendrequestadd_req_ != NULL ? *friendrequestadd_req_ : *default_instance().friendrequestadd_req_;
#else
  return friendrequestadd_req_ != NULL ? *friendrequestadd_req_ : *default_instance_->friendrequestadd_req_;
#endif
}
inline ::fgame::CSFriendRequestAddReq* C2ServerMsg::mutable_friendrequestadd_req() {
  set_has_friendrequestadd_req();
  if (friendrequestadd_req_ == NULL) friendrequestadd_req_ = new ::fgame::CSFriendRequestAddReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendRequestAdd_Req)
  return friendrequestadd_req_;
}
inline ::fgame::CSFriendRequestAddReq* C2ServerMsg::release_friendrequestadd_req() {
  clear_has_friendrequestadd_req();
  ::fgame::CSFriendRequestAddReq* temp = friendrequestadd_req_;
  friendrequestadd_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendrequestadd_req(::fgame::CSFriendRequestAddReq* friendrequestadd_req) {
  delete friendrequestadd_req_;
  friendrequestadd_req_ = friendrequestadd_req;
  if (friendrequestadd_req) {
    set_has_friendrequestadd_req();
  } else {
    clear_has_friendrequestadd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendRequestAdd_Req)
}

// optional .fgame.CSFriendConfirmAddReq FriendConfirmAdd_Req = 58;
inline bool C2ServerMsg::has_friendconfirmadd_req() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void C2ServerMsg::set_has_friendconfirmadd_req() {
  _has_bits_[1] |= 0x00002000u;
}
inline void C2ServerMsg::clear_has_friendconfirmadd_req() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void C2ServerMsg::clear_friendconfirmadd_req() {
  if (friendconfirmadd_req_ != NULL) friendconfirmadd_req_->::fgame::CSFriendConfirmAddReq::Clear();
  clear_has_friendconfirmadd_req();
}
inline const ::fgame::CSFriendConfirmAddReq& C2ServerMsg::friendconfirmadd_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendConfirmAdd_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendconfirmadd_req_ != NULL ? *friendconfirmadd_req_ : *default_instance().friendconfirmadd_req_;
#else
  return friendconfirmadd_req_ != NULL ? *friendconfirmadd_req_ : *default_instance_->friendconfirmadd_req_;
#endif
}
inline ::fgame::CSFriendConfirmAddReq* C2ServerMsg::mutable_friendconfirmadd_req() {
  set_has_friendconfirmadd_req();
  if (friendconfirmadd_req_ == NULL) friendconfirmadd_req_ = new ::fgame::CSFriendConfirmAddReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendConfirmAdd_Req)
  return friendconfirmadd_req_;
}
inline ::fgame::CSFriendConfirmAddReq* C2ServerMsg::release_friendconfirmadd_req() {
  clear_has_friendconfirmadd_req();
  ::fgame::CSFriendConfirmAddReq* temp = friendconfirmadd_req_;
  friendconfirmadd_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendconfirmadd_req(::fgame::CSFriendConfirmAddReq* friendconfirmadd_req) {
  delete friendconfirmadd_req_;
  friendconfirmadd_req_ = friendconfirmadd_req;
  if (friendconfirmadd_req) {
    set_has_friendconfirmadd_req();
  } else {
    clear_has_friendconfirmadd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendConfirmAdd_Req)
}

// optional .fgame.CSFriendGetInfoReq FriendGetInfo_Req = 59;
inline bool C2ServerMsg::has_friendgetinfo_req() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void C2ServerMsg::set_has_friendgetinfo_req() {
  _has_bits_[1] |= 0x00004000u;
}
inline void C2ServerMsg::clear_has_friendgetinfo_req() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void C2ServerMsg::clear_friendgetinfo_req() {
  if (friendgetinfo_req_ != NULL) friendgetinfo_req_->::fgame::CSFriendGetInfoReq::Clear();
  clear_has_friendgetinfo_req();
}
inline const ::fgame::CSFriendGetInfoReq& C2ServerMsg::friendgetinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendGetInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendgetinfo_req_ != NULL ? *friendgetinfo_req_ : *default_instance().friendgetinfo_req_;
#else
  return friendgetinfo_req_ != NULL ? *friendgetinfo_req_ : *default_instance_->friendgetinfo_req_;
#endif
}
inline ::fgame::CSFriendGetInfoReq* C2ServerMsg::mutable_friendgetinfo_req() {
  set_has_friendgetinfo_req();
  if (friendgetinfo_req_ == NULL) friendgetinfo_req_ = new ::fgame::CSFriendGetInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendGetInfo_Req)
  return friendgetinfo_req_;
}
inline ::fgame::CSFriendGetInfoReq* C2ServerMsg::release_friendgetinfo_req() {
  clear_has_friendgetinfo_req();
  ::fgame::CSFriendGetInfoReq* temp = friendgetinfo_req_;
  friendgetinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendgetinfo_req(::fgame::CSFriendGetInfoReq* friendgetinfo_req) {
  delete friendgetinfo_req_;
  friendgetinfo_req_ = friendgetinfo_req;
  if (friendgetinfo_req) {
    set_has_friendgetinfo_req();
  } else {
    clear_has_friendgetinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendGetInfo_Req)
}

// optional .fgame.CSFriendRequestRemoveReq FriendRequestRemove_Req = 60;
inline bool C2ServerMsg::has_friendrequestremove_req() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void C2ServerMsg::set_has_friendrequestremove_req() {
  _has_bits_[1] |= 0x00008000u;
}
inline void C2ServerMsg::clear_has_friendrequestremove_req() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void C2ServerMsg::clear_friendrequestremove_req() {
  if (friendrequestremove_req_ != NULL) friendrequestremove_req_->::fgame::CSFriendRequestRemoveReq::Clear();
  clear_has_friendrequestremove_req();
}
inline const ::fgame::CSFriendRequestRemoveReq& C2ServerMsg::friendrequestremove_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendRequestRemove_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendrequestremove_req_ != NULL ? *friendrequestremove_req_ : *default_instance().friendrequestremove_req_;
#else
  return friendrequestremove_req_ != NULL ? *friendrequestremove_req_ : *default_instance_->friendrequestremove_req_;
#endif
}
inline ::fgame::CSFriendRequestRemoveReq* C2ServerMsg::mutable_friendrequestremove_req() {
  set_has_friendrequestremove_req();
  if (friendrequestremove_req_ == NULL) friendrequestremove_req_ = new ::fgame::CSFriendRequestRemoveReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendRequestRemove_Req)
  return friendrequestremove_req_;
}
inline ::fgame::CSFriendRequestRemoveReq* C2ServerMsg::release_friendrequestremove_req() {
  clear_has_friendrequestremove_req();
  ::fgame::CSFriendRequestRemoveReq* temp = friendrequestremove_req_;
  friendrequestremove_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendrequestremove_req(::fgame::CSFriendRequestRemoveReq* friendrequestremove_req) {
  delete friendrequestremove_req_;
  friendrequestremove_req_ = friendrequestremove_req;
  if (friendrequestremove_req) {
    set_has_friendrequestremove_req();
  } else {
    clear_has_friendrequestremove_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendRequestRemove_Req)
}

// optional .fgame.CSFriendAddBlackListReq FriendAddBlackList_Req = 61;
inline bool C2ServerMsg::has_friendaddblacklist_req() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void C2ServerMsg::set_has_friendaddblacklist_req() {
  _has_bits_[1] |= 0x00010000u;
}
inline void C2ServerMsg::clear_has_friendaddblacklist_req() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void C2ServerMsg::clear_friendaddblacklist_req() {
  if (friendaddblacklist_req_ != NULL) friendaddblacklist_req_->::fgame::CSFriendAddBlackListReq::Clear();
  clear_has_friendaddblacklist_req();
}
inline const ::fgame::CSFriendAddBlackListReq& C2ServerMsg::friendaddblacklist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendAddBlackList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendaddblacklist_req_ != NULL ? *friendaddblacklist_req_ : *default_instance().friendaddblacklist_req_;
#else
  return friendaddblacklist_req_ != NULL ? *friendaddblacklist_req_ : *default_instance_->friendaddblacklist_req_;
#endif
}
inline ::fgame::CSFriendAddBlackListReq* C2ServerMsg::mutable_friendaddblacklist_req() {
  set_has_friendaddblacklist_req();
  if (friendaddblacklist_req_ == NULL) friendaddblacklist_req_ = new ::fgame::CSFriendAddBlackListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendAddBlackList_Req)
  return friendaddblacklist_req_;
}
inline ::fgame::CSFriendAddBlackListReq* C2ServerMsg::release_friendaddblacklist_req() {
  clear_has_friendaddblacklist_req();
  ::fgame::CSFriendAddBlackListReq* temp = friendaddblacklist_req_;
  friendaddblacklist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendaddblacklist_req(::fgame::CSFriendAddBlackListReq* friendaddblacklist_req) {
  delete friendaddblacklist_req_;
  friendaddblacklist_req_ = friendaddblacklist_req;
  if (friendaddblacklist_req) {
    set_has_friendaddblacklist_req();
  } else {
    clear_has_friendaddblacklist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendAddBlackList_Req)
}

// optional .fgame.CSFriendRemoveBlackListReq FriendRemoveBlackList_Req = 62;
inline bool C2ServerMsg::has_friendremoveblacklist_req() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void C2ServerMsg::set_has_friendremoveblacklist_req() {
  _has_bits_[1] |= 0x00020000u;
}
inline void C2ServerMsg::clear_has_friendremoveblacklist_req() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void C2ServerMsg::clear_friendremoveblacklist_req() {
  if (friendremoveblacklist_req_ != NULL) friendremoveblacklist_req_->::fgame::CSFriendRemoveBlackListReq::Clear();
  clear_has_friendremoveblacklist_req();
}
inline const ::fgame::CSFriendRemoveBlackListReq& C2ServerMsg::friendremoveblacklist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.FriendRemoveBlackList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendremoveblacklist_req_ != NULL ? *friendremoveblacklist_req_ : *default_instance().friendremoveblacklist_req_;
#else
  return friendremoveblacklist_req_ != NULL ? *friendremoveblacklist_req_ : *default_instance_->friendremoveblacklist_req_;
#endif
}
inline ::fgame::CSFriendRemoveBlackListReq* C2ServerMsg::mutable_friendremoveblacklist_req() {
  set_has_friendremoveblacklist_req();
  if (friendremoveblacklist_req_ == NULL) friendremoveblacklist_req_ = new ::fgame::CSFriendRemoveBlackListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.FriendRemoveBlackList_Req)
  return friendremoveblacklist_req_;
}
inline ::fgame::CSFriendRemoveBlackListReq* C2ServerMsg::release_friendremoveblacklist_req() {
  clear_has_friendremoveblacklist_req();
  ::fgame::CSFriendRemoveBlackListReq* temp = friendremoveblacklist_req_;
  friendremoveblacklist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_friendremoveblacklist_req(::fgame::CSFriendRemoveBlackListReq* friendremoveblacklist_req) {
  delete friendremoveblacklist_req_;
  friendremoveblacklist_req_ = friendremoveblacklist_req;
  if (friendremoveblacklist_req) {
    set_has_friendremoveblacklist_req();
  } else {
    clear_has_friendremoveblacklist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.FriendRemoveBlackList_Req)
}

// optional .fgame.CSPvpChatReq PvpChat_Req = 63;
inline bool C2ServerMsg::has_pvpchat_req() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void C2ServerMsg::set_has_pvpchat_req() {
  _has_bits_[1] |= 0x00040000u;
}
inline void C2ServerMsg::clear_has_pvpchat_req() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void C2ServerMsg::clear_pvpchat_req() {
  if (pvpchat_req_ != NULL) pvpchat_req_->::fgame::CSPvpChatReq::Clear();
  clear_has_pvpchat_req();
}
inline const ::fgame::CSPvpChatReq& C2ServerMsg::pvpchat_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpChat_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpchat_req_ != NULL ? *pvpchat_req_ : *default_instance().pvpchat_req_;
#else
  return pvpchat_req_ != NULL ? *pvpchat_req_ : *default_instance_->pvpchat_req_;
#endif
}
inline ::fgame::CSPvpChatReq* C2ServerMsg::mutable_pvpchat_req() {
  set_has_pvpchat_req();
  if (pvpchat_req_ == NULL) pvpchat_req_ = new ::fgame::CSPvpChatReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpChat_Req)
  return pvpchat_req_;
}
inline ::fgame::CSPvpChatReq* C2ServerMsg::release_pvpchat_req() {
  clear_has_pvpchat_req();
  ::fgame::CSPvpChatReq* temp = pvpchat_req_;
  pvpchat_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpchat_req(::fgame::CSPvpChatReq* pvpchat_req) {
  delete pvpchat_req_;
  pvpchat_req_ = pvpchat_req;
  if (pvpchat_req) {
    set_has_pvpchat_req();
  } else {
    clear_has_pvpchat_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpChat_Req)
}

// optional .fgame.CSUseGiftCodeReq UseGiftCode_Req = 64;
inline bool C2ServerMsg::has_usegiftcode_req() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void C2ServerMsg::set_has_usegiftcode_req() {
  _has_bits_[1] |= 0x00080000u;
}
inline void C2ServerMsg::clear_has_usegiftcode_req() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void C2ServerMsg::clear_usegiftcode_req() {
  if (usegiftcode_req_ != NULL) usegiftcode_req_->::fgame::CSUseGiftCodeReq::Clear();
  clear_has_usegiftcode_req();
}
inline const ::fgame::CSUseGiftCodeReq& C2ServerMsg::usegiftcode_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.UseGiftCode_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return usegiftcode_req_ != NULL ? *usegiftcode_req_ : *default_instance().usegiftcode_req_;
#else
  return usegiftcode_req_ != NULL ? *usegiftcode_req_ : *default_instance_->usegiftcode_req_;
#endif
}
inline ::fgame::CSUseGiftCodeReq* C2ServerMsg::mutable_usegiftcode_req() {
  set_has_usegiftcode_req();
  if (usegiftcode_req_ == NULL) usegiftcode_req_ = new ::fgame::CSUseGiftCodeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.UseGiftCode_Req)
  return usegiftcode_req_;
}
inline ::fgame::CSUseGiftCodeReq* C2ServerMsg::release_usegiftcode_req() {
  clear_has_usegiftcode_req();
  ::fgame::CSUseGiftCodeReq* temp = usegiftcode_req_;
  usegiftcode_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_usegiftcode_req(::fgame::CSUseGiftCodeReq* usegiftcode_req) {
  delete usegiftcode_req_;
  usegiftcode_req_ = usegiftcode_req;
  if (usegiftcode_req) {
    set_has_usegiftcode_req();
  } else {
    clear_has_usegiftcode_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.UseGiftCode_Req)
}

// optional .fgame.CSQueryPlayerInfoReq QueryPlayerInfo_Req = 65;
inline bool C2ServerMsg::has_queryplayerinfo_req() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void C2ServerMsg::set_has_queryplayerinfo_req() {
  _has_bits_[1] |= 0x00100000u;
}
inline void C2ServerMsg::clear_has_queryplayerinfo_req() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void C2ServerMsg::clear_queryplayerinfo_req() {
  if (queryplayerinfo_req_ != NULL) queryplayerinfo_req_->::fgame::CSQueryPlayerInfoReq::Clear();
  clear_has_queryplayerinfo_req();
}
inline const ::fgame::CSQueryPlayerInfoReq& C2ServerMsg::queryplayerinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.QueryPlayerInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return queryplayerinfo_req_ != NULL ? *queryplayerinfo_req_ : *default_instance().queryplayerinfo_req_;
#else
  return queryplayerinfo_req_ != NULL ? *queryplayerinfo_req_ : *default_instance_->queryplayerinfo_req_;
#endif
}
inline ::fgame::CSQueryPlayerInfoReq* C2ServerMsg::mutable_queryplayerinfo_req() {
  set_has_queryplayerinfo_req();
  if (queryplayerinfo_req_ == NULL) queryplayerinfo_req_ = new ::fgame::CSQueryPlayerInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.QueryPlayerInfo_Req)
  return queryplayerinfo_req_;
}
inline ::fgame::CSQueryPlayerInfoReq* C2ServerMsg::release_queryplayerinfo_req() {
  clear_has_queryplayerinfo_req();
  ::fgame::CSQueryPlayerInfoReq* temp = queryplayerinfo_req_;
  queryplayerinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_queryplayerinfo_req(::fgame::CSQueryPlayerInfoReq* queryplayerinfo_req) {
  delete queryplayerinfo_req_;
  queryplayerinfo_req_ = queryplayerinfo_req;
  if (queryplayerinfo_req) {
    set_has_queryplayerinfo_req();
  } else {
    clear_has_queryplayerinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.QueryPlayerInfo_Req)
}

// optional .fgame.CSPersonalRoomCreateReq PersonalRoomCreate_Req = 66;
inline bool C2ServerMsg::has_personalroomcreate_req() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomcreate_req() {
  _has_bits_[1] |= 0x00200000u;
}
inline void C2ServerMsg::clear_has_personalroomcreate_req() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void C2ServerMsg::clear_personalroomcreate_req() {
  if (personalroomcreate_req_ != NULL) personalroomcreate_req_->::fgame::CSPersonalRoomCreateReq::Clear();
  clear_has_personalroomcreate_req();
}
inline const ::fgame::CSPersonalRoomCreateReq& C2ServerMsg::personalroomcreate_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomCreate_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomcreate_req_ != NULL ? *personalroomcreate_req_ : *default_instance().personalroomcreate_req_;
#else
  return personalroomcreate_req_ != NULL ? *personalroomcreate_req_ : *default_instance_->personalroomcreate_req_;
#endif
}
inline ::fgame::CSPersonalRoomCreateReq* C2ServerMsg::mutable_personalroomcreate_req() {
  set_has_personalroomcreate_req();
  if (personalroomcreate_req_ == NULL) personalroomcreate_req_ = new ::fgame::CSPersonalRoomCreateReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomCreate_Req)
  return personalroomcreate_req_;
}
inline ::fgame::CSPersonalRoomCreateReq* C2ServerMsg::release_personalroomcreate_req() {
  clear_has_personalroomcreate_req();
  ::fgame::CSPersonalRoomCreateReq* temp = personalroomcreate_req_;
  personalroomcreate_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomcreate_req(::fgame::CSPersonalRoomCreateReq* personalroomcreate_req) {
  delete personalroomcreate_req_;
  personalroomcreate_req_ = personalroomcreate_req;
  if (personalroomcreate_req) {
    set_has_personalroomcreate_req();
  } else {
    clear_has_personalroomcreate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomCreate_Req)
}

// optional .fgame.CSPersonalRoomEnterReq PersonalRoomEnter_Req = 67;
inline bool C2ServerMsg::has_personalroomenter_req() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomenter_req() {
  _has_bits_[1] |= 0x00400000u;
}
inline void C2ServerMsg::clear_has_personalroomenter_req() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void C2ServerMsg::clear_personalroomenter_req() {
  if (personalroomenter_req_ != NULL) personalroomenter_req_->::fgame::CSPersonalRoomEnterReq::Clear();
  clear_has_personalroomenter_req();
}
inline const ::fgame::CSPersonalRoomEnterReq& C2ServerMsg::personalroomenter_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomEnter_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomenter_req_ != NULL ? *personalroomenter_req_ : *default_instance().personalroomenter_req_;
#else
  return personalroomenter_req_ != NULL ? *personalroomenter_req_ : *default_instance_->personalroomenter_req_;
#endif
}
inline ::fgame::CSPersonalRoomEnterReq* C2ServerMsg::mutable_personalroomenter_req() {
  set_has_personalroomenter_req();
  if (personalroomenter_req_ == NULL) personalroomenter_req_ = new ::fgame::CSPersonalRoomEnterReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomEnter_Req)
  return personalroomenter_req_;
}
inline ::fgame::CSPersonalRoomEnterReq* C2ServerMsg::release_personalroomenter_req() {
  clear_has_personalroomenter_req();
  ::fgame::CSPersonalRoomEnterReq* temp = personalroomenter_req_;
  personalroomenter_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomenter_req(::fgame::CSPersonalRoomEnterReq* personalroomenter_req) {
  delete personalroomenter_req_;
  personalroomenter_req_ = personalroomenter_req;
  if (personalroomenter_req) {
    set_has_personalroomenter_req();
  } else {
    clear_has_personalroomenter_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomEnter_Req)
}

// optional .fgame.CSPersonalRoomLeaveReq PersonalRoomLeave_Req = 68;
inline bool C2ServerMsg::has_personalroomleave_req() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomleave_req() {
  _has_bits_[1] |= 0x00800000u;
}
inline void C2ServerMsg::clear_has_personalroomleave_req() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void C2ServerMsg::clear_personalroomleave_req() {
  if (personalroomleave_req_ != NULL) personalroomleave_req_->::fgame::CSPersonalRoomLeaveReq::Clear();
  clear_has_personalroomleave_req();
}
inline const ::fgame::CSPersonalRoomLeaveReq& C2ServerMsg::personalroomleave_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomLeave_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomleave_req_ != NULL ? *personalroomleave_req_ : *default_instance().personalroomleave_req_;
#else
  return personalroomleave_req_ != NULL ? *personalroomleave_req_ : *default_instance_->personalroomleave_req_;
#endif
}
inline ::fgame::CSPersonalRoomLeaveReq* C2ServerMsg::mutable_personalroomleave_req() {
  set_has_personalroomleave_req();
  if (personalroomleave_req_ == NULL) personalroomleave_req_ = new ::fgame::CSPersonalRoomLeaveReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomLeave_Req)
  return personalroomleave_req_;
}
inline ::fgame::CSPersonalRoomLeaveReq* C2ServerMsg::release_personalroomleave_req() {
  clear_has_personalroomleave_req();
  ::fgame::CSPersonalRoomLeaveReq* temp = personalroomleave_req_;
  personalroomleave_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomleave_req(::fgame::CSPersonalRoomLeaveReq* personalroomleave_req) {
  delete personalroomleave_req_;
  personalroomleave_req_ = personalroomleave_req;
  if (personalroomleave_req) {
    set_has_personalroomleave_req();
  } else {
    clear_has_personalroomleave_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomLeave_Req)
}

// optional .fgame.CSPersonalRoomKickReq PersonalRoomKick_Req = 69;
inline bool C2ServerMsg::has_personalroomkick_req() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomkick_req() {
  _has_bits_[1] |= 0x01000000u;
}
inline void C2ServerMsg::clear_has_personalroomkick_req() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void C2ServerMsg::clear_personalroomkick_req() {
  if (personalroomkick_req_ != NULL) personalroomkick_req_->::fgame::CSPersonalRoomKickReq::Clear();
  clear_has_personalroomkick_req();
}
inline const ::fgame::CSPersonalRoomKickReq& C2ServerMsg::personalroomkick_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomKick_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomkick_req_ != NULL ? *personalroomkick_req_ : *default_instance().personalroomkick_req_;
#else
  return personalroomkick_req_ != NULL ? *personalroomkick_req_ : *default_instance_->personalroomkick_req_;
#endif
}
inline ::fgame::CSPersonalRoomKickReq* C2ServerMsg::mutable_personalroomkick_req() {
  set_has_personalroomkick_req();
  if (personalroomkick_req_ == NULL) personalroomkick_req_ = new ::fgame::CSPersonalRoomKickReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomKick_Req)
  return personalroomkick_req_;
}
inline ::fgame::CSPersonalRoomKickReq* C2ServerMsg::release_personalroomkick_req() {
  clear_has_personalroomkick_req();
  ::fgame::CSPersonalRoomKickReq* temp = personalroomkick_req_;
  personalroomkick_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomkick_req(::fgame::CSPersonalRoomKickReq* personalroomkick_req) {
  delete personalroomkick_req_;
  personalroomkick_req_ = personalroomkick_req;
  if (personalroomkick_req) {
    set_has_personalroomkick_req();
  } else {
    clear_has_personalroomkick_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomKick_Req)
}

// optional .fgame.CSPersonalRoomInviteReq PersonalRoomInvite_Req = 70;
inline bool C2ServerMsg::has_personalroominvite_req() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroominvite_req() {
  _has_bits_[1] |= 0x02000000u;
}
inline void C2ServerMsg::clear_has_personalroominvite_req() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void C2ServerMsg::clear_personalroominvite_req() {
  if (personalroominvite_req_ != NULL) personalroominvite_req_->::fgame::CSPersonalRoomInviteReq::Clear();
  clear_has_personalroominvite_req();
}
inline const ::fgame::CSPersonalRoomInviteReq& C2ServerMsg::personalroominvite_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomInvite_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroominvite_req_ != NULL ? *personalroominvite_req_ : *default_instance().personalroominvite_req_;
#else
  return personalroominvite_req_ != NULL ? *personalroominvite_req_ : *default_instance_->personalroominvite_req_;
#endif
}
inline ::fgame::CSPersonalRoomInviteReq* C2ServerMsg::mutable_personalroominvite_req() {
  set_has_personalroominvite_req();
  if (personalroominvite_req_ == NULL) personalroominvite_req_ = new ::fgame::CSPersonalRoomInviteReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomInvite_Req)
  return personalroominvite_req_;
}
inline ::fgame::CSPersonalRoomInviteReq* C2ServerMsg::release_personalroominvite_req() {
  clear_has_personalroominvite_req();
  ::fgame::CSPersonalRoomInviteReq* temp = personalroominvite_req_;
  personalroominvite_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroominvite_req(::fgame::CSPersonalRoomInviteReq* personalroominvite_req) {
  delete personalroominvite_req_;
  personalroominvite_req_ = personalroominvite_req;
  if (personalroominvite_req) {
    set_has_personalroominvite_req();
  } else {
    clear_has_personalroominvite_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomInvite_Req)
}

// optional .fgame.CSPersonalRoomBroadcastReq PersonalRoomBroadcast_Req = 71;
inline bool C2ServerMsg::has_personalroombroadcast_req() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroombroadcast_req() {
  _has_bits_[1] |= 0x04000000u;
}
inline void C2ServerMsg::clear_has_personalroombroadcast_req() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void C2ServerMsg::clear_personalroombroadcast_req() {
  if (personalroombroadcast_req_ != NULL) personalroombroadcast_req_->::fgame::CSPersonalRoomBroadcastReq::Clear();
  clear_has_personalroombroadcast_req();
}
inline const ::fgame::CSPersonalRoomBroadcastReq& C2ServerMsg::personalroombroadcast_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomBroadcast_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroombroadcast_req_ != NULL ? *personalroombroadcast_req_ : *default_instance().personalroombroadcast_req_;
#else
  return personalroombroadcast_req_ != NULL ? *personalroombroadcast_req_ : *default_instance_->personalroombroadcast_req_;
#endif
}
inline ::fgame::CSPersonalRoomBroadcastReq* C2ServerMsg::mutable_personalroombroadcast_req() {
  set_has_personalroombroadcast_req();
  if (personalroombroadcast_req_ == NULL) personalroombroadcast_req_ = new ::fgame::CSPersonalRoomBroadcastReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomBroadcast_Req)
  return personalroombroadcast_req_;
}
inline ::fgame::CSPersonalRoomBroadcastReq* C2ServerMsg::release_personalroombroadcast_req() {
  clear_has_personalroombroadcast_req();
  ::fgame::CSPersonalRoomBroadcastReq* temp = personalroombroadcast_req_;
  personalroombroadcast_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroombroadcast_req(::fgame::CSPersonalRoomBroadcastReq* personalroombroadcast_req) {
  delete personalroombroadcast_req_;
  personalroombroadcast_req_ = personalroombroadcast_req;
  if (personalroombroadcast_req) {
    set_has_personalroombroadcast_req();
  } else {
    clear_has_personalroombroadcast_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomBroadcast_Req)
}

// optional .fgame.CSPersonalRoomChatReq PersonalRoomChat_Req = 72;
inline bool C2ServerMsg::has_personalroomchat_req() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomchat_req() {
  _has_bits_[1] |= 0x08000000u;
}
inline void C2ServerMsg::clear_has_personalroomchat_req() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void C2ServerMsg::clear_personalroomchat_req() {
  if (personalroomchat_req_ != NULL) personalroomchat_req_->::fgame::CSPersonalRoomChatReq::Clear();
  clear_has_personalroomchat_req();
}
inline const ::fgame::CSPersonalRoomChatReq& C2ServerMsg::personalroomchat_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomChat_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomchat_req_ != NULL ? *personalroomchat_req_ : *default_instance().personalroomchat_req_;
#else
  return personalroomchat_req_ != NULL ? *personalroomchat_req_ : *default_instance_->personalroomchat_req_;
#endif
}
inline ::fgame::CSPersonalRoomChatReq* C2ServerMsg::mutable_personalroomchat_req() {
  set_has_personalroomchat_req();
  if (personalroomchat_req_ == NULL) personalroomchat_req_ = new ::fgame::CSPersonalRoomChatReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomChat_Req)
  return personalroomchat_req_;
}
inline ::fgame::CSPersonalRoomChatReq* C2ServerMsg::release_personalroomchat_req() {
  clear_has_personalroomchat_req();
  ::fgame::CSPersonalRoomChatReq* temp = personalroomchat_req_;
  personalroomchat_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomchat_req(::fgame::CSPersonalRoomChatReq* personalroomchat_req) {
  delete personalroomchat_req_;
  personalroomchat_req_ = personalroomchat_req;
  if (personalroomchat_req) {
    set_has_personalroomchat_req();
  } else {
    clear_has_personalroomchat_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomChat_Req)
}

// optional .fgame.CSPersonalRoomModeReq PersonalRoomMode_Req = 73;
inline bool C2ServerMsg::has_personalroommode_req() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroommode_req() {
  _has_bits_[1] |= 0x10000000u;
}
inline void C2ServerMsg::clear_has_personalroommode_req() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void C2ServerMsg::clear_personalroommode_req() {
  if (personalroommode_req_ != NULL) personalroommode_req_->::fgame::CSPersonalRoomModeReq::Clear();
  clear_has_personalroommode_req();
}
inline const ::fgame::CSPersonalRoomModeReq& C2ServerMsg::personalroommode_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomMode_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroommode_req_ != NULL ? *personalroommode_req_ : *default_instance().personalroommode_req_;
#else
  return personalroommode_req_ != NULL ? *personalroommode_req_ : *default_instance_->personalroommode_req_;
#endif
}
inline ::fgame::CSPersonalRoomModeReq* C2ServerMsg::mutable_personalroommode_req() {
  set_has_personalroommode_req();
  if (personalroommode_req_ == NULL) personalroommode_req_ = new ::fgame::CSPersonalRoomModeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomMode_Req)
  return personalroommode_req_;
}
inline ::fgame::CSPersonalRoomModeReq* C2ServerMsg::release_personalroommode_req() {
  clear_has_personalroommode_req();
  ::fgame::CSPersonalRoomModeReq* temp = personalroommode_req_;
  personalroommode_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroommode_req(::fgame::CSPersonalRoomModeReq* personalroommode_req) {
  delete personalroommode_req_;
  personalroommode_req_ = personalroommode_req;
  if (personalroommode_req) {
    set_has_personalroommode_req();
  } else {
    clear_has_personalroommode_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomMode_Req)
}

// optional .fgame.CSPersonalRoomBeginFightReq PersonalRoomBeginFight_Req = 74;
inline bool C2ServerMsg::has_personalroombeginfight_req() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroombeginfight_req() {
  _has_bits_[1] |= 0x20000000u;
}
inline void C2ServerMsg::clear_has_personalroombeginfight_req() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void C2ServerMsg::clear_personalroombeginfight_req() {
  if (personalroombeginfight_req_ != NULL) personalroombeginfight_req_->::fgame::CSPersonalRoomBeginFightReq::Clear();
  clear_has_personalroombeginfight_req();
}
inline const ::fgame::CSPersonalRoomBeginFightReq& C2ServerMsg::personalroombeginfight_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomBeginFight_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroombeginfight_req_ != NULL ? *personalroombeginfight_req_ : *default_instance().personalroombeginfight_req_;
#else
  return personalroombeginfight_req_ != NULL ? *personalroombeginfight_req_ : *default_instance_->personalroombeginfight_req_;
#endif
}
inline ::fgame::CSPersonalRoomBeginFightReq* C2ServerMsg::mutable_personalroombeginfight_req() {
  set_has_personalroombeginfight_req();
  if (personalroombeginfight_req_ == NULL) personalroombeginfight_req_ = new ::fgame::CSPersonalRoomBeginFightReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomBeginFight_Req)
  return personalroombeginfight_req_;
}
inline ::fgame::CSPersonalRoomBeginFightReq* C2ServerMsg::release_personalroombeginfight_req() {
  clear_has_personalroombeginfight_req();
  ::fgame::CSPersonalRoomBeginFightReq* temp = personalroombeginfight_req_;
  personalroombeginfight_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroombeginfight_req(::fgame::CSPersonalRoomBeginFightReq* personalroombeginfight_req) {
  delete personalroombeginfight_req_;
  personalroombeginfight_req_ = personalroombeginfight_req;
  if (personalroombeginfight_req) {
    set_has_personalroombeginfight_req();
  } else {
    clear_has_personalroombeginfight_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomBeginFight_Req)
}

// optional .fgame.CSPersonalRoomApplyOrRefuseInviteReq PersonalRoomApplyOrRefuseInvite_Req = 76;
inline bool C2ServerMsg::has_personalroomapplyorrefuseinvite_req() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void C2ServerMsg::set_has_personalroomapplyorrefuseinvite_req() {
  _has_bits_[1] |= 0x40000000u;
}
inline void C2ServerMsg::clear_has_personalroomapplyorrefuseinvite_req() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void C2ServerMsg::clear_personalroomapplyorrefuseinvite_req() {
  if (personalroomapplyorrefuseinvite_req_ != NULL) personalroomapplyorrefuseinvite_req_->::fgame::CSPersonalRoomApplyOrRefuseInviteReq::Clear();
  clear_has_personalroomapplyorrefuseinvite_req();
}
inline const ::fgame::CSPersonalRoomApplyOrRefuseInviteReq& C2ServerMsg::personalroomapplyorrefuseinvite_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomApplyOrRefuseInvite_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomapplyorrefuseinvite_req_ != NULL ? *personalroomapplyorrefuseinvite_req_ : *default_instance().personalroomapplyorrefuseinvite_req_;
#else
  return personalroomapplyorrefuseinvite_req_ != NULL ? *personalroomapplyorrefuseinvite_req_ : *default_instance_->personalroomapplyorrefuseinvite_req_;
#endif
}
inline ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* C2ServerMsg::mutable_personalroomapplyorrefuseinvite_req() {
  set_has_personalroomapplyorrefuseinvite_req();
  if (personalroomapplyorrefuseinvite_req_ == NULL) personalroomapplyorrefuseinvite_req_ = new ::fgame::CSPersonalRoomApplyOrRefuseInviteReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomApplyOrRefuseInvite_Req)
  return personalroomapplyorrefuseinvite_req_;
}
inline ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* C2ServerMsg::release_personalroomapplyorrefuseinvite_req() {
  clear_has_personalroomapplyorrefuseinvite_req();
  ::fgame::CSPersonalRoomApplyOrRefuseInviteReq* temp = personalroomapplyorrefuseinvite_req_;
  personalroomapplyorrefuseinvite_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomapplyorrefuseinvite_req(::fgame::CSPersonalRoomApplyOrRefuseInviteReq* personalroomapplyorrefuseinvite_req) {
  delete personalroomapplyorrefuseinvite_req_;
  personalroomapplyorrefuseinvite_req_ = personalroomapplyorrefuseinvite_req;
  if (personalroomapplyorrefuseinvite_req) {
    set_has_personalroomapplyorrefuseinvite_req();
  } else {
    clear_has_personalroomapplyorrefuseinvite_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomApplyOrRefuseInvite_Req)
}

// optional .fgame.CSChangePlayerIconReq ChangePlayerIcon_Req = 77;
inline bool C2ServerMsg::has_changeplayericon_req() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void C2ServerMsg::set_has_changeplayericon_req() {
  _has_bits_[1] |= 0x80000000u;
}
inline void C2ServerMsg::clear_has_changeplayericon_req() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void C2ServerMsg::clear_changeplayericon_req() {
  if (changeplayericon_req_ != NULL) changeplayericon_req_->::fgame::CSChangePlayerIconReq::Clear();
  clear_has_changeplayericon_req();
}
inline const ::fgame::CSChangePlayerIconReq& C2ServerMsg::changeplayericon_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChangePlayerIcon_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changeplayericon_req_ != NULL ? *changeplayericon_req_ : *default_instance().changeplayericon_req_;
#else
  return changeplayericon_req_ != NULL ? *changeplayericon_req_ : *default_instance_->changeplayericon_req_;
#endif
}
inline ::fgame::CSChangePlayerIconReq* C2ServerMsg::mutable_changeplayericon_req() {
  set_has_changeplayericon_req();
  if (changeplayericon_req_ == NULL) changeplayericon_req_ = new ::fgame::CSChangePlayerIconReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChangePlayerIcon_Req)
  return changeplayericon_req_;
}
inline ::fgame::CSChangePlayerIconReq* C2ServerMsg::release_changeplayericon_req() {
  clear_has_changeplayericon_req();
  ::fgame::CSChangePlayerIconReq* temp = changeplayericon_req_;
  changeplayericon_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_changeplayericon_req(::fgame::CSChangePlayerIconReq* changeplayericon_req) {
  delete changeplayericon_req_;
  changeplayericon_req_ = changeplayericon_req;
  if (changeplayericon_req) {
    set_has_changeplayericon_req();
  } else {
    clear_has_changeplayericon_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChangePlayerIcon_Req)
}

// optional .fgame.CSPersonalRoomCountDownReq PersonalRoomCountDown_Req = 78;
inline bool C2ServerMsg::has_personalroomcountdown_req() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void C2ServerMsg::set_has_personalroomcountdown_req() {
  _has_bits_[2] |= 0x00000001u;
}
inline void C2ServerMsg::clear_has_personalroomcountdown_req() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void C2ServerMsg::clear_personalroomcountdown_req() {
  if (personalroomcountdown_req_ != NULL) personalroomcountdown_req_->::fgame::CSPersonalRoomCountDownReq::Clear();
  clear_has_personalroomcountdown_req();
}
inline const ::fgame::CSPersonalRoomCountDownReq& C2ServerMsg::personalroomcountdown_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PersonalRoomCountDown_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomcountdown_req_ != NULL ? *personalroomcountdown_req_ : *default_instance().personalroomcountdown_req_;
#else
  return personalroomcountdown_req_ != NULL ? *personalroomcountdown_req_ : *default_instance_->personalroomcountdown_req_;
#endif
}
inline ::fgame::CSPersonalRoomCountDownReq* C2ServerMsg::mutable_personalroomcountdown_req() {
  set_has_personalroomcountdown_req();
  if (personalroomcountdown_req_ == NULL) personalroomcountdown_req_ = new ::fgame::CSPersonalRoomCountDownReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PersonalRoomCountDown_Req)
  return personalroomcountdown_req_;
}
inline ::fgame::CSPersonalRoomCountDownReq* C2ServerMsg::release_personalroomcountdown_req() {
  clear_has_personalroomcountdown_req();
  ::fgame::CSPersonalRoomCountDownReq* temp = personalroomcountdown_req_;
  personalroomcountdown_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_personalroomcountdown_req(::fgame::CSPersonalRoomCountDownReq* personalroomcountdown_req) {
  delete personalroomcountdown_req_;
  personalroomcountdown_req_ = personalroomcountdown_req;
  if (personalroomcountdown_req) {
    set_has_personalroomcountdown_req();
  } else {
    clear_has_personalroomcountdown_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PersonalRoomCountDown_Req)
}

// optional .fgame.CSSyncPlayerDataReq SyncPlayerData_Req = 79;
inline bool C2ServerMsg::has_syncplayerdata_req() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void C2ServerMsg::set_has_syncplayerdata_req() {
  _has_bits_[2] |= 0x00000002u;
}
inline void C2ServerMsg::clear_has_syncplayerdata_req() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void C2ServerMsg::clear_syncplayerdata_req() {
  if (syncplayerdata_req_ != NULL) syncplayerdata_req_->::fgame::CSSyncPlayerDataReq::Clear();
  clear_has_syncplayerdata_req();
}
inline const ::fgame::CSSyncPlayerDataReq& C2ServerMsg::syncplayerdata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SyncPlayerData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return syncplayerdata_req_ != NULL ? *syncplayerdata_req_ : *default_instance().syncplayerdata_req_;
#else
  return syncplayerdata_req_ != NULL ? *syncplayerdata_req_ : *default_instance_->syncplayerdata_req_;
#endif
}
inline ::fgame::CSSyncPlayerDataReq* C2ServerMsg::mutable_syncplayerdata_req() {
  set_has_syncplayerdata_req();
  if (syncplayerdata_req_ == NULL) syncplayerdata_req_ = new ::fgame::CSSyncPlayerDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SyncPlayerData_Req)
  return syncplayerdata_req_;
}
inline ::fgame::CSSyncPlayerDataReq* C2ServerMsg::release_syncplayerdata_req() {
  clear_has_syncplayerdata_req();
  ::fgame::CSSyncPlayerDataReq* temp = syncplayerdata_req_;
  syncplayerdata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_syncplayerdata_req(::fgame::CSSyncPlayerDataReq* syncplayerdata_req) {
  delete syncplayerdata_req_;
  syncplayerdata_req_ = syncplayerdata_req;
  if (syncplayerdata_req) {
    set_has_syncplayerdata_req();
  } else {
    clear_has_syncplayerdata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SyncPlayerData_Req)
}

// optional .fgame.CSGetPlayerDataReq GetPlayerData_Req = 80;
inline bool C2ServerMsg::has_getplayerdata_req() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void C2ServerMsg::set_has_getplayerdata_req() {
  _has_bits_[2] |= 0x00000004u;
}
inline void C2ServerMsg::clear_has_getplayerdata_req() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void C2ServerMsg::clear_getplayerdata_req() {
  if (getplayerdata_req_ != NULL) getplayerdata_req_->::fgame::CSGetPlayerDataReq::Clear();
  clear_has_getplayerdata_req();
}
inline const ::fgame::CSGetPlayerDataReq& C2ServerMsg::getplayerdata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetPlayerData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getplayerdata_req_ != NULL ? *getplayerdata_req_ : *default_instance().getplayerdata_req_;
#else
  return getplayerdata_req_ != NULL ? *getplayerdata_req_ : *default_instance_->getplayerdata_req_;
#endif
}
inline ::fgame::CSGetPlayerDataReq* C2ServerMsg::mutable_getplayerdata_req() {
  set_has_getplayerdata_req();
  if (getplayerdata_req_ == NULL) getplayerdata_req_ = new ::fgame::CSGetPlayerDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetPlayerData_Req)
  return getplayerdata_req_;
}
inline ::fgame::CSGetPlayerDataReq* C2ServerMsg::release_getplayerdata_req() {
  clear_has_getplayerdata_req();
  ::fgame::CSGetPlayerDataReq* temp = getplayerdata_req_;
  getplayerdata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getplayerdata_req(::fgame::CSGetPlayerDataReq* getplayerdata_req) {
  delete getplayerdata_req_;
  getplayerdata_req_ = getplayerdata_req;
  if (getplayerdata_req) {
    set_has_getplayerdata_req();
  } else {
    clear_has_getplayerdata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetPlayerData_Req)
}

// optional .fgame.CSPvpAppearCreepReq AppearCreep_Req = 81;
inline bool C2ServerMsg::has_appearcreep_req() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void C2ServerMsg::set_has_appearcreep_req() {
  _has_bits_[2] |= 0x00000008u;
}
inline void C2ServerMsg::clear_has_appearcreep_req() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void C2ServerMsg::clear_appearcreep_req() {
  if (appearcreep_req_ != NULL) appearcreep_req_->::fgame::CSPvpAppearCreepReq::Clear();
  clear_has_appearcreep_req();
}
inline const ::fgame::CSPvpAppearCreepReq& C2ServerMsg::appearcreep_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.AppearCreep_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return appearcreep_req_ != NULL ? *appearcreep_req_ : *default_instance().appearcreep_req_;
#else
  return appearcreep_req_ != NULL ? *appearcreep_req_ : *default_instance_->appearcreep_req_;
#endif
}
inline ::fgame::CSPvpAppearCreepReq* C2ServerMsg::mutable_appearcreep_req() {
  set_has_appearcreep_req();
  if (appearcreep_req_ == NULL) appearcreep_req_ = new ::fgame::CSPvpAppearCreepReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.AppearCreep_Req)
  return appearcreep_req_;
}
inline ::fgame::CSPvpAppearCreepReq* C2ServerMsg::release_appearcreep_req() {
  clear_has_appearcreep_req();
  ::fgame::CSPvpAppearCreepReq* temp = appearcreep_req_;
  appearcreep_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_appearcreep_req(::fgame::CSPvpAppearCreepReq* appearcreep_req) {
  delete appearcreep_req_;
  appearcreep_req_ = appearcreep_req;
  if (appearcreep_req) {
    set_has_appearcreep_req();
  } else {
    clear_has_appearcreep_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.AppearCreep_Req)
}

// optional .fgame.CSSaveCheckPtDataReq SaveCheckPtData_Req = 82;
inline bool C2ServerMsg::has_savecheckptdata_req() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void C2ServerMsg::set_has_savecheckptdata_req() {
  _has_bits_[2] |= 0x00000010u;
}
inline void C2ServerMsg::clear_has_savecheckptdata_req() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void C2ServerMsg::clear_savecheckptdata_req() {
  if (savecheckptdata_req_ != NULL) savecheckptdata_req_->::fgame::CSSaveCheckPtDataReq::Clear();
  clear_has_savecheckptdata_req();
}
inline const ::fgame::CSSaveCheckPtDataReq& C2ServerMsg::savecheckptdata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SaveCheckPtData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return savecheckptdata_req_ != NULL ? *savecheckptdata_req_ : *default_instance().savecheckptdata_req_;
#else
  return savecheckptdata_req_ != NULL ? *savecheckptdata_req_ : *default_instance_->savecheckptdata_req_;
#endif
}
inline ::fgame::CSSaveCheckPtDataReq* C2ServerMsg::mutable_savecheckptdata_req() {
  set_has_savecheckptdata_req();
  if (savecheckptdata_req_ == NULL) savecheckptdata_req_ = new ::fgame::CSSaveCheckPtDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SaveCheckPtData_Req)
  return savecheckptdata_req_;
}
inline ::fgame::CSSaveCheckPtDataReq* C2ServerMsg::release_savecheckptdata_req() {
  clear_has_savecheckptdata_req();
  ::fgame::CSSaveCheckPtDataReq* temp = savecheckptdata_req_;
  savecheckptdata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_savecheckptdata_req(::fgame::CSSaveCheckPtDataReq* savecheckptdata_req) {
  delete savecheckptdata_req_;
  savecheckptdata_req_ = savecheckptdata_req;
  if (savecheckptdata_req) {
    set_has_savecheckptdata_req();
  } else {
    clear_has_savecheckptdata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SaveCheckPtData_Req)
}

// optional .fgame.CSGetCheckPtDataReq GetCheckPtData_Req = 83;
inline bool C2ServerMsg::has_getcheckptdata_req() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void C2ServerMsg::set_has_getcheckptdata_req() {
  _has_bits_[2] |= 0x00000020u;
}
inline void C2ServerMsg::clear_has_getcheckptdata_req() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void C2ServerMsg::clear_getcheckptdata_req() {
  if (getcheckptdata_req_ != NULL) getcheckptdata_req_->::fgame::CSGetCheckPtDataReq::Clear();
  clear_has_getcheckptdata_req();
}
inline const ::fgame::CSGetCheckPtDataReq& C2ServerMsg::getcheckptdata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetCheckPtData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getcheckptdata_req_ != NULL ? *getcheckptdata_req_ : *default_instance().getcheckptdata_req_;
#else
  return getcheckptdata_req_ != NULL ? *getcheckptdata_req_ : *default_instance_->getcheckptdata_req_;
#endif
}
inline ::fgame::CSGetCheckPtDataReq* C2ServerMsg::mutable_getcheckptdata_req() {
  set_has_getcheckptdata_req();
  if (getcheckptdata_req_ == NULL) getcheckptdata_req_ = new ::fgame::CSGetCheckPtDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetCheckPtData_Req)
  return getcheckptdata_req_;
}
inline ::fgame::CSGetCheckPtDataReq* C2ServerMsg::release_getcheckptdata_req() {
  clear_has_getcheckptdata_req();
  ::fgame::CSGetCheckPtDataReq* temp = getcheckptdata_req_;
  getcheckptdata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getcheckptdata_req(::fgame::CSGetCheckPtDataReq* getcheckptdata_req) {
  delete getcheckptdata_req_;
  getcheckptdata_req_ = getcheckptdata_req;
  if (getcheckptdata_req) {
    set_has_getcheckptdata_req();
  } else {
    clear_has_getcheckptdata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetCheckPtData_Req)
}

// optional .fgame.CSSetNewBieReq SetNewBie_Req = 84;
inline bool C2ServerMsg::has_setnewbie_req() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void C2ServerMsg::set_has_setnewbie_req() {
  _has_bits_[2] |= 0x00000040u;
}
inline void C2ServerMsg::clear_has_setnewbie_req() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void C2ServerMsg::clear_setnewbie_req() {
  if (setnewbie_req_ != NULL) setnewbie_req_->::fgame::CSSetNewBieReq::Clear();
  clear_has_setnewbie_req();
}
inline const ::fgame::CSSetNewBieReq& C2ServerMsg::setnewbie_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SetNewBie_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setnewbie_req_ != NULL ? *setnewbie_req_ : *default_instance().setnewbie_req_;
#else
  return setnewbie_req_ != NULL ? *setnewbie_req_ : *default_instance_->setnewbie_req_;
#endif
}
inline ::fgame::CSSetNewBieReq* C2ServerMsg::mutable_setnewbie_req() {
  set_has_setnewbie_req();
  if (setnewbie_req_ == NULL) setnewbie_req_ = new ::fgame::CSSetNewBieReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SetNewBie_Req)
  return setnewbie_req_;
}
inline ::fgame::CSSetNewBieReq* C2ServerMsg::release_setnewbie_req() {
  clear_has_setnewbie_req();
  ::fgame::CSSetNewBieReq* temp = setnewbie_req_;
  setnewbie_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_setnewbie_req(::fgame::CSSetNewBieReq* setnewbie_req) {
  delete setnewbie_req_;
  setnewbie_req_ = setnewbie_req;
  if (setnewbie_req) {
    set_has_setnewbie_req();
  } else {
    clear_has_setnewbie_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SetNewBie_Req)
}

// optional .fgame.CSGetNewBieListReq GetNewBieList_Req = 85;
inline bool C2ServerMsg::has_getnewbielist_req() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void C2ServerMsg::set_has_getnewbielist_req() {
  _has_bits_[2] |= 0x00000080u;
}
inline void C2ServerMsg::clear_has_getnewbielist_req() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void C2ServerMsg::clear_getnewbielist_req() {
  if (getnewbielist_req_ != NULL) getnewbielist_req_->::fgame::CSGetNewBieListReq::Clear();
  clear_has_getnewbielist_req();
}
inline const ::fgame::CSGetNewBieListReq& C2ServerMsg::getnewbielist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetNewBieList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getnewbielist_req_ != NULL ? *getnewbielist_req_ : *default_instance().getnewbielist_req_;
#else
  return getnewbielist_req_ != NULL ? *getnewbielist_req_ : *default_instance_->getnewbielist_req_;
#endif
}
inline ::fgame::CSGetNewBieListReq* C2ServerMsg::mutable_getnewbielist_req() {
  set_has_getnewbielist_req();
  if (getnewbielist_req_ == NULL) getnewbielist_req_ = new ::fgame::CSGetNewBieListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetNewBieList_Req)
  return getnewbielist_req_;
}
inline ::fgame::CSGetNewBieListReq* C2ServerMsg::release_getnewbielist_req() {
  clear_has_getnewbielist_req();
  ::fgame::CSGetNewBieListReq* temp = getnewbielist_req_;
  getnewbielist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getnewbielist_req(::fgame::CSGetNewBieListReq* getnewbielist_req) {
  delete getnewbielist_req_;
  getnewbielist_req_ = getnewbielist_req;
  if (getnewbielist_req) {
    set_has_getnewbielist_req();
  } else {
    clear_has_getnewbielist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetNewBieList_Req)
}

// optional .fgame.CSEnterPointReq EnterPoint_Req = 87;
inline bool C2ServerMsg::has_enterpoint_req() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void C2ServerMsg::set_has_enterpoint_req() {
  _has_bits_[2] |= 0x00000100u;
}
inline void C2ServerMsg::clear_has_enterpoint_req() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void C2ServerMsg::clear_enterpoint_req() {
  if (enterpoint_req_ != NULL) enterpoint_req_->::fgame::CSEnterPointReq::Clear();
  clear_has_enterpoint_req();
}
inline const ::fgame::CSEnterPointReq& C2ServerMsg::enterpoint_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.EnterPoint_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return enterpoint_req_ != NULL ? *enterpoint_req_ : *default_instance().enterpoint_req_;
#else
  return enterpoint_req_ != NULL ? *enterpoint_req_ : *default_instance_->enterpoint_req_;
#endif
}
inline ::fgame::CSEnterPointReq* C2ServerMsg::mutable_enterpoint_req() {
  set_has_enterpoint_req();
  if (enterpoint_req_ == NULL) enterpoint_req_ = new ::fgame::CSEnterPointReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.EnterPoint_Req)
  return enterpoint_req_;
}
inline ::fgame::CSEnterPointReq* C2ServerMsg::release_enterpoint_req() {
  clear_has_enterpoint_req();
  ::fgame::CSEnterPointReq* temp = enterpoint_req_;
  enterpoint_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_enterpoint_req(::fgame::CSEnterPointReq* enterpoint_req) {
  delete enterpoint_req_;
  enterpoint_req_ = enterpoint_req;
  if (enterpoint_req) {
    set_has_enterpoint_req();
  } else {
    clear_has_enterpoint_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.EnterPoint_Req)
}

// optional .fgame.CSShopGuideReq ShopGuide_Req = 88;
inline bool C2ServerMsg::has_shopguide_req() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void C2ServerMsg::set_has_shopguide_req() {
  _has_bits_[2] |= 0x00000200u;
}
inline void C2ServerMsg::clear_has_shopguide_req() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void C2ServerMsg::clear_shopguide_req() {
  if (shopguide_req_ != NULL) shopguide_req_->::fgame::CSShopGuideReq::Clear();
  clear_has_shopguide_req();
}
inline const ::fgame::CSShopGuideReq& C2ServerMsg::shopguide_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ShopGuide_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shopguide_req_ != NULL ? *shopguide_req_ : *default_instance().shopguide_req_;
#else
  return shopguide_req_ != NULL ? *shopguide_req_ : *default_instance_->shopguide_req_;
#endif
}
inline ::fgame::CSShopGuideReq* C2ServerMsg::mutable_shopguide_req() {
  set_has_shopguide_req();
  if (shopguide_req_ == NULL) shopguide_req_ = new ::fgame::CSShopGuideReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ShopGuide_Req)
  return shopguide_req_;
}
inline ::fgame::CSShopGuideReq* C2ServerMsg::release_shopguide_req() {
  clear_has_shopguide_req();
  ::fgame::CSShopGuideReq* temp = shopguide_req_;
  shopguide_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_shopguide_req(::fgame::CSShopGuideReq* shopguide_req) {
  delete shopguide_req_;
  shopguide_req_ = shopguide_req;
  if (shopguide_req) {
    set_has_shopguide_req();
  } else {
    clear_has_shopguide_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ShopGuide_Req)
}

// optional .fgame.CSTestAddDiamondReq TestAddDiamond_Req = 89;
inline bool C2ServerMsg::has_testadddiamond_req() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void C2ServerMsg::set_has_testadddiamond_req() {
  _has_bits_[2] |= 0x00000400u;
}
inline void C2ServerMsg::clear_has_testadddiamond_req() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void C2ServerMsg::clear_testadddiamond_req() {
  if (testadddiamond_req_ != NULL) testadddiamond_req_->::fgame::CSTestAddDiamondReq::Clear();
  clear_has_testadddiamond_req();
}
inline const ::fgame::CSTestAddDiamondReq& C2ServerMsg::testadddiamond_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.TestAddDiamond_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return testadddiamond_req_ != NULL ? *testadddiamond_req_ : *default_instance().testadddiamond_req_;
#else
  return testadddiamond_req_ != NULL ? *testadddiamond_req_ : *default_instance_->testadddiamond_req_;
#endif
}
inline ::fgame::CSTestAddDiamondReq* C2ServerMsg::mutable_testadddiamond_req() {
  set_has_testadddiamond_req();
  if (testadddiamond_req_ == NULL) testadddiamond_req_ = new ::fgame::CSTestAddDiamondReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.TestAddDiamond_Req)
  return testadddiamond_req_;
}
inline ::fgame::CSTestAddDiamondReq* C2ServerMsg::release_testadddiamond_req() {
  clear_has_testadddiamond_req();
  ::fgame::CSTestAddDiamondReq* temp = testadddiamond_req_;
  testadddiamond_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_testadddiamond_req(::fgame::CSTestAddDiamondReq* testadddiamond_req) {
  delete testadddiamond_req_;
  testadddiamond_req_ = testadddiamond_req;
  if (testadddiamond_req) {
    set_has_testadddiamond_req();
  } else {
    clear_has_testadddiamond_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.TestAddDiamond_Req)
}

// optional .fgame.CSActivityListReq ActivityList_Req = 90;
inline bool C2ServerMsg::has_activitylist_req() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void C2ServerMsg::set_has_activitylist_req() {
  _has_bits_[2] |= 0x00000800u;
}
inline void C2ServerMsg::clear_has_activitylist_req() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void C2ServerMsg::clear_activitylist_req() {
  if (activitylist_req_ != NULL) activitylist_req_->::fgame::CSActivityListReq::Clear();
  clear_has_activitylist_req();
}
inline const ::fgame::CSActivityListReq& C2ServerMsg::activitylist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ActivityList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitylist_req_ != NULL ? *activitylist_req_ : *default_instance().activitylist_req_;
#else
  return activitylist_req_ != NULL ? *activitylist_req_ : *default_instance_->activitylist_req_;
#endif
}
inline ::fgame::CSActivityListReq* C2ServerMsg::mutable_activitylist_req() {
  set_has_activitylist_req();
  if (activitylist_req_ == NULL) activitylist_req_ = new ::fgame::CSActivityListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ActivityList_Req)
  return activitylist_req_;
}
inline ::fgame::CSActivityListReq* C2ServerMsg::release_activitylist_req() {
  clear_has_activitylist_req();
  ::fgame::CSActivityListReq* temp = activitylist_req_;
  activitylist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_activitylist_req(::fgame::CSActivityListReq* activitylist_req) {
  delete activitylist_req_;
  activitylist_req_ = activitylist_req;
  if (activitylist_req) {
    set_has_activitylist_req();
  } else {
    clear_has_activitylist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ActivityList_Req)
}

// optional .fgame.CSActivitySubmitReq ActivitySubmit_Req = 92;
inline bool C2ServerMsg::has_activitysubmit_req() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void C2ServerMsg::set_has_activitysubmit_req() {
  _has_bits_[2] |= 0x00001000u;
}
inline void C2ServerMsg::clear_has_activitysubmit_req() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void C2ServerMsg::clear_activitysubmit_req() {
  if (activitysubmit_req_ != NULL) activitysubmit_req_->::fgame::CSActivitySubmitReq::Clear();
  clear_has_activitysubmit_req();
}
inline const ::fgame::CSActivitySubmitReq& C2ServerMsg::activitysubmit_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ActivitySubmit_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitysubmit_req_ != NULL ? *activitysubmit_req_ : *default_instance().activitysubmit_req_;
#else
  return activitysubmit_req_ != NULL ? *activitysubmit_req_ : *default_instance_->activitysubmit_req_;
#endif
}
inline ::fgame::CSActivitySubmitReq* C2ServerMsg::mutable_activitysubmit_req() {
  set_has_activitysubmit_req();
  if (activitysubmit_req_ == NULL) activitysubmit_req_ = new ::fgame::CSActivitySubmitReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ActivitySubmit_Req)
  return activitysubmit_req_;
}
inline ::fgame::CSActivitySubmitReq* C2ServerMsg::release_activitysubmit_req() {
  clear_has_activitysubmit_req();
  ::fgame::CSActivitySubmitReq* temp = activitysubmit_req_;
  activitysubmit_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_activitysubmit_req(::fgame::CSActivitySubmitReq* activitysubmit_req) {
  delete activitysubmit_req_;
  activitysubmit_req_ = activitysubmit_req;
  if (activitysubmit_req) {
    set_has_activitysubmit_req();
  } else {
    clear_has_activitysubmit_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ActivitySubmit_Req)
}

// optional .fgame.CSSetTitleReq SetTitle_Req = 93;
inline bool C2ServerMsg::has_settitle_req() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void C2ServerMsg::set_has_settitle_req() {
  _has_bits_[2] |= 0x00002000u;
}
inline void C2ServerMsg::clear_has_settitle_req() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void C2ServerMsg::clear_settitle_req() {
  if (settitle_req_ != NULL) settitle_req_->::fgame::CSSetTitleReq::Clear();
  clear_has_settitle_req();
}
inline const ::fgame::CSSetTitleReq& C2ServerMsg::settitle_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SetTitle_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return settitle_req_ != NULL ? *settitle_req_ : *default_instance().settitle_req_;
#else
  return settitle_req_ != NULL ? *settitle_req_ : *default_instance_->settitle_req_;
#endif
}
inline ::fgame::CSSetTitleReq* C2ServerMsg::mutable_settitle_req() {
  set_has_settitle_req();
  if (settitle_req_ == NULL) settitle_req_ = new ::fgame::CSSetTitleReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SetTitle_Req)
  return settitle_req_;
}
inline ::fgame::CSSetTitleReq* C2ServerMsg::release_settitle_req() {
  clear_has_settitle_req();
  ::fgame::CSSetTitleReq* temp = settitle_req_;
  settitle_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_settitle_req(::fgame::CSSetTitleReq* settitle_req) {
  delete settitle_req_;
  settitle_req_ = settitle_req;
  if (settitle_req) {
    set_has_settitle_req();
  } else {
    clear_has_settitle_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SetTitle_Req)
}

// optional .fgame.CSShopBuyReq ShopBuy_Req = 94;
inline bool C2ServerMsg::has_shopbuy_req() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void C2ServerMsg::set_has_shopbuy_req() {
  _has_bits_[2] |= 0x00004000u;
}
inline void C2ServerMsg::clear_has_shopbuy_req() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void C2ServerMsg::clear_shopbuy_req() {
  if (shopbuy_req_ != NULL) shopbuy_req_->::fgame::CSShopBuyReq::Clear();
  clear_has_shopbuy_req();
}
inline const ::fgame::CSShopBuyReq& C2ServerMsg::shopbuy_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ShopBuy_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shopbuy_req_ != NULL ? *shopbuy_req_ : *default_instance().shopbuy_req_;
#else
  return shopbuy_req_ != NULL ? *shopbuy_req_ : *default_instance_->shopbuy_req_;
#endif
}
inline ::fgame::CSShopBuyReq* C2ServerMsg::mutable_shopbuy_req() {
  set_has_shopbuy_req();
  if (shopbuy_req_ == NULL) shopbuy_req_ = new ::fgame::CSShopBuyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ShopBuy_Req)
  return shopbuy_req_;
}
inline ::fgame::CSShopBuyReq* C2ServerMsg::release_shopbuy_req() {
  clear_has_shopbuy_req();
  ::fgame::CSShopBuyReq* temp = shopbuy_req_;
  shopbuy_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_shopbuy_req(::fgame::CSShopBuyReq* shopbuy_req) {
  delete shopbuy_req_;
  shopbuy_req_ = shopbuy_req;
  if (shopbuy_req) {
    set_has_shopbuy_req();
  } else {
    clear_has_shopbuy_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ShopBuy_Req)
}

// optional .fgame.CSExchangeItemReq ExchangeItem_Req = 96;
inline bool C2ServerMsg::has_exchangeitem_req() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void C2ServerMsg::set_has_exchangeitem_req() {
  _has_bits_[2] |= 0x00008000u;
}
inline void C2ServerMsg::clear_has_exchangeitem_req() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void C2ServerMsg::clear_exchangeitem_req() {
  if (exchangeitem_req_ != NULL) exchangeitem_req_->::fgame::CSExchangeItemReq::Clear();
  clear_has_exchangeitem_req();
}
inline const ::fgame::CSExchangeItemReq& C2ServerMsg::exchangeitem_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ExchangeItem_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return exchangeitem_req_ != NULL ? *exchangeitem_req_ : *default_instance().exchangeitem_req_;
#else
  return exchangeitem_req_ != NULL ? *exchangeitem_req_ : *default_instance_->exchangeitem_req_;
#endif
}
inline ::fgame::CSExchangeItemReq* C2ServerMsg::mutable_exchangeitem_req() {
  set_has_exchangeitem_req();
  if (exchangeitem_req_ == NULL) exchangeitem_req_ = new ::fgame::CSExchangeItemReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ExchangeItem_Req)
  return exchangeitem_req_;
}
inline ::fgame::CSExchangeItemReq* C2ServerMsg::release_exchangeitem_req() {
  clear_has_exchangeitem_req();
  ::fgame::CSExchangeItemReq* temp = exchangeitem_req_;
  exchangeitem_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_exchangeitem_req(::fgame::CSExchangeItemReq* exchangeitem_req) {
  delete exchangeitem_req_;
  exchangeitem_req_ = exchangeitem_req;
  if (exchangeitem_req) {
    set_has_exchangeitem_req();
  } else {
    clear_has_exchangeitem_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ExchangeItem_Req)
}

// optional .fgame.CSActivityCrazyDtlsReq ActivityCrazyDtls_Req = 97;
inline bool C2ServerMsg::has_activitycrazydtls_req() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void C2ServerMsg::set_has_activitycrazydtls_req() {
  _has_bits_[2] |= 0x00010000u;
}
inline void C2ServerMsg::clear_has_activitycrazydtls_req() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void C2ServerMsg::clear_activitycrazydtls_req() {
  if (activitycrazydtls_req_ != NULL) activitycrazydtls_req_->::fgame::CSActivityCrazyDtlsReq::Clear();
  clear_has_activitycrazydtls_req();
}
inline const ::fgame::CSActivityCrazyDtlsReq& C2ServerMsg::activitycrazydtls_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ActivityCrazyDtls_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitycrazydtls_req_ != NULL ? *activitycrazydtls_req_ : *default_instance().activitycrazydtls_req_;
#else
  return activitycrazydtls_req_ != NULL ? *activitycrazydtls_req_ : *default_instance_->activitycrazydtls_req_;
#endif
}
inline ::fgame::CSActivityCrazyDtlsReq* C2ServerMsg::mutable_activitycrazydtls_req() {
  set_has_activitycrazydtls_req();
  if (activitycrazydtls_req_ == NULL) activitycrazydtls_req_ = new ::fgame::CSActivityCrazyDtlsReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ActivityCrazyDtls_Req)
  return activitycrazydtls_req_;
}
inline ::fgame::CSActivityCrazyDtlsReq* C2ServerMsg::release_activitycrazydtls_req() {
  clear_has_activitycrazydtls_req();
  ::fgame::CSActivityCrazyDtlsReq* temp = activitycrazydtls_req_;
  activitycrazydtls_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_activitycrazydtls_req(::fgame::CSActivityCrazyDtlsReq* activitycrazydtls_req) {
  delete activitycrazydtls_req_;
  activitycrazydtls_req_ = activitycrazydtls_req;
  if (activitycrazydtls_req) {
    set_has_activitycrazydtls_req();
  } else {
    clear_has_activitycrazydtls_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ActivityCrazyDtls_Req)
}

// optional .fgame.CSActivityCrazyUsageReq ActivityCrazyUsage_Req = 98;
inline bool C2ServerMsg::has_activitycrazyusage_req() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void C2ServerMsg::set_has_activitycrazyusage_req() {
  _has_bits_[2] |= 0x00020000u;
}
inline void C2ServerMsg::clear_has_activitycrazyusage_req() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void C2ServerMsg::clear_activitycrazyusage_req() {
  if (activitycrazyusage_req_ != NULL) activitycrazyusage_req_->::fgame::CSActivityCrazyUsageReq::Clear();
  clear_has_activitycrazyusage_req();
}
inline const ::fgame::CSActivityCrazyUsageReq& C2ServerMsg::activitycrazyusage_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ActivityCrazyUsage_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitycrazyusage_req_ != NULL ? *activitycrazyusage_req_ : *default_instance().activitycrazyusage_req_;
#else
  return activitycrazyusage_req_ != NULL ? *activitycrazyusage_req_ : *default_instance_->activitycrazyusage_req_;
#endif
}
inline ::fgame::CSActivityCrazyUsageReq* C2ServerMsg::mutable_activitycrazyusage_req() {
  set_has_activitycrazyusage_req();
  if (activitycrazyusage_req_ == NULL) activitycrazyusage_req_ = new ::fgame::CSActivityCrazyUsageReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ActivityCrazyUsage_Req)
  return activitycrazyusage_req_;
}
inline ::fgame::CSActivityCrazyUsageReq* C2ServerMsg::release_activitycrazyusage_req() {
  clear_has_activitycrazyusage_req();
  ::fgame::CSActivityCrazyUsageReq* temp = activitycrazyusage_req_;
  activitycrazyusage_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_activitycrazyusage_req(::fgame::CSActivityCrazyUsageReq* activitycrazyusage_req) {
  delete activitycrazyusage_req_;
  activitycrazyusage_req_ = activitycrazyusage_req;
  if (activitycrazyusage_req) {
    set_has_activitycrazyusage_req();
  } else {
    clear_has_activitycrazyusage_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ActivityCrazyUsage_Req)
}

// optional .fgame.CSShopListReq ShopList_Req = 100;
inline bool C2ServerMsg::has_shoplist_req() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void C2ServerMsg::set_has_shoplist_req() {
  _has_bits_[2] |= 0x00040000u;
}
inline void C2ServerMsg::clear_has_shoplist_req() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void C2ServerMsg::clear_shoplist_req() {
  if (shoplist_req_ != NULL) shoplist_req_->::fgame::CSShopListReq::Clear();
  clear_has_shoplist_req();
}
inline const ::fgame::CSShopListReq& C2ServerMsg::shoplist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ShopList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shoplist_req_ != NULL ? *shoplist_req_ : *default_instance().shoplist_req_;
#else
  return shoplist_req_ != NULL ? *shoplist_req_ : *default_instance_->shoplist_req_;
#endif
}
inline ::fgame::CSShopListReq* C2ServerMsg::mutable_shoplist_req() {
  set_has_shoplist_req();
  if (shoplist_req_ == NULL) shoplist_req_ = new ::fgame::CSShopListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ShopList_Req)
  return shoplist_req_;
}
inline ::fgame::CSShopListReq* C2ServerMsg::release_shoplist_req() {
  clear_has_shoplist_req();
  ::fgame::CSShopListReq* temp = shoplist_req_;
  shoplist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_shoplist_req(::fgame::CSShopListReq* shoplist_req) {
  delete shoplist_req_;
  shoplist_req_ = shoplist_req;
  if (shoplist_req) {
    set_has_shoplist_req();
  } else {
    clear_has_shoplist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ShopList_Req)
}

// optional .fgame.CSPvpObserverReq PvpObserver_Req = 101;
inline bool C2ServerMsg::has_pvpobserver_req() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void C2ServerMsg::set_has_pvpobserver_req() {
  _has_bits_[2] |= 0x00080000u;
}
inline void C2ServerMsg::clear_has_pvpobserver_req() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void C2ServerMsg::clear_pvpobserver_req() {
  if (pvpobserver_req_ != NULL) pvpobserver_req_->::fgame::CSPvpObserverReq::Clear();
  clear_has_pvpobserver_req();
}
inline const ::fgame::CSPvpObserverReq& C2ServerMsg::pvpobserver_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpObserver_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpobserver_req_ != NULL ? *pvpobserver_req_ : *default_instance().pvpobserver_req_;
#else
  return pvpobserver_req_ != NULL ? *pvpobserver_req_ : *default_instance_->pvpobserver_req_;
#endif
}
inline ::fgame::CSPvpObserverReq* C2ServerMsg::mutable_pvpobserver_req() {
  set_has_pvpobserver_req();
  if (pvpobserver_req_ == NULL) pvpobserver_req_ = new ::fgame::CSPvpObserverReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpObserver_Req)
  return pvpobserver_req_;
}
inline ::fgame::CSPvpObserverReq* C2ServerMsg::release_pvpobserver_req() {
  clear_has_pvpobserver_req();
  ::fgame::CSPvpObserverReq* temp = pvpobserver_req_;
  pvpobserver_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpobserver_req(::fgame::CSPvpObserverReq* pvpobserver_req) {
  delete pvpobserver_req_;
  pvpobserver_req_ = pvpobserver_req;
  if (pvpobserver_req) {
    set_has_pvpobserver_req();
  } else {
    clear_has_pvpobserver_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpObserver_Req)
}

// optional .fgame.CSSetNewBieOssReq SetNewBieOss_Req = 102;
inline bool C2ServerMsg::has_setnewbieoss_req() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void C2ServerMsg::set_has_setnewbieoss_req() {
  _has_bits_[2] |= 0x00100000u;
}
inline void C2ServerMsg::clear_has_setnewbieoss_req() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void C2ServerMsg::clear_setnewbieoss_req() {
  if (setnewbieoss_req_ != NULL) setnewbieoss_req_->::fgame::CSSetNewBieOssReq::Clear();
  clear_has_setnewbieoss_req();
}
inline const ::fgame::CSSetNewBieOssReq& C2ServerMsg::setnewbieoss_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SetNewBieOss_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setnewbieoss_req_ != NULL ? *setnewbieoss_req_ : *default_instance().setnewbieoss_req_;
#else
  return setnewbieoss_req_ != NULL ? *setnewbieoss_req_ : *default_instance_->setnewbieoss_req_;
#endif
}
inline ::fgame::CSSetNewBieOssReq* C2ServerMsg::mutable_setnewbieoss_req() {
  set_has_setnewbieoss_req();
  if (setnewbieoss_req_ == NULL) setnewbieoss_req_ = new ::fgame::CSSetNewBieOssReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SetNewBieOss_Req)
  return setnewbieoss_req_;
}
inline ::fgame::CSSetNewBieOssReq* C2ServerMsg::release_setnewbieoss_req() {
  clear_has_setnewbieoss_req();
  ::fgame::CSSetNewBieOssReq* temp = setnewbieoss_req_;
  setnewbieoss_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_setnewbieoss_req(::fgame::CSSetNewBieOssReq* setnewbieoss_req) {
  delete setnewbieoss_req_;
  setnewbieoss_req_ = setnewbieoss_req;
  if (setnewbieoss_req) {
    set_has_setnewbieoss_req();
  } else {
    clear_has_setnewbieoss_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SetNewBieOss_Req)
}

// optional .fgame.CSPvpResultReq PvpResult_Req = 104;
inline bool C2ServerMsg::has_pvpresult_req() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void C2ServerMsg::set_has_pvpresult_req() {
  _has_bits_[2] |= 0x00200000u;
}
inline void C2ServerMsg::clear_has_pvpresult_req() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void C2ServerMsg::clear_pvpresult_req() {
  if (pvpresult_req_ != NULL) pvpresult_req_->::fgame::CSPvpResultReq::Clear();
  clear_has_pvpresult_req();
}
inline const ::fgame::CSPvpResultReq& C2ServerMsg::pvpresult_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpResult_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpresult_req_ != NULL ? *pvpresult_req_ : *default_instance().pvpresult_req_;
#else
  return pvpresult_req_ != NULL ? *pvpresult_req_ : *default_instance_->pvpresult_req_;
#endif
}
inline ::fgame::CSPvpResultReq* C2ServerMsg::mutable_pvpresult_req() {
  set_has_pvpresult_req();
  if (pvpresult_req_ == NULL) pvpresult_req_ = new ::fgame::CSPvpResultReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpResult_Req)
  return pvpresult_req_;
}
inline ::fgame::CSPvpResultReq* C2ServerMsg::release_pvpresult_req() {
  clear_has_pvpresult_req();
  ::fgame::CSPvpResultReq* temp = pvpresult_req_;
  pvpresult_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpresult_req(::fgame::CSPvpResultReq* pvpresult_req) {
  delete pvpresult_req_;
  pvpresult_req_ = pvpresult_req;
  if (pvpresult_req) {
    set_has_pvpresult_req();
  } else {
    clear_has_pvpresult_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpResult_Req)
}

// optional .fgame.CSPvpSelfRankListReq PvpSelfRankList_Req = 105;
inline bool C2ServerMsg::has_pvpselfranklist_req() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void C2ServerMsg::set_has_pvpselfranklist_req() {
  _has_bits_[2] |= 0x00400000u;
}
inline void C2ServerMsg::clear_has_pvpselfranklist_req() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void C2ServerMsg::clear_pvpselfranklist_req() {
  if (pvpselfranklist_req_ != NULL) pvpselfranklist_req_->::fgame::CSPvpSelfRankListReq::Clear();
  clear_has_pvpselfranklist_req();
}
inline const ::fgame::CSPvpSelfRankListReq& C2ServerMsg::pvpselfranklist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpSelfRankList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpselfranklist_req_ != NULL ? *pvpselfranklist_req_ : *default_instance().pvpselfranklist_req_;
#else
  return pvpselfranklist_req_ != NULL ? *pvpselfranklist_req_ : *default_instance_->pvpselfranklist_req_;
#endif
}
inline ::fgame::CSPvpSelfRankListReq* C2ServerMsg::mutable_pvpselfranklist_req() {
  set_has_pvpselfranklist_req();
  if (pvpselfranklist_req_ == NULL) pvpselfranklist_req_ = new ::fgame::CSPvpSelfRankListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpSelfRankList_Req)
  return pvpselfranklist_req_;
}
inline ::fgame::CSPvpSelfRankListReq* C2ServerMsg::release_pvpselfranklist_req() {
  clear_has_pvpselfranklist_req();
  ::fgame::CSPvpSelfRankListReq* temp = pvpselfranklist_req_;
  pvpselfranklist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpselfranklist_req(::fgame::CSPvpSelfRankListReq* pvpselfranklist_req) {
  delete pvpselfranklist_req_;
  pvpselfranklist_req_ = pvpselfranklist_req;
  if (pvpselfranklist_req) {
    set_has_pvpselfranklist_req();
  } else {
    clear_has_pvpselfranklist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpSelfRankList_Req)
}

// optional .fgame.CSGWGetMatchInfoReq GWGetMatchInfo_Req = 106;
inline bool C2ServerMsg::has_gwgetmatchinfo_req() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void C2ServerMsg::set_has_gwgetmatchinfo_req() {
  _has_bits_[2] |= 0x00800000u;
}
inline void C2ServerMsg::clear_has_gwgetmatchinfo_req() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void C2ServerMsg::clear_gwgetmatchinfo_req() {
  if (gwgetmatchinfo_req_ != NULL) gwgetmatchinfo_req_->::fgame::CSGWGetMatchInfoReq::Clear();
  clear_has_gwgetmatchinfo_req();
}
inline const ::fgame::CSGWGetMatchInfoReq& C2ServerMsg::gwgetmatchinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GWGetMatchInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwgetmatchinfo_req_ != NULL ? *gwgetmatchinfo_req_ : *default_instance().gwgetmatchinfo_req_;
#else
  return gwgetmatchinfo_req_ != NULL ? *gwgetmatchinfo_req_ : *default_instance_->gwgetmatchinfo_req_;
#endif
}
inline ::fgame::CSGWGetMatchInfoReq* C2ServerMsg::mutable_gwgetmatchinfo_req() {
  set_has_gwgetmatchinfo_req();
  if (gwgetmatchinfo_req_ == NULL) gwgetmatchinfo_req_ = new ::fgame::CSGWGetMatchInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GWGetMatchInfo_Req)
  return gwgetmatchinfo_req_;
}
inline ::fgame::CSGWGetMatchInfoReq* C2ServerMsg::release_gwgetmatchinfo_req() {
  clear_has_gwgetmatchinfo_req();
  ::fgame::CSGWGetMatchInfoReq* temp = gwgetmatchinfo_req_;
  gwgetmatchinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_gwgetmatchinfo_req(::fgame::CSGWGetMatchInfoReq* gwgetmatchinfo_req) {
  delete gwgetmatchinfo_req_;
  gwgetmatchinfo_req_ = gwgetmatchinfo_req;
  if (gwgetmatchinfo_req) {
    set_has_gwgetmatchinfo_req();
  } else {
    clear_has_gwgetmatchinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GWGetMatchInfo_Req)
}

// optional .fgame.CSGWMatchReq GWMatch_Req = 107;
inline bool C2ServerMsg::has_gwmatch_req() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void C2ServerMsg::set_has_gwmatch_req() {
  _has_bits_[2] |= 0x01000000u;
}
inline void C2ServerMsg::clear_has_gwmatch_req() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void C2ServerMsg::clear_gwmatch_req() {
  if (gwmatch_req_ != NULL) gwmatch_req_->::fgame::CSGWMatchReq::Clear();
  clear_has_gwmatch_req();
}
inline const ::fgame::CSGWMatchReq& C2ServerMsg::gwmatch_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GWMatch_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwmatch_req_ != NULL ? *gwmatch_req_ : *default_instance().gwmatch_req_;
#else
  return gwmatch_req_ != NULL ? *gwmatch_req_ : *default_instance_->gwmatch_req_;
#endif
}
inline ::fgame::CSGWMatchReq* C2ServerMsg::mutable_gwmatch_req() {
  set_has_gwmatch_req();
  if (gwmatch_req_ == NULL) gwmatch_req_ = new ::fgame::CSGWMatchReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GWMatch_Req)
  return gwmatch_req_;
}
inline ::fgame::CSGWMatchReq* C2ServerMsg::release_gwmatch_req() {
  clear_has_gwmatch_req();
  ::fgame::CSGWMatchReq* temp = gwmatch_req_;
  gwmatch_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_gwmatch_req(::fgame::CSGWMatchReq* gwmatch_req) {
  delete gwmatch_req_;
  gwmatch_req_ = gwmatch_req;
  if (gwmatch_req) {
    set_has_gwmatch_req();
  } else {
    clear_has_gwmatch_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GWMatch_Req)
}

// optional .fgame.CSGWMatchStopReq GWMatchStop_Req = 108;
inline bool C2ServerMsg::has_gwmatchstop_req() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void C2ServerMsg::set_has_gwmatchstop_req() {
  _has_bits_[2] |= 0x02000000u;
}
inline void C2ServerMsg::clear_has_gwmatchstop_req() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void C2ServerMsg::clear_gwmatchstop_req() {
  if (gwmatchstop_req_ != NULL) gwmatchstop_req_->::fgame::CSGWMatchStopReq::Clear();
  clear_has_gwmatchstop_req();
}
inline const ::fgame::CSGWMatchStopReq& C2ServerMsg::gwmatchstop_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GWMatchStop_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwmatchstop_req_ != NULL ? *gwmatchstop_req_ : *default_instance().gwmatchstop_req_;
#else
  return gwmatchstop_req_ != NULL ? *gwmatchstop_req_ : *default_instance_->gwmatchstop_req_;
#endif
}
inline ::fgame::CSGWMatchStopReq* C2ServerMsg::mutable_gwmatchstop_req() {
  set_has_gwmatchstop_req();
  if (gwmatchstop_req_ == NULL) gwmatchstop_req_ = new ::fgame::CSGWMatchStopReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GWMatchStop_Req)
  return gwmatchstop_req_;
}
inline ::fgame::CSGWMatchStopReq* C2ServerMsg::release_gwmatchstop_req() {
  clear_has_gwmatchstop_req();
  ::fgame::CSGWMatchStopReq* temp = gwmatchstop_req_;
  gwmatchstop_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_gwmatchstop_req(::fgame::CSGWMatchStopReq* gwmatchstop_req) {
  delete gwmatchstop_req_;
  gwmatchstop_req_ = gwmatchstop_req;
  if (gwmatchstop_req) {
    set_has_gwmatchstop_req();
  } else {
    clear_has_gwmatchstop_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GWMatchStop_Req)
}

// optional .fgame.CSGWGetRankReq GWGetRank_Req = 109;
inline bool C2ServerMsg::has_gwgetrank_req() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void C2ServerMsg::set_has_gwgetrank_req() {
  _has_bits_[2] |= 0x04000000u;
}
inline void C2ServerMsg::clear_has_gwgetrank_req() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void C2ServerMsg::clear_gwgetrank_req() {
  if (gwgetrank_req_ != NULL) gwgetrank_req_->::fgame::CSGWGetRankReq::Clear();
  clear_has_gwgetrank_req();
}
inline const ::fgame::CSGWGetRankReq& C2ServerMsg::gwgetrank_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GWGetRank_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwgetrank_req_ != NULL ? *gwgetrank_req_ : *default_instance().gwgetrank_req_;
#else
  return gwgetrank_req_ != NULL ? *gwgetrank_req_ : *default_instance_->gwgetrank_req_;
#endif
}
inline ::fgame::CSGWGetRankReq* C2ServerMsg::mutable_gwgetrank_req() {
  set_has_gwgetrank_req();
  if (gwgetrank_req_ == NULL) gwgetrank_req_ = new ::fgame::CSGWGetRankReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GWGetRank_Req)
  return gwgetrank_req_;
}
inline ::fgame::CSGWGetRankReq* C2ServerMsg::release_gwgetrank_req() {
  clear_has_gwgetrank_req();
  ::fgame::CSGWGetRankReq* temp = gwgetrank_req_;
  gwgetrank_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_gwgetrank_req(::fgame::CSGWGetRankReq* gwgetrank_req) {
  delete gwgetrank_req_;
  gwgetrank_req_ = gwgetrank_req;
  if (gwgetrank_req) {
    set_has_gwgetrank_req();
  } else {
    clear_has_gwgetrank_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GWGetRank_Req)
}

// optional .fgame.CSGWBuyEnergyReq GWBuyEnergy_Req = 110;
inline bool C2ServerMsg::has_gwbuyenergy_req() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void C2ServerMsg::set_has_gwbuyenergy_req() {
  _has_bits_[2] |= 0x08000000u;
}
inline void C2ServerMsg::clear_has_gwbuyenergy_req() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void C2ServerMsg::clear_gwbuyenergy_req() {
  if (gwbuyenergy_req_ != NULL) gwbuyenergy_req_->::fgame::CSGWBuyEnergyReq::Clear();
  clear_has_gwbuyenergy_req();
}
inline const ::fgame::CSGWBuyEnergyReq& C2ServerMsg::gwbuyenergy_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GWBuyEnergy_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwbuyenergy_req_ != NULL ? *gwbuyenergy_req_ : *default_instance().gwbuyenergy_req_;
#else
  return gwbuyenergy_req_ != NULL ? *gwbuyenergy_req_ : *default_instance_->gwbuyenergy_req_;
#endif
}
inline ::fgame::CSGWBuyEnergyReq* C2ServerMsg::mutable_gwbuyenergy_req() {
  set_has_gwbuyenergy_req();
  if (gwbuyenergy_req_ == NULL) gwbuyenergy_req_ = new ::fgame::CSGWBuyEnergyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GWBuyEnergy_Req)
  return gwbuyenergy_req_;
}
inline ::fgame::CSGWBuyEnergyReq* C2ServerMsg::release_gwbuyenergy_req() {
  clear_has_gwbuyenergy_req();
  ::fgame::CSGWBuyEnergyReq* temp = gwbuyenergy_req_;
  gwbuyenergy_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_gwbuyenergy_req(::fgame::CSGWBuyEnergyReq* gwbuyenergy_req) {
  delete gwbuyenergy_req_;
  gwbuyenergy_req_ = gwbuyenergy_req;
  if (gwbuyenergy_req) {
    set_has_gwbuyenergy_req();
  } else {
    clear_has_gwbuyenergy_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GWBuyEnergy_Req)
}

// optional .fgame.CSRequestPKeyReq RequestPKey_Req = 114;
inline bool C2ServerMsg::has_requestpkey_req() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void C2ServerMsg::set_has_requestpkey_req() {
  _has_bits_[2] |= 0x10000000u;
}
inline void C2ServerMsg::clear_has_requestpkey_req() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void C2ServerMsg::clear_requestpkey_req() {
  if (requestpkey_req_ != NULL) requestpkey_req_->::fgame::CSRequestPKeyReq::Clear();
  clear_has_requestpkey_req();
}
inline const ::fgame::CSRequestPKeyReq& C2ServerMsg::requestpkey_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RequestPKey_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return requestpkey_req_ != NULL ? *requestpkey_req_ : *default_instance().requestpkey_req_;
#else
  return requestpkey_req_ != NULL ? *requestpkey_req_ : *default_instance_->requestpkey_req_;
#endif
}
inline ::fgame::CSRequestPKeyReq* C2ServerMsg::mutable_requestpkey_req() {
  set_has_requestpkey_req();
  if (requestpkey_req_ == NULL) requestpkey_req_ = new ::fgame::CSRequestPKeyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RequestPKey_Req)
  return requestpkey_req_;
}
inline ::fgame::CSRequestPKeyReq* C2ServerMsg::release_requestpkey_req() {
  clear_has_requestpkey_req();
  ::fgame::CSRequestPKeyReq* temp = requestpkey_req_;
  requestpkey_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_requestpkey_req(::fgame::CSRequestPKeyReq* requestpkey_req) {
  delete requestpkey_req_;
  requestpkey_req_ = requestpkey_req;
  if (requestpkey_req) {
    set_has_requestpkey_req();
  } else {
    clear_has_requestpkey_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RequestPKey_Req)
}

// optional .fgame.CSSendClientKeyReq SendClientKey_Req = 115;
inline bool C2ServerMsg::has_sendclientkey_req() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void C2ServerMsg::set_has_sendclientkey_req() {
  _has_bits_[2] |= 0x20000000u;
}
inline void C2ServerMsg::clear_has_sendclientkey_req() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void C2ServerMsg::clear_sendclientkey_req() {
  if (sendclientkey_req_ != NULL) sendclientkey_req_->::fgame::CSSendClientKeyReq::Clear();
  clear_has_sendclientkey_req();
}
inline const ::fgame::CSSendClientKeyReq& C2ServerMsg::sendclientkey_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SendClientKey_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sendclientkey_req_ != NULL ? *sendclientkey_req_ : *default_instance().sendclientkey_req_;
#else
  return sendclientkey_req_ != NULL ? *sendclientkey_req_ : *default_instance_->sendclientkey_req_;
#endif
}
inline ::fgame::CSSendClientKeyReq* C2ServerMsg::mutable_sendclientkey_req() {
  set_has_sendclientkey_req();
  if (sendclientkey_req_ == NULL) sendclientkey_req_ = new ::fgame::CSSendClientKeyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SendClientKey_Req)
  return sendclientkey_req_;
}
inline ::fgame::CSSendClientKeyReq* C2ServerMsg::release_sendclientkey_req() {
  clear_has_sendclientkey_req();
  ::fgame::CSSendClientKeyReq* temp = sendclientkey_req_;
  sendclientkey_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_sendclientkey_req(::fgame::CSSendClientKeyReq* sendclientkey_req) {
  delete sendclientkey_req_;
  sendclientkey_req_ = sendclientkey_req;
  if (sendclientkey_req) {
    set_has_sendclientkey_req();
  } else {
    clear_has_sendclientkey_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SendClientKey_Req)
}

// optional .fgame.CSUpdateExchangeListReq UpdateExchangeList_Req = 116;
inline bool C2ServerMsg::has_updateexchangelist_req() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void C2ServerMsg::set_has_updateexchangelist_req() {
  _has_bits_[2] |= 0x40000000u;
}
inline void C2ServerMsg::clear_has_updateexchangelist_req() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void C2ServerMsg::clear_updateexchangelist_req() {
  if (updateexchangelist_req_ != NULL) updateexchangelist_req_->::fgame::CSUpdateExchangeListReq::Clear();
  clear_has_updateexchangelist_req();
}
inline const ::fgame::CSUpdateExchangeListReq& C2ServerMsg::updateexchangelist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.UpdateExchangeList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updateexchangelist_req_ != NULL ? *updateexchangelist_req_ : *default_instance().updateexchangelist_req_;
#else
  return updateexchangelist_req_ != NULL ? *updateexchangelist_req_ : *default_instance_->updateexchangelist_req_;
#endif
}
inline ::fgame::CSUpdateExchangeListReq* C2ServerMsg::mutable_updateexchangelist_req() {
  set_has_updateexchangelist_req();
  if (updateexchangelist_req_ == NULL) updateexchangelist_req_ = new ::fgame::CSUpdateExchangeListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.UpdateExchangeList_Req)
  return updateexchangelist_req_;
}
inline ::fgame::CSUpdateExchangeListReq* C2ServerMsg::release_updateexchangelist_req() {
  clear_has_updateexchangelist_req();
  ::fgame::CSUpdateExchangeListReq* temp = updateexchangelist_req_;
  updateexchangelist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_updateexchangelist_req(::fgame::CSUpdateExchangeListReq* updateexchangelist_req) {
  delete updateexchangelist_req_;
  updateexchangelist_req_ = updateexchangelist_req;
  if (updateexchangelist_req) {
    set_has_updateexchangelist_req();
  } else {
    clear_has_updateexchangelist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.UpdateExchangeList_Req)
}

// optional .fgame.CSGlyphsRequestInfoReq GlyphsRequestInfo_Req = 120;
inline bool C2ServerMsg::has_glyphsrequestinfo_req() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void C2ServerMsg::set_has_glyphsrequestinfo_req() {
  _has_bits_[2] |= 0x80000000u;
}
inline void C2ServerMsg::clear_has_glyphsrequestinfo_req() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void C2ServerMsg::clear_glyphsrequestinfo_req() {
  if (glyphsrequestinfo_req_ != NULL) glyphsrequestinfo_req_->::fgame::CSGlyphsRequestInfoReq::Clear();
  clear_has_glyphsrequestinfo_req();
}
inline const ::fgame::CSGlyphsRequestInfoReq& C2ServerMsg::glyphsrequestinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphsRequestInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsrequestinfo_req_ != NULL ? *glyphsrequestinfo_req_ : *default_instance().glyphsrequestinfo_req_;
#else
  return glyphsrequestinfo_req_ != NULL ? *glyphsrequestinfo_req_ : *default_instance_->glyphsrequestinfo_req_;
#endif
}
inline ::fgame::CSGlyphsRequestInfoReq* C2ServerMsg::mutable_glyphsrequestinfo_req() {
  set_has_glyphsrequestinfo_req();
  if (glyphsrequestinfo_req_ == NULL) glyphsrequestinfo_req_ = new ::fgame::CSGlyphsRequestInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphsRequestInfo_Req)
  return glyphsrequestinfo_req_;
}
inline ::fgame::CSGlyphsRequestInfoReq* C2ServerMsg::release_glyphsrequestinfo_req() {
  clear_has_glyphsrequestinfo_req();
  ::fgame::CSGlyphsRequestInfoReq* temp = glyphsrequestinfo_req_;
  glyphsrequestinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphsrequestinfo_req(::fgame::CSGlyphsRequestInfoReq* glyphsrequestinfo_req) {
  delete glyphsrequestinfo_req_;
  glyphsrequestinfo_req_ = glyphsrequestinfo_req;
  if (glyphsrequestinfo_req) {
    set_has_glyphsrequestinfo_req();
  } else {
    clear_has_glyphsrequestinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphsRequestInfo_Req)
}

// optional .fgame.CSGlyphsRequestBasicInfoReq GlyphsRequestBasicInfo_Req = 121;
inline bool C2ServerMsg::has_glyphsrequestbasicinfo_req() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void C2ServerMsg::set_has_glyphsrequestbasicinfo_req() {
  _has_bits_[3] |= 0x00000001u;
}
inline void C2ServerMsg::clear_has_glyphsrequestbasicinfo_req() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void C2ServerMsg::clear_glyphsrequestbasicinfo_req() {
  if (glyphsrequestbasicinfo_req_ != NULL) glyphsrequestbasicinfo_req_->::fgame::CSGlyphsRequestBasicInfoReq::Clear();
  clear_has_glyphsrequestbasicinfo_req();
}
inline const ::fgame::CSGlyphsRequestBasicInfoReq& C2ServerMsg::glyphsrequestbasicinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphsRequestBasicInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsrequestbasicinfo_req_ != NULL ? *glyphsrequestbasicinfo_req_ : *default_instance().glyphsrequestbasicinfo_req_;
#else
  return glyphsrequestbasicinfo_req_ != NULL ? *glyphsrequestbasicinfo_req_ : *default_instance_->glyphsrequestbasicinfo_req_;
#endif
}
inline ::fgame::CSGlyphsRequestBasicInfoReq* C2ServerMsg::mutable_glyphsrequestbasicinfo_req() {
  set_has_glyphsrequestbasicinfo_req();
  if (glyphsrequestbasicinfo_req_ == NULL) glyphsrequestbasicinfo_req_ = new ::fgame::CSGlyphsRequestBasicInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphsRequestBasicInfo_Req)
  return glyphsrequestbasicinfo_req_;
}
inline ::fgame::CSGlyphsRequestBasicInfoReq* C2ServerMsg::release_glyphsrequestbasicinfo_req() {
  clear_has_glyphsrequestbasicinfo_req();
  ::fgame::CSGlyphsRequestBasicInfoReq* temp = glyphsrequestbasicinfo_req_;
  glyphsrequestbasicinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphsrequestbasicinfo_req(::fgame::CSGlyphsRequestBasicInfoReq* glyphsrequestbasicinfo_req) {
  delete glyphsrequestbasicinfo_req_;
  glyphsrequestbasicinfo_req_ = glyphsrequestbasicinfo_req;
  if (glyphsrequestbasicinfo_req) {
    set_has_glyphsrequestbasicinfo_req();
  } else {
    clear_has_glyphsrequestbasicinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphsRequestBasicInfo_Req)
}

// optional .fgame.CSGlyphsActiveReq GlyphsActive_Req = 122;
inline bool C2ServerMsg::has_glyphsactive_req() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void C2ServerMsg::set_has_glyphsactive_req() {
  _has_bits_[3] |= 0x00000002u;
}
inline void C2ServerMsg::clear_has_glyphsactive_req() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void C2ServerMsg::clear_glyphsactive_req() {
  if (glyphsactive_req_ != NULL) glyphsactive_req_->::fgame::CSGlyphsActiveReq::Clear();
  clear_has_glyphsactive_req();
}
inline const ::fgame::CSGlyphsActiveReq& C2ServerMsg::glyphsactive_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphsActive_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsactive_req_ != NULL ? *glyphsactive_req_ : *default_instance().glyphsactive_req_;
#else
  return glyphsactive_req_ != NULL ? *glyphsactive_req_ : *default_instance_->glyphsactive_req_;
#endif
}
inline ::fgame::CSGlyphsActiveReq* C2ServerMsg::mutable_glyphsactive_req() {
  set_has_glyphsactive_req();
  if (glyphsactive_req_ == NULL) glyphsactive_req_ = new ::fgame::CSGlyphsActiveReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphsActive_Req)
  return glyphsactive_req_;
}
inline ::fgame::CSGlyphsActiveReq* C2ServerMsg::release_glyphsactive_req() {
  clear_has_glyphsactive_req();
  ::fgame::CSGlyphsActiveReq* temp = glyphsactive_req_;
  glyphsactive_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphsactive_req(::fgame::CSGlyphsActiveReq* glyphsactive_req) {
  delete glyphsactive_req_;
  glyphsactive_req_ = glyphsactive_req;
  if (glyphsactive_req) {
    set_has_glyphsactive_req();
  } else {
    clear_has_glyphsactive_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphsActive_Req)
}

// optional .fgame.CSGlyphsUpgradeReq GlyphsUpgrade_Req = 123;
inline bool C2ServerMsg::has_glyphsupgrade_req() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void C2ServerMsg::set_has_glyphsupgrade_req() {
  _has_bits_[3] |= 0x00000004u;
}
inline void C2ServerMsg::clear_has_glyphsupgrade_req() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void C2ServerMsg::clear_glyphsupgrade_req() {
  if (glyphsupgrade_req_ != NULL) glyphsupgrade_req_->::fgame::CSGlyphsUpgradeReq::Clear();
  clear_has_glyphsupgrade_req();
}
inline const ::fgame::CSGlyphsUpgradeReq& C2ServerMsg::glyphsupgrade_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphsUpgrade_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsupgrade_req_ != NULL ? *glyphsupgrade_req_ : *default_instance().glyphsupgrade_req_;
#else
  return glyphsupgrade_req_ != NULL ? *glyphsupgrade_req_ : *default_instance_->glyphsupgrade_req_;
#endif
}
inline ::fgame::CSGlyphsUpgradeReq* C2ServerMsg::mutable_glyphsupgrade_req() {
  set_has_glyphsupgrade_req();
  if (glyphsupgrade_req_ == NULL) glyphsupgrade_req_ = new ::fgame::CSGlyphsUpgradeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphsUpgrade_Req)
  return glyphsupgrade_req_;
}
inline ::fgame::CSGlyphsUpgradeReq* C2ServerMsg::release_glyphsupgrade_req() {
  clear_has_glyphsupgrade_req();
  ::fgame::CSGlyphsUpgradeReq* temp = glyphsupgrade_req_;
  glyphsupgrade_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphsupgrade_req(::fgame::CSGlyphsUpgradeReq* glyphsupgrade_req) {
  delete glyphsupgrade_req_;
  glyphsupgrade_req_ = glyphsupgrade_req;
  if (glyphsupgrade_req) {
    set_has_glyphsupgrade_req();
  } else {
    clear_has_glyphsupgrade_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphsUpgrade_Req)
}

// optional .fgame.CSGlyphsPvpInfoReq GlyphsPvpInfo_Req = 124;
inline bool C2ServerMsg::has_glyphspvpinfo_req() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void C2ServerMsg::set_has_glyphspvpinfo_req() {
  _has_bits_[3] |= 0x00000008u;
}
inline void C2ServerMsg::clear_has_glyphspvpinfo_req() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void C2ServerMsg::clear_glyphspvpinfo_req() {
  if (glyphspvpinfo_req_ != NULL) glyphspvpinfo_req_->::fgame::CSGlyphsPvpInfoReq::Clear();
  clear_has_glyphspvpinfo_req();
}
inline const ::fgame::CSGlyphsPvpInfoReq& C2ServerMsg::glyphspvpinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphsPvpInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphspvpinfo_req_ != NULL ? *glyphspvpinfo_req_ : *default_instance().glyphspvpinfo_req_;
#else
  return glyphspvpinfo_req_ != NULL ? *glyphspvpinfo_req_ : *default_instance_->glyphspvpinfo_req_;
#endif
}
inline ::fgame::CSGlyphsPvpInfoReq* C2ServerMsg::mutable_glyphspvpinfo_req() {
  set_has_glyphspvpinfo_req();
  if (glyphspvpinfo_req_ == NULL) glyphspvpinfo_req_ = new ::fgame::CSGlyphsPvpInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphsPvpInfo_Req)
  return glyphspvpinfo_req_;
}
inline ::fgame::CSGlyphsPvpInfoReq* C2ServerMsg::release_glyphspvpinfo_req() {
  clear_has_glyphspvpinfo_req();
  ::fgame::CSGlyphsPvpInfoReq* temp = glyphspvpinfo_req_;
  glyphspvpinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphspvpinfo_req(::fgame::CSGlyphsPvpInfoReq* glyphspvpinfo_req) {
  delete glyphspvpinfo_req_;
  glyphspvpinfo_req_ = glyphspvpinfo_req;
  if (glyphspvpinfo_req) {
    set_has_glyphspvpinfo_req();
  } else {
    clear_has_glyphspvpinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphsPvpInfo_Req)
}

// optional .fgame.CSBuyVipReq BuyVip_Req = 125;
inline bool C2ServerMsg::has_buyvip_req() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void C2ServerMsg::set_has_buyvip_req() {
  _has_bits_[3] |= 0x00000010u;
}
inline void C2ServerMsg::clear_has_buyvip_req() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void C2ServerMsg::clear_buyvip_req() {
  if (buyvip_req_ != NULL) buyvip_req_->::fgame::CSBuyVipReq::Clear();
  clear_has_buyvip_req();
}
inline const ::fgame::CSBuyVipReq& C2ServerMsg::buyvip_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.BuyVip_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buyvip_req_ != NULL ? *buyvip_req_ : *default_instance().buyvip_req_;
#else
  return buyvip_req_ != NULL ? *buyvip_req_ : *default_instance_->buyvip_req_;
#endif
}
inline ::fgame::CSBuyVipReq* C2ServerMsg::mutable_buyvip_req() {
  set_has_buyvip_req();
  if (buyvip_req_ == NULL) buyvip_req_ = new ::fgame::CSBuyVipReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.BuyVip_Req)
  return buyvip_req_;
}
inline ::fgame::CSBuyVipReq* C2ServerMsg::release_buyvip_req() {
  clear_has_buyvip_req();
  ::fgame::CSBuyVipReq* temp = buyvip_req_;
  buyvip_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_buyvip_req(::fgame::CSBuyVipReq* buyvip_req) {
  delete buyvip_req_;
  buyvip_req_ = buyvip_req;
  if (buyvip_req) {
    set_has_buyvip_req();
  } else {
    clear_has_buyvip_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.BuyVip_Req)
}

// optional .fgame.CSGlyphGuideReq GlyphGuide_Req = 126;
inline bool C2ServerMsg::has_glyphguide_req() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void C2ServerMsg::set_has_glyphguide_req() {
  _has_bits_[3] |= 0x00000020u;
}
inline void C2ServerMsg::clear_has_glyphguide_req() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void C2ServerMsg::clear_glyphguide_req() {
  if (glyphguide_req_ != NULL) glyphguide_req_->::fgame::CSGlyphGuideReq::Clear();
  clear_has_glyphguide_req();
}
inline const ::fgame::CSGlyphGuideReq& C2ServerMsg::glyphguide_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GlyphGuide_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphguide_req_ != NULL ? *glyphguide_req_ : *default_instance().glyphguide_req_;
#else
  return glyphguide_req_ != NULL ? *glyphguide_req_ : *default_instance_->glyphguide_req_;
#endif
}
inline ::fgame::CSGlyphGuideReq* C2ServerMsg::mutable_glyphguide_req() {
  set_has_glyphguide_req();
  if (glyphguide_req_ == NULL) glyphguide_req_ = new ::fgame::CSGlyphGuideReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GlyphGuide_Req)
  return glyphguide_req_;
}
inline ::fgame::CSGlyphGuideReq* C2ServerMsg::release_glyphguide_req() {
  clear_has_glyphguide_req();
  ::fgame::CSGlyphGuideReq* temp = glyphguide_req_;
  glyphguide_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_glyphguide_req(::fgame::CSGlyphGuideReq* glyphguide_req) {
  delete glyphguide_req_;
  glyphguide_req_ = glyphguide_req;
  if (glyphguide_req) {
    set_has_glyphguide_req();
  } else {
    clear_has_glyphguide_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GlyphGuide_Req)
}

// optional .fgame.CSNewYearGetInfoReq NewYearGetInfo_Req = 127;
inline bool C2ServerMsg::has_newyeargetinfo_req() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void C2ServerMsg::set_has_newyeargetinfo_req() {
  _has_bits_[3] |= 0x00000040u;
}
inline void C2ServerMsg::clear_has_newyeargetinfo_req() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void C2ServerMsg::clear_newyeargetinfo_req() {
  if (newyeargetinfo_req_ != NULL) newyeargetinfo_req_->::fgame::CSNewYearGetInfoReq::Clear();
  clear_has_newyeargetinfo_req();
}
inline const ::fgame::CSNewYearGetInfoReq& C2ServerMsg::newyeargetinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.NewYearGetInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyeargetinfo_req_ != NULL ? *newyeargetinfo_req_ : *default_instance().newyeargetinfo_req_;
#else
  return newyeargetinfo_req_ != NULL ? *newyeargetinfo_req_ : *default_instance_->newyeargetinfo_req_;
#endif
}
inline ::fgame::CSNewYearGetInfoReq* C2ServerMsg::mutable_newyeargetinfo_req() {
  set_has_newyeargetinfo_req();
  if (newyeargetinfo_req_ == NULL) newyeargetinfo_req_ = new ::fgame::CSNewYearGetInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.NewYearGetInfo_Req)
  return newyeargetinfo_req_;
}
inline ::fgame::CSNewYearGetInfoReq* C2ServerMsg::release_newyeargetinfo_req() {
  clear_has_newyeargetinfo_req();
  ::fgame::CSNewYearGetInfoReq* temp = newyeargetinfo_req_;
  newyeargetinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_newyeargetinfo_req(::fgame::CSNewYearGetInfoReq* newyeargetinfo_req) {
  delete newyeargetinfo_req_;
  newyeargetinfo_req_ = newyeargetinfo_req;
  if (newyeargetinfo_req) {
    set_has_newyeargetinfo_req();
  } else {
    clear_has_newyeargetinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.NewYearGetInfo_Req)
}

// optional .fgame.CSNewYearRewardReq NewYearReward_Req = 128;
inline bool C2ServerMsg::has_newyearreward_req() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void C2ServerMsg::set_has_newyearreward_req() {
  _has_bits_[3] |= 0x00000080u;
}
inline void C2ServerMsg::clear_has_newyearreward_req() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void C2ServerMsg::clear_newyearreward_req() {
  if (newyearreward_req_ != NULL) newyearreward_req_->::fgame::CSNewYearRewardReq::Clear();
  clear_has_newyearreward_req();
}
inline const ::fgame::CSNewYearRewardReq& C2ServerMsg::newyearreward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.NewYearReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyearreward_req_ != NULL ? *newyearreward_req_ : *default_instance().newyearreward_req_;
#else
  return newyearreward_req_ != NULL ? *newyearreward_req_ : *default_instance_->newyearreward_req_;
#endif
}
inline ::fgame::CSNewYearRewardReq* C2ServerMsg::mutable_newyearreward_req() {
  set_has_newyearreward_req();
  if (newyearreward_req_ == NULL) newyearreward_req_ = new ::fgame::CSNewYearRewardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.NewYearReward_Req)
  return newyearreward_req_;
}
inline ::fgame::CSNewYearRewardReq* C2ServerMsg::release_newyearreward_req() {
  clear_has_newyearreward_req();
  ::fgame::CSNewYearRewardReq* temp = newyearreward_req_;
  newyearreward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_newyearreward_req(::fgame::CSNewYearRewardReq* newyearreward_req) {
  delete newyearreward_req_;
  newyearreward_req_ = newyearreward_req;
  if (newyearreward_req) {
    set_has_newyearreward_req();
  } else {
    clear_has_newyearreward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.NewYearReward_Req)
}

// optional .fgame.CSOpenChestReq OpenChest_Req = 129;
inline bool C2ServerMsg::has_openchest_req() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void C2ServerMsg::set_has_openchest_req() {
  _has_bits_[3] |= 0x00000100u;
}
inline void C2ServerMsg::clear_has_openchest_req() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void C2ServerMsg::clear_openchest_req() {
  if (openchest_req_ != NULL) openchest_req_->::fgame::CSOpenChestReq::Clear();
  clear_has_openchest_req();
}
inline const ::fgame::CSOpenChestReq& C2ServerMsg::openchest_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpenChest_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return openchest_req_ != NULL ? *openchest_req_ : *default_instance().openchest_req_;
#else
  return openchest_req_ != NULL ? *openchest_req_ : *default_instance_->openchest_req_;
#endif
}
inline ::fgame::CSOpenChestReq* C2ServerMsg::mutable_openchest_req() {
  set_has_openchest_req();
  if (openchest_req_ == NULL) openchest_req_ = new ::fgame::CSOpenChestReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpenChest_Req)
  return openchest_req_;
}
inline ::fgame::CSOpenChestReq* C2ServerMsg::release_openchest_req() {
  clear_has_openchest_req();
  ::fgame::CSOpenChestReq* temp = openchest_req_;
  openchest_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_openchest_req(::fgame::CSOpenChestReq* openchest_req) {
  delete openchest_req_;
  openchest_req_ = openchest_req;
  if (openchest_req) {
    set_has_openchest_req();
  } else {
    clear_has_openchest_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpenChest_Req)
}

// optional .fgame.CSChristmasDecorateReq ChristmasDecorate_Req = 130;
inline bool C2ServerMsg::has_christmasdecorate_req() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void C2ServerMsg::set_has_christmasdecorate_req() {
  _has_bits_[3] |= 0x00000200u;
}
inline void C2ServerMsg::clear_has_christmasdecorate_req() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void C2ServerMsg::clear_christmasdecorate_req() {
  if (christmasdecorate_req_ != NULL) christmasdecorate_req_->::fgame::CSChristmasDecorateReq::Clear();
  clear_has_christmasdecorate_req();
}
inline const ::fgame::CSChristmasDecorateReq& C2ServerMsg::christmasdecorate_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChristmasDecorate_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasdecorate_req_ != NULL ? *christmasdecorate_req_ : *default_instance().christmasdecorate_req_;
#else
  return christmasdecorate_req_ != NULL ? *christmasdecorate_req_ : *default_instance_->christmasdecorate_req_;
#endif
}
inline ::fgame::CSChristmasDecorateReq* C2ServerMsg::mutable_christmasdecorate_req() {
  set_has_christmasdecorate_req();
  if (christmasdecorate_req_ == NULL) christmasdecorate_req_ = new ::fgame::CSChristmasDecorateReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChristmasDecorate_Req)
  return christmasdecorate_req_;
}
inline ::fgame::CSChristmasDecorateReq* C2ServerMsg::release_christmasdecorate_req() {
  clear_has_christmasdecorate_req();
  ::fgame::CSChristmasDecorateReq* temp = christmasdecorate_req_;
  christmasdecorate_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_christmasdecorate_req(::fgame::CSChristmasDecorateReq* christmasdecorate_req) {
  delete christmasdecorate_req_;
  christmasdecorate_req_ = christmasdecorate_req;
  if (christmasdecorate_req) {
    set_has_christmasdecorate_req();
  } else {
    clear_has_christmasdecorate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChristmasDecorate_Req)
}

// optional .fgame.CSChristmasTakeBonusReq ChristmasTakeBonus_Req = 131;
inline bool C2ServerMsg::has_christmastakebonus_req() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void C2ServerMsg::set_has_christmastakebonus_req() {
  _has_bits_[3] |= 0x00000400u;
}
inline void C2ServerMsg::clear_has_christmastakebonus_req() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void C2ServerMsg::clear_christmastakebonus_req() {
  if (christmastakebonus_req_ != NULL) christmastakebonus_req_->::fgame::CSChristmasTakeBonusReq::Clear();
  clear_has_christmastakebonus_req();
}
inline const ::fgame::CSChristmasTakeBonusReq& C2ServerMsg::christmastakebonus_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChristmasTakeBonus_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmastakebonus_req_ != NULL ? *christmastakebonus_req_ : *default_instance().christmastakebonus_req_;
#else
  return christmastakebonus_req_ != NULL ? *christmastakebonus_req_ : *default_instance_->christmastakebonus_req_;
#endif
}
inline ::fgame::CSChristmasTakeBonusReq* C2ServerMsg::mutable_christmastakebonus_req() {
  set_has_christmastakebonus_req();
  if (christmastakebonus_req_ == NULL) christmastakebonus_req_ = new ::fgame::CSChristmasTakeBonusReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChristmasTakeBonus_Req)
  return christmastakebonus_req_;
}
inline ::fgame::CSChristmasTakeBonusReq* C2ServerMsg::release_christmastakebonus_req() {
  clear_has_christmastakebonus_req();
  ::fgame::CSChristmasTakeBonusReq* temp = christmastakebonus_req_;
  christmastakebonus_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_christmastakebonus_req(::fgame::CSChristmasTakeBonusReq* christmastakebonus_req) {
  delete christmastakebonus_req_;
  christmastakebonus_req_ = christmastakebonus_req;
  if (christmastakebonus_req) {
    set_has_christmastakebonus_req();
  } else {
    clear_has_christmastakebonus_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChristmasTakeBonus_Req)
}

// optional .fgame.CSChristmasGetDataReq ChristmasGetDate_Req = 132;
inline bool C2ServerMsg::has_christmasgetdate_req() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void C2ServerMsg::set_has_christmasgetdate_req() {
  _has_bits_[3] |= 0x00000800u;
}
inline void C2ServerMsg::clear_has_christmasgetdate_req() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void C2ServerMsg::clear_christmasgetdate_req() {
  if (christmasgetdate_req_ != NULL) christmasgetdate_req_->::fgame::CSChristmasGetDataReq::Clear();
  clear_has_christmasgetdate_req();
}
inline const ::fgame::CSChristmasGetDataReq& C2ServerMsg::christmasgetdate_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChristmasGetDate_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasgetdate_req_ != NULL ? *christmasgetdate_req_ : *default_instance().christmasgetdate_req_;
#else
  return christmasgetdate_req_ != NULL ? *christmasgetdate_req_ : *default_instance_->christmasgetdate_req_;
#endif
}
inline ::fgame::CSChristmasGetDataReq* C2ServerMsg::mutable_christmasgetdate_req() {
  set_has_christmasgetdate_req();
  if (christmasgetdate_req_ == NULL) christmasgetdate_req_ = new ::fgame::CSChristmasGetDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChristmasGetDate_Req)
  return christmasgetdate_req_;
}
inline ::fgame::CSChristmasGetDataReq* C2ServerMsg::release_christmasgetdate_req() {
  clear_has_christmasgetdate_req();
  ::fgame::CSChristmasGetDataReq* temp = christmasgetdate_req_;
  christmasgetdate_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_christmasgetdate_req(::fgame::CSChristmasGetDataReq* christmasgetdate_req) {
  delete christmasgetdate_req_;
  christmasgetdate_req_ = christmasgetdate_req;
  if (christmasgetdate_req) {
    set_has_christmasgetdate_req();
  } else {
    clear_has_christmasgetdate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChristmasGetDate_Req)
}

// optional .fgame.CSChristmasGetRankReq ChristmasGetRank_Req = 133;
inline bool C2ServerMsg::has_christmasgetrank_req() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void C2ServerMsg::set_has_christmasgetrank_req() {
  _has_bits_[3] |= 0x00001000u;
}
inline void C2ServerMsg::clear_has_christmasgetrank_req() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void C2ServerMsg::clear_christmasgetrank_req() {
  if (christmasgetrank_req_ != NULL) christmasgetrank_req_->::fgame::CSChristmasGetRankReq::Clear();
  clear_has_christmasgetrank_req();
}
inline const ::fgame::CSChristmasGetRankReq& C2ServerMsg::christmasgetrank_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChristmasGetRank_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasgetrank_req_ != NULL ? *christmasgetrank_req_ : *default_instance().christmasgetrank_req_;
#else
  return christmasgetrank_req_ != NULL ? *christmasgetrank_req_ : *default_instance_->christmasgetrank_req_;
#endif
}
inline ::fgame::CSChristmasGetRankReq* C2ServerMsg::mutable_christmasgetrank_req() {
  set_has_christmasgetrank_req();
  if (christmasgetrank_req_ == NULL) christmasgetrank_req_ = new ::fgame::CSChristmasGetRankReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChristmasGetRank_Req)
  return christmasgetrank_req_;
}
inline ::fgame::CSChristmasGetRankReq* C2ServerMsg::release_christmasgetrank_req() {
  clear_has_christmasgetrank_req();
  ::fgame::CSChristmasGetRankReq* temp = christmasgetrank_req_;
  christmasgetrank_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_christmasgetrank_req(::fgame::CSChristmasGetRankReq* christmasgetrank_req) {
  delete christmasgetrank_req_;
  christmasgetrank_req_ = christmasgetrank_req;
  if (christmasgetrank_req) {
    set_has_christmasgetrank_req();
  } else {
    clear_has_christmasgetrank_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChristmasGetRank_Req)
}

// optional .fgame.CSRetriveCheckPtRewardReq RetriveCheckPtReward_Req = 134;
inline bool C2ServerMsg::has_retrivecheckptreward_req() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void C2ServerMsg::set_has_retrivecheckptreward_req() {
  _has_bits_[3] |= 0x00002000u;
}
inline void C2ServerMsg::clear_has_retrivecheckptreward_req() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void C2ServerMsg::clear_retrivecheckptreward_req() {
  if (retrivecheckptreward_req_ != NULL) retrivecheckptreward_req_->::fgame::CSRetriveCheckPtRewardReq::Clear();
  clear_has_retrivecheckptreward_req();
}
inline const ::fgame::CSRetriveCheckPtRewardReq& C2ServerMsg::retrivecheckptreward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RetriveCheckPtReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return retrivecheckptreward_req_ != NULL ? *retrivecheckptreward_req_ : *default_instance().retrivecheckptreward_req_;
#else
  return retrivecheckptreward_req_ != NULL ? *retrivecheckptreward_req_ : *default_instance_->retrivecheckptreward_req_;
#endif
}
inline ::fgame::CSRetriveCheckPtRewardReq* C2ServerMsg::mutable_retrivecheckptreward_req() {
  set_has_retrivecheckptreward_req();
  if (retrivecheckptreward_req_ == NULL) retrivecheckptreward_req_ = new ::fgame::CSRetriveCheckPtRewardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RetriveCheckPtReward_Req)
  return retrivecheckptreward_req_;
}
inline ::fgame::CSRetriveCheckPtRewardReq* C2ServerMsg::release_retrivecheckptreward_req() {
  clear_has_retrivecheckptreward_req();
  ::fgame::CSRetriveCheckPtRewardReq* temp = retrivecheckptreward_req_;
  retrivecheckptreward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_retrivecheckptreward_req(::fgame::CSRetriveCheckPtRewardReq* retrivecheckptreward_req) {
  delete retrivecheckptreward_req_;
  retrivecheckptreward_req_ = retrivecheckptreward_req;
  if (retrivecheckptreward_req) {
    set_has_retrivecheckptreward_req();
  } else {
    clear_has_retrivecheckptreward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RetriveCheckPtReward_Req)
}

// optional .fgame.CSVipTimeReq VipTime_Req = 135;
inline bool C2ServerMsg::has_viptime_req() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void C2ServerMsg::set_has_viptime_req() {
  _has_bits_[3] |= 0x00004000u;
}
inline void C2ServerMsg::clear_has_viptime_req() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void C2ServerMsg::clear_viptime_req() {
  if (viptime_req_ != NULL) viptime_req_->::fgame::CSVipTimeReq::Clear();
  clear_has_viptime_req();
}
inline const ::fgame::CSVipTimeReq& C2ServerMsg::viptime_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.VipTime_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return viptime_req_ != NULL ? *viptime_req_ : *default_instance().viptime_req_;
#else
  return viptime_req_ != NULL ? *viptime_req_ : *default_instance_->viptime_req_;
#endif
}
inline ::fgame::CSVipTimeReq* C2ServerMsg::mutable_viptime_req() {
  set_has_viptime_req();
  if (viptime_req_ == NULL) viptime_req_ = new ::fgame::CSVipTimeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.VipTime_Req)
  return viptime_req_;
}
inline ::fgame::CSVipTimeReq* C2ServerMsg::release_viptime_req() {
  clear_has_viptime_req();
  ::fgame::CSVipTimeReq* temp = viptime_req_;
  viptime_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_viptime_req(::fgame::CSVipTimeReq* viptime_req) {
  delete viptime_req_;
  viptime_req_ = viptime_req;
  if (viptime_req) {
    set_has_viptime_req();
  } else {
    clear_has_viptime_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.VipTime_Req)
}

// optional .fgame.CSNewYearCmpReq NewYearCmp_Req = 136;
inline bool C2ServerMsg::has_newyearcmp_req() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void C2ServerMsg::set_has_newyearcmp_req() {
  _has_bits_[3] |= 0x00008000u;
}
inline void C2ServerMsg::clear_has_newyearcmp_req() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void C2ServerMsg::clear_newyearcmp_req() {
  if (newyearcmp_req_ != NULL) newyearcmp_req_->::fgame::CSNewYearCmpReq::Clear();
  clear_has_newyearcmp_req();
}
inline const ::fgame::CSNewYearCmpReq& C2ServerMsg::newyearcmp_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.NewYearCmp_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyearcmp_req_ != NULL ? *newyearcmp_req_ : *default_instance().newyearcmp_req_;
#else
  return newyearcmp_req_ != NULL ? *newyearcmp_req_ : *default_instance_->newyearcmp_req_;
#endif
}
inline ::fgame::CSNewYearCmpReq* C2ServerMsg::mutable_newyearcmp_req() {
  set_has_newyearcmp_req();
  if (newyearcmp_req_ == NULL) newyearcmp_req_ = new ::fgame::CSNewYearCmpReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.NewYearCmp_Req)
  return newyearcmp_req_;
}
inline ::fgame::CSNewYearCmpReq* C2ServerMsg::release_newyearcmp_req() {
  clear_has_newyearcmp_req();
  ::fgame::CSNewYearCmpReq* temp = newyearcmp_req_;
  newyearcmp_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_newyearcmp_req(::fgame::CSNewYearCmpReq* newyearcmp_req) {
  delete newyearcmp_req_;
  newyearcmp_req_ = newyearcmp_req;
  if (newyearcmp_req) {
    set_has_newyearcmp_req();
  } else {
    clear_has_newyearcmp_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.NewYearCmp_Req)
}

// optional .fgame.CSNotifyGlyphsUpdateReq NotifyGlyphsUpdate_Req = 137;
inline bool C2ServerMsg::has_notifyglyphsupdate_req() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void C2ServerMsg::set_has_notifyglyphsupdate_req() {
  _has_bits_[3] |= 0x00010000u;
}
inline void C2ServerMsg::clear_has_notifyglyphsupdate_req() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void C2ServerMsg::clear_notifyglyphsupdate_req() {
  if (notifyglyphsupdate_req_ != NULL) notifyglyphsupdate_req_->::fgame::CSNotifyGlyphsUpdateReq::Clear();
  clear_has_notifyglyphsupdate_req();
}
inline const ::fgame::CSNotifyGlyphsUpdateReq& C2ServerMsg::notifyglyphsupdate_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.NotifyGlyphsUpdate_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notifyglyphsupdate_req_ != NULL ? *notifyglyphsupdate_req_ : *default_instance().notifyglyphsupdate_req_;
#else
  return notifyglyphsupdate_req_ != NULL ? *notifyglyphsupdate_req_ : *default_instance_->notifyglyphsupdate_req_;
#endif
}
inline ::fgame::CSNotifyGlyphsUpdateReq* C2ServerMsg::mutable_notifyglyphsupdate_req() {
  set_has_notifyglyphsupdate_req();
  if (notifyglyphsupdate_req_ == NULL) notifyglyphsupdate_req_ = new ::fgame::CSNotifyGlyphsUpdateReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.NotifyGlyphsUpdate_Req)
  return notifyglyphsupdate_req_;
}
inline ::fgame::CSNotifyGlyphsUpdateReq* C2ServerMsg::release_notifyglyphsupdate_req() {
  clear_has_notifyglyphsupdate_req();
  ::fgame::CSNotifyGlyphsUpdateReq* temp = notifyglyphsupdate_req_;
  notifyglyphsupdate_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_notifyglyphsupdate_req(::fgame::CSNotifyGlyphsUpdateReq* notifyglyphsupdate_req) {
  delete notifyglyphsupdate_req_;
  notifyglyphsupdate_req_ = notifyglyphsupdate_req;
  if (notifyglyphsupdate_req) {
    set_has_notifyglyphsupdate_req();
  } else {
    clear_has_notifyglyphsupdate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.NotifyGlyphsUpdate_Req)
}

// optional .fgame.CSPvpRecoverItemReq RecoverItem_Req = 138;
inline bool C2ServerMsg::has_recoveritem_req() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void C2ServerMsg::set_has_recoveritem_req() {
  _has_bits_[3] |= 0x00020000u;
}
inline void C2ServerMsg::clear_has_recoveritem_req() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void C2ServerMsg::clear_recoveritem_req() {
  if (recoveritem_req_ != NULL) recoveritem_req_->::fgame::CSPvpRecoverItemReq::Clear();
  clear_has_recoveritem_req();
}
inline const ::fgame::CSPvpRecoverItemReq& C2ServerMsg::recoveritem_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RecoverItem_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return recoveritem_req_ != NULL ? *recoveritem_req_ : *default_instance().recoveritem_req_;
#else
  return recoveritem_req_ != NULL ? *recoveritem_req_ : *default_instance_->recoveritem_req_;
#endif
}
inline ::fgame::CSPvpRecoverItemReq* C2ServerMsg::mutable_recoveritem_req() {
  set_has_recoveritem_req();
  if (recoveritem_req_ == NULL) recoveritem_req_ = new ::fgame::CSPvpRecoverItemReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RecoverItem_Req)
  return recoveritem_req_;
}
inline ::fgame::CSPvpRecoverItemReq* C2ServerMsg::release_recoveritem_req() {
  clear_has_recoveritem_req();
  ::fgame::CSPvpRecoverItemReq* temp = recoveritem_req_;
  recoveritem_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_recoveritem_req(::fgame::CSPvpRecoverItemReq* recoveritem_req) {
  delete recoveritem_req_;
  recoveritem_req_ = recoveritem_req;
  if (recoveritem_req) {
    set_has_recoveritem_req();
  } else {
    clear_has_recoveritem_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RecoverItem_Req)
}

// optional .fgame.CSSetSignatureReq SetSignature_Req = 139;
inline bool C2ServerMsg::has_setsignature_req() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void C2ServerMsg::set_has_setsignature_req() {
  _has_bits_[3] |= 0x00040000u;
}
inline void C2ServerMsg::clear_has_setsignature_req() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void C2ServerMsg::clear_setsignature_req() {
  if (setsignature_req_ != NULL) setsignature_req_->::fgame::CSSetSignatureReq::Clear();
  clear_has_setsignature_req();
}
inline const ::fgame::CSSetSignatureReq& C2ServerMsg::setsignature_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SetSignature_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setsignature_req_ != NULL ? *setsignature_req_ : *default_instance().setsignature_req_;
#else
  return setsignature_req_ != NULL ? *setsignature_req_ : *default_instance_->setsignature_req_;
#endif
}
inline ::fgame::CSSetSignatureReq* C2ServerMsg::mutable_setsignature_req() {
  set_has_setsignature_req();
  if (setsignature_req_ == NULL) setsignature_req_ = new ::fgame::CSSetSignatureReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SetSignature_Req)
  return setsignature_req_;
}
inline ::fgame::CSSetSignatureReq* C2ServerMsg::release_setsignature_req() {
  clear_has_setsignature_req();
  ::fgame::CSSetSignatureReq* temp = setsignature_req_;
  setsignature_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_setsignature_req(::fgame::CSSetSignatureReq* setsignature_req) {
  delete setsignature_req_;
  setsignature_req_ = setsignature_req;
  if (setsignature_req) {
    set_has_setsignature_req();
  } else {
    clear_has_setsignature_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SetSignature_Req)
}

// optional .fgame.CSSetExtraInfoVisibleReq SetExtraInfoVisible_Req = 140;
inline bool C2ServerMsg::has_setextrainfovisible_req() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void C2ServerMsg::set_has_setextrainfovisible_req() {
  _has_bits_[3] |= 0x00080000u;
}
inline void C2ServerMsg::clear_has_setextrainfovisible_req() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void C2ServerMsg::clear_setextrainfovisible_req() {
  if (setextrainfovisible_req_ != NULL) setextrainfovisible_req_->::fgame::CSSetExtraInfoVisibleReq::Clear();
  clear_has_setextrainfovisible_req();
}
inline const ::fgame::CSSetExtraInfoVisibleReq& C2ServerMsg::setextrainfovisible_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.SetExtraInfoVisible_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setextrainfovisible_req_ != NULL ? *setextrainfovisible_req_ : *default_instance().setextrainfovisible_req_;
#else
  return setextrainfovisible_req_ != NULL ? *setextrainfovisible_req_ : *default_instance_->setextrainfovisible_req_;
#endif
}
inline ::fgame::CSSetExtraInfoVisibleReq* C2ServerMsg::mutable_setextrainfovisible_req() {
  set_has_setextrainfovisible_req();
  if (setextrainfovisible_req_ == NULL) setextrainfovisible_req_ = new ::fgame::CSSetExtraInfoVisibleReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.SetExtraInfoVisible_Req)
  return setextrainfovisible_req_;
}
inline ::fgame::CSSetExtraInfoVisibleReq* C2ServerMsg::release_setextrainfovisible_req() {
  clear_has_setextrainfovisible_req();
  ::fgame::CSSetExtraInfoVisibleReq* temp = setextrainfovisible_req_;
  setextrainfovisible_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_setextrainfovisible_req(::fgame::CSSetExtraInfoVisibleReq* setextrainfovisible_req) {
  delete setextrainfovisible_req_;
  setextrainfovisible_req_ = setextrainfovisible_req;
  if (setextrainfovisible_req) {
    set_has_setextrainfovisible_req();
  } else {
    clear_has_setextrainfovisible_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.SetExtraInfoVisible_Req)
}

// optional .fgame.CSGetExtraInfoReq GetExtraInfo_Req = 141;
inline bool C2ServerMsg::has_getextrainfo_req() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void C2ServerMsg::set_has_getextrainfo_req() {
  _has_bits_[3] |= 0x00100000u;
}
inline void C2ServerMsg::clear_has_getextrainfo_req() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void C2ServerMsg::clear_getextrainfo_req() {
  if (getextrainfo_req_ != NULL) getextrainfo_req_->::fgame::CSGetExtraInfoReq::Clear();
  clear_has_getextrainfo_req();
}
inline const ::fgame::CSGetExtraInfoReq& C2ServerMsg::getextrainfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetExtraInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getextrainfo_req_ != NULL ? *getextrainfo_req_ : *default_instance().getextrainfo_req_;
#else
  return getextrainfo_req_ != NULL ? *getextrainfo_req_ : *default_instance_->getextrainfo_req_;
#endif
}
inline ::fgame::CSGetExtraInfoReq* C2ServerMsg::mutable_getextrainfo_req() {
  set_has_getextrainfo_req();
  if (getextrainfo_req_ == NULL) getextrainfo_req_ = new ::fgame::CSGetExtraInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetExtraInfo_Req)
  return getextrainfo_req_;
}
inline ::fgame::CSGetExtraInfoReq* C2ServerMsg::release_getextrainfo_req() {
  clear_has_getextrainfo_req();
  ::fgame::CSGetExtraInfoReq* temp = getextrainfo_req_;
  getextrainfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getextrainfo_req(::fgame::CSGetExtraInfoReq* getextrainfo_req) {
  delete getextrainfo_req_;
  getextrainfo_req_ = getextrainfo_req;
  if (getextrainfo_req) {
    set_has_getextrainfo_req();
  } else {
    clear_has_getextrainfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetExtraInfo_Req)
}

// optional .fgame.CSValentineDataReq ValentineData_Req = 143;
inline bool C2ServerMsg::has_valentinedata_req() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void C2ServerMsg::set_has_valentinedata_req() {
  _has_bits_[3] |= 0x00200000u;
}
inline void C2ServerMsg::clear_has_valentinedata_req() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void C2ServerMsg::clear_valentinedata_req() {
  if (valentinedata_req_ != NULL) valentinedata_req_->::fgame::CSValentineDataReq::Clear();
  clear_has_valentinedata_req();
}
inline const ::fgame::CSValentineDataReq& C2ServerMsg::valentinedata_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ValentineData_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return valentinedata_req_ != NULL ? *valentinedata_req_ : *default_instance().valentinedata_req_;
#else
  return valentinedata_req_ != NULL ? *valentinedata_req_ : *default_instance_->valentinedata_req_;
#endif
}
inline ::fgame::CSValentineDataReq* C2ServerMsg::mutable_valentinedata_req() {
  set_has_valentinedata_req();
  if (valentinedata_req_ == NULL) valentinedata_req_ = new ::fgame::CSValentineDataReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ValentineData_Req)
  return valentinedata_req_;
}
inline ::fgame::CSValentineDataReq* C2ServerMsg::release_valentinedata_req() {
  clear_has_valentinedata_req();
  ::fgame::CSValentineDataReq* temp = valentinedata_req_;
  valentinedata_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_valentinedata_req(::fgame::CSValentineDataReq* valentinedata_req) {
  delete valentinedata_req_;
  valentinedata_req_ = valentinedata_req;
  if (valentinedata_req) {
    set_has_valentinedata_req();
  } else {
    clear_has_valentinedata_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ValentineData_Req)
}

// optional .fgame.CSValentineExchangeReq ValentineExchange_Req = 144;
inline bool C2ServerMsg::has_valentineexchange_req() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void C2ServerMsg::set_has_valentineexchange_req() {
  _has_bits_[3] |= 0x00400000u;
}
inline void C2ServerMsg::clear_has_valentineexchange_req() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void C2ServerMsg::clear_valentineexchange_req() {
  if (valentineexchange_req_ != NULL) valentineexchange_req_->::fgame::CSValentineExchangeReq::Clear();
  clear_has_valentineexchange_req();
}
inline const ::fgame::CSValentineExchangeReq& C2ServerMsg::valentineexchange_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ValentineExchange_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return valentineexchange_req_ != NULL ? *valentineexchange_req_ : *default_instance().valentineexchange_req_;
#else
  return valentineexchange_req_ != NULL ? *valentineexchange_req_ : *default_instance_->valentineexchange_req_;
#endif
}
inline ::fgame::CSValentineExchangeReq* C2ServerMsg::mutable_valentineexchange_req() {
  set_has_valentineexchange_req();
  if (valentineexchange_req_ == NULL) valentineexchange_req_ = new ::fgame::CSValentineExchangeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ValentineExchange_Req)
  return valentineexchange_req_;
}
inline ::fgame::CSValentineExchangeReq* C2ServerMsg::release_valentineexchange_req() {
  clear_has_valentineexchange_req();
  ::fgame::CSValentineExchangeReq* temp = valentineexchange_req_;
  valentineexchange_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_valentineexchange_req(::fgame::CSValentineExchangeReq* valentineexchange_req) {
  delete valentineexchange_req_;
  valentineexchange_req_ = valentineexchange_req;
  if (valentineexchange_req) {
    set_has_valentineexchange_req();
  } else {
    clear_has_valentineexchange_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ValentineExchange_Req)
}

// optional .fgame.CSRedPacketsGetInfoReq RedPacketsGetInfo_Req = 145;
inline bool C2ServerMsg::has_redpacketsgetinfo_req() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void C2ServerMsg::set_has_redpacketsgetinfo_req() {
  _has_bits_[3] |= 0x00800000u;
}
inline void C2ServerMsg::clear_has_redpacketsgetinfo_req() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void C2ServerMsg::clear_redpacketsgetinfo_req() {
  if (redpacketsgetinfo_req_ != NULL) redpacketsgetinfo_req_->::fgame::CSRedPacketsGetInfoReq::Clear();
  clear_has_redpacketsgetinfo_req();
}
inline const ::fgame::CSRedPacketsGetInfoReq& C2ServerMsg::redpacketsgetinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RedPacketsGetInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsgetinfo_req_ != NULL ? *redpacketsgetinfo_req_ : *default_instance().redpacketsgetinfo_req_;
#else
  return redpacketsgetinfo_req_ != NULL ? *redpacketsgetinfo_req_ : *default_instance_->redpacketsgetinfo_req_;
#endif
}
inline ::fgame::CSRedPacketsGetInfoReq* C2ServerMsg::mutable_redpacketsgetinfo_req() {
  set_has_redpacketsgetinfo_req();
  if (redpacketsgetinfo_req_ == NULL) redpacketsgetinfo_req_ = new ::fgame::CSRedPacketsGetInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RedPacketsGetInfo_Req)
  return redpacketsgetinfo_req_;
}
inline ::fgame::CSRedPacketsGetInfoReq* C2ServerMsg::release_redpacketsgetinfo_req() {
  clear_has_redpacketsgetinfo_req();
  ::fgame::CSRedPacketsGetInfoReq* temp = redpacketsgetinfo_req_;
  redpacketsgetinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_redpacketsgetinfo_req(::fgame::CSRedPacketsGetInfoReq* redpacketsgetinfo_req) {
  delete redpacketsgetinfo_req_;
  redpacketsgetinfo_req_ = redpacketsgetinfo_req;
  if (redpacketsgetinfo_req) {
    set_has_redpacketsgetinfo_req();
  } else {
    clear_has_redpacketsgetinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RedPacketsGetInfo_Req)
}

// optional .fgame.CSRedPacketsGrebReq RedPacketsGreb_Req = 146;
inline bool C2ServerMsg::has_redpacketsgreb_req() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void C2ServerMsg::set_has_redpacketsgreb_req() {
  _has_bits_[3] |= 0x01000000u;
}
inline void C2ServerMsg::clear_has_redpacketsgreb_req() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void C2ServerMsg::clear_redpacketsgreb_req() {
  if (redpacketsgreb_req_ != NULL) redpacketsgreb_req_->::fgame::CSRedPacketsGrebReq::Clear();
  clear_has_redpacketsgreb_req();
}
inline const ::fgame::CSRedPacketsGrebReq& C2ServerMsg::redpacketsgreb_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RedPacketsGreb_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsgreb_req_ != NULL ? *redpacketsgreb_req_ : *default_instance().redpacketsgreb_req_;
#else
  return redpacketsgreb_req_ != NULL ? *redpacketsgreb_req_ : *default_instance_->redpacketsgreb_req_;
#endif
}
inline ::fgame::CSRedPacketsGrebReq* C2ServerMsg::mutable_redpacketsgreb_req() {
  set_has_redpacketsgreb_req();
  if (redpacketsgreb_req_ == NULL) redpacketsgreb_req_ = new ::fgame::CSRedPacketsGrebReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RedPacketsGreb_Req)
  return redpacketsgreb_req_;
}
inline ::fgame::CSRedPacketsGrebReq* C2ServerMsg::release_redpacketsgreb_req() {
  clear_has_redpacketsgreb_req();
  ::fgame::CSRedPacketsGrebReq* temp = redpacketsgreb_req_;
  redpacketsgreb_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_redpacketsgreb_req(::fgame::CSRedPacketsGrebReq* redpacketsgreb_req) {
  delete redpacketsgreb_req_;
  redpacketsgreb_req_ = redpacketsgreb_req;
  if (redpacketsgreb_req) {
    set_has_redpacketsgreb_req();
  } else {
    clear_has_redpacketsgreb_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RedPacketsGreb_Req)
}

// optional .fgame.CSRedPacketsOpenedReq RedPacketsOpened_Req = 147;
inline bool C2ServerMsg::has_redpacketsopened_req() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void C2ServerMsg::set_has_redpacketsopened_req() {
  _has_bits_[3] |= 0x02000000u;
}
inline void C2ServerMsg::clear_has_redpacketsopened_req() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void C2ServerMsg::clear_redpacketsopened_req() {
  if (redpacketsopened_req_ != NULL) redpacketsopened_req_->::fgame::CSRedPacketsOpenedReq::Clear();
  clear_has_redpacketsopened_req();
}
inline const ::fgame::CSRedPacketsOpenedReq& C2ServerMsg::redpacketsopened_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RedPacketsOpened_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsopened_req_ != NULL ? *redpacketsopened_req_ : *default_instance().redpacketsopened_req_;
#else
  return redpacketsopened_req_ != NULL ? *redpacketsopened_req_ : *default_instance_->redpacketsopened_req_;
#endif
}
inline ::fgame::CSRedPacketsOpenedReq* C2ServerMsg::mutable_redpacketsopened_req() {
  set_has_redpacketsopened_req();
  if (redpacketsopened_req_ == NULL) redpacketsopened_req_ = new ::fgame::CSRedPacketsOpenedReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RedPacketsOpened_Req)
  return redpacketsopened_req_;
}
inline ::fgame::CSRedPacketsOpenedReq* C2ServerMsg::release_redpacketsopened_req() {
  clear_has_redpacketsopened_req();
  ::fgame::CSRedPacketsOpenedReq* temp = redpacketsopened_req_;
  redpacketsopened_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_redpacketsopened_req(::fgame::CSRedPacketsOpenedReq* redpacketsopened_req) {
  delete redpacketsopened_req_;
  redpacketsopened_req_ = redpacketsopened_req;
  if (redpacketsopened_req) {
    set_has_redpacketsopened_req();
  } else {
    clear_has_redpacketsopened_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RedPacketsOpened_Req)
}

// optional .fgame.CSChapterUnlockReq ChapterUnlock_Req = 148;
inline bool C2ServerMsg::has_chapterunlock_req() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void C2ServerMsg::set_has_chapterunlock_req() {
  _has_bits_[3] |= 0x04000000u;
}
inline void C2ServerMsg::clear_has_chapterunlock_req() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void C2ServerMsg::clear_chapterunlock_req() {
  if (chapterunlock_req_ != NULL) chapterunlock_req_->::fgame::CSChapterUnlockReq::Clear();
  clear_has_chapterunlock_req();
}
inline const ::fgame::CSChapterUnlockReq& C2ServerMsg::chapterunlock_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChapterUnlock_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chapterunlock_req_ != NULL ? *chapterunlock_req_ : *default_instance().chapterunlock_req_;
#else
  return chapterunlock_req_ != NULL ? *chapterunlock_req_ : *default_instance_->chapterunlock_req_;
#endif
}
inline ::fgame::CSChapterUnlockReq* C2ServerMsg::mutable_chapterunlock_req() {
  set_has_chapterunlock_req();
  if (chapterunlock_req_ == NULL) chapterunlock_req_ = new ::fgame::CSChapterUnlockReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChapterUnlock_Req)
  return chapterunlock_req_;
}
inline ::fgame::CSChapterUnlockReq* C2ServerMsg::release_chapterunlock_req() {
  clear_has_chapterunlock_req();
  ::fgame::CSChapterUnlockReq* temp = chapterunlock_req_;
  chapterunlock_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_chapterunlock_req(::fgame::CSChapterUnlockReq* chapterunlock_req) {
  delete chapterunlock_req_;
  chapterunlock_req_ = chapterunlock_req;
  if (chapterunlock_req) {
    set_has_chapterunlock_req();
  } else {
    clear_has_chapterunlock_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChapterUnlock_Req)
}

// optional .fgame.CSGetChestReq GetChest_Req = 149;
inline bool C2ServerMsg::has_getchest_req() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void C2ServerMsg::set_has_getchest_req() {
  _has_bits_[3] |= 0x08000000u;
}
inline void C2ServerMsg::clear_has_getchest_req() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void C2ServerMsg::clear_getchest_req() {
  if (getchest_req_ != NULL) getchest_req_->::fgame::CSGetChestReq::Clear();
  clear_has_getchest_req();
}
inline const ::fgame::CSGetChestReq& C2ServerMsg::getchest_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetChest_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getchest_req_ != NULL ? *getchest_req_ : *default_instance().getchest_req_;
#else
  return getchest_req_ != NULL ? *getchest_req_ : *default_instance_->getchest_req_;
#endif
}
inline ::fgame::CSGetChestReq* C2ServerMsg::mutable_getchest_req() {
  set_has_getchest_req();
  if (getchest_req_ == NULL) getchest_req_ = new ::fgame::CSGetChestReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetChest_Req)
  return getchest_req_;
}
inline ::fgame::CSGetChestReq* C2ServerMsg::release_getchest_req() {
  clear_has_getchest_req();
  ::fgame::CSGetChestReq* temp = getchest_req_;
  getchest_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getchest_req(::fgame::CSGetChestReq* getchest_req) {
  delete getchest_req_;
  getchest_req_ = getchest_req;
  if (getchest_req) {
    set_has_getchest_req();
  } else {
    clear_has_getchest_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetChest_Req)
}

// optional .fgame.CSPveNotifyReq PveNotify_Req = 150;
inline bool C2ServerMsg::has_pvenotify_req() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void C2ServerMsg::set_has_pvenotify_req() {
  _has_bits_[3] |= 0x10000000u;
}
inline void C2ServerMsg::clear_has_pvenotify_req() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void C2ServerMsg::clear_pvenotify_req() {
  if (pvenotify_req_ != NULL) pvenotify_req_->::fgame::CSPveNotifyReq::Clear();
  clear_has_pvenotify_req();
}
inline const ::fgame::CSPveNotifyReq& C2ServerMsg::pvenotify_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PveNotify_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvenotify_req_ != NULL ? *pvenotify_req_ : *default_instance().pvenotify_req_;
#else
  return pvenotify_req_ != NULL ? *pvenotify_req_ : *default_instance_->pvenotify_req_;
#endif
}
inline ::fgame::CSPveNotifyReq* C2ServerMsg::mutable_pvenotify_req() {
  set_has_pvenotify_req();
  if (pvenotify_req_ == NULL) pvenotify_req_ = new ::fgame::CSPveNotifyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PveNotify_Req)
  return pvenotify_req_;
}
inline ::fgame::CSPveNotifyReq* C2ServerMsg::release_pvenotify_req() {
  clear_has_pvenotify_req();
  ::fgame::CSPveNotifyReq* temp = pvenotify_req_;
  pvenotify_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvenotify_req(::fgame::CSPveNotifyReq* pvenotify_req) {
  delete pvenotify_req_;
  pvenotify_req_ = pvenotify_req;
  if (pvenotify_req) {
    set_has_pvenotify_req();
  } else {
    clear_has_pvenotify_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PveNotify_Req)
}

// optional .fgame.CSDailyTaskStatusReq DailyTaskStatus_Req = 152;
inline bool C2ServerMsg::has_dailytaskstatus_req() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void C2ServerMsg::set_has_dailytaskstatus_req() {
  _has_bits_[3] |= 0x20000000u;
}
inline void C2ServerMsg::clear_has_dailytaskstatus_req() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void C2ServerMsg::clear_dailytaskstatus_req() {
  if (dailytaskstatus_req_ != NULL) dailytaskstatus_req_->::fgame::CSDailyTaskStatusReq::Clear();
  clear_has_dailytaskstatus_req();
}
inline const ::fgame::CSDailyTaskStatusReq& C2ServerMsg::dailytaskstatus_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.DailyTaskStatus_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dailytaskstatus_req_ != NULL ? *dailytaskstatus_req_ : *default_instance().dailytaskstatus_req_;
#else
  return dailytaskstatus_req_ != NULL ? *dailytaskstatus_req_ : *default_instance_->dailytaskstatus_req_;
#endif
}
inline ::fgame::CSDailyTaskStatusReq* C2ServerMsg::mutable_dailytaskstatus_req() {
  set_has_dailytaskstatus_req();
  if (dailytaskstatus_req_ == NULL) dailytaskstatus_req_ = new ::fgame::CSDailyTaskStatusReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.DailyTaskStatus_Req)
  return dailytaskstatus_req_;
}
inline ::fgame::CSDailyTaskStatusReq* C2ServerMsg::release_dailytaskstatus_req() {
  clear_has_dailytaskstatus_req();
  ::fgame::CSDailyTaskStatusReq* temp = dailytaskstatus_req_;
  dailytaskstatus_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_dailytaskstatus_req(::fgame::CSDailyTaskStatusReq* dailytaskstatus_req) {
  delete dailytaskstatus_req_;
  dailytaskstatus_req_ = dailytaskstatus_req;
  if (dailytaskstatus_req) {
    set_has_dailytaskstatus_req();
  } else {
    clear_has_dailytaskstatus_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.DailyTaskStatus_Req)
}

// optional .fgame.CSRequestDailyTaskReq RequestDailyTask_Req = 153;
inline bool C2ServerMsg::has_requestdailytask_req() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void C2ServerMsg::set_has_requestdailytask_req() {
  _has_bits_[3] |= 0x40000000u;
}
inline void C2ServerMsg::clear_has_requestdailytask_req() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void C2ServerMsg::clear_requestdailytask_req() {
  if (requestdailytask_req_ != NULL) requestdailytask_req_->::fgame::CSRequestDailyTaskReq::Clear();
  clear_has_requestdailytask_req();
}
inline const ::fgame::CSRequestDailyTaskReq& C2ServerMsg::requestdailytask_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RequestDailyTask_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return requestdailytask_req_ != NULL ? *requestdailytask_req_ : *default_instance().requestdailytask_req_;
#else
  return requestdailytask_req_ != NULL ? *requestdailytask_req_ : *default_instance_->requestdailytask_req_;
#endif
}
inline ::fgame::CSRequestDailyTaskReq* C2ServerMsg::mutable_requestdailytask_req() {
  set_has_requestdailytask_req();
  if (requestdailytask_req_ == NULL) requestdailytask_req_ = new ::fgame::CSRequestDailyTaskReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RequestDailyTask_Req)
  return requestdailytask_req_;
}
inline ::fgame::CSRequestDailyTaskReq* C2ServerMsg::release_requestdailytask_req() {
  clear_has_requestdailytask_req();
  ::fgame::CSRequestDailyTaskReq* temp = requestdailytask_req_;
  requestdailytask_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_requestdailytask_req(::fgame::CSRequestDailyTaskReq* requestdailytask_req) {
  delete requestdailytask_req_;
  requestdailytask_req_ = requestdailytask_req;
  if (requestdailytask_req) {
    set_has_requestdailytask_req();
  } else {
    clear_has_requestdailytask_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RequestDailyTask_Req)
}

// optional .fgame.CSChangeDailyTaskReq ChangeDailyTask_Req = 154;
inline bool C2ServerMsg::has_changedailytask_req() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void C2ServerMsg::set_has_changedailytask_req() {
  _has_bits_[3] |= 0x80000000u;
}
inline void C2ServerMsg::clear_has_changedailytask_req() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void C2ServerMsg::clear_changedailytask_req() {
  if (changedailytask_req_ != NULL) changedailytask_req_->::fgame::CSChangeDailyTaskReq::Clear();
  clear_has_changedailytask_req();
}
inline const ::fgame::CSChangeDailyTaskReq& C2ServerMsg::changedailytask_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ChangeDailyTask_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changedailytask_req_ != NULL ? *changedailytask_req_ : *default_instance().changedailytask_req_;
#else
  return changedailytask_req_ != NULL ? *changedailytask_req_ : *default_instance_->changedailytask_req_;
#endif
}
inline ::fgame::CSChangeDailyTaskReq* C2ServerMsg::mutable_changedailytask_req() {
  set_has_changedailytask_req();
  if (changedailytask_req_ == NULL) changedailytask_req_ = new ::fgame::CSChangeDailyTaskReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ChangeDailyTask_Req)
  return changedailytask_req_;
}
inline ::fgame::CSChangeDailyTaskReq* C2ServerMsg::release_changedailytask_req() {
  clear_has_changedailytask_req();
  ::fgame::CSChangeDailyTaskReq* temp = changedailytask_req_;
  changedailytask_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_changedailytask_req(::fgame::CSChangeDailyTaskReq* changedailytask_req) {
  delete changedailytask_req_;
  changedailytask_req_ = changedailytask_req;
  if (changedailytask_req) {
    set_has_changedailytask_req();
  } else {
    clear_has_changedailytask_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ChangeDailyTask_Req)
}

// optional .fgame.CSOpenDailyTaskAwardReq OpenDailyTaskAward_Req = 155;
inline bool C2ServerMsg::has_opendailytaskaward_req() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void C2ServerMsg::set_has_opendailytaskaward_req() {
  _has_bits_[4] |= 0x00000001u;
}
inline void C2ServerMsg::clear_has_opendailytaskaward_req() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void C2ServerMsg::clear_opendailytaskaward_req() {
  if (opendailytaskaward_req_ != NULL) opendailytaskaward_req_->::fgame::CSOpenDailyTaskAwardReq::Clear();
  clear_has_opendailytaskaward_req();
}
inline const ::fgame::CSOpenDailyTaskAwardReq& C2ServerMsg::opendailytaskaward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpenDailyTaskAward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opendailytaskaward_req_ != NULL ? *opendailytaskaward_req_ : *default_instance().opendailytaskaward_req_;
#else
  return opendailytaskaward_req_ != NULL ? *opendailytaskaward_req_ : *default_instance_->opendailytaskaward_req_;
#endif
}
inline ::fgame::CSOpenDailyTaskAwardReq* C2ServerMsg::mutable_opendailytaskaward_req() {
  set_has_opendailytaskaward_req();
  if (opendailytaskaward_req_ == NULL) opendailytaskaward_req_ = new ::fgame::CSOpenDailyTaskAwardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpenDailyTaskAward_Req)
  return opendailytaskaward_req_;
}
inline ::fgame::CSOpenDailyTaskAwardReq* C2ServerMsg::release_opendailytaskaward_req() {
  clear_has_opendailytaskaward_req();
  ::fgame::CSOpenDailyTaskAwardReq* temp = opendailytaskaward_req_;
  opendailytaskaward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_opendailytaskaward_req(::fgame::CSOpenDailyTaskAwardReq* opendailytaskaward_req) {
  delete opendailytaskaward_req_;
  opendailytaskaward_req_ = opendailytaskaward_req;
  if (opendailytaskaward_req) {
    set_has_opendailytaskaward_req();
  } else {
    clear_has_opendailytaskaward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpenDailyTaskAward_Req)
}

// optional .fgame.CSUpdateDailyTaskProgressReq UpdateDailyTaskProgress_Req = 156;
inline bool C2ServerMsg::has_updatedailytaskprogress_req() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void C2ServerMsg::set_has_updatedailytaskprogress_req() {
  _has_bits_[4] |= 0x00000002u;
}
inline void C2ServerMsg::clear_has_updatedailytaskprogress_req() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void C2ServerMsg::clear_updatedailytaskprogress_req() {
  if (updatedailytaskprogress_req_ != NULL) updatedailytaskprogress_req_->::fgame::CSUpdateDailyTaskProgressReq::Clear();
  clear_has_updatedailytaskprogress_req();
}
inline const ::fgame::CSUpdateDailyTaskProgressReq& C2ServerMsg::updatedailytaskprogress_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.UpdateDailyTaskProgress_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updatedailytaskprogress_req_ != NULL ? *updatedailytaskprogress_req_ : *default_instance().updatedailytaskprogress_req_;
#else
  return updatedailytaskprogress_req_ != NULL ? *updatedailytaskprogress_req_ : *default_instance_->updatedailytaskprogress_req_;
#endif
}
inline ::fgame::CSUpdateDailyTaskProgressReq* C2ServerMsg::mutable_updatedailytaskprogress_req() {
  set_has_updatedailytaskprogress_req();
  if (updatedailytaskprogress_req_ == NULL) updatedailytaskprogress_req_ = new ::fgame::CSUpdateDailyTaskProgressReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.UpdateDailyTaskProgress_Req)
  return updatedailytaskprogress_req_;
}
inline ::fgame::CSUpdateDailyTaskProgressReq* C2ServerMsg::release_updatedailytaskprogress_req() {
  clear_has_updatedailytaskprogress_req();
  ::fgame::CSUpdateDailyTaskProgressReq* temp = updatedailytaskprogress_req_;
  updatedailytaskprogress_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_updatedailytaskprogress_req(::fgame::CSUpdateDailyTaskProgressReq* updatedailytaskprogress_req) {
  delete updatedailytaskprogress_req_;
  updatedailytaskprogress_req_ = updatedailytaskprogress_req;
  if (updatedailytaskprogress_req) {
    set_has_updatedailytaskprogress_req();
  } else {
    clear_has_updatedailytaskprogress_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.UpdateDailyTaskProgress_Req)
}

// optional .fgame.CSRankWeekRewardInfoReq RankWeekRewardInfo_Req = 157;
inline bool C2ServerMsg::has_rankweekrewardinfo_req() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void C2ServerMsg::set_has_rankweekrewardinfo_req() {
  _has_bits_[4] |= 0x00000004u;
}
inline void C2ServerMsg::clear_has_rankweekrewardinfo_req() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void C2ServerMsg::clear_rankweekrewardinfo_req() {
  if (rankweekrewardinfo_req_ != NULL) rankweekrewardinfo_req_->::fgame::CSRankWeekRewardInfoReq::Clear();
  clear_has_rankweekrewardinfo_req();
}
inline const ::fgame::CSRankWeekRewardInfoReq& C2ServerMsg::rankweekrewardinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RankWeekRewardInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankweekrewardinfo_req_ != NULL ? *rankweekrewardinfo_req_ : *default_instance().rankweekrewardinfo_req_;
#else
  return rankweekrewardinfo_req_ != NULL ? *rankweekrewardinfo_req_ : *default_instance_->rankweekrewardinfo_req_;
#endif
}
inline ::fgame::CSRankWeekRewardInfoReq* C2ServerMsg::mutable_rankweekrewardinfo_req() {
  set_has_rankweekrewardinfo_req();
  if (rankweekrewardinfo_req_ == NULL) rankweekrewardinfo_req_ = new ::fgame::CSRankWeekRewardInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RankWeekRewardInfo_Req)
  return rankweekrewardinfo_req_;
}
inline ::fgame::CSRankWeekRewardInfoReq* C2ServerMsg::release_rankweekrewardinfo_req() {
  clear_has_rankweekrewardinfo_req();
  ::fgame::CSRankWeekRewardInfoReq* temp = rankweekrewardinfo_req_;
  rankweekrewardinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_rankweekrewardinfo_req(::fgame::CSRankWeekRewardInfoReq* rankweekrewardinfo_req) {
  delete rankweekrewardinfo_req_;
  rankweekrewardinfo_req_ = rankweekrewardinfo_req;
  if (rankweekrewardinfo_req) {
    set_has_rankweekrewardinfo_req();
  } else {
    clear_has_rankweekrewardinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RankWeekRewardInfo_Req)
}

// optional .fgame.CSRankWeekRewardRewardReq RankWeekRewardReward_Req = 158;
inline bool C2ServerMsg::has_rankweekrewardreward_req() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline void C2ServerMsg::set_has_rankweekrewardreward_req() {
  _has_bits_[4] |= 0x00000008u;
}
inline void C2ServerMsg::clear_has_rankweekrewardreward_req() {
  _has_bits_[4] &= ~0x00000008u;
}
inline void C2ServerMsg::clear_rankweekrewardreward_req() {
  if (rankweekrewardreward_req_ != NULL) rankweekrewardreward_req_->::fgame::CSRankWeekRewardRewardReq::Clear();
  clear_has_rankweekrewardreward_req();
}
inline const ::fgame::CSRankWeekRewardRewardReq& C2ServerMsg::rankweekrewardreward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RankWeekRewardReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankweekrewardreward_req_ != NULL ? *rankweekrewardreward_req_ : *default_instance().rankweekrewardreward_req_;
#else
  return rankweekrewardreward_req_ != NULL ? *rankweekrewardreward_req_ : *default_instance_->rankweekrewardreward_req_;
#endif
}
inline ::fgame::CSRankWeekRewardRewardReq* C2ServerMsg::mutable_rankweekrewardreward_req() {
  set_has_rankweekrewardreward_req();
  if (rankweekrewardreward_req_ == NULL) rankweekrewardreward_req_ = new ::fgame::CSRankWeekRewardRewardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RankWeekRewardReward_Req)
  return rankweekrewardreward_req_;
}
inline ::fgame::CSRankWeekRewardRewardReq* C2ServerMsg::release_rankweekrewardreward_req() {
  clear_has_rankweekrewardreward_req();
  ::fgame::CSRankWeekRewardRewardReq* temp = rankweekrewardreward_req_;
  rankweekrewardreward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_rankweekrewardreward_req(::fgame::CSRankWeekRewardRewardReq* rankweekrewardreward_req) {
  delete rankweekrewardreward_req_;
  rankweekrewardreward_req_ = rankweekrewardreward_req;
  if (rankweekrewardreward_req) {
    set_has_rankweekrewardreward_req();
  } else {
    clear_has_rankweekrewardreward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RankWeekRewardReward_Req)
}

// optional .fgame.CSPveCheckAwardReq PveCheckAward_Req = 159;
inline bool C2ServerMsg::has_pvecheckaward_req() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void C2ServerMsg::set_has_pvecheckaward_req() {
  _has_bits_[4] |= 0x00000010u;
}
inline void C2ServerMsg::clear_has_pvecheckaward_req() {
  _has_bits_[4] &= ~0x00000010u;
}
inline void C2ServerMsg::clear_pvecheckaward_req() {
  if (pvecheckaward_req_ != NULL) pvecheckaward_req_->::fgame::CSPveCheckAwardReq::Clear();
  clear_has_pvecheckaward_req();
}
inline const ::fgame::CSPveCheckAwardReq& C2ServerMsg::pvecheckaward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PveCheckAward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvecheckaward_req_ != NULL ? *pvecheckaward_req_ : *default_instance().pvecheckaward_req_;
#else
  return pvecheckaward_req_ != NULL ? *pvecheckaward_req_ : *default_instance_->pvecheckaward_req_;
#endif
}
inline ::fgame::CSPveCheckAwardReq* C2ServerMsg::mutable_pvecheckaward_req() {
  set_has_pvecheckaward_req();
  if (pvecheckaward_req_ == NULL) pvecheckaward_req_ = new ::fgame::CSPveCheckAwardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PveCheckAward_Req)
  return pvecheckaward_req_;
}
inline ::fgame::CSPveCheckAwardReq* C2ServerMsg::release_pvecheckaward_req() {
  clear_has_pvecheckaward_req();
  ::fgame::CSPveCheckAwardReq* temp = pvecheckaward_req_;
  pvecheckaward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvecheckaward_req(::fgame::CSPveCheckAwardReq* pvecheckaward_req) {
  delete pvecheckaward_req_;
  pvecheckaward_req_ = pvecheckaward_req;
  if (pvecheckaward_req) {
    set_has_pvecheckaward_req();
  } else {
    clear_has_pvecheckaward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PveCheckAward_Req)
}

// optional .fgame.CSShareRewardGetReq ShareReward_Req = 162;
inline bool C2ServerMsg::has_sharereward_req() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void C2ServerMsg::set_has_sharereward_req() {
  _has_bits_[4] |= 0x00000020u;
}
inline void C2ServerMsg::clear_has_sharereward_req() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void C2ServerMsg::clear_sharereward_req() {
  if (sharereward_req_ != NULL) sharereward_req_->::fgame::CSShareRewardGetReq::Clear();
  clear_has_sharereward_req();
}
inline const ::fgame::CSShareRewardGetReq& C2ServerMsg::sharereward_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.ShareReward_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sharereward_req_ != NULL ? *sharereward_req_ : *default_instance().sharereward_req_;
#else
  return sharereward_req_ != NULL ? *sharereward_req_ : *default_instance_->sharereward_req_;
#endif
}
inline ::fgame::CSShareRewardGetReq* C2ServerMsg::mutable_sharereward_req() {
  set_has_sharereward_req();
  if (sharereward_req_ == NULL) sharereward_req_ = new ::fgame::CSShareRewardGetReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.ShareReward_Req)
  return sharereward_req_;
}
inline ::fgame::CSShareRewardGetReq* C2ServerMsg::release_sharereward_req() {
  clear_has_sharereward_req();
  ::fgame::CSShareRewardGetReq* temp = sharereward_req_;
  sharereward_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_sharereward_req(::fgame::CSShareRewardGetReq* sharereward_req) {
  delete sharereward_req_;
  sharereward_req_ = sharereward_req;
  if (sharereward_req) {
    set_has_sharereward_req();
  } else {
    clear_has_sharereward_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.ShareReward_Req)
}

// optional .fgame.CSGetSevenGoalListReq GetSevenGoalList_Req = 163;
inline bool C2ServerMsg::has_getsevengoallist_req() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void C2ServerMsg::set_has_getsevengoallist_req() {
  _has_bits_[4] |= 0x00000040u;
}
inline void C2ServerMsg::clear_has_getsevengoallist_req() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void C2ServerMsg::clear_getsevengoallist_req() {
  if (getsevengoallist_req_ != NULL) getsevengoallist_req_->::fgame::CSGetSevenGoalListReq::Clear();
  clear_has_getsevengoallist_req();
}
inline const ::fgame::CSGetSevenGoalListReq& C2ServerMsg::getsevengoallist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.GetSevenGoalList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getsevengoallist_req_ != NULL ? *getsevengoallist_req_ : *default_instance().getsevengoallist_req_;
#else
  return getsevengoallist_req_ != NULL ? *getsevengoallist_req_ : *default_instance_->getsevengoallist_req_;
#endif
}
inline ::fgame::CSGetSevenGoalListReq* C2ServerMsg::mutable_getsevengoallist_req() {
  set_has_getsevengoallist_req();
  if (getsevengoallist_req_ == NULL) getsevengoallist_req_ = new ::fgame::CSGetSevenGoalListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.GetSevenGoalList_Req)
  return getsevengoallist_req_;
}
inline ::fgame::CSGetSevenGoalListReq* C2ServerMsg::release_getsevengoallist_req() {
  clear_has_getsevengoallist_req();
  ::fgame::CSGetSevenGoalListReq* temp = getsevengoallist_req_;
  getsevengoallist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_getsevengoallist_req(::fgame::CSGetSevenGoalListReq* getsevengoallist_req) {
  delete getsevengoallist_req_;
  getsevengoallist_req_ = getsevengoallist_req;
  if (getsevengoallist_req) {
    set_has_getsevengoallist_req();
  } else {
    clear_has_getsevengoallist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.GetSevenGoalList_Req)
}

// optional .fgame.CSRetriveSevenGoalReq RetriveSevenGoal_Req = 164;
inline bool C2ServerMsg::has_retrivesevengoal_req() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void C2ServerMsg::set_has_retrivesevengoal_req() {
  _has_bits_[4] |= 0x00000080u;
}
inline void C2ServerMsg::clear_has_retrivesevengoal_req() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void C2ServerMsg::clear_retrivesevengoal_req() {
  if (retrivesevengoal_req_ != NULL) retrivesevengoal_req_->::fgame::CSRetriveSevenGoalReq::Clear();
  clear_has_retrivesevengoal_req();
}
inline const ::fgame::CSRetriveSevenGoalReq& C2ServerMsg::retrivesevengoal_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.RetriveSevenGoal_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return retrivesevengoal_req_ != NULL ? *retrivesevengoal_req_ : *default_instance().retrivesevengoal_req_;
#else
  return retrivesevengoal_req_ != NULL ? *retrivesevengoal_req_ : *default_instance_->retrivesevengoal_req_;
#endif
}
inline ::fgame::CSRetriveSevenGoalReq* C2ServerMsg::mutable_retrivesevengoal_req() {
  set_has_retrivesevengoal_req();
  if (retrivesevengoal_req_ == NULL) retrivesevengoal_req_ = new ::fgame::CSRetriveSevenGoalReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.RetriveSevenGoal_Req)
  return retrivesevengoal_req_;
}
inline ::fgame::CSRetriveSevenGoalReq* C2ServerMsg::release_retrivesevengoal_req() {
  clear_has_retrivesevengoal_req();
  ::fgame::CSRetriveSevenGoalReq* temp = retrivesevengoal_req_;
  retrivesevengoal_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_retrivesevengoal_req(::fgame::CSRetriveSevenGoalReq* retrivesevengoal_req) {
  delete retrivesevengoal_req_;
  retrivesevengoal_req_ = retrivesevengoal_req;
  if (retrivesevengoal_req) {
    set_has_retrivesevengoal_req();
  } else {
    clear_has_retrivesevengoal_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.RetriveSevenGoal_Req)
}

// optional .fgame.CSPveRankReq PveRank_Req = 166;
inline bool C2ServerMsg::has_pverank_req() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void C2ServerMsg::set_has_pverank_req() {
  _has_bits_[4] |= 0x00000100u;
}
inline void C2ServerMsg::clear_has_pverank_req() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void C2ServerMsg::clear_pverank_req() {
  if (pverank_req_ != NULL) pverank_req_->::fgame::CSPveRankReq::Clear();
  clear_has_pverank_req();
}
inline const ::fgame::CSPveRankReq& C2ServerMsg::pverank_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PveRank_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pverank_req_ != NULL ? *pverank_req_ : *default_instance().pverank_req_;
#else
  return pverank_req_ != NULL ? *pverank_req_ : *default_instance_->pverank_req_;
#endif
}
inline ::fgame::CSPveRankReq* C2ServerMsg::mutable_pverank_req() {
  set_has_pverank_req();
  if (pverank_req_ == NULL) pverank_req_ = new ::fgame::CSPveRankReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PveRank_Req)
  return pverank_req_;
}
inline ::fgame::CSPveRankReq* C2ServerMsg::release_pverank_req() {
  clear_has_pverank_req();
  ::fgame::CSPveRankReq* temp = pverank_req_;
  pverank_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pverank_req(::fgame::CSPveRankReq* pverank_req) {
  delete pverank_req_;
  pverank_req_ = pverank_req;
  if (pverank_req) {
    set_has_pverank_req();
  } else {
    clear_has_pverank_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PveRank_Req)
}

// optional .fgame.CSTopRankReq TopRank_Req = 167;
inline bool C2ServerMsg::has_toprank_req() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void C2ServerMsg::set_has_toprank_req() {
  _has_bits_[4] |= 0x00000200u;
}
inline void C2ServerMsg::clear_has_toprank_req() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void C2ServerMsg::clear_toprank_req() {
  if (toprank_req_ != NULL) toprank_req_->::fgame::CSTopRankReq::Clear();
  clear_has_toprank_req();
}
inline const ::fgame::CSTopRankReq& C2ServerMsg::toprank_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.TopRank_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return toprank_req_ != NULL ? *toprank_req_ : *default_instance().toprank_req_;
#else
  return toprank_req_ != NULL ? *toprank_req_ : *default_instance_->toprank_req_;
#endif
}
inline ::fgame::CSTopRankReq* C2ServerMsg::mutable_toprank_req() {
  set_has_toprank_req();
  if (toprank_req_ == NULL) toprank_req_ = new ::fgame::CSTopRankReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.TopRank_Req)
  return toprank_req_;
}
inline ::fgame::CSTopRankReq* C2ServerMsg::release_toprank_req() {
  clear_has_toprank_req();
  ::fgame::CSTopRankReq* temp = toprank_req_;
  toprank_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_toprank_req(::fgame::CSTopRankReq* toprank_req) {
  delete toprank_req_;
  toprank_req_ = toprank_req;
  if (toprank_req) {
    set_has_toprank_req();
  } else {
    clear_has_toprank_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.TopRank_Req)
}

// optional .fgame.CSTopRankTimeReq TopRankTime_Req = 168;
inline bool C2ServerMsg::has_topranktime_req() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void C2ServerMsg::set_has_topranktime_req() {
  _has_bits_[4] |= 0x00000400u;
}
inline void C2ServerMsg::clear_has_topranktime_req() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void C2ServerMsg::clear_topranktime_req() {
  if (topranktime_req_ != NULL) topranktime_req_->::fgame::CSTopRankTimeReq::Clear();
  clear_has_topranktime_req();
}
inline const ::fgame::CSTopRankTimeReq& C2ServerMsg::topranktime_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.TopRankTime_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return topranktime_req_ != NULL ? *topranktime_req_ : *default_instance().topranktime_req_;
#else
  return topranktime_req_ != NULL ? *topranktime_req_ : *default_instance_->topranktime_req_;
#endif
}
inline ::fgame::CSTopRankTimeReq* C2ServerMsg::mutable_topranktime_req() {
  set_has_topranktime_req();
  if (topranktime_req_ == NULL) topranktime_req_ = new ::fgame::CSTopRankTimeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.TopRankTime_Req)
  return topranktime_req_;
}
inline ::fgame::CSTopRankTimeReq* C2ServerMsg::release_topranktime_req() {
  clear_has_topranktime_req();
  ::fgame::CSTopRankTimeReq* temp = topranktime_req_;
  topranktime_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_topranktime_req(::fgame::CSTopRankTimeReq* topranktime_req) {
  delete topranktime_req_;
  topranktime_req_ = topranktime_req;
  if (topranktime_req) {
    set_has_topranktime_req();
  } else {
    clear_has_topranktime_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.TopRankTime_Req)
}

// optional .fgame.CSUpdateTaskStatusReq UpdateTaskStatus_Req = 201;
inline bool C2ServerMsg::has_updatetaskstatus_req() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void C2ServerMsg::set_has_updatetaskstatus_req() {
  _has_bits_[4] |= 0x00000800u;
}
inline void C2ServerMsg::clear_has_updatetaskstatus_req() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void C2ServerMsg::clear_updatetaskstatus_req() {
  if (updatetaskstatus_req_ != NULL) updatetaskstatus_req_->::fgame::CSUpdateTaskStatusReq::Clear();
  clear_has_updatetaskstatus_req();
}
inline const ::fgame::CSUpdateTaskStatusReq& C2ServerMsg::updatetaskstatus_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.UpdateTaskStatus_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updatetaskstatus_req_ != NULL ? *updatetaskstatus_req_ : *default_instance().updatetaskstatus_req_;
#else
  return updatetaskstatus_req_ != NULL ? *updatetaskstatus_req_ : *default_instance_->updatetaskstatus_req_;
#endif
}
inline ::fgame::CSUpdateTaskStatusReq* C2ServerMsg::mutable_updatetaskstatus_req() {
  set_has_updatetaskstatus_req();
  if (updatetaskstatus_req_ == NULL) updatetaskstatus_req_ = new ::fgame::CSUpdateTaskStatusReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.UpdateTaskStatus_Req)
  return updatetaskstatus_req_;
}
inline ::fgame::CSUpdateTaskStatusReq* C2ServerMsg::release_updatetaskstatus_req() {
  clear_has_updatetaskstatus_req();
  ::fgame::CSUpdateTaskStatusReq* temp = updatetaskstatus_req_;
  updatetaskstatus_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_updatetaskstatus_req(::fgame::CSUpdateTaskStatusReq* updatetaskstatus_req) {
  delete updatetaskstatus_req_;
  updatetaskstatus_req_ = updatetaskstatus_req;
  if (updatetaskstatus_req) {
    set_has_updatetaskstatus_req();
  } else {
    clear_has_updatetaskstatus_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.UpdateTaskStatus_Req)
}

// optional .fgame.CSAsSyncInfoReq AsSyncInfo_Req = 202;
inline bool C2ServerMsg::has_assyncinfo_req() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void C2ServerMsg::set_has_assyncinfo_req() {
  _has_bits_[4] |= 0x00001000u;
}
inline void C2ServerMsg::clear_has_assyncinfo_req() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void C2ServerMsg::clear_assyncinfo_req() {
  if (assyncinfo_req_ != NULL) assyncinfo_req_->::fgame::CSAsSyncInfoReq::Clear();
  clear_has_assyncinfo_req();
}
inline const ::fgame::CSAsSyncInfoReq& C2ServerMsg::assyncinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.AsSyncInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return assyncinfo_req_ != NULL ? *assyncinfo_req_ : *default_instance().assyncinfo_req_;
#else
  return assyncinfo_req_ != NULL ? *assyncinfo_req_ : *default_instance_->assyncinfo_req_;
#endif
}
inline ::fgame::CSAsSyncInfoReq* C2ServerMsg::mutable_assyncinfo_req() {
  set_has_assyncinfo_req();
  if (assyncinfo_req_ == NULL) assyncinfo_req_ = new ::fgame::CSAsSyncInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.AsSyncInfo_Req)
  return assyncinfo_req_;
}
inline ::fgame::CSAsSyncInfoReq* C2ServerMsg::release_assyncinfo_req() {
  clear_has_assyncinfo_req();
  ::fgame::CSAsSyncInfoReq* temp = assyncinfo_req_;
  assyncinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_assyncinfo_req(::fgame::CSAsSyncInfoReq* assyncinfo_req) {
  delete assyncinfo_req_;
  assyncinfo_req_ = assyncinfo_req;
  if (assyncinfo_req) {
    set_has_assyncinfo_req();
  } else {
    clear_has_assyncinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.AsSyncInfo_Req)
}

// optional .fgame.CSAsNewAddReq AsNewAdd_Req = 203;
inline bool C2ServerMsg::has_asnewadd_req() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void C2ServerMsg::set_has_asnewadd_req() {
  _has_bits_[4] |= 0x00002000u;
}
inline void C2ServerMsg::clear_has_asnewadd_req() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void C2ServerMsg::clear_asnewadd_req() {
  if (asnewadd_req_ != NULL) asnewadd_req_->::fgame::CSAsNewAddReq::Clear();
  clear_has_asnewadd_req();
}
inline const ::fgame::CSAsNewAddReq& C2ServerMsg::asnewadd_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.AsNewAdd_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asnewadd_req_ != NULL ? *asnewadd_req_ : *default_instance().asnewadd_req_;
#else
  return asnewadd_req_ != NULL ? *asnewadd_req_ : *default_instance_->asnewadd_req_;
#endif
}
inline ::fgame::CSAsNewAddReq* C2ServerMsg::mutable_asnewadd_req() {
  set_has_asnewadd_req();
  if (asnewadd_req_ == NULL) asnewadd_req_ = new ::fgame::CSAsNewAddReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.AsNewAdd_Req)
  return asnewadd_req_;
}
inline ::fgame::CSAsNewAddReq* C2ServerMsg::release_asnewadd_req() {
  clear_has_asnewadd_req();
  ::fgame::CSAsNewAddReq* temp = asnewadd_req_;
  asnewadd_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_asnewadd_req(::fgame::CSAsNewAddReq* asnewadd_req) {
  delete asnewadd_req_;
  asnewadd_req_ = asnewadd_req;
  if (asnewadd_req) {
    set_has_asnewadd_req();
  } else {
    clear_has_asnewadd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.AsNewAdd_Req)
}

// optional .fgame.CSAsOperateReq AsOperate_Req = 204;
inline bool C2ServerMsg::has_asoperate_req() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void C2ServerMsg::set_has_asoperate_req() {
  _has_bits_[4] |= 0x00004000u;
}
inline void C2ServerMsg::clear_has_asoperate_req() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void C2ServerMsg::clear_asoperate_req() {
  if (asoperate_req_ != NULL) asoperate_req_->::fgame::CSAsOperateReq::Clear();
  clear_has_asoperate_req();
}
inline const ::fgame::CSAsOperateReq& C2ServerMsg::asoperate_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.AsOperate_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asoperate_req_ != NULL ? *asoperate_req_ : *default_instance().asoperate_req_;
#else
  return asoperate_req_ != NULL ? *asoperate_req_ : *default_instance_->asoperate_req_;
#endif
}
inline ::fgame::CSAsOperateReq* C2ServerMsg::mutable_asoperate_req() {
  set_has_asoperate_req();
  if (asoperate_req_ == NULL) asoperate_req_ = new ::fgame::CSAsOperateReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.AsOperate_Req)
  return asoperate_req_;
}
inline ::fgame::CSAsOperateReq* C2ServerMsg::release_asoperate_req() {
  clear_has_asoperate_req();
  ::fgame::CSAsOperateReq* temp = asoperate_req_;
  asoperate_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_asoperate_req(::fgame::CSAsOperateReq* asoperate_req) {
  delete asoperate_req_;
  asoperate_req_ = asoperate_req;
  if (asoperate_req) {
    set_has_asoperate_req();
  } else {
    clear_has_asoperate_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.AsOperate_Req)
}

// optional .fgame.CSAsUseCardReq AsUseCard_Req = 205;
inline bool C2ServerMsg::has_asusecard_req() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void C2ServerMsg::set_has_asusecard_req() {
  _has_bits_[4] |= 0x00008000u;
}
inline void C2ServerMsg::clear_has_asusecard_req() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void C2ServerMsg::clear_asusecard_req() {
  if (asusecard_req_ != NULL) asusecard_req_->::fgame::CSAsUseCardReq::Clear();
  clear_has_asusecard_req();
}
inline const ::fgame::CSAsUseCardReq& C2ServerMsg::asusecard_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.AsUseCard_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asusecard_req_ != NULL ? *asusecard_req_ : *default_instance().asusecard_req_;
#else
  return asusecard_req_ != NULL ? *asusecard_req_ : *default_instance_->asusecard_req_;
#endif
}
inline ::fgame::CSAsUseCardReq* C2ServerMsg::mutable_asusecard_req() {
  set_has_asusecard_req();
  if (asusecard_req_ == NULL) asusecard_req_ = new ::fgame::CSAsUseCardReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.AsUseCard_Req)
  return asusecard_req_;
}
inline ::fgame::CSAsUseCardReq* C2ServerMsg::release_asusecard_req() {
  clear_has_asusecard_req();
  ::fgame::CSAsUseCardReq* temp = asusecard_req_;
  asusecard_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_asusecard_req(::fgame::CSAsUseCardReq* asusecard_req) {
  delete asusecard_req_;
  asusecard_req_ = asusecard_req;
  if (asusecard_req) {
    set_has_asusecard_req();
  } else {
    clear_has_asusecard_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.AsUseCard_Req)
}

// optional .fgame.CSPvpUseSkillReq PvpUseSkill_Req = 206;
inline bool C2ServerMsg::has_pvpuseskill_req() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void C2ServerMsg::set_has_pvpuseskill_req() {
  _has_bits_[4] |= 0x00010000u;
}
inline void C2ServerMsg::clear_has_pvpuseskill_req() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void C2ServerMsg::clear_pvpuseskill_req() {
  if (pvpuseskill_req_ != NULL) pvpuseskill_req_->::fgame::CSPvpUseSkillReq::Clear();
  clear_has_pvpuseskill_req();
}
inline const ::fgame::CSPvpUseSkillReq& C2ServerMsg::pvpuseskill_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.PvpUseSkill_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpuseskill_req_ != NULL ? *pvpuseskill_req_ : *default_instance().pvpuseskill_req_;
#else
  return pvpuseskill_req_ != NULL ? *pvpuseskill_req_ : *default_instance_->pvpuseskill_req_;
#endif
}
inline ::fgame::CSPvpUseSkillReq* C2ServerMsg::mutable_pvpuseskill_req() {
  set_has_pvpuseskill_req();
  if (pvpuseskill_req_ == NULL) pvpuseskill_req_ = new ::fgame::CSPvpUseSkillReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.PvpUseSkill_Req)
  return pvpuseskill_req_;
}
inline ::fgame::CSPvpUseSkillReq* C2ServerMsg::release_pvpuseskill_req() {
  clear_has_pvpuseskill_req();
  ::fgame::CSPvpUseSkillReq* temp = pvpuseskill_req_;
  pvpuseskill_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_pvpuseskill_req(::fgame::CSPvpUseSkillReq* pvpuseskill_req) {
  delete pvpuseskill_req_;
  pvpuseskill_req_ = pvpuseskill_req;
  if (pvpuseskill_req) {
    set_has_pvpuseskill_req();
  } else {
    clear_has_pvpuseskill_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.PvpUseSkill_Req)
}

// optional .fgame.CSInstituteInfoReq InstituteInfo_Req = 208;
inline bool C2ServerMsg::has_instituteinfo_req() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void C2ServerMsg::set_has_instituteinfo_req() {
  _has_bits_[4] |= 0x00020000u;
}
inline void C2ServerMsg::clear_has_instituteinfo_req() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void C2ServerMsg::clear_instituteinfo_req() {
  if (instituteinfo_req_ != NULL) instituteinfo_req_->::fgame::CSInstituteInfoReq::Clear();
  clear_has_instituteinfo_req();
}
inline const ::fgame::CSInstituteInfoReq& C2ServerMsg::instituteinfo_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.InstituteInfo_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return instituteinfo_req_ != NULL ? *instituteinfo_req_ : *default_instance().instituteinfo_req_;
#else
  return instituteinfo_req_ != NULL ? *instituteinfo_req_ : *default_instance_->instituteinfo_req_;
#endif
}
inline ::fgame::CSInstituteInfoReq* C2ServerMsg::mutable_instituteinfo_req() {
  set_has_instituteinfo_req();
  if (instituteinfo_req_ == NULL) instituteinfo_req_ = new ::fgame::CSInstituteInfoReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.InstituteInfo_Req)
  return instituteinfo_req_;
}
inline ::fgame::CSInstituteInfoReq* C2ServerMsg::release_instituteinfo_req() {
  clear_has_instituteinfo_req();
  ::fgame::CSInstituteInfoReq* temp = instituteinfo_req_;
  instituteinfo_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_instituteinfo_req(::fgame::CSInstituteInfoReq* instituteinfo_req) {
  delete instituteinfo_req_;
  instituteinfo_req_ = instituteinfo_req;
  if (instituteinfo_req) {
    set_has_instituteinfo_req();
  } else {
    clear_has_instituteinfo_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.InstituteInfo_Req)
}

// optional .fgame.CSInstituteBuyReq InstituteBuy_Req = 209;
inline bool C2ServerMsg::has_institutebuy_req() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void C2ServerMsg::set_has_institutebuy_req() {
  _has_bits_[4] |= 0x00040000u;
}
inline void C2ServerMsg::clear_has_institutebuy_req() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void C2ServerMsg::clear_institutebuy_req() {
  if (institutebuy_req_ != NULL) institutebuy_req_->::fgame::CSInstituteBuyReq::Clear();
  clear_has_institutebuy_req();
}
inline const ::fgame::CSInstituteBuyReq& C2ServerMsg::institutebuy_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.InstituteBuy_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return institutebuy_req_ != NULL ? *institutebuy_req_ : *default_instance().institutebuy_req_;
#else
  return institutebuy_req_ != NULL ? *institutebuy_req_ : *default_instance_->institutebuy_req_;
#endif
}
inline ::fgame::CSInstituteBuyReq* C2ServerMsg::mutable_institutebuy_req() {
  set_has_institutebuy_req();
  if (institutebuy_req_ == NULL) institutebuy_req_ = new ::fgame::CSInstituteBuyReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.InstituteBuy_Req)
  return institutebuy_req_;
}
inline ::fgame::CSInstituteBuyReq* C2ServerMsg::release_institutebuy_req() {
  clear_has_institutebuy_req();
  ::fgame::CSInstituteBuyReq* temp = institutebuy_req_;
  institutebuy_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_institutebuy_req(::fgame::CSInstituteBuyReq* institutebuy_req) {
  delete institutebuy_req_;
  institutebuy_req_ = institutebuy_req;
  if (institutebuy_req) {
    set_has_institutebuy_req();
  } else {
    clear_has_institutebuy_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.InstituteBuy_Req)
}

// optional .fgame.CSOpActConfigListReq OpActConfigList_Req = 304;
inline bool C2ServerMsg::has_opactconfiglist_req() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void C2ServerMsg::set_has_opactconfiglist_req() {
  _has_bits_[4] |= 0x00080000u;
}
inline void C2ServerMsg::clear_has_opactconfiglist_req() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void C2ServerMsg::clear_opactconfiglist_req() {
  if (opactconfiglist_req_ != NULL) opactconfiglist_req_->::fgame::CSOpActConfigListReq::Clear();
  clear_has_opactconfiglist_req();
}
inline const ::fgame::CSOpActConfigListReq& C2ServerMsg::opactconfiglist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpActConfigList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactconfiglist_req_ != NULL ? *opactconfiglist_req_ : *default_instance().opactconfiglist_req_;
#else
  return opactconfiglist_req_ != NULL ? *opactconfiglist_req_ : *default_instance_->opactconfiglist_req_;
#endif
}
inline ::fgame::CSOpActConfigListReq* C2ServerMsg::mutable_opactconfiglist_req() {
  set_has_opactconfiglist_req();
  if (opactconfiglist_req_ == NULL) opactconfiglist_req_ = new ::fgame::CSOpActConfigListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpActConfigList_Req)
  return opactconfiglist_req_;
}
inline ::fgame::CSOpActConfigListReq* C2ServerMsg::release_opactconfiglist_req() {
  clear_has_opactconfiglist_req();
  ::fgame::CSOpActConfigListReq* temp = opactconfiglist_req_;
  opactconfiglist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_opactconfiglist_req(::fgame::CSOpActConfigListReq* opactconfiglist_req) {
  delete opactconfiglist_req_;
  opactconfiglist_req_ = opactconfiglist_req;
  if (opactconfiglist_req) {
    set_has_opactconfiglist_req();
  } else {
    clear_has_opactconfiglist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpActConfigList_Req)
}

// optional .fgame.CSOpActSelfDataListReq OpActSelfDataList_Req = 305;
inline bool C2ServerMsg::has_opactselfdatalist_req() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void C2ServerMsg::set_has_opactselfdatalist_req() {
  _has_bits_[4] |= 0x00100000u;
}
inline void C2ServerMsg::clear_has_opactselfdatalist_req() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void C2ServerMsg::clear_opactselfdatalist_req() {
  if (opactselfdatalist_req_ != NULL) opactselfdatalist_req_->::fgame::CSOpActSelfDataListReq::Clear();
  clear_has_opactselfdatalist_req();
}
inline const ::fgame::CSOpActSelfDataListReq& C2ServerMsg::opactselfdatalist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpActSelfDataList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactselfdatalist_req_ != NULL ? *opactselfdatalist_req_ : *default_instance().opactselfdatalist_req_;
#else
  return opactselfdatalist_req_ != NULL ? *opactselfdatalist_req_ : *default_instance_->opactselfdatalist_req_;
#endif
}
inline ::fgame::CSOpActSelfDataListReq* C2ServerMsg::mutable_opactselfdatalist_req() {
  set_has_opactselfdatalist_req();
  if (opactselfdatalist_req_ == NULL) opactselfdatalist_req_ = new ::fgame::CSOpActSelfDataListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpActSelfDataList_Req)
  return opactselfdatalist_req_;
}
inline ::fgame::CSOpActSelfDataListReq* C2ServerMsg::release_opactselfdatalist_req() {
  clear_has_opactselfdatalist_req();
  ::fgame::CSOpActSelfDataListReq* temp = opactselfdatalist_req_;
  opactselfdatalist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_opactselfdatalist_req(::fgame::CSOpActSelfDataListReq* opactselfdatalist_req) {
  delete opactselfdatalist_req_;
  opactselfdatalist_req_ = opactselfdatalist_req;
  if (opactselfdatalist_req) {
    set_has_opactselfdatalist_req();
  } else {
    clear_has_opactselfdatalist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpActSelfDataList_Req)
}

// optional .fgame.CSOpActGlobalDataListReq OpActGlobalDataList_Req = 306;
inline bool C2ServerMsg::has_opactglobaldatalist_req() const {
  return (_has_bits_[4] & 0x00200000u) != 0;
}
inline void C2ServerMsg::set_has_opactglobaldatalist_req() {
  _has_bits_[4] |= 0x00200000u;
}
inline void C2ServerMsg::clear_has_opactglobaldatalist_req() {
  _has_bits_[4] &= ~0x00200000u;
}
inline void C2ServerMsg::clear_opactglobaldatalist_req() {
  if (opactglobaldatalist_req_ != NULL) opactglobaldatalist_req_->::fgame::CSOpActGlobalDataListReq::Clear();
  clear_has_opactglobaldatalist_req();
}
inline const ::fgame::CSOpActGlobalDataListReq& C2ServerMsg::opactglobaldatalist_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpActGlobalDataList_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactglobaldatalist_req_ != NULL ? *opactglobaldatalist_req_ : *default_instance().opactglobaldatalist_req_;
#else
  return opactglobaldatalist_req_ != NULL ? *opactglobaldatalist_req_ : *default_instance_->opactglobaldatalist_req_;
#endif
}
inline ::fgame::CSOpActGlobalDataListReq* C2ServerMsg::mutable_opactglobaldatalist_req() {
  set_has_opactglobaldatalist_req();
  if (opactglobaldatalist_req_ == NULL) opactglobaldatalist_req_ = new ::fgame::CSOpActGlobalDataListReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpActGlobalDataList_Req)
  return opactglobaldatalist_req_;
}
inline ::fgame::CSOpActGlobalDataListReq* C2ServerMsg::release_opactglobaldatalist_req() {
  clear_has_opactglobaldatalist_req();
  ::fgame::CSOpActGlobalDataListReq* temp = opactglobaldatalist_req_;
  opactglobaldatalist_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_opactglobaldatalist_req(::fgame::CSOpActGlobalDataListReq* opactglobaldatalist_req) {
  delete opactglobaldatalist_req_;
  opactglobaldatalist_req_ = opactglobaldatalist_req;
  if (opactglobaldatalist_req) {
    set_has_opactglobaldatalist_req();
  } else {
    clear_has_opactglobaldatalist_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpActGlobalDataList_Req)
}

// optional .fgame.CSOpActDemoTakeReq OpActDemoTake_Req = 310;
inline bool C2ServerMsg::has_opactdemotake_req() const {
  return (_has_bits_[4] & 0x00400000u) != 0;
}
inline void C2ServerMsg::set_has_opactdemotake_req() {
  _has_bits_[4] |= 0x00400000u;
}
inline void C2ServerMsg::clear_has_opactdemotake_req() {
  _has_bits_[4] &= ~0x00400000u;
}
inline void C2ServerMsg::clear_opactdemotake_req() {
  if (opactdemotake_req_ != NULL) opactdemotake_req_->::fgame::CSOpActDemoTakeReq::Clear();
  clear_has_opactdemotake_req();
}
inline const ::fgame::CSOpActDemoTakeReq& C2ServerMsg::opactdemotake_req() const {
  // @@protoc_insertion_point(field_get:fgame.C2ServerMsg.OpActDemoTake_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactdemotake_req_ != NULL ? *opactdemotake_req_ : *default_instance().opactdemotake_req_;
#else
  return opactdemotake_req_ != NULL ? *opactdemotake_req_ : *default_instance_->opactdemotake_req_;
#endif
}
inline ::fgame::CSOpActDemoTakeReq* C2ServerMsg::mutable_opactdemotake_req() {
  set_has_opactdemotake_req();
  if (opactdemotake_req_ == NULL) opactdemotake_req_ = new ::fgame::CSOpActDemoTakeReq;
  // @@protoc_insertion_point(field_mutable:fgame.C2ServerMsg.OpActDemoTake_Req)
  return opactdemotake_req_;
}
inline ::fgame::CSOpActDemoTakeReq* C2ServerMsg::release_opactdemotake_req() {
  clear_has_opactdemotake_req();
  ::fgame::CSOpActDemoTakeReq* temp = opactdemotake_req_;
  opactdemotake_req_ = NULL;
  return temp;
}
inline void C2ServerMsg::set_allocated_opactdemotake_req(::fgame::CSOpActDemoTakeReq* opactdemotake_req) {
  delete opactdemotake_req_;
  opactdemotake_req_ = opactdemotake_req;
  if (opactdemotake_req) {
    set_has_opactdemotake_req();
  } else {
    clear_has_opactdemotake_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.C2ServerMsg.OpActDemoTake_Req)
}

// -------------------------------------------------------------------

// S2ClientMsg

// optional .fgame.CSErrorMsg Error_Msg = 1;
inline bool S2ClientMsg::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_error_msg() {
  if (error_msg_ != NULL) error_msg_->::fgame::CSErrorMsg::Clear();
  clear_has_error_msg();
}
inline const ::fgame::CSErrorMsg& S2ClientMsg::error_msg() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Error_Msg)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return error_msg_ != NULL ? *error_msg_ : *default_instance().error_msg_;
#else
  return error_msg_ != NULL ? *error_msg_ : *default_instance_->error_msg_;
#endif
}
inline ::fgame::CSErrorMsg* S2ClientMsg::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == NULL) error_msg_ = new ::fgame::CSErrorMsg;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Error_Msg)
  return error_msg_;
}
inline ::fgame::CSErrorMsg* S2ClientMsg::release_error_msg() {
  clear_has_error_msg();
  ::fgame::CSErrorMsg* temp = error_msg_;
  error_msg_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_error_msg(::fgame::CSErrorMsg* error_msg) {
  delete error_msg_;
  error_msg_ = error_msg;
  if (error_msg) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Error_Msg)
}

// optional .fgame.CSLoginResp Login_Resp = 2;
inline bool S2ClientMsg::has_login_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_login_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_login_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_login_resp() {
  if (login_resp_ != NULL) login_resp_->::fgame::CSLoginResp::Clear();
  clear_has_login_resp();
}
inline const ::fgame::CSLoginResp& S2ClientMsg::login_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Login_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return login_resp_ != NULL ? *login_resp_ : *default_instance().login_resp_;
#else
  return login_resp_ != NULL ? *login_resp_ : *default_instance_->login_resp_;
#endif
}
inline ::fgame::CSLoginResp* S2ClientMsg::mutable_login_resp() {
  set_has_login_resp();
  if (login_resp_ == NULL) login_resp_ = new ::fgame::CSLoginResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Login_Resp)
  return login_resp_;
}
inline ::fgame::CSLoginResp* S2ClientMsg::release_login_resp() {
  clear_has_login_resp();
  ::fgame::CSLoginResp* temp = login_resp_;
  login_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_login_resp(::fgame::CSLoginResp* login_resp) {
  delete login_resp_;
  login_resp_ = login_resp;
  if (login_resp) {
    set_has_login_resp();
  } else {
    clear_has_login_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Login_Resp)
}

// optional .fgame.CSRegResp Reg_Resp = 3;
inline bool S2ClientMsg::has_reg_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_reg_resp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_reg_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_reg_resp() {
  if (reg_resp_ != NULL) reg_resp_->::fgame::CSRegResp::Clear();
  clear_has_reg_resp();
}
inline const ::fgame::CSRegResp& S2ClientMsg::reg_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Reg_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reg_resp_ != NULL ? *reg_resp_ : *default_instance().reg_resp_;
#else
  return reg_resp_ != NULL ? *reg_resp_ : *default_instance_->reg_resp_;
#endif
}
inline ::fgame::CSRegResp* S2ClientMsg::mutable_reg_resp() {
  set_has_reg_resp();
  if (reg_resp_ == NULL) reg_resp_ = new ::fgame::CSRegResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Reg_Resp)
  return reg_resp_;
}
inline ::fgame::CSRegResp* S2ClientMsg::release_reg_resp() {
  clear_has_reg_resp();
  ::fgame::CSRegResp* temp = reg_resp_;
  reg_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_reg_resp(::fgame::CSRegResp* reg_resp) {
  delete reg_resp_;
  reg_resp_ = reg_resp;
  if (reg_resp) {
    set_has_reg_resp();
  } else {
    clear_has_reg_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Reg_Resp)
}

// optional .fgame.CSHeartBeatResp HeartBeat_Resp = 4;
inline bool S2ClientMsg::has_heartbeat_resp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_heartbeat_resp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_heartbeat_resp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_heartbeat_resp() {
  if (heartbeat_resp_ != NULL) heartbeat_resp_->::fgame::CSHeartBeatResp::Clear();
  clear_has_heartbeat_resp();
}
inline const ::fgame::CSHeartBeatResp& S2ClientMsg::heartbeat_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.HeartBeat_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return heartbeat_resp_ != NULL ? *heartbeat_resp_ : *default_instance().heartbeat_resp_;
#else
  return heartbeat_resp_ != NULL ? *heartbeat_resp_ : *default_instance_->heartbeat_resp_;
#endif
}
inline ::fgame::CSHeartBeatResp* S2ClientMsg::mutable_heartbeat_resp() {
  set_has_heartbeat_resp();
  if (heartbeat_resp_ == NULL) heartbeat_resp_ = new ::fgame::CSHeartBeatResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.HeartBeat_Resp)
  return heartbeat_resp_;
}
inline ::fgame::CSHeartBeatResp* S2ClientMsg::release_heartbeat_resp() {
  clear_has_heartbeat_resp();
  ::fgame::CSHeartBeatResp* temp = heartbeat_resp_;
  heartbeat_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_heartbeat_resp(::fgame::CSHeartBeatResp* heartbeat_resp) {
  delete heartbeat_resp_;
  heartbeat_resp_ = heartbeat_resp;
  if (heartbeat_resp) {
    set_has_heartbeat_resp();
  } else {
    clear_has_heartbeat_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.HeartBeat_Resp)
}

// optional .fgame.CSPvpMatchResp Match_Resp = 5;
inline bool S2ClientMsg::has_match_resp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_match_resp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_match_resp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_match_resp() {
  if (match_resp_ != NULL) match_resp_->::fgame::CSPvpMatchResp::Clear();
  clear_has_match_resp();
}
inline const ::fgame::CSPvpMatchResp& S2ClientMsg::match_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Match_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return match_resp_ != NULL ? *match_resp_ : *default_instance().match_resp_;
#else
  return match_resp_ != NULL ? *match_resp_ : *default_instance_->match_resp_;
#endif
}
inline ::fgame::CSPvpMatchResp* S2ClientMsg::mutable_match_resp() {
  set_has_match_resp();
  if (match_resp_ == NULL) match_resp_ = new ::fgame::CSPvpMatchResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Match_Resp)
  return match_resp_;
}
inline ::fgame::CSPvpMatchResp* S2ClientMsg::release_match_resp() {
  clear_has_match_resp();
  ::fgame::CSPvpMatchResp* temp = match_resp_;
  match_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_match_resp(::fgame::CSPvpMatchResp* match_resp) {
  delete match_resp_;
  match_resp_ = match_resp;
  if (match_resp) {
    set_has_match_resp();
  } else {
    clear_has_match_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Match_Resp)
}

// optional .fgame.CSPvpStartResp Start_Resp = 6;
inline bool S2ClientMsg::has_start_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_start_resp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_start_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_start_resp() {
  if (start_resp_ != NULL) start_resp_->::fgame::CSPvpStartResp::Clear();
  clear_has_start_resp();
}
inline const ::fgame::CSPvpStartResp& S2ClientMsg::start_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Start_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return start_resp_ != NULL ? *start_resp_ : *default_instance().start_resp_;
#else
  return start_resp_ != NULL ? *start_resp_ : *default_instance_->start_resp_;
#endif
}
inline ::fgame::CSPvpStartResp* S2ClientMsg::mutable_start_resp() {
  set_has_start_resp();
  if (start_resp_ == NULL) start_resp_ = new ::fgame::CSPvpStartResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Start_Resp)
  return start_resp_;
}
inline ::fgame::CSPvpStartResp* S2ClientMsg::release_start_resp() {
  clear_has_start_resp();
  ::fgame::CSPvpStartResp* temp = start_resp_;
  start_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_start_resp(::fgame::CSPvpStartResp* start_resp) {
  delete start_resp_;
  start_resp_ = start_resp;
  if (start_resp) {
    set_has_start_resp();
  } else {
    clear_has_start_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Start_Resp)
}

// optional .fgame.CSPvpFightResp Fight_Resp = 7;
inline bool S2ClientMsg::has_fight_resp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_fight_resp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_fight_resp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_fight_resp() {
  if (fight_resp_ != NULL) fight_resp_->::fgame::CSPvpFightResp::Clear();
  clear_has_fight_resp();
}
inline const ::fgame::CSPvpFightResp& S2ClientMsg::fight_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Fight_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fight_resp_ != NULL ? *fight_resp_ : *default_instance().fight_resp_;
#else
  return fight_resp_ != NULL ? *fight_resp_ : *default_instance_->fight_resp_;
#endif
}
inline ::fgame::CSPvpFightResp* S2ClientMsg::mutable_fight_resp() {
  set_has_fight_resp();
  if (fight_resp_ == NULL) fight_resp_ = new ::fgame::CSPvpFightResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Fight_Resp)
  return fight_resp_;
}
inline ::fgame::CSPvpFightResp* S2ClientMsg::release_fight_resp() {
  clear_has_fight_resp();
  ::fgame::CSPvpFightResp* temp = fight_resp_;
  fight_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_fight_resp(::fgame::CSPvpFightResp* fight_resp) {
  delete fight_resp_;
  fight_resp_ = fight_resp;
  if (fight_resp) {
    set_has_fight_resp();
  } else {
    clear_has_fight_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Fight_Resp)
}

// optional .fgame.CSPvpEndResp End_Resp = 8;
inline bool S2ClientMsg::has_end_resp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_end_resp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_end_resp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_end_resp() {
  if (end_resp_ != NULL) end_resp_->::fgame::CSPvpEndResp::Clear();
  clear_has_end_resp();
}
inline const ::fgame::CSPvpEndResp& S2ClientMsg::end_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.End_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return end_resp_ != NULL ? *end_resp_ : *default_instance().end_resp_;
#else
  return end_resp_ != NULL ? *end_resp_ : *default_instance_->end_resp_;
#endif
}
inline ::fgame::CSPvpEndResp* S2ClientMsg::mutable_end_resp() {
  set_has_end_resp();
  if (end_resp_ == NULL) end_resp_ = new ::fgame::CSPvpEndResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.End_Resp)
  return end_resp_;
}
inline ::fgame::CSPvpEndResp* S2ClientMsg::release_end_resp() {
  clear_has_end_resp();
  ::fgame::CSPvpEndResp* temp = end_resp_;
  end_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_end_resp(::fgame::CSPvpEndResp* end_resp) {
  delete end_resp_;
  end_resp_ = end_resp;
  if (end_resp) {
    set_has_end_resp();
  } else {
    clear_has_end_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.End_Resp)
}

// optional .fgame.CSPvpMapResp Map_Resp = 9;
inline bool S2ClientMsg::has_map_resp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_map_resp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_map_resp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_map_resp() {
  if (map_resp_ != NULL) map_resp_->::fgame::CSPvpMapResp::Clear();
  clear_has_map_resp();
}
inline const ::fgame::CSPvpMapResp& S2ClientMsg::map_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Map_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return map_resp_ != NULL ? *map_resp_ : *default_instance().map_resp_;
#else
  return map_resp_ != NULL ? *map_resp_ : *default_instance_->map_resp_;
#endif
}
inline ::fgame::CSPvpMapResp* S2ClientMsg::mutable_map_resp() {
  set_has_map_resp();
  if (map_resp_ == NULL) map_resp_ = new ::fgame::CSPvpMapResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Map_Resp)
  return map_resp_;
}
inline ::fgame::CSPvpMapResp* S2ClientMsg::release_map_resp() {
  clear_has_map_resp();
  ::fgame::CSPvpMapResp* temp = map_resp_;
  map_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_map_resp(::fgame::CSPvpMapResp* map_resp) {
  delete map_resp_;
  map_resp_ = map_resp;
  if (map_resp) {
    set_has_map_resp();
  } else {
    clear_has_map_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Map_Resp)
}

// optional .fgame.CSPvpUpgradeResp Upgrade_Resp = 10;
inline bool S2ClientMsg::has_upgrade_resp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void S2ClientMsg::set_has_upgrade_resp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void S2ClientMsg::clear_has_upgrade_resp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void S2ClientMsg::clear_upgrade_resp() {
  if (upgrade_resp_ != NULL) upgrade_resp_->::fgame::CSPvpUpgradeResp::Clear();
  clear_has_upgrade_resp();
}
inline const ::fgame::CSPvpUpgradeResp& S2ClientMsg::upgrade_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Upgrade_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return upgrade_resp_ != NULL ? *upgrade_resp_ : *default_instance().upgrade_resp_;
#else
  return upgrade_resp_ != NULL ? *upgrade_resp_ : *default_instance_->upgrade_resp_;
#endif
}
inline ::fgame::CSPvpUpgradeResp* S2ClientMsg::mutable_upgrade_resp() {
  set_has_upgrade_resp();
  if (upgrade_resp_ == NULL) upgrade_resp_ = new ::fgame::CSPvpUpgradeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Upgrade_Resp)
  return upgrade_resp_;
}
inline ::fgame::CSPvpUpgradeResp* S2ClientMsg::release_upgrade_resp() {
  clear_has_upgrade_resp();
  ::fgame::CSPvpUpgradeResp* temp = upgrade_resp_;
  upgrade_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_upgrade_resp(::fgame::CSPvpUpgradeResp* upgrade_resp) {
  delete upgrade_resp_;
  upgrade_resp_ = upgrade_resp;
  if (upgrade_resp) {
    set_has_upgrade_resp();
  } else {
    clear_has_upgrade_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Upgrade_Resp)
}

// optional .fgame.CSPvpPingResp Ping_Resp = 13;
inline bool S2ClientMsg::has_ping_resp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void S2ClientMsg::set_has_ping_resp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void S2ClientMsg::clear_has_ping_resp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void S2ClientMsg::clear_ping_resp() {
  if (ping_resp_ != NULL) ping_resp_->::fgame::CSPvpPingResp::Clear();
  clear_has_ping_resp();
}
inline const ::fgame::CSPvpPingResp& S2ClientMsg::ping_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Ping_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ping_resp_ != NULL ? *ping_resp_ : *default_instance().ping_resp_;
#else
  return ping_resp_ != NULL ? *ping_resp_ : *default_instance_->ping_resp_;
#endif
}
inline ::fgame::CSPvpPingResp* S2ClientMsg::mutable_ping_resp() {
  set_has_ping_resp();
  if (ping_resp_ == NULL) ping_resp_ = new ::fgame::CSPvpPingResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Ping_Resp)
  return ping_resp_;
}
inline ::fgame::CSPvpPingResp* S2ClientMsg::release_ping_resp() {
  clear_has_ping_resp();
  ::fgame::CSPvpPingResp* temp = ping_resp_;
  ping_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_ping_resp(::fgame::CSPvpPingResp* ping_resp) {
  delete ping_resp_;
  ping_resp_ = ping_resp;
  if (ping_resp) {
    set_has_ping_resp();
  } else {
    clear_has_ping_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Ping_Resp)
}

// optional .fgame.CSBuyItemResp BuyItem_Resp = 14;
inline bool S2ClientMsg::has_buyitem_resp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void S2ClientMsg::set_has_buyitem_resp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void S2ClientMsg::clear_has_buyitem_resp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void S2ClientMsg::clear_buyitem_resp() {
  if (buyitem_resp_ != NULL) buyitem_resp_->::fgame::CSBuyItemResp::Clear();
  clear_has_buyitem_resp();
}
inline const ::fgame::CSBuyItemResp& S2ClientMsg::buyitem_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.BuyItem_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buyitem_resp_ != NULL ? *buyitem_resp_ : *default_instance().buyitem_resp_;
#else
  return buyitem_resp_ != NULL ? *buyitem_resp_ : *default_instance_->buyitem_resp_;
#endif
}
inline ::fgame::CSBuyItemResp* S2ClientMsg::mutable_buyitem_resp() {
  set_has_buyitem_resp();
  if (buyitem_resp_ == NULL) buyitem_resp_ = new ::fgame::CSBuyItemResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.BuyItem_Resp)
  return buyitem_resp_;
}
inline ::fgame::CSBuyItemResp* S2ClientMsg::release_buyitem_resp() {
  clear_has_buyitem_resp();
  ::fgame::CSBuyItemResp* temp = buyitem_resp_;
  buyitem_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_buyitem_resp(::fgame::CSBuyItemResp* buyitem_resp) {
  delete buyitem_resp_;
  buyitem_resp_ = buyitem_resp;
  if (buyitem_resp) {
    set_has_buyitem_resp();
  } else {
    clear_has_buyitem_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.BuyItem_Resp)
}

// optional .fgame.CSUseItemResp UseItem_Resp = 15;
inline bool S2ClientMsg::has_useitem_resp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void S2ClientMsg::set_has_useitem_resp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void S2ClientMsg::clear_has_useitem_resp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void S2ClientMsg::clear_useitem_resp() {
  if (useitem_resp_ != NULL) useitem_resp_->::fgame::CSUseItemResp::Clear();
  clear_has_useitem_resp();
}
inline const ::fgame::CSUseItemResp& S2ClientMsg::useitem_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UseItem_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return useitem_resp_ != NULL ? *useitem_resp_ : *default_instance().useitem_resp_;
#else
  return useitem_resp_ != NULL ? *useitem_resp_ : *default_instance_->useitem_resp_;
#endif
}
inline ::fgame::CSUseItemResp* S2ClientMsg::mutable_useitem_resp() {
  set_has_useitem_resp();
  if (useitem_resp_ == NULL) useitem_resp_ = new ::fgame::CSUseItemResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UseItem_Resp)
  return useitem_resp_;
}
inline ::fgame::CSUseItemResp* S2ClientMsg::release_useitem_resp() {
  clear_has_useitem_resp();
  ::fgame::CSUseItemResp* temp = useitem_resp_;
  useitem_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_useitem_resp(::fgame::CSUseItemResp* useitem_resp) {
  delete useitem_resp_;
  useitem_resp_ = useitem_resp;
  if (useitem_resp) {
    set_has_useitem_resp();
  } else {
    clear_has_useitem_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UseItem_Resp)
}

// optional .fgame.CSPvpLeaveResp Leave_Resp = 18;
inline bool S2ClientMsg::has_leave_resp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void S2ClientMsg::set_has_leave_resp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void S2ClientMsg::clear_has_leave_resp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void S2ClientMsg::clear_leave_resp() {
  if (leave_resp_ != NULL) leave_resp_->::fgame::CSPvpLeaveResp::Clear();
  clear_has_leave_resp();
}
inline const ::fgame::CSPvpLeaveResp& S2ClientMsg::leave_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Leave_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return leave_resp_ != NULL ? *leave_resp_ : *default_instance().leave_resp_;
#else
  return leave_resp_ != NULL ? *leave_resp_ : *default_instance_->leave_resp_;
#endif
}
inline ::fgame::CSPvpLeaveResp* S2ClientMsg::mutable_leave_resp() {
  set_has_leave_resp();
  if (leave_resp_ == NULL) leave_resp_ = new ::fgame::CSPvpLeaveResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Leave_Resp)
  return leave_resp_;
}
inline ::fgame::CSPvpLeaveResp* S2ClientMsg::release_leave_resp() {
  clear_has_leave_resp();
  ::fgame::CSPvpLeaveResp* temp = leave_resp_;
  leave_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_leave_resp(::fgame::CSPvpLeaveResp* leave_resp) {
  delete leave_resp_;
  leave_resp_ = leave_resp;
  if (leave_resp) {
    set_has_leave_resp();
  } else {
    clear_has_leave_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Leave_Resp)
}

// optional .fgame.CSGetAchievementResp GetAchievement_Resp = 19;
inline bool S2ClientMsg::has_getachievement_resp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void S2ClientMsg::set_has_getachievement_resp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void S2ClientMsg::clear_has_getachievement_resp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void S2ClientMsg::clear_getachievement_resp() {
  if (getachievement_resp_ != NULL) getachievement_resp_->::fgame::CSGetAchievementResp::Clear();
  clear_has_getachievement_resp();
}
inline const ::fgame::CSGetAchievementResp& S2ClientMsg::getachievement_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetAchievement_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getachievement_resp_ != NULL ? *getachievement_resp_ : *default_instance().getachievement_resp_;
#else
  return getachievement_resp_ != NULL ? *getachievement_resp_ : *default_instance_->getachievement_resp_;
#endif
}
inline ::fgame::CSGetAchievementResp* S2ClientMsg::mutable_getachievement_resp() {
  set_has_getachievement_resp();
  if (getachievement_resp_ == NULL) getachievement_resp_ = new ::fgame::CSGetAchievementResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetAchievement_Resp)
  return getachievement_resp_;
}
inline ::fgame::CSGetAchievementResp* S2ClientMsg::release_getachievement_resp() {
  clear_has_getachievement_resp();
  ::fgame::CSGetAchievementResp* temp = getachievement_resp_;
  getachievement_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getachievement_resp(::fgame::CSGetAchievementResp* getachievement_resp) {
  delete getachievement_resp_;
  getachievement_resp_ = getachievement_resp;
  if (getachievement_resp) {
    set_has_getachievement_resp();
  } else {
    clear_has_getachievement_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetAchievement_Resp)
}

// optional .fgame.CSReceiveAchievementResp ReceiveAchievement_Resp = 20;
inline bool S2ClientMsg::has_receiveachievement_resp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void S2ClientMsg::set_has_receiveachievement_resp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void S2ClientMsg::clear_has_receiveachievement_resp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void S2ClientMsg::clear_receiveachievement_resp() {
  if (receiveachievement_resp_ != NULL) receiveachievement_resp_->::fgame::CSReceiveAchievementResp::Clear();
  clear_has_receiveachievement_resp();
}
inline const ::fgame::CSReceiveAchievementResp& S2ClientMsg::receiveachievement_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ReceiveAchievement_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveachievement_resp_ != NULL ? *receiveachievement_resp_ : *default_instance().receiveachievement_resp_;
#else
  return receiveachievement_resp_ != NULL ? *receiveachievement_resp_ : *default_instance_->receiveachievement_resp_;
#endif
}
inline ::fgame::CSReceiveAchievementResp* S2ClientMsg::mutable_receiveachievement_resp() {
  set_has_receiveachievement_resp();
  if (receiveachievement_resp_ == NULL) receiveachievement_resp_ = new ::fgame::CSReceiveAchievementResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ReceiveAchievement_Resp)
  return receiveachievement_resp_;
}
inline ::fgame::CSReceiveAchievementResp* S2ClientMsg::release_receiveachievement_resp() {
  clear_has_receiveachievement_resp();
  ::fgame::CSReceiveAchievementResp* temp = receiveachievement_resp_;
  receiveachievement_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_receiveachievement_resp(::fgame::CSReceiveAchievementResp* receiveachievement_resp) {
  delete receiveachievement_resp_;
  receiveachievement_resp_ = receiveachievement_resp;
  if (receiveachievement_resp) {
    set_has_receiveachievement_resp();
  } else {
    clear_has_receiveachievement_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ReceiveAchievement_Resp)
}

// optional .fgame.CSReceiveAchievementRewardResp ReceiveAchievementReward_Resp = 21;
inline bool S2ClientMsg::has_receiveachievementreward_resp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void S2ClientMsg::set_has_receiveachievementreward_resp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void S2ClientMsg::clear_has_receiveachievementreward_resp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void S2ClientMsg::clear_receiveachievementreward_resp() {
  if (receiveachievementreward_resp_ != NULL) receiveachievementreward_resp_->::fgame::CSReceiveAchievementRewardResp::Clear();
  clear_has_receiveachievementreward_resp();
}
inline const ::fgame::CSReceiveAchievementRewardResp& S2ClientMsg::receiveachievementreward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ReceiveAchievementReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveachievementreward_resp_ != NULL ? *receiveachievementreward_resp_ : *default_instance().receiveachievementreward_resp_;
#else
  return receiveachievementreward_resp_ != NULL ? *receiveachievementreward_resp_ : *default_instance_->receiveachievementreward_resp_;
#endif
}
inline ::fgame::CSReceiveAchievementRewardResp* S2ClientMsg::mutable_receiveachievementreward_resp() {
  set_has_receiveachievementreward_resp();
  if (receiveachievementreward_resp_ == NULL) receiveachievementreward_resp_ = new ::fgame::CSReceiveAchievementRewardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ReceiveAchievementReward_Resp)
  return receiveachievementreward_resp_;
}
inline ::fgame::CSReceiveAchievementRewardResp* S2ClientMsg::release_receiveachievementreward_resp() {
  clear_has_receiveachievementreward_resp();
  ::fgame::CSReceiveAchievementRewardResp* temp = receiveachievementreward_resp_;
  receiveachievementreward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_receiveachievementreward_resp(::fgame::CSReceiveAchievementRewardResp* receiveachievementreward_resp) {
  delete receiveachievementreward_resp_;
  receiveachievementreward_resp_ = receiveachievementreward_resp;
  if (receiveachievementreward_resp) {
    set_has_receiveachievementreward_resp();
  } else {
    clear_has_receiveachievementreward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ReceiveAchievementReward_Resp)
}

// optional .fgame.CSEnterServerResp EnterServer_Resp = 22;
inline bool S2ClientMsg::has_enterserver_resp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void S2ClientMsg::set_has_enterserver_resp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void S2ClientMsg::clear_has_enterserver_resp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void S2ClientMsg::clear_enterserver_resp() {
  if (enterserver_resp_ != NULL) enterserver_resp_->::fgame::CSEnterServerResp::Clear();
  clear_has_enterserver_resp();
}
inline const ::fgame::CSEnterServerResp& S2ClientMsg::enterserver_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.EnterServer_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return enterserver_resp_ != NULL ? *enterserver_resp_ : *default_instance().enterserver_resp_;
#else
  return enterserver_resp_ != NULL ? *enterserver_resp_ : *default_instance_->enterserver_resp_;
#endif
}
inline ::fgame::CSEnterServerResp* S2ClientMsg::mutable_enterserver_resp() {
  set_has_enterserver_resp();
  if (enterserver_resp_ == NULL) enterserver_resp_ = new ::fgame::CSEnterServerResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.EnterServer_Resp)
  return enterserver_resp_;
}
inline ::fgame::CSEnterServerResp* S2ClientMsg::release_enterserver_resp() {
  clear_has_enterserver_resp();
  ::fgame::CSEnterServerResp* temp = enterserver_resp_;
  enterserver_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_enterserver_resp(::fgame::CSEnterServerResp* enterserver_resp) {
  delete enterserver_resp_;
  enterserver_resp_ = enterserver_resp;
  if (enterserver_resp) {
    set_has_enterserver_resp();
  } else {
    clear_has_enterserver_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.EnterServer_Resp)
}

// optional .fgame.CSCanEnterReq CanEnter_Req = 23;
inline bool S2ClientMsg::has_canenter_req() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void S2ClientMsg::set_has_canenter_req() {
  _has_bits_[0] |= 0x00040000u;
}
inline void S2ClientMsg::clear_has_canenter_req() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void S2ClientMsg::clear_canenter_req() {
  if (canenter_req_ != NULL) canenter_req_->::fgame::CSCanEnterReq::Clear();
  clear_has_canenter_req();
}
inline const ::fgame::CSCanEnterReq& S2ClientMsg::canenter_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.CanEnter_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return canenter_req_ != NULL ? *canenter_req_ : *default_instance().canenter_req_;
#else
  return canenter_req_ != NULL ? *canenter_req_ : *default_instance_->canenter_req_;
#endif
}
inline ::fgame::CSCanEnterReq* S2ClientMsg::mutable_canenter_req() {
  set_has_canenter_req();
  if (canenter_req_ == NULL) canenter_req_ = new ::fgame::CSCanEnterReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.CanEnter_Req)
  return canenter_req_;
}
inline ::fgame::CSCanEnterReq* S2ClientMsg::release_canenter_req() {
  clear_has_canenter_req();
  ::fgame::CSCanEnterReq* temp = canenter_req_;
  canenter_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_canenter_req(::fgame::CSCanEnterReq* canenter_req) {
  delete canenter_req_;
  canenter_req_ = canenter_req;
  if (canenter_req) {
    set_has_canenter_req();
  } else {
    clear_has_canenter_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.CanEnter_Req)
}

// optional .fgame.CSQueueReq Queue_Req = 24;
inline bool S2ClientMsg::has_queue_req() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void S2ClientMsg::set_has_queue_req() {
  _has_bits_[0] |= 0x00080000u;
}
inline void S2ClientMsg::clear_has_queue_req() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void S2ClientMsg::clear_queue_req() {
  if (queue_req_ != NULL) queue_req_->::fgame::CSQueueReq::Clear();
  clear_has_queue_req();
}
inline const ::fgame::CSQueueReq& S2ClientMsg::queue_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Queue_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return queue_req_ != NULL ? *queue_req_ : *default_instance().queue_req_;
#else
  return queue_req_ != NULL ? *queue_req_ : *default_instance_->queue_req_;
#endif
}
inline ::fgame::CSQueueReq* S2ClientMsg::mutable_queue_req() {
  set_has_queue_req();
  if (queue_req_ == NULL) queue_req_ = new ::fgame::CSQueueReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Queue_Req)
  return queue_req_;
}
inline ::fgame::CSQueueReq* S2ClientMsg::release_queue_req() {
  clear_has_queue_req();
  ::fgame::CSQueueReq* temp = queue_req_;
  queue_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_queue_req(::fgame::CSQueueReq* queue_req) {
  delete queue_req_;
  queue_req_ = queue_req;
  if (queue_req) {
    set_has_queue_req();
  } else {
    clear_has_queue_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Queue_Req)
}

// optional .fgame.CSDircetEnterResp DirectEnter_Resp = 25;
inline bool S2ClientMsg::has_directenter_resp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void S2ClientMsg::set_has_directenter_resp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void S2ClientMsg::clear_has_directenter_resp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void S2ClientMsg::clear_directenter_resp() {
  if (directenter_resp_ != NULL) directenter_resp_->::fgame::CSDircetEnterResp::Clear();
  clear_has_directenter_resp();
}
inline const ::fgame::CSDircetEnterResp& S2ClientMsg::directenter_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.DirectEnter_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return directenter_resp_ != NULL ? *directenter_resp_ : *default_instance().directenter_resp_;
#else
  return directenter_resp_ != NULL ? *directenter_resp_ : *default_instance_->directenter_resp_;
#endif
}
inline ::fgame::CSDircetEnterResp* S2ClientMsg::mutable_directenter_resp() {
  set_has_directenter_resp();
  if (directenter_resp_ == NULL) directenter_resp_ = new ::fgame::CSDircetEnterResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.DirectEnter_Resp)
  return directenter_resp_;
}
inline ::fgame::CSDircetEnterResp* S2ClientMsg::release_directenter_resp() {
  clear_has_directenter_resp();
  ::fgame::CSDircetEnterResp* temp = directenter_resp_;
  directenter_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_directenter_resp(::fgame::CSDircetEnterResp* directenter_resp) {
  delete directenter_resp_;
  directenter_resp_ = directenter_resp;
  if (directenter_resp) {
    set_has_directenter_resp();
  } else {
    clear_has_directenter_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.DirectEnter_Resp)
}

// optional .fgame.CSPvpRankingGetListResp PvpRankingGetList_Resp = 26;
inline bool S2ClientMsg::has_pvprankinggetlist_resp() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void S2ClientMsg::set_has_pvprankinggetlist_resp() {
  _has_bits_[0] |= 0x00200000u;
}
inline void S2ClientMsg::clear_has_pvprankinggetlist_resp() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void S2ClientMsg::clear_pvprankinggetlist_resp() {
  if (pvprankinggetlist_resp_ != NULL) pvprankinggetlist_resp_->::fgame::CSPvpRankingGetListResp::Clear();
  clear_has_pvprankinggetlist_resp();
}
inline const ::fgame::CSPvpRankingGetListResp& S2ClientMsg::pvprankinggetlist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpRankingGetList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvprankinggetlist_resp_ != NULL ? *pvprankinggetlist_resp_ : *default_instance().pvprankinggetlist_resp_;
#else
  return pvprankinggetlist_resp_ != NULL ? *pvprankinggetlist_resp_ : *default_instance_->pvprankinggetlist_resp_;
#endif
}
inline ::fgame::CSPvpRankingGetListResp* S2ClientMsg::mutable_pvprankinggetlist_resp() {
  set_has_pvprankinggetlist_resp();
  if (pvprankinggetlist_resp_ == NULL) pvprankinggetlist_resp_ = new ::fgame::CSPvpRankingGetListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpRankingGetList_Resp)
  return pvprankinggetlist_resp_;
}
inline ::fgame::CSPvpRankingGetListResp* S2ClientMsg::release_pvprankinggetlist_resp() {
  clear_has_pvprankinggetlist_resp();
  ::fgame::CSPvpRankingGetListResp* temp = pvprankinggetlist_resp_;
  pvprankinggetlist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvprankinggetlist_resp(::fgame::CSPvpRankingGetListResp* pvprankinggetlist_resp) {
  delete pvprankinggetlist_resp_;
  pvprankinggetlist_resp_ = pvprankinggetlist_resp;
  if (pvprankinggetlist_resp) {
    set_has_pvprankinggetlist_resp();
  } else {
    clear_has_pvprankinggetlist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpRankingGetList_Resp)
}

// optional .fgame.CSStreakWinValueResp StreakWinValue_Resp = 27;
inline bool S2ClientMsg::has_streakwinvalue_resp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void S2ClientMsg::set_has_streakwinvalue_resp() {
  _has_bits_[0] |= 0x00400000u;
}
inline void S2ClientMsg::clear_has_streakwinvalue_resp() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void S2ClientMsg::clear_streakwinvalue_resp() {
  if (streakwinvalue_resp_ != NULL) streakwinvalue_resp_->::fgame::CSStreakWinValueResp::Clear();
  clear_has_streakwinvalue_resp();
}
inline const ::fgame::CSStreakWinValueResp& S2ClientMsg::streakwinvalue_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.StreakWinValue_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return streakwinvalue_resp_ != NULL ? *streakwinvalue_resp_ : *default_instance().streakwinvalue_resp_;
#else
  return streakwinvalue_resp_ != NULL ? *streakwinvalue_resp_ : *default_instance_->streakwinvalue_resp_;
#endif
}
inline ::fgame::CSStreakWinValueResp* S2ClientMsg::mutable_streakwinvalue_resp() {
  set_has_streakwinvalue_resp();
  if (streakwinvalue_resp_ == NULL) streakwinvalue_resp_ = new ::fgame::CSStreakWinValueResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.StreakWinValue_Resp)
  return streakwinvalue_resp_;
}
inline ::fgame::CSStreakWinValueResp* S2ClientMsg::release_streakwinvalue_resp() {
  clear_has_streakwinvalue_resp();
  ::fgame::CSStreakWinValueResp* temp = streakwinvalue_resp_;
  streakwinvalue_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_streakwinvalue_resp(::fgame::CSStreakWinValueResp* streakwinvalue_resp) {
  delete streakwinvalue_resp_;
  streakwinvalue_resp_ = streakwinvalue_resp;
  if (streakwinvalue_resp) {
    set_has_streakwinvalue_resp();
  } else {
    clear_has_streakwinvalue_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.StreakWinValue_Resp)
}

// optional .fgame.CSStreakWinGetResp StreakWinGet_Resp = 28;
inline bool S2ClientMsg::has_streakwinget_resp() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void S2ClientMsg::set_has_streakwinget_resp() {
  _has_bits_[0] |= 0x00800000u;
}
inline void S2ClientMsg::clear_has_streakwinget_resp() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void S2ClientMsg::clear_streakwinget_resp() {
  if (streakwinget_resp_ != NULL) streakwinget_resp_->::fgame::CSStreakWinGetResp::Clear();
  clear_has_streakwinget_resp();
}
inline const ::fgame::CSStreakWinGetResp& S2ClientMsg::streakwinget_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.StreakWinGet_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return streakwinget_resp_ != NULL ? *streakwinget_resp_ : *default_instance().streakwinget_resp_;
#else
  return streakwinget_resp_ != NULL ? *streakwinget_resp_ : *default_instance_->streakwinget_resp_;
#endif
}
inline ::fgame::CSStreakWinGetResp* S2ClientMsg::mutable_streakwinget_resp() {
  set_has_streakwinget_resp();
  if (streakwinget_resp_ == NULL) streakwinget_resp_ = new ::fgame::CSStreakWinGetResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.StreakWinGet_Resp)
  return streakwinget_resp_;
}
inline ::fgame::CSStreakWinGetResp* S2ClientMsg::release_streakwinget_resp() {
  clear_has_streakwinget_resp();
  ::fgame::CSStreakWinGetResp* temp = streakwinget_resp_;
  streakwinget_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_streakwinget_resp(::fgame::CSStreakWinGetResp* streakwinget_resp) {
  delete streakwinget_resp_;
  streakwinget_resp_ = streakwinget_resp;
  if (streakwinget_resp) {
    set_has_streakwinget_resp();
  } else {
    clear_has_streakwinget_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.StreakWinGet_Resp)
}

// optional .fgame.CSOpenBigStageResp OpenBigStage_Resp = 29;
inline bool S2ClientMsg::has_openbigstage_resp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void S2ClientMsg::set_has_openbigstage_resp() {
  _has_bits_[0] |= 0x01000000u;
}
inline void S2ClientMsg::clear_has_openbigstage_resp() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void S2ClientMsg::clear_openbigstage_resp() {
  if (openbigstage_resp_ != NULL) openbigstage_resp_->::fgame::CSOpenBigStageResp::Clear();
  clear_has_openbigstage_resp();
}
inline const ::fgame::CSOpenBigStageResp& S2ClientMsg::openbigstage_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpenBigStage_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return openbigstage_resp_ != NULL ? *openbigstage_resp_ : *default_instance().openbigstage_resp_;
#else
  return openbigstage_resp_ != NULL ? *openbigstage_resp_ : *default_instance_->openbigstage_resp_;
#endif
}
inline ::fgame::CSOpenBigStageResp* S2ClientMsg::mutable_openbigstage_resp() {
  set_has_openbigstage_resp();
  if (openbigstage_resp_ == NULL) openbigstage_resp_ = new ::fgame::CSOpenBigStageResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpenBigStage_Resp)
  return openbigstage_resp_;
}
inline ::fgame::CSOpenBigStageResp* S2ClientMsg::release_openbigstage_resp() {
  clear_has_openbigstage_resp();
  ::fgame::CSOpenBigStageResp* temp = openbigstage_resp_;
  openbigstage_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_openbigstage_resp(::fgame::CSOpenBigStageResp* openbigstage_resp) {
  delete openbigstage_resp_;
  openbigstage_resp_ = openbigstage_resp;
  if (openbigstage_resp) {
    set_has_openbigstage_resp();
  } else {
    clear_has_openbigstage_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpenBigStage_Resp)
}

// optional .fgame.CSPvpUseItemResp PvpUseItem_Resp = 30;
inline bool S2ClientMsg::has_pvpuseitem_resp() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpuseitem_resp() {
  _has_bits_[0] |= 0x02000000u;
}
inline void S2ClientMsg::clear_has_pvpuseitem_resp() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void S2ClientMsg::clear_pvpuseitem_resp() {
  if (pvpuseitem_resp_ != NULL) pvpuseitem_resp_->::fgame::CSPvpUseItemResp::Clear();
  clear_has_pvpuseitem_resp();
}
inline const ::fgame::CSPvpUseItemResp& S2ClientMsg::pvpuseitem_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpUseItem_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpuseitem_resp_ != NULL ? *pvpuseitem_resp_ : *default_instance().pvpuseitem_resp_;
#else
  return pvpuseitem_resp_ != NULL ? *pvpuseitem_resp_ : *default_instance_->pvpuseitem_resp_;
#endif
}
inline ::fgame::CSPvpUseItemResp* S2ClientMsg::mutable_pvpuseitem_resp() {
  set_has_pvpuseitem_resp();
  if (pvpuseitem_resp_ == NULL) pvpuseitem_resp_ = new ::fgame::CSPvpUseItemResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpUseItem_Resp)
  return pvpuseitem_resp_;
}
inline ::fgame::CSPvpUseItemResp* S2ClientMsg::release_pvpuseitem_resp() {
  clear_has_pvpuseitem_resp();
  ::fgame::CSPvpUseItemResp* temp = pvpuseitem_resp_;
  pvpuseitem_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpuseitem_resp(::fgame::CSPvpUseItemResp* pvpuseitem_resp) {
  delete pvpuseitem_resp_;
  pvpuseitem_resp_ = pvpuseitem_resp;
  if (pvpuseitem_resp) {
    set_has_pvpuseitem_resp();
  } else {
    clear_has_pvpuseitem_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpUseItem_Resp)
}

// optional .fgame.CSSevenDaySignListResp SevenDaySignList_Resp = 31;
inline bool S2ClientMsg::has_sevendaysignlist_resp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void S2ClientMsg::set_has_sevendaysignlist_resp() {
  _has_bits_[0] |= 0x04000000u;
}
inline void S2ClientMsg::clear_has_sevendaysignlist_resp() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void S2ClientMsg::clear_sevendaysignlist_resp() {
  if (sevendaysignlist_resp_ != NULL) sevendaysignlist_resp_->::fgame::CSSevenDaySignListResp::Clear();
  clear_has_sevendaysignlist_resp();
}
inline const ::fgame::CSSevenDaySignListResp& S2ClientMsg::sevendaysignlist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SevenDaySignList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sevendaysignlist_resp_ != NULL ? *sevendaysignlist_resp_ : *default_instance().sevendaysignlist_resp_;
#else
  return sevendaysignlist_resp_ != NULL ? *sevendaysignlist_resp_ : *default_instance_->sevendaysignlist_resp_;
#endif
}
inline ::fgame::CSSevenDaySignListResp* S2ClientMsg::mutable_sevendaysignlist_resp() {
  set_has_sevendaysignlist_resp();
  if (sevendaysignlist_resp_ == NULL) sevendaysignlist_resp_ = new ::fgame::CSSevenDaySignListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SevenDaySignList_Resp)
  return sevendaysignlist_resp_;
}
inline ::fgame::CSSevenDaySignListResp* S2ClientMsg::release_sevendaysignlist_resp() {
  clear_has_sevendaysignlist_resp();
  ::fgame::CSSevenDaySignListResp* temp = sevendaysignlist_resp_;
  sevendaysignlist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_sevendaysignlist_resp(::fgame::CSSevenDaySignListResp* sevendaysignlist_resp) {
  delete sevendaysignlist_resp_;
  sevendaysignlist_resp_ = sevendaysignlist_resp;
  if (sevendaysignlist_resp) {
    set_has_sevendaysignlist_resp();
  } else {
    clear_has_sevendaysignlist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SevenDaySignList_Resp)
}

// optional .fgame.CSSevenDaySignResp SevenDaySign_Resp = 32;
inline bool S2ClientMsg::has_sevendaysign_resp() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void S2ClientMsg::set_has_sevendaysign_resp() {
  _has_bits_[0] |= 0x08000000u;
}
inline void S2ClientMsg::clear_has_sevendaysign_resp() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void S2ClientMsg::clear_sevendaysign_resp() {
  if (sevendaysign_resp_ != NULL) sevendaysign_resp_->::fgame::CSSevenDaySignResp::Clear();
  clear_has_sevendaysign_resp();
}
inline const ::fgame::CSSevenDaySignResp& S2ClientMsg::sevendaysign_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SevenDaySign_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sevendaysign_resp_ != NULL ? *sevendaysign_resp_ : *default_instance().sevendaysign_resp_;
#else
  return sevendaysign_resp_ != NULL ? *sevendaysign_resp_ : *default_instance_->sevendaysign_resp_;
#endif
}
inline ::fgame::CSSevenDaySignResp* S2ClientMsg::mutable_sevendaysign_resp() {
  set_has_sevendaysign_resp();
  if (sevendaysign_resp_ == NULL) sevendaysign_resp_ = new ::fgame::CSSevenDaySignResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SevenDaySign_Resp)
  return sevendaysign_resp_;
}
inline ::fgame::CSSevenDaySignResp* S2ClientMsg::release_sevendaysign_resp() {
  clear_has_sevendaysign_resp();
  ::fgame::CSSevenDaySignResp* temp = sevendaysign_resp_;
  sevendaysign_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_sevendaysign_resp(::fgame::CSSevenDaySignResp* sevendaysign_resp) {
  delete sevendaysign_resp_;
  sevendaysign_resp_ = sevendaysign_resp;
  if (sevendaysign_resp) {
    set_has_sevendaysign_resp();
  } else {
    clear_has_sevendaysign_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SevenDaySign_Resp)
}

// optional .fgame.CSGetServerResp GetServer_Resp = 33;
inline bool S2ClientMsg::has_getserver_resp() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void S2ClientMsg::set_has_getserver_resp() {
  _has_bits_[0] |= 0x10000000u;
}
inline void S2ClientMsg::clear_has_getserver_resp() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void S2ClientMsg::clear_getserver_resp() {
  if (getserver_resp_ != NULL) getserver_resp_->::fgame::CSGetServerResp::Clear();
  clear_has_getserver_resp();
}
inline const ::fgame::CSGetServerResp& S2ClientMsg::getserver_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetServer_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getserver_resp_ != NULL ? *getserver_resp_ : *default_instance().getserver_resp_;
#else
  return getserver_resp_ != NULL ? *getserver_resp_ : *default_instance_->getserver_resp_;
#endif
}
inline ::fgame::CSGetServerResp* S2ClientMsg::mutable_getserver_resp() {
  set_has_getserver_resp();
  if (getserver_resp_ == NULL) getserver_resp_ = new ::fgame::CSGetServerResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetServer_Resp)
  return getserver_resp_;
}
inline ::fgame::CSGetServerResp* S2ClientMsg::release_getserver_resp() {
  clear_has_getserver_resp();
  ::fgame::CSGetServerResp* temp = getserver_resp_;
  getserver_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getserver_resp(::fgame::CSGetServerResp* getserver_resp) {
  delete getserver_resp_;
  getserver_resp_ = getserver_resp;
  if (getserver_resp) {
    set_has_getserver_resp();
  } else {
    clear_has_getserver_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetServer_Resp)
}

// optional .fgame.CSSycPlayerInfoResp SycPlayerInfo_Resp = 34;
inline bool S2ClientMsg::has_sycplayerinfo_resp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void S2ClientMsg::set_has_sycplayerinfo_resp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void S2ClientMsg::clear_has_sycplayerinfo_resp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void S2ClientMsg::clear_sycplayerinfo_resp() {
  if (sycplayerinfo_resp_ != NULL) sycplayerinfo_resp_->::fgame::CSSycPlayerInfoResp::Clear();
  clear_has_sycplayerinfo_resp();
}
inline const ::fgame::CSSycPlayerInfoResp& S2ClientMsg::sycplayerinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SycPlayerInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sycplayerinfo_resp_ != NULL ? *sycplayerinfo_resp_ : *default_instance().sycplayerinfo_resp_;
#else
  return sycplayerinfo_resp_ != NULL ? *sycplayerinfo_resp_ : *default_instance_->sycplayerinfo_resp_;
#endif
}
inline ::fgame::CSSycPlayerInfoResp* S2ClientMsg::mutable_sycplayerinfo_resp() {
  set_has_sycplayerinfo_resp();
  if (sycplayerinfo_resp_ == NULL) sycplayerinfo_resp_ = new ::fgame::CSSycPlayerInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SycPlayerInfo_Resp)
  return sycplayerinfo_resp_;
}
inline ::fgame::CSSycPlayerInfoResp* S2ClientMsg::release_sycplayerinfo_resp() {
  clear_has_sycplayerinfo_resp();
  ::fgame::CSSycPlayerInfoResp* temp = sycplayerinfo_resp_;
  sycplayerinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_sycplayerinfo_resp(::fgame::CSSycPlayerInfoResp* sycplayerinfo_resp) {
  delete sycplayerinfo_resp_;
  sycplayerinfo_resp_ = sycplayerinfo_resp;
  if (sycplayerinfo_resp) {
    set_has_sycplayerinfo_resp();
  } else {
    clear_has_sycplayerinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SycPlayerInfo_Resp)
}

// optional .fgame.CSNoticeReq Notice_Req = 35;
inline bool S2ClientMsg::has_notice_req() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void S2ClientMsg::set_has_notice_req() {
  _has_bits_[0] |= 0x40000000u;
}
inline void S2ClientMsg::clear_has_notice_req() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void S2ClientMsg::clear_notice_req() {
  if (notice_req_ != NULL) notice_req_->::fgame::CSNoticeReq::Clear();
  clear_has_notice_req();
}
inline const ::fgame::CSNoticeReq& S2ClientMsg::notice_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.Notice_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notice_req_ != NULL ? *notice_req_ : *default_instance().notice_req_;
#else
  return notice_req_ != NULL ? *notice_req_ : *default_instance_->notice_req_;
#endif
}
inline ::fgame::CSNoticeReq* S2ClientMsg::mutable_notice_req() {
  set_has_notice_req();
  if (notice_req_ == NULL) notice_req_ = new ::fgame::CSNoticeReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.Notice_Req)
  return notice_req_;
}
inline ::fgame::CSNoticeReq* S2ClientMsg::release_notice_req() {
  clear_has_notice_req();
  ::fgame::CSNoticeReq* temp = notice_req_;
  notice_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_notice_req(::fgame::CSNoticeReq* notice_req) {
  delete notice_req_;
  notice_req_ = notice_req;
  if (notice_req) {
    set_has_notice_req();
  } else {
    clear_has_notice_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.Notice_Req)
}

// optional .fgame.CSPvpStopMatchResp StopMatch_Resp = 36;
inline bool S2ClientMsg::has_stopmatch_resp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void S2ClientMsg::set_has_stopmatch_resp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void S2ClientMsg::clear_has_stopmatch_resp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void S2ClientMsg::clear_stopmatch_resp() {
  if (stopmatch_resp_ != NULL) stopmatch_resp_->::fgame::CSPvpStopMatchResp::Clear();
  clear_has_stopmatch_resp();
}
inline const ::fgame::CSPvpStopMatchResp& S2ClientMsg::stopmatch_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.StopMatch_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stopmatch_resp_ != NULL ? *stopmatch_resp_ : *default_instance().stopmatch_resp_;
#else
  return stopmatch_resp_ != NULL ? *stopmatch_resp_ : *default_instance_->stopmatch_resp_;
#endif
}
inline ::fgame::CSPvpStopMatchResp* S2ClientMsg::mutable_stopmatch_resp() {
  set_has_stopmatch_resp();
  if (stopmatch_resp_ == NULL) stopmatch_resp_ = new ::fgame::CSPvpStopMatchResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.StopMatch_Resp)
  return stopmatch_resp_;
}
inline ::fgame::CSPvpStopMatchResp* S2ClientMsg::release_stopmatch_resp() {
  clear_has_stopmatch_resp();
  ::fgame::CSPvpStopMatchResp* temp = stopmatch_resp_;
  stopmatch_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_stopmatch_resp(::fgame::CSPvpStopMatchResp* stopmatch_resp) {
  delete stopmatch_resp_;
  stopmatch_resp_ = stopmatch_resp;
  if (stopmatch_resp) {
    set_has_stopmatch_resp();
  } else {
    clear_has_stopmatch_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.StopMatch_Resp)
}

// optional .fgame.CSChangeNameResp ChangeName_Resp = 37;
inline bool S2ClientMsg::has_changename_resp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_changename_resp() {
  _has_bits_[1] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_changename_resp() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_changename_resp() {
  if (changename_resp_ != NULL) changename_resp_->::fgame::CSChangeNameResp::Clear();
  clear_has_changename_resp();
}
inline const ::fgame::CSChangeNameResp& S2ClientMsg::changename_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChangeName_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changename_resp_ != NULL ? *changename_resp_ : *default_instance().changename_resp_;
#else
  return changename_resp_ != NULL ? *changename_resp_ : *default_instance_->changename_resp_;
#endif
}
inline ::fgame::CSChangeNameResp* S2ClientMsg::mutable_changename_resp() {
  set_has_changename_resp();
  if (changename_resp_ == NULL) changename_resp_ = new ::fgame::CSChangeNameResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChangeName_Resp)
  return changename_resp_;
}
inline ::fgame::CSChangeNameResp* S2ClientMsg::release_changename_resp() {
  clear_has_changename_resp();
  ::fgame::CSChangeNameResp* temp = changename_resp_;
  changename_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_changename_resp(::fgame::CSChangeNameResp* changename_resp) {
  delete changename_resp_;
  changename_resp_ = changename_resp;
  if (changename_resp) {
    set_has_changename_resp();
  } else {
    clear_has_changename_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChangeName_Resp)
}

// optional .fgame.CSGMCmdReq GMCmd_Req = 40;
inline bool S2ClientMsg::has_gmcmd_req() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_gmcmd_req() {
  _has_bits_[1] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_gmcmd_req() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_gmcmd_req() {
  if (gmcmd_req_ != NULL) gmcmd_req_->::fgame::CSGMCmdReq::Clear();
  clear_has_gmcmd_req();
}
inline const ::fgame::CSGMCmdReq& S2ClientMsg::gmcmd_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GMCmd_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gmcmd_req_ != NULL ? *gmcmd_req_ : *default_instance().gmcmd_req_;
#else
  return gmcmd_req_ != NULL ? *gmcmd_req_ : *default_instance_->gmcmd_req_;
#endif
}
inline ::fgame::CSGMCmdReq* S2ClientMsg::mutable_gmcmd_req() {
  set_has_gmcmd_req();
  if (gmcmd_req_ == NULL) gmcmd_req_ = new ::fgame::CSGMCmdReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GMCmd_Req)
  return gmcmd_req_;
}
inline ::fgame::CSGMCmdReq* S2ClientMsg::release_gmcmd_req() {
  clear_has_gmcmd_req();
  ::fgame::CSGMCmdReq* temp = gmcmd_req_;
  gmcmd_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gmcmd_req(::fgame::CSGMCmdReq* gmcmd_req) {
  delete gmcmd_req_;
  gmcmd_req_ = gmcmd_req;
  if (gmcmd_req) {
    set_has_gmcmd_req();
  } else {
    clear_has_gmcmd_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GMCmd_Req)
}

// optional .fgame.CSXinShouRecodeResp XinShouRecode_Resp = 41;
inline bool S2ClientMsg::has_xinshourecode_resp() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_xinshourecode_resp() {
  _has_bits_[1] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_xinshourecode_resp() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_xinshourecode_resp() {
  if (xinshourecode_resp_ != NULL) xinshourecode_resp_->::fgame::CSXinShouRecodeResp::Clear();
  clear_has_xinshourecode_resp();
}
inline const ::fgame::CSXinShouRecodeResp& S2ClientMsg::xinshourecode_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.XinShouRecode_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return xinshourecode_resp_ != NULL ? *xinshourecode_resp_ : *default_instance().xinshourecode_resp_;
#else
  return xinshourecode_resp_ != NULL ? *xinshourecode_resp_ : *default_instance_->xinshourecode_resp_;
#endif
}
inline ::fgame::CSXinShouRecodeResp* S2ClientMsg::mutable_xinshourecode_resp() {
  set_has_xinshourecode_resp();
  if (xinshourecode_resp_ == NULL) xinshourecode_resp_ = new ::fgame::CSXinShouRecodeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.XinShouRecode_Resp)
  return xinshourecode_resp_;
}
inline ::fgame::CSXinShouRecodeResp* S2ClientMsg::release_xinshourecode_resp() {
  clear_has_xinshourecode_resp();
  ::fgame::CSXinShouRecodeResp* temp = xinshourecode_resp_;
  xinshourecode_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_xinshourecode_resp(::fgame::CSXinShouRecodeResp* xinshourecode_resp) {
  delete xinshourecode_resp_;
  xinshourecode_resp_ = xinshourecode_resp;
  if (xinshourecode_resp) {
    set_has_xinshourecode_resp();
  } else {
    clear_has_xinshourecode_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.XinShouRecode_Resp)
}

// optional .fgame.CSPvpRankingPlayerInfoResp PvpRankingPlayerInfo_Resp = 42;
inline bool S2ClientMsg::has_pvprankingplayerinfo_resp() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_pvprankingplayerinfo_resp() {
  _has_bits_[1] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_pvprankingplayerinfo_resp() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_pvprankingplayerinfo_resp() {
  if (pvprankingplayerinfo_resp_ != NULL) pvprankingplayerinfo_resp_->::fgame::CSPvpRankingPlayerInfoResp::Clear();
  clear_has_pvprankingplayerinfo_resp();
}
inline const ::fgame::CSPvpRankingPlayerInfoResp& S2ClientMsg::pvprankingplayerinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpRankingPlayerInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvprankingplayerinfo_resp_ != NULL ? *pvprankingplayerinfo_resp_ : *default_instance().pvprankingplayerinfo_resp_;
#else
  return pvprankingplayerinfo_resp_ != NULL ? *pvprankingplayerinfo_resp_ : *default_instance_->pvprankingplayerinfo_resp_;
#endif
}
inline ::fgame::CSPvpRankingPlayerInfoResp* S2ClientMsg::mutable_pvprankingplayerinfo_resp() {
  set_has_pvprankingplayerinfo_resp();
  if (pvprankingplayerinfo_resp_ == NULL) pvprankingplayerinfo_resp_ = new ::fgame::CSPvpRankingPlayerInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpRankingPlayerInfo_Resp)
  return pvprankingplayerinfo_resp_;
}
inline ::fgame::CSPvpRankingPlayerInfoResp* S2ClientMsg::release_pvprankingplayerinfo_resp() {
  clear_has_pvprankingplayerinfo_resp();
  ::fgame::CSPvpRankingPlayerInfoResp* temp = pvprankingplayerinfo_resp_;
  pvprankingplayerinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvprankingplayerinfo_resp(::fgame::CSPvpRankingPlayerInfoResp* pvprankingplayerinfo_resp) {
  delete pvprankingplayerinfo_resp_;
  pvprankingplayerinfo_resp_ = pvprankingplayerinfo_resp;
  if (pvprankingplayerinfo_resp) {
    set_has_pvprankingplayerinfo_resp();
  } else {
    clear_has_pvprankingplayerinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpRankingPlayerInfo_Resp)
}

// optional .fgame.CSGetOpenActivityResp GetOpenActivity_Resp = 43;
inline bool S2ClientMsg::has_getopenactivity_resp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_getopenactivity_resp() {
  _has_bits_[1] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_getopenactivity_resp() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_getopenactivity_resp() {
  if (getopenactivity_resp_ != NULL) getopenactivity_resp_->::fgame::CSGetOpenActivityResp::Clear();
  clear_has_getopenactivity_resp();
}
inline const ::fgame::CSGetOpenActivityResp& S2ClientMsg::getopenactivity_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetOpenActivity_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getopenactivity_resp_ != NULL ? *getopenactivity_resp_ : *default_instance().getopenactivity_resp_;
#else
  return getopenactivity_resp_ != NULL ? *getopenactivity_resp_ : *default_instance_->getopenactivity_resp_;
#endif
}
inline ::fgame::CSGetOpenActivityResp* S2ClientMsg::mutable_getopenactivity_resp() {
  set_has_getopenactivity_resp();
  if (getopenactivity_resp_ == NULL) getopenactivity_resp_ = new ::fgame::CSGetOpenActivityResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetOpenActivity_Resp)
  return getopenactivity_resp_;
}
inline ::fgame::CSGetOpenActivityResp* S2ClientMsg::release_getopenactivity_resp() {
  clear_has_getopenactivity_resp();
  ::fgame::CSGetOpenActivityResp* temp = getopenactivity_resp_;
  getopenactivity_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getopenactivity_resp(::fgame::CSGetOpenActivityResp* getopenactivity_resp) {
  delete getopenactivity_resp_;
  getopenactivity_resp_ = getopenactivity_resp;
  if (getopenactivity_resp) {
    set_has_getopenactivity_resp();
  } else {
    clear_has_getopenactivity_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetOpenActivity_Resp)
}

// optional .fgame.CSGetActivityDataResp GetActivityData_Resp = 44;
inline bool S2ClientMsg::has_getactivitydata_resp() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_getactivitydata_resp() {
  _has_bits_[1] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_getactivitydata_resp() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_getactivitydata_resp() {
  if (getactivitydata_resp_ != NULL) getactivitydata_resp_->::fgame::CSGetActivityDataResp::Clear();
  clear_has_getactivitydata_resp();
}
inline const ::fgame::CSGetActivityDataResp& S2ClientMsg::getactivitydata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetActivityData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getactivitydata_resp_ != NULL ? *getactivitydata_resp_ : *default_instance().getactivitydata_resp_;
#else
  return getactivitydata_resp_ != NULL ? *getactivitydata_resp_ : *default_instance_->getactivitydata_resp_;
#endif
}
inline ::fgame::CSGetActivityDataResp* S2ClientMsg::mutable_getactivitydata_resp() {
  set_has_getactivitydata_resp();
  if (getactivitydata_resp_ == NULL) getactivitydata_resp_ = new ::fgame::CSGetActivityDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetActivityData_Resp)
  return getactivitydata_resp_;
}
inline ::fgame::CSGetActivityDataResp* S2ClientMsg::release_getactivitydata_resp() {
  clear_has_getactivitydata_resp();
  ::fgame::CSGetActivityDataResp* temp = getactivitydata_resp_;
  getactivitydata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getactivitydata_resp(::fgame::CSGetActivityDataResp* getactivitydata_resp) {
  delete getactivitydata_resp_;
  getactivitydata_resp_ = getactivitydata_resp;
  if (getactivitydata_resp) {
    set_has_getactivitydata_resp();
  } else {
    clear_has_getactivitydata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetActivityData_Resp)
}

// optional .fgame.CSReceiveActivityRewardResp ReceiveActivityReward_Resp = 45;
inline bool S2ClientMsg::has_receiveactivityreward_resp() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_receiveactivityreward_resp() {
  _has_bits_[1] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_receiveactivityreward_resp() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_receiveactivityreward_resp() {
  if (receiveactivityreward_resp_ != NULL) receiveactivityreward_resp_->::fgame::CSReceiveActivityRewardResp::Clear();
  clear_has_receiveactivityreward_resp();
}
inline const ::fgame::CSReceiveActivityRewardResp& S2ClientMsg::receiveactivityreward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ReceiveActivityReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receiveactivityreward_resp_ != NULL ? *receiveactivityreward_resp_ : *default_instance().receiveactivityreward_resp_;
#else
  return receiveactivityreward_resp_ != NULL ? *receiveactivityreward_resp_ : *default_instance_->receiveactivityreward_resp_;
#endif
}
inline ::fgame::CSReceiveActivityRewardResp* S2ClientMsg::mutable_receiveactivityreward_resp() {
  set_has_receiveactivityreward_resp();
  if (receiveactivityreward_resp_ == NULL) receiveactivityreward_resp_ = new ::fgame::CSReceiveActivityRewardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ReceiveActivityReward_Resp)
  return receiveactivityreward_resp_;
}
inline ::fgame::CSReceiveActivityRewardResp* S2ClientMsg::release_receiveactivityreward_resp() {
  clear_has_receiveactivityreward_resp();
  ::fgame::CSReceiveActivityRewardResp* temp = receiveactivityreward_resp_;
  receiveactivityreward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_receiveactivityreward_resp(::fgame::CSReceiveActivityRewardResp* receiveactivityreward_resp) {
  delete receiveactivityreward_resp_;
  receiveactivityreward_resp_ = receiveactivityreward_resp;
  if (receiveactivityreward_resp) {
    set_has_receiveactivityreward_resp();
  } else {
    clear_has_receiveactivityreward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ReceiveActivityReward_Resp)
}

// optional .fgame.CSMissionListResp MissionList_Resp = 46;
inline bool S2ClientMsg::has_missionlist_resp() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_missionlist_resp() {
  _has_bits_[1] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_missionlist_resp() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_missionlist_resp() {
  if (missionlist_resp_ != NULL) missionlist_resp_->::fgame::CSMissionListResp::Clear();
  clear_has_missionlist_resp();
}
inline const ::fgame::CSMissionListResp& S2ClientMsg::missionlist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.MissionList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return missionlist_resp_ != NULL ? *missionlist_resp_ : *default_instance().missionlist_resp_;
#else
  return missionlist_resp_ != NULL ? *missionlist_resp_ : *default_instance_->missionlist_resp_;
#endif
}
inline ::fgame::CSMissionListResp* S2ClientMsg::mutable_missionlist_resp() {
  set_has_missionlist_resp();
  if (missionlist_resp_ == NULL) missionlist_resp_ = new ::fgame::CSMissionListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.MissionList_Resp)
  return missionlist_resp_;
}
inline ::fgame::CSMissionListResp* S2ClientMsg::release_missionlist_resp() {
  clear_has_missionlist_resp();
  ::fgame::CSMissionListResp* temp = missionlist_resp_;
  missionlist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_missionlist_resp(::fgame::CSMissionListResp* missionlist_resp) {
  delete missionlist_resp_;
  missionlist_resp_ = missionlist_resp;
  if (missionlist_resp) {
    set_has_missionlist_resp();
  } else {
    clear_has_missionlist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.MissionList_Resp)
}

// optional .fgame.CSMissionCompleteResp MissionComplete_Resp = 47;
inline bool S2ClientMsg::has_missioncomplete_resp() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_missioncomplete_resp() {
  _has_bits_[1] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_missioncomplete_resp() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_missioncomplete_resp() {
  if (missioncomplete_resp_ != NULL) missioncomplete_resp_->::fgame::CSMissionCompleteResp::Clear();
  clear_has_missioncomplete_resp();
}
inline const ::fgame::CSMissionCompleteResp& S2ClientMsg::missioncomplete_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.MissionComplete_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return missioncomplete_resp_ != NULL ? *missioncomplete_resp_ : *default_instance().missioncomplete_resp_;
#else
  return missioncomplete_resp_ != NULL ? *missioncomplete_resp_ : *default_instance_->missioncomplete_resp_;
#endif
}
inline ::fgame::CSMissionCompleteResp* S2ClientMsg::mutable_missioncomplete_resp() {
  set_has_missioncomplete_resp();
  if (missioncomplete_resp_ == NULL) missioncomplete_resp_ = new ::fgame::CSMissionCompleteResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.MissionComplete_Resp)
  return missioncomplete_resp_;
}
inline ::fgame::CSMissionCompleteResp* S2ClientMsg::release_missioncomplete_resp() {
  clear_has_missioncomplete_resp();
  ::fgame::CSMissionCompleteResp* temp = missioncomplete_resp_;
  missioncomplete_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_missioncomplete_resp(::fgame::CSMissionCompleteResp* missioncomplete_resp) {
  delete missioncomplete_resp_;
  missioncomplete_resp_ = missioncomplete_resp;
  if (missioncomplete_resp) {
    set_has_missioncomplete_resp();
  } else {
    clear_has_missioncomplete_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.MissionComplete_Resp)
}

// optional .fgame.CSMissionUpdateResp MissionUpdate_Resp = 48;
inline bool S2ClientMsg::has_missionupdate_resp() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void S2ClientMsg::set_has_missionupdate_resp() {
  _has_bits_[1] |= 0x00000200u;
}
inline void S2ClientMsg::clear_has_missionupdate_resp() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void S2ClientMsg::clear_missionupdate_resp() {
  if (missionupdate_resp_ != NULL) missionupdate_resp_->::fgame::CSMissionUpdateResp::Clear();
  clear_has_missionupdate_resp();
}
inline const ::fgame::CSMissionUpdateResp& S2ClientMsg::missionupdate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.MissionUpdate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return missionupdate_resp_ != NULL ? *missionupdate_resp_ : *default_instance().missionupdate_resp_;
#else
  return missionupdate_resp_ != NULL ? *missionupdate_resp_ : *default_instance_->missionupdate_resp_;
#endif
}
inline ::fgame::CSMissionUpdateResp* S2ClientMsg::mutable_missionupdate_resp() {
  set_has_missionupdate_resp();
  if (missionupdate_resp_ == NULL) missionupdate_resp_ = new ::fgame::CSMissionUpdateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.MissionUpdate_Resp)
  return missionupdate_resp_;
}
inline ::fgame::CSMissionUpdateResp* S2ClientMsg::release_missionupdate_resp() {
  clear_has_missionupdate_resp();
  ::fgame::CSMissionUpdateResp* temp = missionupdate_resp_;
  missionupdate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_missionupdate_resp(::fgame::CSMissionUpdateResp* missionupdate_resp) {
  delete missionupdate_resp_;
  missionupdate_resp_ = missionupdate_resp;
  if (missionupdate_resp) {
    set_has_missionupdate_resp();
  } else {
    clear_has_missionupdate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.MissionUpdate_Resp)
}

// optional .fgame.CSGetPowerEnergyActivityResp GetPowerEnergyActivity_Resp = 49;
inline bool S2ClientMsg::has_getpowerenergyactivity_resp() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void S2ClientMsg::set_has_getpowerenergyactivity_resp() {
  _has_bits_[1] |= 0x00000400u;
}
inline void S2ClientMsg::clear_has_getpowerenergyactivity_resp() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void S2ClientMsg::clear_getpowerenergyactivity_resp() {
  if (getpowerenergyactivity_resp_ != NULL) getpowerenergyactivity_resp_->::fgame::CSGetPowerEnergyActivityResp::Clear();
  clear_has_getpowerenergyactivity_resp();
}
inline const ::fgame::CSGetPowerEnergyActivityResp& S2ClientMsg::getpowerenergyactivity_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetPowerEnergyActivity_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getpowerenergyactivity_resp_ != NULL ? *getpowerenergyactivity_resp_ : *default_instance().getpowerenergyactivity_resp_;
#else
  return getpowerenergyactivity_resp_ != NULL ? *getpowerenergyactivity_resp_ : *default_instance_->getpowerenergyactivity_resp_;
#endif
}
inline ::fgame::CSGetPowerEnergyActivityResp* S2ClientMsg::mutable_getpowerenergyactivity_resp() {
  set_has_getpowerenergyactivity_resp();
  if (getpowerenergyactivity_resp_ == NULL) getpowerenergyactivity_resp_ = new ::fgame::CSGetPowerEnergyActivityResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetPowerEnergyActivity_Resp)
  return getpowerenergyactivity_resp_;
}
inline ::fgame::CSGetPowerEnergyActivityResp* S2ClientMsg::release_getpowerenergyactivity_resp() {
  clear_has_getpowerenergyactivity_resp();
  ::fgame::CSGetPowerEnergyActivityResp* temp = getpowerenergyactivity_resp_;
  getpowerenergyactivity_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getpowerenergyactivity_resp(::fgame::CSGetPowerEnergyActivityResp* getpowerenergyactivity_resp) {
  delete getpowerenergyactivity_resp_;
  getpowerenergyactivity_resp_ = getpowerenergyactivity_resp;
  if (getpowerenergyactivity_resp) {
    set_has_getpowerenergyactivity_resp();
  } else {
    clear_has_getpowerenergyactivity_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetPowerEnergyActivity_Resp)
}

// optional .fgame.CSReceivePowerEnergyResp ReceivePowerEnergy_Resp = 50;
inline bool S2ClientMsg::has_receivepowerenergy_resp() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void S2ClientMsg::set_has_receivepowerenergy_resp() {
  _has_bits_[1] |= 0x00000800u;
}
inline void S2ClientMsg::clear_has_receivepowerenergy_resp() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void S2ClientMsg::clear_receivepowerenergy_resp() {
  if (receivepowerenergy_resp_ != NULL) receivepowerenergy_resp_->::fgame::CSReceivePowerEnergyResp::Clear();
  clear_has_receivepowerenergy_resp();
}
inline const ::fgame::CSReceivePowerEnergyResp& S2ClientMsg::receivepowerenergy_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ReceivePowerEnergy_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receivepowerenergy_resp_ != NULL ? *receivepowerenergy_resp_ : *default_instance().receivepowerenergy_resp_;
#else
  return receivepowerenergy_resp_ != NULL ? *receivepowerenergy_resp_ : *default_instance_->receivepowerenergy_resp_;
#endif
}
inline ::fgame::CSReceivePowerEnergyResp* S2ClientMsg::mutable_receivepowerenergy_resp() {
  set_has_receivepowerenergy_resp();
  if (receivepowerenergy_resp_ == NULL) receivepowerenergy_resp_ = new ::fgame::CSReceivePowerEnergyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ReceivePowerEnergy_Resp)
  return receivepowerenergy_resp_;
}
inline ::fgame::CSReceivePowerEnergyResp* S2ClientMsg::release_receivepowerenergy_resp() {
  clear_has_receivepowerenergy_resp();
  ::fgame::CSReceivePowerEnergyResp* temp = receivepowerenergy_resp_;
  receivepowerenergy_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_receivepowerenergy_resp(::fgame::CSReceivePowerEnergyResp* receivepowerenergy_resp) {
  delete receivepowerenergy_resp_;
  receivepowerenergy_resp_ = receivepowerenergy_resp;
  if (receivepowerenergy_resp) {
    set_has_receivepowerenergy_resp();
  } else {
    clear_has_receivepowerenergy_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ReceivePowerEnergy_Resp)
}

// optional .fgame.CSGetMailResp GetMail_Resp = 51;
inline bool S2ClientMsg::has_getmail_resp() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void S2ClientMsg::set_has_getmail_resp() {
  _has_bits_[1] |= 0x00001000u;
}
inline void S2ClientMsg::clear_has_getmail_resp() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void S2ClientMsg::clear_getmail_resp() {
  if (getmail_resp_ != NULL) getmail_resp_->::fgame::CSGetMailResp::Clear();
  clear_has_getmail_resp();
}
inline const ::fgame::CSGetMailResp& S2ClientMsg::getmail_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetMail_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getmail_resp_ != NULL ? *getmail_resp_ : *default_instance().getmail_resp_;
#else
  return getmail_resp_ != NULL ? *getmail_resp_ : *default_instance_->getmail_resp_;
#endif
}
inline ::fgame::CSGetMailResp* S2ClientMsg::mutable_getmail_resp() {
  set_has_getmail_resp();
  if (getmail_resp_ == NULL) getmail_resp_ = new ::fgame::CSGetMailResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetMail_Resp)
  return getmail_resp_;
}
inline ::fgame::CSGetMailResp* S2ClientMsg::release_getmail_resp() {
  clear_has_getmail_resp();
  ::fgame::CSGetMailResp* temp = getmail_resp_;
  getmail_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getmail_resp(::fgame::CSGetMailResp* getmail_resp) {
  delete getmail_resp_;
  getmail_resp_ = getmail_resp;
  if (getmail_resp) {
    set_has_getmail_resp();
  } else {
    clear_has_getmail_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetMail_Resp)
}

// optional .fgame.CSDelMailResp DelMail_Resp = 52;
inline bool S2ClientMsg::has_delmail_resp() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void S2ClientMsg::set_has_delmail_resp() {
  _has_bits_[1] |= 0x00002000u;
}
inline void S2ClientMsg::clear_has_delmail_resp() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void S2ClientMsg::clear_delmail_resp() {
  if (delmail_resp_ != NULL) delmail_resp_->::fgame::CSDelMailResp::Clear();
  clear_has_delmail_resp();
}
inline const ::fgame::CSDelMailResp& S2ClientMsg::delmail_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.DelMail_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return delmail_resp_ != NULL ? *delmail_resp_ : *default_instance().delmail_resp_;
#else
  return delmail_resp_ != NULL ? *delmail_resp_ : *default_instance_->delmail_resp_;
#endif
}
inline ::fgame::CSDelMailResp* S2ClientMsg::mutable_delmail_resp() {
  set_has_delmail_resp();
  if (delmail_resp_ == NULL) delmail_resp_ = new ::fgame::CSDelMailResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.DelMail_Resp)
  return delmail_resp_;
}
inline ::fgame::CSDelMailResp* S2ClientMsg::release_delmail_resp() {
  clear_has_delmail_resp();
  ::fgame::CSDelMailResp* temp = delmail_resp_;
  delmail_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_delmail_resp(::fgame::CSDelMailResp* delmail_resp) {
  delete delmail_resp_;
  delmail_resp_ = delmail_resp;
  if (delmail_resp) {
    set_has_delmail_resp();
  } else {
    clear_has_delmail_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.DelMail_Resp)
}

// optional .fgame.CSNoticeMailReq NoticeMail_Req = 53;
inline bool S2ClientMsg::has_noticemail_req() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void S2ClientMsg::set_has_noticemail_req() {
  _has_bits_[1] |= 0x00004000u;
}
inline void S2ClientMsg::clear_has_noticemail_req() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void S2ClientMsg::clear_noticemail_req() {
  if (noticemail_req_ != NULL) noticemail_req_->::fgame::CSNoticeMailReq::Clear();
  clear_has_noticemail_req();
}
inline const ::fgame::CSNoticeMailReq& S2ClientMsg::noticemail_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NoticeMail_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return noticemail_req_ != NULL ? *noticemail_req_ : *default_instance().noticemail_req_;
#else
  return noticemail_req_ != NULL ? *noticemail_req_ : *default_instance_->noticemail_req_;
#endif
}
inline ::fgame::CSNoticeMailReq* S2ClientMsg::mutable_noticemail_req() {
  set_has_noticemail_req();
  if (noticemail_req_ == NULL) noticemail_req_ = new ::fgame::CSNoticeMailReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NoticeMail_Req)
  return noticemail_req_;
}
inline ::fgame::CSNoticeMailReq* S2ClientMsg::release_noticemail_req() {
  clear_has_noticemail_req();
  ::fgame::CSNoticeMailReq* temp = noticemail_req_;
  noticemail_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_noticemail_req(::fgame::CSNoticeMailReq* noticemail_req) {
  delete noticemail_req_;
  noticemail_req_ = noticemail_req;
  if (noticemail_req) {
    set_has_noticemail_req();
  } else {
    clear_has_noticemail_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NoticeMail_Req)
}

// optional .fgame.CSBuyNewbieGiftResp BuyNewbieGift_Resp = 54;
inline bool S2ClientMsg::has_buynewbiegift_resp() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void S2ClientMsg::set_has_buynewbiegift_resp() {
  _has_bits_[1] |= 0x00008000u;
}
inline void S2ClientMsg::clear_has_buynewbiegift_resp() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void S2ClientMsg::clear_buynewbiegift_resp() {
  if (buynewbiegift_resp_ != NULL) buynewbiegift_resp_->::fgame::CSBuyNewbieGiftResp::Clear();
  clear_has_buynewbiegift_resp();
}
inline const ::fgame::CSBuyNewbieGiftResp& S2ClientMsg::buynewbiegift_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.BuyNewbieGift_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buynewbiegift_resp_ != NULL ? *buynewbiegift_resp_ : *default_instance().buynewbiegift_resp_;
#else
  return buynewbiegift_resp_ != NULL ? *buynewbiegift_resp_ : *default_instance_->buynewbiegift_resp_;
#endif
}
inline ::fgame::CSBuyNewbieGiftResp* S2ClientMsg::mutable_buynewbiegift_resp() {
  set_has_buynewbiegift_resp();
  if (buynewbiegift_resp_ == NULL) buynewbiegift_resp_ = new ::fgame::CSBuyNewbieGiftResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.BuyNewbieGift_Resp)
  return buynewbiegift_resp_;
}
inline ::fgame::CSBuyNewbieGiftResp* S2ClientMsg::release_buynewbiegift_resp() {
  clear_has_buynewbiegift_resp();
  ::fgame::CSBuyNewbieGiftResp* temp = buynewbiegift_resp_;
  buynewbiegift_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_buynewbiegift_resp(::fgame::CSBuyNewbieGiftResp* buynewbiegift_resp) {
  delete buynewbiegift_resp_;
  buynewbiegift_resp_ = buynewbiegift_resp;
  if (buynewbiegift_resp) {
    set_has_buynewbiegift_resp();
  } else {
    clear_has_buynewbiegift_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.BuyNewbieGift_Resp)
}

// optional .fgame.CSRechargeCallbackResp RechargeCallback_Resp = 55;
inline bool S2ClientMsg::has_rechargecallback_resp() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void S2ClientMsg::set_has_rechargecallback_resp() {
  _has_bits_[1] |= 0x00010000u;
}
inline void S2ClientMsg::clear_has_rechargecallback_resp() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void S2ClientMsg::clear_rechargecallback_resp() {
  if (rechargecallback_resp_ != NULL) rechargecallback_resp_->::fgame::CSRechargeCallbackResp::Clear();
  clear_has_rechargecallback_resp();
}
inline const ::fgame::CSRechargeCallbackResp& S2ClientMsg::rechargecallback_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RechargeCallback_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rechargecallback_resp_ != NULL ? *rechargecallback_resp_ : *default_instance().rechargecallback_resp_;
#else
  return rechargecallback_resp_ != NULL ? *rechargecallback_resp_ : *default_instance_->rechargecallback_resp_;
#endif
}
inline ::fgame::CSRechargeCallbackResp* S2ClientMsg::mutable_rechargecallback_resp() {
  set_has_rechargecallback_resp();
  if (rechargecallback_resp_ == NULL) rechargecallback_resp_ = new ::fgame::CSRechargeCallbackResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RechargeCallback_Resp)
  return rechargecallback_resp_;
}
inline ::fgame::CSRechargeCallbackResp* S2ClientMsg::release_rechargecallback_resp() {
  clear_has_rechargecallback_resp();
  ::fgame::CSRechargeCallbackResp* temp = rechargecallback_resp_;
  rechargecallback_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_rechargecallback_resp(::fgame::CSRechargeCallbackResp* rechargecallback_resp) {
  delete rechargecallback_resp_;
  rechargecallback_resp_ = rechargecallback_resp;
  if (rechargecallback_resp) {
    set_has_rechargecallback_resp();
  } else {
    clear_has_rechargecallback_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RechargeCallback_Resp)
}

// optional .fgame.CSFriendQueryResp FriendQuery_Resp = 56;
inline bool S2ClientMsg::has_friendquery_resp() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void S2ClientMsg::set_has_friendquery_resp() {
  _has_bits_[1] |= 0x00020000u;
}
inline void S2ClientMsg::clear_has_friendquery_resp() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void S2ClientMsg::clear_friendquery_resp() {
  if (friendquery_resp_ != NULL) friendquery_resp_->::fgame::CSFriendQueryResp::Clear();
  clear_has_friendquery_resp();
}
inline const ::fgame::CSFriendQueryResp& S2ClientMsg::friendquery_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendQuery_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendquery_resp_ != NULL ? *friendquery_resp_ : *default_instance().friendquery_resp_;
#else
  return friendquery_resp_ != NULL ? *friendquery_resp_ : *default_instance_->friendquery_resp_;
#endif
}
inline ::fgame::CSFriendQueryResp* S2ClientMsg::mutable_friendquery_resp() {
  set_has_friendquery_resp();
  if (friendquery_resp_ == NULL) friendquery_resp_ = new ::fgame::CSFriendQueryResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendQuery_Resp)
  return friendquery_resp_;
}
inline ::fgame::CSFriendQueryResp* S2ClientMsg::release_friendquery_resp() {
  clear_has_friendquery_resp();
  ::fgame::CSFriendQueryResp* temp = friendquery_resp_;
  friendquery_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendquery_resp(::fgame::CSFriendQueryResp* friendquery_resp) {
  delete friendquery_resp_;
  friendquery_resp_ = friendquery_resp;
  if (friendquery_resp) {
    set_has_friendquery_resp();
  } else {
    clear_has_friendquery_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendQuery_Resp)
}

// optional .fgame.CSFriendRequestAddResp FriendRequestAdd_Resp = 57;
inline bool S2ClientMsg::has_friendrequestadd_resp() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void S2ClientMsg::set_has_friendrequestadd_resp() {
  _has_bits_[1] |= 0x00040000u;
}
inline void S2ClientMsg::clear_has_friendrequestadd_resp() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void S2ClientMsg::clear_friendrequestadd_resp() {
  if (friendrequestadd_resp_ != NULL) friendrequestadd_resp_->::fgame::CSFriendRequestAddResp::Clear();
  clear_has_friendrequestadd_resp();
}
inline const ::fgame::CSFriendRequestAddResp& S2ClientMsg::friendrequestadd_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendRequestAdd_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendrequestadd_resp_ != NULL ? *friendrequestadd_resp_ : *default_instance().friendrequestadd_resp_;
#else
  return friendrequestadd_resp_ != NULL ? *friendrequestadd_resp_ : *default_instance_->friendrequestadd_resp_;
#endif
}
inline ::fgame::CSFriendRequestAddResp* S2ClientMsg::mutable_friendrequestadd_resp() {
  set_has_friendrequestadd_resp();
  if (friendrequestadd_resp_ == NULL) friendrequestadd_resp_ = new ::fgame::CSFriendRequestAddResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendRequestAdd_Resp)
  return friendrequestadd_resp_;
}
inline ::fgame::CSFriendRequestAddResp* S2ClientMsg::release_friendrequestadd_resp() {
  clear_has_friendrequestadd_resp();
  ::fgame::CSFriendRequestAddResp* temp = friendrequestadd_resp_;
  friendrequestadd_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendrequestadd_resp(::fgame::CSFriendRequestAddResp* friendrequestadd_resp) {
  delete friendrequestadd_resp_;
  friendrequestadd_resp_ = friendrequestadd_resp;
  if (friendrequestadd_resp) {
    set_has_friendrequestadd_resp();
  } else {
    clear_has_friendrequestadd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendRequestAdd_Resp)
}

// optional .fgame.CSFriendConfirmAddResp FriendConfirmAdd_Resp = 58;
inline bool S2ClientMsg::has_friendconfirmadd_resp() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void S2ClientMsg::set_has_friendconfirmadd_resp() {
  _has_bits_[1] |= 0x00080000u;
}
inline void S2ClientMsg::clear_has_friendconfirmadd_resp() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void S2ClientMsg::clear_friendconfirmadd_resp() {
  if (friendconfirmadd_resp_ != NULL) friendconfirmadd_resp_->::fgame::CSFriendConfirmAddResp::Clear();
  clear_has_friendconfirmadd_resp();
}
inline const ::fgame::CSFriendConfirmAddResp& S2ClientMsg::friendconfirmadd_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendConfirmAdd_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendconfirmadd_resp_ != NULL ? *friendconfirmadd_resp_ : *default_instance().friendconfirmadd_resp_;
#else
  return friendconfirmadd_resp_ != NULL ? *friendconfirmadd_resp_ : *default_instance_->friendconfirmadd_resp_;
#endif
}
inline ::fgame::CSFriendConfirmAddResp* S2ClientMsg::mutable_friendconfirmadd_resp() {
  set_has_friendconfirmadd_resp();
  if (friendconfirmadd_resp_ == NULL) friendconfirmadd_resp_ = new ::fgame::CSFriendConfirmAddResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendConfirmAdd_Resp)
  return friendconfirmadd_resp_;
}
inline ::fgame::CSFriendConfirmAddResp* S2ClientMsg::release_friendconfirmadd_resp() {
  clear_has_friendconfirmadd_resp();
  ::fgame::CSFriendConfirmAddResp* temp = friendconfirmadd_resp_;
  friendconfirmadd_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendconfirmadd_resp(::fgame::CSFriendConfirmAddResp* friendconfirmadd_resp) {
  delete friendconfirmadd_resp_;
  friendconfirmadd_resp_ = friendconfirmadd_resp;
  if (friendconfirmadd_resp) {
    set_has_friendconfirmadd_resp();
  } else {
    clear_has_friendconfirmadd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendConfirmAdd_Resp)
}

// optional .fgame.CSFriendGetInfoResp FriendGetInfo_Resp = 59;
inline bool S2ClientMsg::has_friendgetinfo_resp() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void S2ClientMsg::set_has_friendgetinfo_resp() {
  _has_bits_[1] |= 0x00100000u;
}
inline void S2ClientMsg::clear_has_friendgetinfo_resp() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void S2ClientMsg::clear_friendgetinfo_resp() {
  if (friendgetinfo_resp_ != NULL) friendgetinfo_resp_->::fgame::CSFriendGetInfoResp::Clear();
  clear_has_friendgetinfo_resp();
}
inline const ::fgame::CSFriendGetInfoResp& S2ClientMsg::friendgetinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendGetInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendgetinfo_resp_ != NULL ? *friendgetinfo_resp_ : *default_instance().friendgetinfo_resp_;
#else
  return friendgetinfo_resp_ != NULL ? *friendgetinfo_resp_ : *default_instance_->friendgetinfo_resp_;
#endif
}
inline ::fgame::CSFriendGetInfoResp* S2ClientMsg::mutable_friendgetinfo_resp() {
  set_has_friendgetinfo_resp();
  if (friendgetinfo_resp_ == NULL) friendgetinfo_resp_ = new ::fgame::CSFriendGetInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendGetInfo_Resp)
  return friendgetinfo_resp_;
}
inline ::fgame::CSFriendGetInfoResp* S2ClientMsg::release_friendgetinfo_resp() {
  clear_has_friendgetinfo_resp();
  ::fgame::CSFriendGetInfoResp* temp = friendgetinfo_resp_;
  friendgetinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendgetinfo_resp(::fgame::CSFriendGetInfoResp* friendgetinfo_resp) {
  delete friendgetinfo_resp_;
  friendgetinfo_resp_ = friendgetinfo_resp;
  if (friendgetinfo_resp) {
    set_has_friendgetinfo_resp();
  } else {
    clear_has_friendgetinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendGetInfo_Resp)
}

// optional .fgame.CSFriendRequestRemoveResp FriendRequestRemove_Resp = 60;
inline bool S2ClientMsg::has_friendrequestremove_resp() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void S2ClientMsg::set_has_friendrequestremove_resp() {
  _has_bits_[1] |= 0x00200000u;
}
inline void S2ClientMsg::clear_has_friendrequestremove_resp() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void S2ClientMsg::clear_friendrequestremove_resp() {
  if (friendrequestremove_resp_ != NULL) friendrequestremove_resp_->::fgame::CSFriendRequestRemoveResp::Clear();
  clear_has_friendrequestremove_resp();
}
inline const ::fgame::CSFriendRequestRemoveResp& S2ClientMsg::friendrequestremove_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendRequestRemove_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendrequestremove_resp_ != NULL ? *friendrequestremove_resp_ : *default_instance().friendrequestremove_resp_;
#else
  return friendrequestremove_resp_ != NULL ? *friendrequestremove_resp_ : *default_instance_->friendrequestremove_resp_;
#endif
}
inline ::fgame::CSFriendRequestRemoveResp* S2ClientMsg::mutable_friendrequestremove_resp() {
  set_has_friendrequestremove_resp();
  if (friendrequestremove_resp_ == NULL) friendrequestremove_resp_ = new ::fgame::CSFriendRequestRemoveResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendRequestRemove_Resp)
  return friendrequestremove_resp_;
}
inline ::fgame::CSFriendRequestRemoveResp* S2ClientMsg::release_friendrequestremove_resp() {
  clear_has_friendrequestremove_resp();
  ::fgame::CSFriendRequestRemoveResp* temp = friendrequestremove_resp_;
  friendrequestremove_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendrequestremove_resp(::fgame::CSFriendRequestRemoveResp* friendrequestremove_resp) {
  delete friendrequestremove_resp_;
  friendrequestremove_resp_ = friendrequestremove_resp;
  if (friendrequestremove_resp) {
    set_has_friendrequestremove_resp();
  } else {
    clear_has_friendrequestremove_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendRequestRemove_Resp)
}

// optional .fgame.CSFriendAddBlackListResp FriendAddBlackList_Resp = 61;
inline bool S2ClientMsg::has_friendaddblacklist_resp() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void S2ClientMsg::set_has_friendaddblacklist_resp() {
  _has_bits_[1] |= 0x00400000u;
}
inline void S2ClientMsg::clear_has_friendaddblacklist_resp() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void S2ClientMsg::clear_friendaddblacklist_resp() {
  if (friendaddblacklist_resp_ != NULL) friendaddblacklist_resp_->::fgame::CSFriendAddBlackListResp::Clear();
  clear_has_friendaddblacklist_resp();
}
inline const ::fgame::CSFriendAddBlackListResp& S2ClientMsg::friendaddblacklist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendAddBlackList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendaddblacklist_resp_ != NULL ? *friendaddblacklist_resp_ : *default_instance().friendaddblacklist_resp_;
#else
  return friendaddblacklist_resp_ != NULL ? *friendaddblacklist_resp_ : *default_instance_->friendaddblacklist_resp_;
#endif
}
inline ::fgame::CSFriendAddBlackListResp* S2ClientMsg::mutable_friendaddblacklist_resp() {
  set_has_friendaddblacklist_resp();
  if (friendaddblacklist_resp_ == NULL) friendaddblacklist_resp_ = new ::fgame::CSFriendAddBlackListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendAddBlackList_Resp)
  return friendaddblacklist_resp_;
}
inline ::fgame::CSFriendAddBlackListResp* S2ClientMsg::release_friendaddblacklist_resp() {
  clear_has_friendaddblacklist_resp();
  ::fgame::CSFriendAddBlackListResp* temp = friendaddblacklist_resp_;
  friendaddblacklist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendaddblacklist_resp(::fgame::CSFriendAddBlackListResp* friendaddblacklist_resp) {
  delete friendaddblacklist_resp_;
  friendaddblacklist_resp_ = friendaddblacklist_resp;
  if (friendaddblacklist_resp) {
    set_has_friendaddblacklist_resp();
  } else {
    clear_has_friendaddblacklist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendAddBlackList_Resp)
}

// optional .fgame.CSFriendRemoveBlackListResp FriendRemoveBlackList_Resp = 62;
inline bool S2ClientMsg::has_friendremoveblacklist_resp() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void S2ClientMsg::set_has_friendremoveblacklist_resp() {
  _has_bits_[1] |= 0x00800000u;
}
inline void S2ClientMsg::clear_has_friendremoveblacklist_resp() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void S2ClientMsg::clear_friendremoveblacklist_resp() {
  if (friendremoveblacklist_resp_ != NULL) friendremoveblacklist_resp_->::fgame::CSFriendRemoveBlackListResp::Clear();
  clear_has_friendremoveblacklist_resp();
}
inline const ::fgame::CSFriendRemoveBlackListResp& S2ClientMsg::friendremoveblacklist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.FriendRemoveBlackList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendremoveblacklist_resp_ != NULL ? *friendremoveblacklist_resp_ : *default_instance().friendremoveblacklist_resp_;
#else
  return friendremoveblacklist_resp_ != NULL ? *friendremoveblacklist_resp_ : *default_instance_->friendremoveblacklist_resp_;
#endif
}
inline ::fgame::CSFriendRemoveBlackListResp* S2ClientMsg::mutable_friendremoveblacklist_resp() {
  set_has_friendremoveblacklist_resp();
  if (friendremoveblacklist_resp_ == NULL) friendremoveblacklist_resp_ = new ::fgame::CSFriendRemoveBlackListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.FriendRemoveBlackList_Resp)
  return friendremoveblacklist_resp_;
}
inline ::fgame::CSFriendRemoveBlackListResp* S2ClientMsg::release_friendremoveblacklist_resp() {
  clear_has_friendremoveblacklist_resp();
  ::fgame::CSFriendRemoveBlackListResp* temp = friendremoveblacklist_resp_;
  friendremoveblacklist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_friendremoveblacklist_resp(::fgame::CSFriendRemoveBlackListResp* friendremoveblacklist_resp) {
  delete friendremoveblacklist_resp_;
  friendremoveblacklist_resp_ = friendremoveblacklist_resp;
  if (friendremoveblacklist_resp) {
    set_has_friendremoveblacklist_resp();
  } else {
    clear_has_friendremoveblacklist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.FriendRemoveBlackList_Resp)
}

// optional .fgame.CSPvpChatResp PvpChat_Resp = 63;
inline bool S2ClientMsg::has_pvpchat_resp() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpchat_resp() {
  _has_bits_[1] |= 0x01000000u;
}
inline void S2ClientMsg::clear_has_pvpchat_resp() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void S2ClientMsg::clear_pvpchat_resp() {
  if (pvpchat_resp_ != NULL) pvpchat_resp_->::fgame::CSPvpChatResp::Clear();
  clear_has_pvpchat_resp();
}
inline const ::fgame::CSPvpChatResp& S2ClientMsg::pvpchat_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpChat_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpchat_resp_ != NULL ? *pvpchat_resp_ : *default_instance().pvpchat_resp_;
#else
  return pvpchat_resp_ != NULL ? *pvpchat_resp_ : *default_instance_->pvpchat_resp_;
#endif
}
inline ::fgame::CSPvpChatResp* S2ClientMsg::mutable_pvpchat_resp() {
  set_has_pvpchat_resp();
  if (pvpchat_resp_ == NULL) pvpchat_resp_ = new ::fgame::CSPvpChatResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpChat_Resp)
  return pvpchat_resp_;
}
inline ::fgame::CSPvpChatResp* S2ClientMsg::release_pvpchat_resp() {
  clear_has_pvpchat_resp();
  ::fgame::CSPvpChatResp* temp = pvpchat_resp_;
  pvpchat_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpchat_resp(::fgame::CSPvpChatResp* pvpchat_resp) {
  delete pvpchat_resp_;
  pvpchat_resp_ = pvpchat_resp;
  if (pvpchat_resp) {
    set_has_pvpchat_resp();
  } else {
    clear_has_pvpchat_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpChat_Resp)
}

// optional .fgame.CSUseGiftCodeResp UseGiftCode_Resp = 64;
inline bool S2ClientMsg::has_usegiftcode_resp() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void S2ClientMsg::set_has_usegiftcode_resp() {
  _has_bits_[1] |= 0x02000000u;
}
inline void S2ClientMsg::clear_has_usegiftcode_resp() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void S2ClientMsg::clear_usegiftcode_resp() {
  if (usegiftcode_resp_ != NULL) usegiftcode_resp_->::fgame::CSUseGiftCodeResp::Clear();
  clear_has_usegiftcode_resp();
}
inline const ::fgame::CSUseGiftCodeResp& S2ClientMsg::usegiftcode_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UseGiftCode_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return usegiftcode_resp_ != NULL ? *usegiftcode_resp_ : *default_instance().usegiftcode_resp_;
#else
  return usegiftcode_resp_ != NULL ? *usegiftcode_resp_ : *default_instance_->usegiftcode_resp_;
#endif
}
inline ::fgame::CSUseGiftCodeResp* S2ClientMsg::mutable_usegiftcode_resp() {
  set_has_usegiftcode_resp();
  if (usegiftcode_resp_ == NULL) usegiftcode_resp_ = new ::fgame::CSUseGiftCodeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UseGiftCode_Resp)
  return usegiftcode_resp_;
}
inline ::fgame::CSUseGiftCodeResp* S2ClientMsg::release_usegiftcode_resp() {
  clear_has_usegiftcode_resp();
  ::fgame::CSUseGiftCodeResp* temp = usegiftcode_resp_;
  usegiftcode_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_usegiftcode_resp(::fgame::CSUseGiftCodeResp* usegiftcode_resp) {
  delete usegiftcode_resp_;
  usegiftcode_resp_ = usegiftcode_resp;
  if (usegiftcode_resp) {
    set_has_usegiftcode_resp();
  } else {
    clear_has_usegiftcode_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UseGiftCode_Resp)
}

// optional .fgame.CSQueryPlayerInfoResp QueryPlayerInfo_Resp = 65;
inline bool S2ClientMsg::has_queryplayerinfo_resp() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void S2ClientMsg::set_has_queryplayerinfo_resp() {
  _has_bits_[1] |= 0x04000000u;
}
inline void S2ClientMsg::clear_has_queryplayerinfo_resp() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void S2ClientMsg::clear_queryplayerinfo_resp() {
  if (queryplayerinfo_resp_ != NULL) queryplayerinfo_resp_->::fgame::CSQueryPlayerInfoResp::Clear();
  clear_has_queryplayerinfo_resp();
}
inline const ::fgame::CSQueryPlayerInfoResp& S2ClientMsg::queryplayerinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.QueryPlayerInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return queryplayerinfo_resp_ != NULL ? *queryplayerinfo_resp_ : *default_instance().queryplayerinfo_resp_;
#else
  return queryplayerinfo_resp_ != NULL ? *queryplayerinfo_resp_ : *default_instance_->queryplayerinfo_resp_;
#endif
}
inline ::fgame::CSQueryPlayerInfoResp* S2ClientMsg::mutable_queryplayerinfo_resp() {
  set_has_queryplayerinfo_resp();
  if (queryplayerinfo_resp_ == NULL) queryplayerinfo_resp_ = new ::fgame::CSQueryPlayerInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.QueryPlayerInfo_Resp)
  return queryplayerinfo_resp_;
}
inline ::fgame::CSQueryPlayerInfoResp* S2ClientMsg::release_queryplayerinfo_resp() {
  clear_has_queryplayerinfo_resp();
  ::fgame::CSQueryPlayerInfoResp* temp = queryplayerinfo_resp_;
  queryplayerinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_queryplayerinfo_resp(::fgame::CSQueryPlayerInfoResp* queryplayerinfo_resp) {
  delete queryplayerinfo_resp_;
  queryplayerinfo_resp_ = queryplayerinfo_resp;
  if (queryplayerinfo_resp) {
    set_has_queryplayerinfo_resp();
  } else {
    clear_has_queryplayerinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.QueryPlayerInfo_Resp)
}

// optional .fgame.CSPersonalRoomCreateResp PersonalRoomCreate_Resp = 66;
inline bool S2ClientMsg::has_personalroomcreate_resp() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void S2ClientMsg::set_has_personalroomcreate_resp() {
  _has_bits_[1] |= 0x08000000u;
}
inline void S2ClientMsg::clear_has_personalroomcreate_resp() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void S2ClientMsg::clear_personalroomcreate_resp() {
  if (personalroomcreate_resp_ != NULL) personalroomcreate_resp_->::fgame::CSPersonalRoomCreateResp::Clear();
  clear_has_personalroomcreate_resp();
}
inline const ::fgame::CSPersonalRoomCreateResp& S2ClientMsg::personalroomcreate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomCreate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomcreate_resp_ != NULL ? *personalroomcreate_resp_ : *default_instance().personalroomcreate_resp_;
#else
  return personalroomcreate_resp_ != NULL ? *personalroomcreate_resp_ : *default_instance_->personalroomcreate_resp_;
#endif
}
inline ::fgame::CSPersonalRoomCreateResp* S2ClientMsg::mutable_personalroomcreate_resp() {
  set_has_personalroomcreate_resp();
  if (personalroomcreate_resp_ == NULL) personalroomcreate_resp_ = new ::fgame::CSPersonalRoomCreateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomCreate_Resp)
  return personalroomcreate_resp_;
}
inline ::fgame::CSPersonalRoomCreateResp* S2ClientMsg::release_personalroomcreate_resp() {
  clear_has_personalroomcreate_resp();
  ::fgame::CSPersonalRoomCreateResp* temp = personalroomcreate_resp_;
  personalroomcreate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomcreate_resp(::fgame::CSPersonalRoomCreateResp* personalroomcreate_resp) {
  delete personalroomcreate_resp_;
  personalroomcreate_resp_ = personalroomcreate_resp;
  if (personalroomcreate_resp) {
    set_has_personalroomcreate_resp();
  } else {
    clear_has_personalroomcreate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomCreate_Resp)
}

// optional .fgame.CSPersonalRoomEnterResp PersonalRoomEnter_Resp = 67;
inline bool S2ClientMsg::has_personalroomenter_resp() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void S2ClientMsg::set_has_personalroomenter_resp() {
  _has_bits_[1] |= 0x10000000u;
}
inline void S2ClientMsg::clear_has_personalroomenter_resp() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void S2ClientMsg::clear_personalroomenter_resp() {
  if (personalroomenter_resp_ != NULL) personalroomenter_resp_->::fgame::CSPersonalRoomEnterResp::Clear();
  clear_has_personalroomenter_resp();
}
inline const ::fgame::CSPersonalRoomEnterResp& S2ClientMsg::personalroomenter_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomEnter_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomenter_resp_ != NULL ? *personalroomenter_resp_ : *default_instance().personalroomenter_resp_;
#else
  return personalroomenter_resp_ != NULL ? *personalroomenter_resp_ : *default_instance_->personalroomenter_resp_;
#endif
}
inline ::fgame::CSPersonalRoomEnterResp* S2ClientMsg::mutable_personalroomenter_resp() {
  set_has_personalroomenter_resp();
  if (personalroomenter_resp_ == NULL) personalroomenter_resp_ = new ::fgame::CSPersonalRoomEnterResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomEnter_Resp)
  return personalroomenter_resp_;
}
inline ::fgame::CSPersonalRoomEnterResp* S2ClientMsg::release_personalroomenter_resp() {
  clear_has_personalroomenter_resp();
  ::fgame::CSPersonalRoomEnterResp* temp = personalroomenter_resp_;
  personalroomenter_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomenter_resp(::fgame::CSPersonalRoomEnterResp* personalroomenter_resp) {
  delete personalroomenter_resp_;
  personalroomenter_resp_ = personalroomenter_resp;
  if (personalroomenter_resp) {
    set_has_personalroomenter_resp();
  } else {
    clear_has_personalroomenter_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomEnter_Resp)
}

// optional .fgame.CSPersonalRoomLeaveResp PersonalRoomLeave_Resp = 68;
inline bool S2ClientMsg::has_personalroomleave_resp() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void S2ClientMsg::set_has_personalroomleave_resp() {
  _has_bits_[1] |= 0x20000000u;
}
inline void S2ClientMsg::clear_has_personalroomleave_resp() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void S2ClientMsg::clear_personalroomleave_resp() {
  if (personalroomleave_resp_ != NULL) personalroomleave_resp_->::fgame::CSPersonalRoomLeaveResp::Clear();
  clear_has_personalroomleave_resp();
}
inline const ::fgame::CSPersonalRoomLeaveResp& S2ClientMsg::personalroomleave_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomLeave_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomleave_resp_ != NULL ? *personalroomleave_resp_ : *default_instance().personalroomleave_resp_;
#else
  return personalroomleave_resp_ != NULL ? *personalroomleave_resp_ : *default_instance_->personalroomleave_resp_;
#endif
}
inline ::fgame::CSPersonalRoomLeaveResp* S2ClientMsg::mutable_personalroomleave_resp() {
  set_has_personalroomleave_resp();
  if (personalroomleave_resp_ == NULL) personalroomleave_resp_ = new ::fgame::CSPersonalRoomLeaveResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomLeave_Resp)
  return personalroomleave_resp_;
}
inline ::fgame::CSPersonalRoomLeaveResp* S2ClientMsg::release_personalroomleave_resp() {
  clear_has_personalroomleave_resp();
  ::fgame::CSPersonalRoomLeaveResp* temp = personalroomleave_resp_;
  personalroomleave_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomleave_resp(::fgame::CSPersonalRoomLeaveResp* personalroomleave_resp) {
  delete personalroomleave_resp_;
  personalroomleave_resp_ = personalroomleave_resp;
  if (personalroomleave_resp) {
    set_has_personalroomleave_resp();
  } else {
    clear_has_personalroomleave_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomLeave_Resp)
}

// optional .fgame.CSPersonalRoomKickResp PersonalRoomKick_Resp = 69;
inline bool S2ClientMsg::has_personalroomkick_resp() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void S2ClientMsg::set_has_personalroomkick_resp() {
  _has_bits_[1] |= 0x40000000u;
}
inline void S2ClientMsg::clear_has_personalroomkick_resp() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void S2ClientMsg::clear_personalroomkick_resp() {
  if (personalroomkick_resp_ != NULL) personalroomkick_resp_->::fgame::CSPersonalRoomKickResp::Clear();
  clear_has_personalroomkick_resp();
}
inline const ::fgame::CSPersonalRoomKickResp& S2ClientMsg::personalroomkick_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomKick_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomkick_resp_ != NULL ? *personalroomkick_resp_ : *default_instance().personalroomkick_resp_;
#else
  return personalroomkick_resp_ != NULL ? *personalroomkick_resp_ : *default_instance_->personalroomkick_resp_;
#endif
}
inline ::fgame::CSPersonalRoomKickResp* S2ClientMsg::mutable_personalroomkick_resp() {
  set_has_personalroomkick_resp();
  if (personalroomkick_resp_ == NULL) personalroomkick_resp_ = new ::fgame::CSPersonalRoomKickResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomKick_Resp)
  return personalroomkick_resp_;
}
inline ::fgame::CSPersonalRoomKickResp* S2ClientMsg::release_personalroomkick_resp() {
  clear_has_personalroomkick_resp();
  ::fgame::CSPersonalRoomKickResp* temp = personalroomkick_resp_;
  personalroomkick_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomkick_resp(::fgame::CSPersonalRoomKickResp* personalroomkick_resp) {
  delete personalroomkick_resp_;
  personalroomkick_resp_ = personalroomkick_resp;
  if (personalroomkick_resp) {
    set_has_personalroomkick_resp();
  } else {
    clear_has_personalroomkick_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomKick_Resp)
}

// optional .fgame.CSPersonalRoomInviteResp PersonalRoomInvite_Resp = 70;
inline bool S2ClientMsg::has_personalroominvite_resp() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void S2ClientMsg::set_has_personalroominvite_resp() {
  _has_bits_[1] |= 0x80000000u;
}
inline void S2ClientMsg::clear_has_personalroominvite_resp() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void S2ClientMsg::clear_personalroominvite_resp() {
  if (personalroominvite_resp_ != NULL) personalroominvite_resp_->::fgame::CSPersonalRoomInviteResp::Clear();
  clear_has_personalroominvite_resp();
}
inline const ::fgame::CSPersonalRoomInviteResp& S2ClientMsg::personalroominvite_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomInvite_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroominvite_resp_ != NULL ? *personalroominvite_resp_ : *default_instance().personalroominvite_resp_;
#else
  return personalroominvite_resp_ != NULL ? *personalroominvite_resp_ : *default_instance_->personalroominvite_resp_;
#endif
}
inline ::fgame::CSPersonalRoomInviteResp* S2ClientMsg::mutable_personalroominvite_resp() {
  set_has_personalroominvite_resp();
  if (personalroominvite_resp_ == NULL) personalroominvite_resp_ = new ::fgame::CSPersonalRoomInviteResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomInvite_Resp)
  return personalroominvite_resp_;
}
inline ::fgame::CSPersonalRoomInviteResp* S2ClientMsg::release_personalroominvite_resp() {
  clear_has_personalroominvite_resp();
  ::fgame::CSPersonalRoomInviteResp* temp = personalroominvite_resp_;
  personalroominvite_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroominvite_resp(::fgame::CSPersonalRoomInviteResp* personalroominvite_resp) {
  delete personalroominvite_resp_;
  personalroominvite_resp_ = personalroominvite_resp;
  if (personalroominvite_resp) {
    set_has_personalroominvite_resp();
  } else {
    clear_has_personalroominvite_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomInvite_Resp)
}

// optional .fgame.CSPersonalRoomBroadcastResp PersonalRoomBroadcast_Resp = 71;
inline bool S2ClientMsg::has_personalroombroadcast_resp() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_personalroombroadcast_resp() {
  _has_bits_[2] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_personalroombroadcast_resp() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_personalroombroadcast_resp() {
  if (personalroombroadcast_resp_ != NULL) personalroombroadcast_resp_->::fgame::CSPersonalRoomBroadcastResp::Clear();
  clear_has_personalroombroadcast_resp();
}
inline const ::fgame::CSPersonalRoomBroadcastResp& S2ClientMsg::personalroombroadcast_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomBroadcast_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroombroadcast_resp_ != NULL ? *personalroombroadcast_resp_ : *default_instance().personalroombroadcast_resp_;
#else
  return personalroombroadcast_resp_ != NULL ? *personalroombroadcast_resp_ : *default_instance_->personalroombroadcast_resp_;
#endif
}
inline ::fgame::CSPersonalRoomBroadcastResp* S2ClientMsg::mutable_personalroombroadcast_resp() {
  set_has_personalroombroadcast_resp();
  if (personalroombroadcast_resp_ == NULL) personalroombroadcast_resp_ = new ::fgame::CSPersonalRoomBroadcastResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomBroadcast_Resp)
  return personalroombroadcast_resp_;
}
inline ::fgame::CSPersonalRoomBroadcastResp* S2ClientMsg::release_personalroombroadcast_resp() {
  clear_has_personalroombroadcast_resp();
  ::fgame::CSPersonalRoomBroadcastResp* temp = personalroombroadcast_resp_;
  personalroombroadcast_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroombroadcast_resp(::fgame::CSPersonalRoomBroadcastResp* personalroombroadcast_resp) {
  delete personalroombroadcast_resp_;
  personalroombroadcast_resp_ = personalroombroadcast_resp;
  if (personalroombroadcast_resp) {
    set_has_personalroombroadcast_resp();
  } else {
    clear_has_personalroombroadcast_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomBroadcast_Resp)
}

// optional .fgame.CSPersonalRoomChatResp PersonalRoomChat_Resp = 72;
inline bool S2ClientMsg::has_personalroomchat_resp() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_personalroomchat_resp() {
  _has_bits_[2] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_personalroomchat_resp() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_personalroomchat_resp() {
  if (personalroomchat_resp_ != NULL) personalroomchat_resp_->::fgame::CSPersonalRoomChatResp::Clear();
  clear_has_personalroomchat_resp();
}
inline const ::fgame::CSPersonalRoomChatResp& S2ClientMsg::personalroomchat_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomChat_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomchat_resp_ != NULL ? *personalroomchat_resp_ : *default_instance().personalroomchat_resp_;
#else
  return personalroomchat_resp_ != NULL ? *personalroomchat_resp_ : *default_instance_->personalroomchat_resp_;
#endif
}
inline ::fgame::CSPersonalRoomChatResp* S2ClientMsg::mutable_personalroomchat_resp() {
  set_has_personalroomchat_resp();
  if (personalroomchat_resp_ == NULL) personalroomchat_resp_ = new ::fgame::CSPersonalRoomChatResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomChat_Resp)
  return personalroomchat_resp_;
}
inline ::fgame::CSPersonalRoomChatResp* S2ClientMsg::release_personalroomchat_resp() {
  clear_has_personalroomchat_resp();
  ::fgame::CSPersonalRoomChatResp* temp = personalroomchat_resp_;
  personalroomchat_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomchat_resp(::fgame::CSPersonalRoomChatResp* personalroomchat_resp) {
  delete personalroomchat_resp_;
  personalroomchat_resp_ = personalroomchat_resp;
  if (personalroomchat_resp) {
    set_has_personalroomchat_resp();
  } else {
    clear_has_personalroomchat_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomChat_Resp)
}

// optional .fgame.CSPersonalRoomModeResp PersonalRoomMode_Resp = 73;
inline bool S2ClientMsg::has_personalroommode_resp() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_personalroommode_resp() {
  _has_bits_[2] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_personalroommode_resp() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_personalroommode_resp() {
  if (personalroommode_resp_ != NULL) personalroommode_resp_->::fgame::CSPersonalRoomModeResp::Clear();
  clear_has_personalroommode_resp();
}
inline const ::fgame::CSPersonalRoomModeResp& S2ClientMsg::personalroommode_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomMode_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroommode_resp_ != NULL ? *personalroommode_resp_ : *default_instance().personalroommode_resp_;
#else
  return personalroommode_resp_ != NULL ? *personalroommode_resp_ : *default_instance_->personalroommode_resp_;
#endif
}
inline ::fgame::CSPersonalRoomModeResp* S2ClientMsg::mutable_personalroommode_resp() {
  set_has_personalroommode_resp();
  if (personalroommode_resp_ == NULL) personalroommode_resp_ = new ::fgame::CSPersonalRoomModeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomMode_Resp)
  return personalroommode_resp_;
}
inline ::fgame::CSPersonalRoomModeResp* S2ClientMsg::release_personalroommode_resp() {
  clear_has_personalroommode_resp();
  ::fgame::CSPersonalRoomModeResp* temp = personalroommode_resp_;
  personalroommode_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroommode_resp(::fgame::CSPersonalRoomModeResp* personalroommode_resp) {
  delete personalroommode_resp_;
  personalroommode_resp_ = personalroommode_resp;
  if (personalroommode_resp) {
    set_has_personalroommode_resp();
  } else {
    clear_has_personalroommode_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomMode_Resp)
}

// optional .fgame.CSPersonalRoomBeginFightResp PersonalRoomBeginFight_Resp = 74;
inline bool S2ClientMsg::has_personalroombeginfight_resp() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_personalroombeginfight_resp() {
  _has_bits_[2] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_personalroombeginfight_resp() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_personalroombeginfight_resp() {
  if (personalroombeginfight_resp_ != NULL) personalroombeginfight_resp_->::fgame::CSPersonalRoomBeginFightResp::Clear();
  clear_has_personalroombeginfight_resp();
}
inline const ::fgame::CSPersonalRoomBeginFightResp& S2ClientMsg::personalroombeginfight_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomBeginFight_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroombeginfight_resp_ != NULL ? *personalroombeginfight_resp_ : *default_instance().personalroombeginfight_resp_;
#else
  return personalroombeginfight_resp_ != NULL ? *personalroombeginfight_resp_ : *default_instance_->personalroombeginfight_resp_;
#endif
}
inline ::fgame::CSPersonalRoomBeginFightResp* S2ClientMsg::mutable_personalroombeginfight_resp() {
  set_has_personalroombeginfight_resp();
  if (personalroombeginfight_resp_ == NULL) personalroombeginfight_resp_ = new ::fgame::CSPersonalRoomBeginFightResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomBeginFight_Resp)
  return personalroombeginfight_resp_;
}
inline ::fgame::CSPersonalRoomBeginFightResp* S2ClientMsg::release_personalroombeginfight_resp() {
  clear_has_personalroombeginfight_resp();
  ::fgame::CSPersonalRoomBeginFightResp* temp = personalroombeginfight_resp_;
  personalroombeginfight_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroombeginfight_resp(::fgame::CSPersonalRoomBeginFightResp* personalroombeginfight_resp) {
  delete personalroombeginfight_resp_;
  personalroombeginfight_resp_ = personalroombeginfight_resp;
  if (personalroombeginfight_resp) {
    set_has_personalroombeginfight_resp();
  } else {
    clear_has_personalroombeginfight_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomBeginFight_Resp)
}

// optional .fgame.CSPersonalRoomApplyOrRefuseInviteResp PersonalRoomApplyOrRefuseInvite_Resp = 76;
inline bool S2ClientMsg::has_personalroomapplyorrefuseinvite_resp() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_personalroomapplyorrefuseinvite_resp() {
  _has_bits_[2] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_personalroomapplyorrefuseinvite_resp() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_personalroomapplyorrefuseinvite_resp() {
  if (personalroomapplyorrefuseinvite_resp_ != NULL) personalroomapplyorrefuseinvite_resp_->::fgame::CSPersonalRoomApplyOrRefuseInviteResp::Clear();
  clear_has_personalroomapplyorrefuseinvite_resp();
}
inline const ::fgame::CSPersonalRoomApplyOrRefuseInviteResp& S2ClientMsg::personalroomapplyorrefuseinvite_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomApplyOrRefuseInvite_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomapplyorrefuseinvite_resp_ != NULL ? *personalroomapplyorrefuseinvite_resp_ : *default_instance().personalroomapplyorrefuseinvite_resp_;
#else
  return personalroomapplyorrefuseinvite_resp_ != NULL ? *personalroomapplyorrefuseinvite_resp_ : *default_instance_->personalroomapplyorrefuseinvite_resp_;
#endif
}
inline ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* S2ClientMsg::mutable_personalroomapplyorrefuseinvite_resp() {
  set_has_personalroomapplyorrefuseinvite_resp();
  if (personalroomapplyorrefuseinvite_resp_ == NULL) personalroomapplyorrefuseinvite_resp_ = new ::fgame::CSPersonalRoomApplyOrRefuseInviteResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomApplyOrRefuseInvite_Resp)
  return personalroomapplyorrefuseinvite_resp_;
}
inline ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* S2ClientMsg::release_personalroomapplyorrefuseinvite_resp() {
  clear_has_personalroomapplyorrefuseinvite_resp();
  ::fgame::CSPersonalRoomApplyOrRefuseInviteResp* temp = personalroomapplyorrefuseinvite_resp_;
  personalroomapplyorrefuseinvite_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomapplyorrefuseinvite_resp(::fgame::CSPersonalRoomApplyOrRefuseInviteResp* personalroomapplyorrefuseinvite_resp) {
  delete personalroomapplyorrefuseinvite_resp_;
  personalroomapplyorrefuseinvite_resp_ = personalroomapplyorrefuseinvite_resp;
  if (personalroomapplyorrefuseinvite_resp) {
    set_has_personalroomapplyorrefuseinvite_resp();
  } else {
    clear_has_personalroomapplyorrefuseinvite_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomApplyOrRefuseInvite_Resp)
}

// optional .fgame.CSChangePlayerIconResp ChangePlayerIcon_Resp = 77;
inline bool S2ClientMsg::has_changeplayericon_resp() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_changeplayericon_resp() {
  _has_bits_[2] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_changeplayericon_resp() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_changeplayericon_resp() {
  if (changeplayericon_resp_ != NULL) changeplayericon_resp_->::fgame::CSChangePlayerIconResp::Clear();
  clear_has_changeplayericon_resp();
}
inline const ::fgame::CSChangePlayerIconResp& S2ClientMsg::changeplayericon_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChangePlayerIcon_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changeplayericon_resp_ != NULL ? *changeplayericon_resp_ : *default_instance().changeplayericon_resp_;
#else
  return changeplayericon_resp_ != NULL ? *changeplayericon_resp_ : *default_instance_->changeplayericon_resp_;
#endif
}
inline ::fgame::CSChangePlayerIconResp* S2ClientMsg::mutable_changeplayericon_resp() {
  set_has_changeplayericon_resp();
  if (changeplayericon_resp_ == NULL) changeplayericon_resp_ = new ::fgame::CSChangePlayerIconResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChangePlayerIcon_Resp)
  return changeplayericon_resp_;
}
inline ::fgame::CSChangePlayerIconResp* S2ClientMsg::release_changeplayericon_resp() {
  clear_has_changeplayericon_resp();
  ::fgame::CSChangePlayerIconResp* temp = changeplayericon_resp_;
  changeplayericon_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_changeplayericon_resp(::fgame::CSChangePlayerIconResp* changeplayericon_resp) {
  delete changeplayericon_resp_;
  changeplayericon_resp_ = changeplayericon_resp;
  if (changeplayericon_resp) {
    set_has_changeplayericon_resp();
  } else {
    clear_has_changeplayericon_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChangePlayerIcon_Resp)
}

// optional .fgame.CSPersonalRoomCountDownResp PersonalRoomCountDown_Resp = 78;
inline bool S2ClientMsg::has_personalroomcountdown_resp() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_personalroomcountdown_resp() {
  _has_bits_[2] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_personalroomcountdown_resp() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_personalroomcountdown_resp() {
  if (personalroomcountdown_resp_ != NULL) personalroomcountdown_resp_->::fgame::CSPersonalRoomCountDownResp::Clear();
  clear_has_personalroomcountdown_resp();
}
inline const ::fgame::CSPersonalRoomCountDownResp& S2ClientMsg::personalroomcountdown_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PersonalRoomCountDown_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return personalroomcountdown_resp_ != NULL ? *personalroomcountdown_resp_ : *default_instance().personalroomcountdown_resp_;
#else
  return personalroomcountdown_resp_ != NULL ? *personalroomcountdown_resp_ : *default_instance_->personalroomcountdown_resp_;
#endif
}
inline ::fgame::CSPersonalRoomCountDownResp* S2ClientMsg::mutable_personalroomcountdown_resp() {
  set_has_personalroomcountdown_resp();
  if (personalroomcountdown_resp_ == NULL) personalroomcountdown_resp_ = new ::fgame::CSPersonalRoomCountDownResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PersonalRoomCountDown_Resp)
  return personalroomcountdown_resp_;
}
inline ::fgame::CSPersonalRoomCountDownResp* S2ClientMsg::release_personalroomcountdown_resp() {
  clear_has_personalroomcountdown_resp();
  ::fgame::CSPersonalRoomCountDownResp* temp = personalroomcountdown_resp_;
  personalroomcountdown_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_personalroomcountdown_resp(::fgame::CSPersonalRoomCountDownResp* personalroomcountdown_resp) {
  delete personalroomcountdown_resp_;
  personalroomcountdown_resp_ = personalroomcountdown_resp;
  if (personalroomcountdown_resp) {
    set_has_personalroomcountdown_resp();
  } else {
    clear_has_personalroomcountdown_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PersonalRoomCountDown_Resp)
}

// optional .fgame.CSSyncPlayerDataResp SyncPlayerData_Resp = 79;
inline bool S2ClientMsg::has_syncplayerdata_resp() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_syncplayerdata_resp() {
  _has_bits_[2] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_syncplayerdata_resp() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_syncplayerdata_resp() {
  if (syncplayerdata_resp_ != NULL) syncplayerdata_resp_->::fgame::CSSyncPlayerDataResp::Clear();
  clear_has_syncplayerdata_resp();
}
inline const ::fgame::CSSyncPlayerDataResp& S2ClientMsg::syncplayerdata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SyncPlayerData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return syncplayerdata_resp_ != NULL ? *syncplayerdata_resp_ : *default_instance().syncplayerdata_resp_;
#else
  return syncplayerdata_resp_ != NULL ? *syncplayerdata_resp_ : *default_instance_->syncplayerdata_resp_;
#endif
}
inline ::fgame::CSSyncPlayerDataResp* S2ClientMsg::mutable_syncplayerdata_resp() {
  set_has_syncplayerdata_resp();
  if (syncplayerdata_resp_ == NULL) syncplayerdata_resp_ = new ::fgame::CSSyncPlayerDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SyncPlayerData_Resp)
  return syncplayerdata_resp_;
}
inline ::fgame::CSSyncPlayerDataResp* S2ClientMsg::release_syncplayerdata_resp() {
  clear_has_syncplayerdata_resp();
  ::fgame::CSSyncPlayerDataResp* temp = syncplayerdata_resp_;
  syncplayerdata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_syncplayerdata_resp(::fgame::CSSyncPlayerDataResp* syncplayerdata_resp) {
  delete syncplayerdata_resp_;
  syncplayerdata_resp_ = syncplayerdata_resp;
  if (syncplayerdata_resp) {
    set_has_syncplayerdata_resp();
  } else {
    clear_has_syncplayerdata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SyncPlayerData_Resp)
}

// optional .fgame.CSGetPlayerDataResp GetPlayerData_Resp = 80;
inline bool S2ClientMsg::has_getplayerdata_resp() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_getplayerdata_resp() {
  _has_bits_[2] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_getplayerdata_resp() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_getplayerdata_resp() {
  if (getplayerdata_resp_ != NULL) getplayerdata_resp_->::fgame::CSGetPlayerDataResp::Clear();
  clear_has_getplayerdata_resp();
}
inline const ::fgame::CSGetPlayerDataResp& S2ClientMsg::getplayerdata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetPlayerData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getplayerdata_resp_ != NULL ? *getplayerdata_resp_ : *default_instance().getplayerdata_resp_;
#else
  return getplayerdata_resp_ != NULL ? *getplayerdata_resp_ : *default_instance_->getplayerdata_resp_;
#endif
}
inline ::fgame::CSGetPlayerDataResp* S2ClientMsg::mutable_getplayerdata_resp() {
  set_has_getplayerdata_resp();
  if (getplayerdata_resp_ == NULL) getplayerdata_resp_ = new ::fgame::CSGetPlayerDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetPlayerData_Resp)
  return getplayerdata_resp_;
}
inline ::fgame::CSGetPlayerDataResp* S2ClientMsg::release_getplayerdata_resp() {
  clear_has_getplayerdata_resp();
  ::fgame::CSGetPlayerDataResp* temp = getplayerdata_resp_;
  getplayerdata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getplayerdata_resp(::fgame::CSGetPlayerDataResp* getplayerdata_resp) {
  delete getplayerdata_resp_;
  getplayerdata_resp_ = getplayerdata_resp;
  if (getplayerdata_resp) {
    set_has_getplayerdata_resp();
  } else {
    clear_has_getplayerdata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetPlayerData_Resp)
}

// optional .fgame.CSPvpAppearCreepResp AppearCreep_Resp = 81;
inline bool S2ClientMsg::has_appearcreep_resp() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void S2ClientMsg::set_has_appearcreep_resp() {
  _has_bits_[2] |= 0x00000200u;
}
inline void S2ClientMsg::clear_has_appearcreep_resp() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void S2ClientMsg::clear_appearcreep_resp() {
  if (appearcreep_resp_ != NULL) appearcreep_resp_->::fgame::CSPvpAppearCreepResp::Clear();
  clear_has_appearcreep_resp();
}
inline const ::fgame::CSPvpAppearCreepResp& S2ClientMsg::appearcreep_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.AppearCreep_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return appearcreep_resp_ != NULL ? *appearcreep_resp_ : *default_instance().appearcreep_resp_;
#else
  return appearcreep_resp_ != NULL ? *appearcreep_resp_ : *default_instance_->appearcreep_resp_;
#endif
}
inline ::fgame::CSPvpAppearCreepResp* S2ClientMsg::mutable_appearcreep_resp() {
  set_has_appearcreep_resp();
  if (appearcreep_resp_ == NULL) appearcreep_resp_ = new ::fgame::CSPvpAppearCreepResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.AppearCreep_Resp)
  return appearcreep_resp_;
}
inline ::fgame::CSPvpAppearCreepResp* S2ClientMsg::release_appearcreep_resp() {
  clear_has_appearcreep_resp();
  ::fgame::CSPvpAppearCreepResp* temp = appearcreep_resp_;
  appearcreep_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_appearcreep_resp(::fgame::CSPvpAppearCreepResp* appearcreep_resp) {
  delete appearcreep_resp_;
  appearcreep_resp_ = appearcreep_resp;
  if (appearcreep_resp) {
    set_has_appearcreep_resp();
  } else {
    clear_has_appearcreep_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.AppearCreep_Resp)
}

// optional .fgame.CSSaveCheckPtDataResp SaveCheckPtData_Resp = 82;
inline bool S2ClientMsg::has_savecheckptdata_resp() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void S2ClientMsg::set_has_savecheckptdata_resp() {
  _has_bits_[2] |= 0x00000400u;
}
inline void S2ClientMsg::clear_has_savecheckptdata_resp() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void S2ClientMsg::clear_savecheckptdata_resp() {
  if (savecheckptdata_resp_ != NULL) savecheckptdata_resp_->::fgame::CSSaveCheckPtDataResp::Clear();
  clear_has_savecheckptdata_resp();
}
inline const ::fgame::CSSaveCheckPtDataResp& S2ClientMsg::savecheckptdata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SaveCheckPtData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return savecheckptdata_resp_ != NULL ? *savecheckptdata_resp_ : *default_instance().savecheckptdata_resp_;
#else
  return savecheckptdata_resp_ != NULL ? *savecheckptdata_resp_ : *default_instance_->savecheckptdata_resp_;
#endif
}
inline ::fgame::CSSaveCheckPtDataResp* S2ClientMsg::mutable_savecheckptdata_resp() {
  set_has_savecheckptdata_resp();
  if (savecheckptdata_resp_ == NULL) savecheckptdata_resp_ = new ::fgame::CSSaveCheckPtDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SaveCheckPtData_Resp)
  return savecheckptdata_resp_;
}
inline ::fgame::CSSaveCheckPtDataResp* S2ClientMsg::release_savecheckptdata_resp() {
  clear_has_savecheckptdata_resp();
  ::fgame::CSSaveCheckPtDataResp* temp = savecheckptdata_resp_;
  savecheckptdata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_savecheckptdata_resp(::fgame::CSSaveCheckPtDataResp* savecheckptdata_resp) {
  delete savecheckptdata_resp_;
  savecheckptdata_resp_ = savecheckptdata_resp;
  if (savecheckptdata_resp) {
    set_has_savecheckptdata_resp();
  } else {
    clear_has_savecheckptdata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SaveCheckPtData_Resp)
}

// optional .fgame.CSGetCheckPtDataResp GetCheckPtData_Resp = 83;
inline bool S2ClientMsg::has_getcheckptdata_resp() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void S2ClientMsg::set_has_getcheckptdata_resp() {
  _has_bits_[2] |= 0x00000800u;
}
inline void S2ClientMsg::clear_has_getcheckptdata_resp() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void S2ClientMsg::clear_getcheckptdata_resp() {
  if (getcheckptdata_resp_ != NULL) getcheckptdata_resp_->::fgame::CSGetCheckPtDataResp::Clear();
  clear_has_getcheckptdata_resp();
}
inline const ::fgame::CSGetCheckPtDataResp& S2ClientMsg::getcheckptdata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetCheckPtData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getcheckptdata_resp_ != NULL ? *getcheckptdata_resp_ : *default_instance().getcheckptdata_resp_;
#else
  return getcheckptdata_resp_ != NULL ? *getcheckptdata_resp_ : *default_instance_->getcheckptdata_resp_;
#endif
}
inline ::fgame::CSGetCheckPtDataResp* S2ClientMsg::mutable_getcheckptdata_resp() {
  set_has_getcheckptdata_resp();
  if (getcheckptdata_resp_ == NULL) getcheckptdata_resp_ = new ::fgame::CSGetCheckPtDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetCheckPtData_Resp)
  return getcheckptdata_resp_;
}
inline ::fgame::CSGetCheckPtDataResp* S2ClientMsg::release_getcheckptdata_resp() {
  clear_has_getcheckptdata_resp();
  ::fgame::CSGetCheckPtDataResp* temp = getcheckptdata_resp_;
  getcheckptdata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getcheckptdata_resp(::fgame::CSGetCheckPtDataResp* getcheckptdata_resp) {
  delete getcheckptdata_resp_;
  getcheckptdata_resp_ = getcheckptdata_resp;
  if (getcheckptdata_resp) {
    set_has_getcheckptdata_resp();
  } else {
    clear_has_getcheckptdata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetCheckPtData_Resp)
}

// optional .fgame.CSSetNewBieResp SetNewBie_Resp = 84;
inline bool S2ClientMsg::has_setnewbie_resp() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void S2ClientMsg::set_has_setnewbie_resp() {
  _has_bits_[2] |= 0x00001000u;
}
inline void S2ClientMsg::clear_has_setnewbie_resp() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void S2ClientMsg::clear_setnewbie_resp() {
  if (setnewbie_resp_ != NULL) setnewbie_resp_->::fgame::CSSetNewBieResp::Clear();
  clear_has_setnewbie_resp();
}
inline const ::fgame::CSSetNewBieResp& S2ClientMsg::setnewbie_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SetNewBie_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setnewbie_resp_ != NULL ? *setnewbie_resp_ : *default_instance().setnewbie_resp_;
#else
  return setnewbie_resp_ != NULL ? *setnewbie_resp_ : *default_instance_->setnewbie_resp_;
#endif
}
inline ::fgame::CSSetNewBieResp* S2ClientMsg::mutable_setnewbie_resp() {
  set_has_setnewbie_resp();
  if (setnewbie_resp_ == NULL) setnewbie_resp_ = new ::fgame::CSSetNewBieResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SetNewBie_Resp)
  return setnewbie_resp_;
}
inline ::fgame::CSSetNewBieResp* S2ClientMsg::release_setnewbie_resp() {
  clear_has_setnewbie_resp();
  ::fgame::CSSetNewBieResp* temp = setnewbie_resp_;
  setnewbie_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_setnewbie_resp(::fgame::CSSetNewBieResp* setnewbie_resp) {
  delete setnewbie_resp_;
  setnewbie_resp_ = setnewbie_resp;
  if (setnewbie_resp) {
    set_has_setnewbie_resp();
  } else {
    clear_has_setnewbie_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SetNewBie_Resp)
}

// optional .fgame.CSGetNewBieListResp GetNewBieList_Resp = 85;
inline bool S2ClientMsg::has_getnewbielist_resp() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void S2ClientMsg::set_has_getnewbielist_resp() {
  _has_bits_[2] |= 0x00002000u;
}
inline void S2ClientMsg::clear_has_getnewbielist_resp() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void S2ClientMsg::clear_getnewbielist_resp() {
  if (getnewbielist_resp_ != NULL) getnewbielist_resp_->::fgame::CSGetNewBieListResp::Clear();
  clear_has_getnewbielist_resp();
}
inline const ::fgame::CSGetNewBieListResp& S2ClientMsg::getnewbielist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetNewBieList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getnewbielist_resp_ != NULL ? *getnewbielist_resp_ : *default_instance().getnewbielist_resp_;
#else
  return getnewbielist_resp_ != NULL ? *getnewbielist_resp_ : *default_instance_->getnewbielist_resp_;
#endif
}
inline ::fgame::CSGetNewBieListResp* S2ClientMsg::mutable_getnewbielist_resp() {
  set_has_getnewbielist_resp();
  if (getnewbielist_resp_ == NULL) getnewbielist_resp_ = new ::fgame::CSGetNewBieListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetNewBieList_Resp)
  return getnewbielist_resp_;
}
inline ::fgame::CSGetNewBieListResp* S2ClientMsg::release_getnewbielist_resp() {
  clear_has_getnewbielist_resp();
  ::fgame::CSGetNewBieListResp* temp = getnewbielist_resp_;
  getnewbielist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getnewbielist_resp(::fgame::CSGetNewBieListResp* getnewbielist_resp) {
  delete getnewbielist_resp_;
  getnewbielist_resp_ = getnewbielist_resp;
  if (getnewbielist_resp) {
    set_has_getnewbielist_resp();
  } else {
    clear_has_getnewbielist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetNewBieList_Resp)
}

// optional .fgame.CSPropertyUpdateResp PropertyUpdate_Resp = 86;
inline bool S2ClientMsg::has_propertyupdate_resp() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void S2ClientMsg::set_has_propertyupdate_resp() {
  _has_bits_[2] |= 0x00004000u;
}
inline void S2ClientMsg::clear_has_propertyupdate_resp() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void S2ClientMsg::clear_propertyupdate_resp() {
  if (propertyupdate_resp_ != NULL) propertyupdate_resp_->::fgame::CSPropertyUpdateResp::Clear();
  clear_has_propertyupdate_resp();
}
inline const ::fgame::CSPropertyUpdateResp& S2ClientMsg::propertyupdate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PropertyUpdate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return propertyupdate_resp_ != NULL ? *propertyupdate_resp_ : *default_instance().propertyupdate_resp_;
#else
  return propertyupdate_resp_ != NULL ? *propertyupdate_resp_ : *default_instance_->propertyupdate_resp_;
#endif
}
inline ::fgame::CSPropertyUpdateResp* S2ClientMsg::mutable_propertyupdate_resp() {
  set_has_propertyupdate_resp();
  if (propertyupdate_resp_ == NULL) propertyupdate_resp_ = new ::fgame::CSPropertyUpdateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PropertyUpdate_Resp)
  return propertyupdate_resp_;
}
inline ::fgame::CSPropertyUpdateResp* S2ClientMsg::release_propertyupdate_resp() {
  clear_has_propertyupdate_resp();
  ::fgame::CSPropertyUpdateResp* temp = propertyupdate_resp_;
  propertyupdate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_propertyupdate_resp(::fgame::CSPropertyUpdateResp* propertyupdate_resp) {
  delete propertyupdate_resp_;
  propertyupdate_resp_ = propertyupdate_resp;
  if (propertyupdate_resp) {
    set_has_propertyupdate_resp();
  } else {
    clear_has_propertyupdate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PropertyUpdate_Resp)
}

// optional .fgame.CSEnterPointResp EnterPoint_Resp = 87;
inline bool S2ClientMsg::has_enterpoint_resp() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void S2ClientMsg::set_has_enterpoint_resp() {
  _has_bits_[2] |= 0x00008000u;
}
inline void S2ClientMsg::clear_has_enterpoint_resp() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void S2ClientMsg::clear_enterpoint_resp() {
  if (enterpoint_resp_ != NULL) enterpoint_resp_->::fgame::CSEnterPointResp::Clear();
  clear_has_enterpoint_resp();
}
inline const ::fgame::CSEnterPointResp& S2ClientMsg::enterpoint_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.EnterPoint_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return enterpoint_resp_ != NULL ? *enterpoint_resp_ : *default_instance().enterpoint_resp_;
#else
  return enterpoint_resp_ != NULL ? *enterpoint_resp_ : *default_instance_->enterpoint_resp_;
#endif
}
inline ::fgame::CSEnterPointResp* S2ClientMsg::mutable_enterpoint_resp() {
  set_has_enterpoint_resp();
  if (enterpoint_resp_ == NULL) enterpoint_resp_ = new ::fgame::CSEnterPointResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.EnterPoint_Resp)
  return enterpoint_resp_;
}
inline ::fgame::CSEnterPointResp* S2ClientMsg::release_enterpoint_resp() {
  clear_has_enterpoint_resp();
  ::fgame::CSEnterPointResp* temp = enterpoint_resp_;
  enterpoint_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_enterpoint_resp(::fgame::CSEnterPointResp* enterpoint_resp) {
  delete enterpoint_resp_;
  enterpoint_resp_ = enterpoint_resp;
  if (enterpoint_resp) {
    set_has_enterpoint_resp();
  } else {
    clear_has_enterpoint_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.EnterPoint_Resp)
}

// optional .fgame.CSShopGuideResp ShopGuide_Resp = 88;
inline bool S2ClientMsg::has_shopguide_resp() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void S2ClientMsg::set_has_shopguide_resp() {
  _has_bits_[2] |= 0x00010000u;
}
inline void S2ClientMsg::clear_has_shopguide_resp() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void S2ClientMsg::clear_shopguide_resp() {
  if (shopguide_resp_ != NULL) shopguide_resp_->::fgame::CSShopGuideResp::Clear();
  clear_has_shopguide_resp();
}
inline const ::fgame::CSShopGuideResp& S2ClientMsg::shopguide_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ShopGuide_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shopguide_resp_ != NULL ? *shopguide_resp_ : *default_instance().shopguide_resp_;
#else
  return shopguide_resp_ != NULL ? *shopguide_resp_ : *default_instance_->shopguide_resp_;
#endif
}
inline ::fgame::CSShopGuideResp* S2ClientMsg::mutable_shopguide_resp() {
  set_has_shopguide_resp();
  if (shopguide_resp_ == NULL) shopguide_resp_ = new ::fgame::CSShopGuideResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ShopGuide_Resp)
  return shopguide_resp_;
}
inline ::fgame::CSShopGuideResp* S2ClientMsg::release_shopguide_resp() {
  clear_has_shopguide_resp();
  ::fgame::CSShopGuideResp* temp = shopguide_resp_;
  shopguide_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_shopguide_resp(::fgame::CSShopGuideResp* shopguide_resp) {
  delete shopguide_resp_;
  shopguide_resp_ = shopguide_resp;
  if (shopguide_resp) {
    set_has_shopguide_resp();
  } else {
    clear_has_shopguide_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ShopGuide_Resp)
}

// optional .fgame.CSActivityListResp ActivityList_Resp = 90;
inline bool S2ClientMsg::has_activitylist_resp() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void S2ClientMsg::set_has_activitylist_resp() {
  _has_bits_[2] |= 0x00020000u;
}
inline void S2ClientMsg::clear_has_activitylist_resp() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void S2ClientMsg::clear_activitylist_resp() {
  if (activitylist_resp_ != NULL) activitylist_resp_->::fgame::CSActivityListResp::Clear();
  clear_has_activitylist_resp();
}
inline const ::fgame::CSActivityListResp& S2ClientMsg::activitylist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivityList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitylist_resp_ != NULL ? *activitylist_resp_ : *default_instance().activitylist_resp_;
#else
  return activitylist_resp_ != NULL ? *activitylist_resp_ : *default_instance_->activitylist_resp_;
#endif
}
inline ::fgame::CSActivityListResp* S2ClientMsg::mutable_activitylist_resp() {
  set_has_activitylist_resp();
  if (activitylist_resp_ == NULL) activitylist_resp_ = new ::fgame::CSActivityListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivityList_Resp)
  return activitylist_resp_;
}
inline ::fgame::CSActivityListResp* S2ClientMsg::release_activitylist_resp() {
  clear_has_activitylist_resp();
  ::fgame::CSActivityListResp* temp = activitylist_resp_;
  activitylist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activitylist_resp(::fgame::CSActivityListResp* activitylist_resp) {
  delete activitylist_resp_;
  activitylist_resp_ = activitylist_resp;
  if (activitylist_resp) {
    set_has_activitylist_resp();
  } else {
    clear_has_activitylist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivityList_Resp)
}

// optional .fgame.CSActivityUpdateResp ActivityUpdate_Resp = 91;
inline bool S2ClientMsg::has_activityupdate_resp() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void S2ClientMsg::set_has_activityupdate_resp() {
  _has_bits_[2] |= 0x00040000u;
}
inline void S2ClientMsg::clear_has_activityupdate_resp() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void S2ClientMsg::clear_activityupdate_resp() {
  if (activityupdate_resp_ != NULL) activityupdate_resp_->::fgame::CSActivityUpdateResp::Clear();
  clear_has_activityupdate_resp();
}
inline const ::fgame::CSActivityUpdateResp& S2ClientMsg::activityupdate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivityUpdate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activityupdate_resp_ != NULL ? *activityupdate_resp_ : *default_instance().activityupdate_resp_;
#else
  return activityupdate_resp_ != NULL ? *activityupdate_resp_ : *default_instance_->activityupdate_resp_;
#endif
}
inline ::fgame::CSActivityUpdateResp* S2ClientMsg::mutable_activityupdate_resp() {
  set_has_activityupdate_resp();
  if (activityupdate_resp_ == NULL) activityupdate_resp_ = new ::fgame::CSActivityUpdateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivityUpdate_Resp)
  return activityupdate_resp_;
}
inline ::fgame::CSActivityUpdateResp* S2ClientMsg::release_activityupdate_resp() {
  clear_has_activityupdate_resp();
  ::fgame::CSActivityUpdateResp* temp = activityupdate_resp_;
  activityupdate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activityupdate_resp(::fgame::CSActivityUpdateResp* activityupdate_resp) {
  delete activityupdate_resp_;
  activityupdate_resp_ = activityupdate_resp;
  if (activityupdate_resp) {
    set_has_activityupdate_resp();
  } else {
    clear_has_activityupdate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivityUpdate_Resp)
}

// optional .fgame.CSActivitySubmitResp ActivitySubmit_Resp = 92;
inline bool S2ClientMsg::has_activitysubmit_resp() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void S2ClientMsg::set_has_activitysubmit_resp() {
  _has_bits_[2] |= 0x00080000u;
}
inline void S2ClientMsg::clear_has_activitysubmit_resp() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void S2ClientMsg::clear_activitysubmit_resp() {
  if (activitysubmit_resp_ != NULL) activitysubmit_resp_->::fgame::CSActivitySubmitResp::Clear();
  clear_has_activitysubmit_resp();
}
inline const ::fgame::CSActivitySubmitResp& S2ClientMsg::activitysubmit_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivitySubmit_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitysubmit_resp_ != NULL ? *activitysubmit_resp_ : *default_instance().activitysubmit_resp_;
#else
  return activitysubmit_resp_ != NULL ? *activitysubmit_resp_ : *default_instance_->activitysubmit_resp_;
#endif
}
inline ::fgame::CSActivitySubmitResp* S2ClientMsg::mutable_activitysubmit_resp() {
  set_has_activitysubmit_resp();
  if (activitysubmit_resp_ == NULL) activitysubmit_resp_ = new ::fgame::CSActivitySubmitResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivitySubmit_Resp)
  return activitysubmit_resp_;
}
inline ::fgame::CSActivitySubmitResp* S2ClientMsg::release_activitysubmit_resp() {
  clear_has_activitysubmit_resp();
  ::fgame::CSActivitySubmitResp* temp = activitysubmit_resp_;
  activitysubmit_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activitysubmit_resp(::fgame::CSActivitySubmitResp* activitysubmit_resp) {
  delete activitysubmit_resp_;
  activitysubmit_resp_ = activitysubmit_resp;
  if (activitysubmit_resp) {
    set_has_activitysubmit_resp();
  } else {
    clear_has_activitysubmit_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivitySubmit_Resp)
}

// optional .fgame.CSSetTitleResp SetTitle_Resp = 93;
inline bool S2ClientMsg::has_settitle_resp() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void S2ClientMsg::set_has_settitle_resp() {
  _has_bits_[2] |= 0x00100000u;
}
inline void S2ClientMsg::clear_has_settitle_resp() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void S2ClientMsg::clear_settitle_resp() {
  if (settitle_resp_ != NULL) settitle_resp_->::fgame::CSSetTitleResp::Clear();
  clear_has_settitle_resp();
}
inline const ::fgame::CSSetTitleResp& S2ClientMsg::settitle_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SetTitle_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return settitle_resp_ != NULL ? *settitle_resp_ : *default_instance().settitle_resp_;
#else
  return settitle_resp_ != NULL ? *settitle_resp_ : *default_instance_->settitle_resp_;
#endif
}
inline ::fgame::CSSetTitleResp* S2ClientMsg::mutable_settitle_resp() {
  set_has_settitle_resp();
  if (settitle_resp_ == NULL) settitle_resp_ = new ::fgame::CSSetTitleResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SetTitle_Resp)
  return settitle_resp_;
}
inline ::fgame::CSSetTitleResp* S2ClientMsg::release_settitle_resp() {
  clear_has_settitle_resp();
  ::fgame::CSSetTitleResp* temp = settitle_resp_;
  settitle_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_settitle_resp(::fgame::CSSetTitleResp* settitle_resp) {
  delete settitle_resp_;
  settitle_resp_ = settitle_resp;
  if (settitle_resp) {
    set_has_settitle_resp();
  } else {
    clear_has_settitle_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SetTitle_Resp)
}

// optional .fgame.CSShopBuyResp ShopBuy_Resp = 94;
inline bool S2ClientMsg::has_shopbuy_resp() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void S2ClientMsg::set_has_shopbuy_resp() {
  _has_bits_[2] |= 0x00200000u;
}
inline void S2ClientMsg::clear_has_shopbuy_resp() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void S2ClientMsg::clear_shopbuy_resp() {
  if (shopbuy_resp_ != NULL) shopbuy_resp_->::fgame::CSShopBuyResp::Clear();
  clear_has_shopbuy_resp();
}
inline const ::fgame::CSShopBuyResp& S2ClientMsg::shopbuy_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ShopBuy_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shopbuy_resp_ != NULL ? *shopbuy_resp_ : *default_instance().shopbuy_resp_;
#else
  return shopbuy_resp_ != NULL ? *shopbuy_resp_ : *default_instance_->shopbuy_resp_;
#endif
}
inline ::fgame::CSShopBuyResp* S2ClientMsg::mutable_shopbuy_resp() {
  set_has_shopbuy_resp();
  if (shopbuy_resp_ == NULL) shopbuy_resp_ = new ::fgame::CSShopBuyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ShopBuy_Resp)
  return shopbuy_resp_;
}
inline ::fgame::CSShopBuyResp* S2ClientMsg::release_shopbuy_resp() {
  clear_has_shopbuy_resp();
  ::fgame::CSShopBuyResp* temp = shopbuy_resp_;
  shopbuy_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_shopbuy_resp(::fgame::CSShopBuyResp* shopbuy_resp) {
  delete shopbuy_resp_;
  shopbuy_resp_ = shopbuy_resp;
  if (shopbuy_resp) {
    set_has_shopbuy_resp();
  } else {
    clear_has_shopbuy_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ShopBuy_Resp)
}

// optional .fgame.CSKickPlayerReq KickPlayer_Req = 95;
inline bool S2ClientMsg::has_kickplayer_req() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void S2ClientMsg::set_has_kickplayer_req() {
  _has_bits_[2] |= 0x00400000u;
}
inline void S2ClientMsg::clear_has_kickplayer_req() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void S2ClientMsg::clear_kickplayer_req() {
  if (kickplayer_req_ != NULL) kickplayer_req_->::fgame::CSKickPlayerReq::Clear();
  clear_has_kickplayer_req();
}
inline const ::fgame::CSKickPlayerReq& S2ClientMsg::kickplayer_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.KickPlayer_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return kickplayer_req_ != NULL ? *kickplayer_req_ : *default_instance().kickplayer_req_;
#else
  return kickplayer_req_ != NULL ? *kickplayer_req_ : *default_instance_->kickplayer_req_;
#endif
}
inline ::fgame::CSKickPlayerReq* S2ClientMsg::mutable_kickplayer_req() {
  set_has_kickplayer_req();
  if (kickplayer_req_ == NULL) kickplayer_req_ = new ::fgame::CSKickPlayerReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.KickPlayer_Req)
  return kickplayer_req_;
}
inline ::fgame::CSKickPlayerReq* S2ClientMsg::release_kickplayer_req() {
  clear_has_kickplayer_req();
  ::fgame::CSKickPlayerReq* temp = kickplayer_req_;
  kickplayer_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_kickplayer_req(::fgame::CSKickPlayerReq* kickplayer_req) {
  delete kickplayer_req_;
  kickplayer_req_ = kickplayer_req;
  if (kickplayer_req) {
    set_has_kickplayer_req();
  } else {
    clear_has_kickplayer_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.KickPlayer_Req)
}

// optional .fgame.CSExchangeItemResp ExchangeItem_Resp = 96;
inline bool S2ClientMsg::has_exchangeitem_resp() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void S2ClientMsg::set_has_exchangeitem_resp() {
  _has_bits_[2] |= 0x00800000u;
}
inline void S2ClientMsg::clear_has_exchangeitem_resp() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void S2ClientMsg::clear_exchangeitem_resp() {
  if (exchangeitem_resp_ != NULL) exchangeitem_resp_->::fgame::CSExchangeItemResp::Clear();
  clear_has_exchangeitem_resp();
}
inline const ::fgame::CSExchangeItemResp& S2ClientMsg::exchangeitem_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ExchangeItem_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return exchangeitem_resp_ != NULL ? *exchangeitem_resp_ : *default_instance().exchangeitem_resp_;
#else
  return exchangeitem_resp_ != NULL ? *exchangeitem_resp_ : *default_instance_->exchangeitem_resp_;
#endif
}
inline ::fgame::CSExchangeItemResp* S2ClientMsg::mutable_exchangeitem_resp() {
  set_has_exchangeitem_resp();
  if (exchangeitem_resp_ == NULL) exchangeitem_resp_ = new ::fgame::CSExchangeItemResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ExchangeItem_Resp)
  return exchangeitem_resp_;
}
inline ::fgame::CSExchangeItemResp* S2ClientMsg::release_exchangeitem_resp() {
  clear_has_exchangeitem_resp();
  ::fgame::CSExchangeItemResp* temp = exchangeitem_resp_;
  exchangeitem_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_exchangeitem_resp(::fgame::CSExchangeItemResp* exchangeitem_resp) {
  delete exchangeitem_resp_;
  exchangeitem_resp_ = exchangeitem_resp;
  if (exchangeitem_resp) {
    set_has_exchangeitem_resp();
  } else {
    clear_has_exchangeitem_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ExchangeItem_Resp)
}

// optional .fgame.CSActivityCrazyDtlsResp ActivityCrazyDtls_Resp = 97;
inline bool S2ClientMsg::has_activitycrazydtls_resp() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void S2ClientMsg::set_has_activitycrazydtls_resp() {
  _has_bits_[2] |= 0x01000000u;
}
inline void S2ClientMsg::clear_has_activitycrazydtls_resp() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void S2ClientMsg::clear_activitycrazydtls_resp() {
  if (activitycrazydtls_resp_ != NULL) activitycrazydtls_resp_->::fgame::CSActivityCrazyDtlsResp::Clear();
  clear_has_activitycrazydtls_resp();
}
inline const ::fgame::CSActivityCrazyDtlsResp& S2ClientMsg::activitycrazydtls_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivityCrazyDtls_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitycrazydtls_resp_ != NULL ? *activitycrazydtls_resp_ : *default_instance().activitycrazydtls_resp_;
#else
  return activitycrazydtls_resp_ != NULL ? *activitycrazydtls_resp_ : *default_instance_->activitycrazydtls_resp_;
#endif
}
inline ::fgame::CSActivityCrazyDtlsResp* S2ClientMsg::mutable_activitycrazydtls_resp() {
  set_has_activitycrazydtls_resp();
  if (activitycrazydtls_resp_ == NULL) activitycrazydtls_resp_ = new ::fgame::CSActivityCrazyDtlsResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivityCrazyDtls_Resp)
  return activitycrazydtls_resp_;
}
inline ::fgame::CSActivityCrazyDtlsResp* S2ClientMsg::release_activitycrazydtls_resp() {
  clear_has_activitycrazydtls_resp();
  ::fgame::CSActivityCrazyDtlsResp* temp = activitycrazydtls_resp_;
  activitycrazydtls_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activitycrazydtls_resp(::fgame::CSActivityCrazyDtlsResp* activitycrazydtls_resp) {
  delete activitycrazydtls_resp_;
  activitycrazydtls_resp_ = activitycrazydtls_resp;
  if (activitycrazydtls_resp) {
    set_has_activitycrazydtls_resp();
  } else {
    clear_has_activitycrazydtls_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivityCrazyDtls_Resp)
}

// optional .fgame.CSActivityCrazyUsageResp ActivityCrazyUsage_Resp = 98;
inline bool S2ClientMsg::has_activitycrazyusage_resp() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void S2ClientMsg::set_has_activitycrazyusage_resp() {
  _has_bits_[2] |= 0x02000000u;
}
inline void S2ClientMsg::clear_has_activitycrazyusage_resp() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void S2ClientMsg::clear_activitycrazyusage_resp() {
  if (activitycrazyusage_resp_ != NULL) activitycrazyusage_resp_->::fgame::CSActivityCrazyUsageResp::Clear();
  clear_has_activitycrazyusage_resp();
}
inline const ::fgame::CSActivityCrazyUsageResp& S2ClientMsg::activitycrazyusage_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivityCrazyUsage_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitycrazyusage_resp_ != NULL ? *activitycrazyusage_resp_ : *default_instance().activitycrazyusage_resp_;
#else
  return activitycrazyusage_resp_ != NULL ? *activitycrazyusage_resp_ : *default_instance_->activitycrazyusage_resp_;
#endif
}
inline ::fgame::CSActivityCrazyUsageResp* S2ClientMsg::mutable_activitycrazyusage_resp() {
  set_has_activitycrazyusage_resp();
  if (activitycrazyusage_resp_ == NULL) activitycrazyusage_resp_ = new ::fgame::CSActivityCrazyUsageResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivityCrazyUsage_Resp)
  return activitycrazyusage_resp_;
}
inline ::fgame::CSActivityCrazyUsageResp* S2ClientMsg::release_activitycrazyusage_resp() {
  clear_has_activitycrazyusage_resp();
  ::fgame::CSActivityCrazyUsageResp* temp = activitycrazyusage_resp_;
  activitycrazyusage_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activitycrazyusage_resp(::fgame::CSActivityCrazyUsageResp* activitycrazyusage_resp) {
  delete activitycrazyusage_resp_;
  activitycrazyusage_resp_ = activitycrazyusage_resp;
  if (activitycrazyusage_resp) {
    set_has_activitycrazyusage_resp();
  } else {
    clear_has_activitycrazyusage_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivityCrazyUsage_Resp)
}

// optional .fgame.CSActivityCrazyUsableResp ActivityCrazyUsable_Resp = 99;
inline bool S2ClientMsg::has_activitycrazyusable_resp() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void S2ClientMsg::set_has_activitycrazyusable_resp() {
  _has_bits_[2] |= 0x04000000u;
}
inline void S2ClientMsg::clear_has_activitycrazyusable_resp() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void S2ClientMsg::clear_activitycrazyusable_resp() {
  if (activitycrazyusable_resp_ != NULL) activitycrazyusable_resp_->::fgame::CSActivityCrazyUsableResp::Clear();
  clear_has_activitycrazyusable_resp();
}
inline const ::fgame::CSActivityCrazyUsableResp& S2ClientMsg::activitycrazyusable_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ActivityCrazyUsable_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitycrazyusable_resp_ != NULL ? *activitycrazyusable_resp_ : *default_instance().activitycrazyusable_resp_;
#else
  return activitycrazyusable_resp_ != NULL ? *activitycrazyusable_resp_ : *default_instance_->activitycrazyusable_resp_;
#endif
}
inline ::fgame::CSActivityCrazyUsableResp* S2ClientMsg::mutable_activitycrazyusable_resp() {
  set_has_activitycrazyusable_resp();
  if (activitycrazyusable_resp_ == NULL) activitycrazyusable_resp_ = new ::fgame::CSActivityCrazyUsableResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ActivityCrazyUsable_Resp)
  return activitycrazyusable_resp_;
}
inline ::fgame::CSActivityCrazyUsableResp* S2ClientMsg::release_activitycrazyusable_resp() {
  clear_has_activitycrazyusable_resp();
  ::fgame::CSActivityCrazyUsableResp* temp = activitycrazyusable_resp_;
  activitycrazyusable_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_activitycrazyusable_resp(::fgame::CSActivityCrazyUsableResp* activitycrazyusable_resp) {
  delete activitycrazyusable_resp_;
  activitycrazyusable_resp_ = activitycrazyusable_resp;
  if (activitycrazyusable_resp) {
    set_has_activitycrazyusable_resp();
  } else {
    clear_has_activitycrazyusable_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ActivityCrazyUsable_Resp)
}

// optional .fgame.CSShopListResp ShopList_Resp = 100;
inline bool S2ClientMsg::has_shoplist_resp() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void S2ClientMsg::set_has_shoplist_resp() {
  _has_bits_[2] |= 0x08000000u;
}
inline void S2ClientMsg::clear_has_shoplist_resp() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void S2ClientMsg::clear_shoplist_resp() {
  if (shoplist_resp_ != NULL) shoplist_resp_->::fgame::CSShopListResp::Clear();
  clear_has_shoplist_resp();
}
inline const ::fgame::CSShopListResp& S2ClientMsg::shoplist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ShopList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return shoplist_resp_ != NULL ? *shoplist_resp_ : *default_instance().shoplist_resp_;
#else
  return shoplist_resp_ != NULL ? *shoplist_resp_ : *default_instance_->shoplist_resp_;
#endif
}
inline ::fgame::CSShopListResp* S2ClientMsg::mutable_shoplist_resp() {
  set_has_shoplist_resp();
  if (shoplist_resp_ == NULL) shoplist_resp_ = new ::fgame::CSShopListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ShopList_Resp)
  return shoplist_resp_;
}
inline ::fgame::CSShopListResp* S2ClientMsg::release_shoplist_resp() {
  clear_has_shoplist_resp();
  ::fgame::CSShopListResp* temp = shoplist_resp_;
  shoplist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_shoplist_resp(::fgame::CSShopListResp* shoplist_resp) {
  delete shoplist_resp_;
  shoplist_resp_ = shoplist_resp;
  if (shoplist_resp) {
    set_has_shoplist_resp();
  } else {
    clear_has_shoplist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ShopList_Resp)
}

// optional .fgame.CSPvpObserverResp PvpObserver_Resp = 101;
inline bool S2ClientMsg::has_pvpobserver_resp() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpobserver_resp() {
  _has_bits_[2] |= 0x10000000u;
}
inline void S2ClientMsg::clear_has_pvpobserver_resp() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void S2ClientMsg::clear_pvpobserver_resp() {
  if (pvpobserver_resp_ != NULL) pvpobserver_resp_->::fgame::CSPvpObserverResp::Clear();
  clear_has_pvpobserver_resp();
}
inline const ::fgame::CSPvpObserverResp& S2ClientMsg::pvpobserver_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpObserver_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpobserver_resp_ != NULL ? *pvpobserver_resp_ : *default_instance().pvpobserver_resp_;
#else
  return pvpobserver_resp_ != NULL ? *pvpobserver_resp_ : *default_instance_->pvpobserver_resp_;
#endif
}
inline ::fgame::CSPvpObserverResp* S2ClientMsg::mutable_pvpobserver_resp() {
  set_has_pvpobserver_resp();
  if (pvpobserver_resp_ == NULL) pvpobserver_resp_ = new ::fgame::CSPvpObserverResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpObserver_Resp)
  return pvpobserver_resp_;
}
inline ::fgame::CSPvpObserverResp* S2ClientMsg::release_pvpobserver_resp() {
  clear_has_pvpobserver_resp();
  ::fgame::CSPvpObserverResp* temp = pvpobserver_resp_;
  pvpobserver_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpobserver_resp(::fgame::CSPvpObserverResp* pvpobserver_resp) {
  delete pvpobserver_resp_;
  pvpobserver_resp_ = pvpobserver_resp;
  if (pvpobserver_resp) {
    set_has_pvpobserver_resp();
  } else {
    clear_has_pvpobserver_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpObserver_Resp)
}

// optional .fgame.CSSetNewBieOssResp SetNewBieOss_Resp = 102;
inline bool S2ClientMsg::has_setnewbieoss_resp() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void S2ClientMsg::set_has_setnewbieoss_resp() {
  _has_bits_[2] |= 0x20000000u;
}
inline void S2ClientMsg::clear_has_setnewbieoss_resp() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void S2ClientMsg::clear_setnewbieoss_resp() {
  if (setnewbieoss_resp_ != NULL) setnewbieoss_resp_->::fgame::CSSetNewBieOssResp::Clear();
  clear_has_setnewbieoss_resp();
}
inline const ::fgame::CSSetNewBieOssResp& S2ClientMsg::setnewbieoss_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SetNewBieOss_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setnewbieoss_resp_ != NULL ? *setnewbieoss_resp_ : *default_instance().setnewbieoss_resp_;
#else
  return setnewbieoss_resp_ != NULL ? *setnewbieoss_resp_ : *default_instance_->setnewbieoss_resp_;
#endif
}
inline ::fgame::CSSetNewBieOssResp* S2ClientMsg::mutable_setnewbieoss_resp() {
  set_has_setnewbieoss_resp();
  if (setnewbieoss_resp_ == NULL) setnewbieoss_resp_ = new ::fgame::CSSetNewBieOssResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SetNewBieOss_Resp)
  return setnewbieoss_resp_;
}
inline ::fgame::CSSetNewBieOssResp* S2ClientMsg::release_setnewbieoss_resp() {
  clear_has_setnewbieoss_resp();
  ::fgame::CSSetNewBieOssResp* temp = setnewbieoss_resp_;
  setnewbieoss_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_setnewbieoss_resp(::fgame::CSSetNewBieOssResp* setnewbieoss_resp) {
  delete setnewbieoss_resp_;
  setnewbieoss_resp_ = setnewbieoss_resp;
  if (setnewbieoss_resp) {
    set_has_setnewbieoss_resp();
  } else {
    clear_has_setnewbieoss_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SetNewBieOss_Resp)
}

// optional .fgame.CSUpdateAchievementResp UpdateAchievement_Resp = 103;
inline bool S2ClientMsg::has_updateachievement_resp() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void S2ClientMsg::set_has_updateachievement_resp() {
  _has_bits_[2] |= 0x40000000u;
}
inline void S2ClientMsg::clear_has_updateachievement_resp() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void S2ClientMsg::clear_updateachievement_resp() {
  if (updateachievement_resp_ != NULL) updateachievement_resp_->::fgame::CSUpdateAchievementResp::Clear();
  clear_has_updateachievement_resp();
}
inline const ::fgame::CSUpdateAchievementResp& S2ClientMsg::updateachievement_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UpdateAchievement_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updateachievement_resp_ != NULL ? *updateachievement_resp_ : *default_instance().updateachievement_resp_;
#else
  return updateachievement_resp_ != NULL ? *updateachievement_resp_ : *default_instance_->updateachievement_resp_;
#endif
}
inline ::fgame::CSUpdateAchievementResp* S2ClientMsg::mutable_updateachievement_resp() {
  set_has_updateachievement_resp();
  if (updateachievement_resp_ == NULL) updateachievement_resp_ = new ::fgame::CSUpdateAchievementResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UpdateAchievement_Resp)
  return updateachievement_resp_;
}
inline ::fgame::CSUpdateAchievementResp* S2ClientMsg::release_updateachievement_resp() {
  clear_has_updateachievement_resp();
  ::fgame::CSUpdateAchievementResp* temp = updateachievement_resp_;
  updateachievement_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_updateachievement_resp(::fgame::CSUpdateAchievementResp* updateachievement_resp) {
  delete updateachievement_resp_;
  updateachievement_resp_ = updateachievement_resp;
  if (updateachievement_resp) {
    set_has_updateachievement_resp();
  } else {
    clear_has_updateachievement_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UpdateAchievement_Resp)
}

// optional .fgame.CSPvpResultResp PvpResult_Resp = 104;
inline bool S2ClientMsg::has_pvpresult_resp() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpresult_resp() {
  _has_bits_[2] |= 0x80000000u;
}
inline void S2ClientMsg::clear_has_pvpresult_resp() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void S2ClientMsg::clear_pvpresult_resp() {
  if (pvpresult_resp_ != NULL) pvpresult_resp_->::fgame::CSPvpResultResp::Clear();
  clear_has_pvpresult_resp();
}
inline const ::fgame::CSPvpResultResp& S2ClientMsg::pvpresult_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpResult_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpresult_resp_ != NULL ? *pvpresult_resp_ : *default_instance().pvpresult_resp_;
#else
  return pvpresult_resp_ != NULL ? *pvpresult_resp_ : *default_instance_->pvpresult_resp_;
#endif
}
inline ::fgame::CSPvpResultResp* S2ClientMsg::mutable_pvpresult_resp() {
  set_has_pvpresult_resp();
  if (pvpresult_resp_ == NULL) pvpresult_resp_ = new ::fgame::CSPvpResultResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpResult_Resp)
  return pvpresult_resp_;
}
inline ::fgame::CSPvpResultResp* S2ClientMsg::release_pvpresult_resp() {
  clear_has_pvpresult_resp();
  ::fgame::CSPvpResultResp* temp = pvpresult_resp_;
  pvpresult_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpresult_resp(::fgame::CSPvpResultResp* pvpresult_resp) {
  delete pvpresult_resp_;
  pvpresult_resp_ = pvpresult_resp;
  if (pvpresult_resp) {
    set_has_pvpresult_resp();
  } else {
    clear_has_pvpresult_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpResult_Resp)
}

// optional .fgame.CSPvpSelfRankListResp PvpSelfRankList_Resp = 105;
inline bool S2ClientMsg::has_pvpselfranklist_resp() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_pvpselfranklist_resp() {
  _has_bits_[3] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_pvpselfranklist_resp() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_pvpselfranklist_resp() {
  if (pvpselfranklist_resp_ != NULL) pvpselfranklist_resp_->::fgame::CSPvpSelfRankListResp::Clear();
  clear_has_pvpselfranklist_resp();
}
inline const ::fgame::CSPvpSelfRankListResp& S2ClientMsg::pvpselfranklist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpSelfRankList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpselfranklist_resp_ != NULL ? *pvpselfranklist_resp_ : *default_instance().pvpselfranklist_resp_;
#else
  return pvpselfranklist_resp_ != NULL ? *pvpselfranklist_resp_ : *default_instance_->pvpselfranklist_resp_;
#endif
}
inline ::fgame::CSPvpSelfRankListResp* S2ClientMsg::mutable_pvpselfranklist_resp() {
  set_has_pvpselfranklist_resp();
  if (pvpselfranklist_resp_ == NULL) pvpselfranklist_resp_ = new ::fgame::CSPvpSelfRankListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpSelfRankList_Resp)
  return pvpselfranklist_resp_;
}
inline ::fgame::CSPvpSelfRankListResp* S2ClientMsg::release_pvpselfranklist_resp() {
  clear_has_pvpselfranklist_resp();
  ::fgame::CSPvpSelfRankListResp* temp = pvpselfranklist_resp_;
  pvpselfranklist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpselfranklist_resp(::fgame::CSPvpSelfRankListResp* pvpselfranklist_resp) {
  delete pvpselfranklist_resp_;
  pvpselfranklist_resp_ = pvpselfranklist_resp;
  if (pvpselfranklist_resp) {
    set_has_pvpselfranklist_resp();
  } else {
    clear_has_pvpselfranklist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpSelfRankList_Resp)
}

// optional .fgame.CSGWGetMatchInfoResp GWGetMatchInfo_Resp = 106;
inline bool S2ClientMsg::has_gwgetmatchinfo_resp() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_gwgetmatchinfo_resp() {
  _has_bits_[3] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_gwgetmatchinfo_resp() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_gwgetmatchinfo_resp() {
  if (gwgetmatchinfo_resp_ != NULL) gwgetmatchinfo_resp_->::fgame::CSGWGetMatchInfoResp::Clear();
  clear_has_gwgetmatchinfo_resp();
}
inline const ::fgame::CSGWGetMatchInfoResp& S2ClientMsg::gwgetmatchinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GWGetMatchInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwgetmatchinfo_resp_ != NULL ? *gwgetmatchinfo_resp_ : *default_instance().gwgetmatchinfo_resp_;
#else
  return gwgetmatchinfo_resp_ != NULL ? *gwgetmatchinfo_resp_ : *default_instance_->gwgetmatchinfo_resp_;
#endif
}
inline ::fgame::CSGWGetMatchInfoResp* S2ClientMsg::mutable_gwgetmatchinfo_resp() {
  set_has_gwgetmatchinfo_resp();
  if (gwgetmatchinfo_resp_ == NULL) gwgetmatchinfo_resp_ = new ::fgame::CSGWGetMatchInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GWGetMatchInfo_Resp)
  return gwgetmatchinfo_resp_;
}
inline ::fgame::CSGWGetMatchInfoResp* S2ClientMsg::release_gwgetmatchinfo_resp() {
  clear_has_gwgetmatchinfo_resp();
  ::fgame::CSGWGetMatchInfoResp* temp = gwgetmatchinfo_resp_;
  gwgetmatchinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gwgetmatchinfo_resp(::fgame::CSGWGetMatchInfoResp* gwgetmatchinfo_resp) {
  delete gwgetmatchinfo_resp_;
  gwgetmatchinfo_resp_ = gwgetmatchinfo_resp;
  if (gwgetmatchinfo_resp) {
    set_has_gwgetmatchinfo_resp();
  } else {
    clear_has_gwgetmatchinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GWGetMatchInfo_Resp)
}

// optional .fgame.CSGWGetRankResp GWGetRank_Resp = 107;
inline bool S2ClientMsg::has_gwgetrank_resp() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_gwgetrank_resp() {
  _has_bits_[3] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_gwgetrank_resp() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_gwgetrank_resp() {
  if (gwgetrank_resp_ != NULL) gwgetrank_resp_->::fgame::CSGWGetRankResp::Clear();
  clear_has_gwgetrank_resp();
}
inline const ::fgame::CSGWGetRankResp& S2ClientMsg::gwgetrank_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GWGetRank_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwgetrank_resp_ != NULL ? *gwgetrank_resp_ : *default_instance().gwgetrank_resp_;
#else
  return gwgetrank_resp_ != NULL ? *gwgetrank_resp_ : *default_instance_->gwgetrank_resp_;
#endif
}
inline ::fgame::CSGWGetRankResp* S2ClientMsg::mutable_gwgetrank_resp() {
  set_has_gwgetrank_resp();
  if (gwgetrank_resp_ == NULL) gwgetrank_resp_ = new ::fgame::CSGWGetRankResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GWGetRank_Resp)
  return gwgetrank_resp_;
}
inline ::fgame::CSGWGetRankResp* S2ClientMsg::release_gwgetrank_resp() {
  clear_has_gwgetrank_resp();
  ::fgame::CSGWGetRankResp* temp = gwgetrank_resp_;
  gwgetrank_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gwgetrank_resp(::fgame::CSGWGetRankResp* gwgetrank_resp) {
  delete gwgetrank_resp_;
  gwgetrank_resp_ = gwgetrank_resp;
  if (gwgetrank_resp) {
    set_has_gwgetrank_resp();
  } else {
    clear_has_gwgetrank_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GWGetRank_Resp)
}

// optional .fgame.CSGWMatchResp GWMatch_Resp = 108;
inline bool S2ClientMsg::has_gwmatch_resp() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_gwmatch_resp() {
  _has_bits_[3] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_gwmatch_resp() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_gwmatch_resp() {
  if (gwmatch_resp_ != NULL) gwmatch_resp_->::fgame::CSGWMatchResp::Clear();
  clear_has_gwmatch_resp();
}
inline const ::fgame::CSGWMatchResp& S2ClientMsg::gwmatch_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GWMatch_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwmatch_resp_ != NULL ? *gwmatch_resp_ : *default_instance().gwmatch_resp_;
#else
  return gwmatch_resp_ != NULL ? *gwmatch_resp_ : *default_instance_->gwmatch_resp_;
#endif
}
inline ::fgame::CSGWMatchResp* S2ClientMsg::mutable_gwmatch_resp() {
  set_has_gwmatch_resp();
  if (gwmatch_resp_ == NULL) gwmatch_resp_ = new ::fgame::CSGWMatchResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GWMatch_Resp)
  return gwmatch_resp_;
}
inline ::fgame::CSGWMatchResp* S2ClientMsg::release_gwmatch_resp() {
  clear_has_gwmatch_resp();
  ::fgame::CSGWMatchResp* temp = gwmatch_resp_;
  gwmatch_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gwmatch_resp(::fgame::CSGWMatchResp* gwmatch_resp) {
  delete gwmatch_resp_;
  gwmatch_resp_ = gwmatch_resp;
  if (gwmatch_resp) {
    set_has_gwmatch_resp();
  } else {
    clear_has_gwmatch_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GWMatch_Resp)
}

// optional .fgame.CSGWMatchStopResp GWMatchStop_Resp = 109;
inline bool S2ClientMsg::has_gwmatchstop_resp() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_gwmatchstop_resp() {
  _has_bits_[3] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_gwmatchstop_resp() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_gwmatchstop_resp() {
  if (gwmatchstop_resp_ != NULL) gwmatchstop_resp_->::fgame::CSGWMatchStopResp::Clear();
  clear_has_gwmatchstop_resp();
}
inline const ::fgame::CSGWMatchStopResp& S2ClientMsg::gwmatchstop_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GWMatchStop_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwmatchstop_resp_ != NULL ? *gwmatchstop_resp_ : *default_instance().gwmatchstop_resp_;
#else
  return gwmatchstop_resp_ != NULL ? *gwmatchstop_resp_ : *default_instance_->gwmatchstop_resp_;
#endif
}
inline ::fgame::CSGWMatchStopResp* S2ClientMsg::mutable_gwmatchstop_resp() {
  set_has_gwmatchstop_resp();
  if (gwmatchstop_resp_ == NULL) gwmatchstop_resp_ = new ::fgame::CSGWMatchStopResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GWMatchStop_Resp)
  return gwmatchstop_resp_;
}
inline ::fgame::CSGWMatchStopResp* S2ClientMsg::release_gwmatchstop_resp() {
  clear_has_gwmatchstop_resp();
  ::fgame::CSGWMatchStopResp* temp = gwmatchstop_resp_;
  gwmatchstop_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gwmatchstop_resp(::fgame::CSGWMatchStopResp* gwmatchstop_resp) {
  delete gwmatchstop_resp_;
  gwmatchstop_resp_ = gwmatchstop_resp;
  if (gwmatchstop_resp) {
    set_has_gwmatchstop_resp();
  } else {
    clear_has_gwmatchstop_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GWMatchStop_Resp)
}

// optional .fgame.CSGWBuyEnergyResp GWBuyEnergy_Resp = 110;
inline bool S2ClientMsg::has_gwbuyenergy_resp() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_gwbuyenergy_resp() {
  _has_bits_[3] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_gwbuyenergy_resp() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_gwbuyenergy_resp() {
  if (gwbuyenergy_resp_ != NULL) gwbuyenergy_resp_->::fgame::CSGWBuyEnergyResp::Clear();
  clear_has_gwbuyenergy_resp();
}
inline const ::fgame::CSGWBuyEnergyResp& S2ClientMsg::gwbuyenergy_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GWBuyEnergy_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return gwbuyenergy_resp_ != NULL ? *gwbuyenergy_resp_ : *default_instance().gwbuyenergy_resp_;
#else
  return gwbuyenergy_resp_ != NULL ? *gwbuyenergy_resp_ : *default_instance_->gwbuyenergy_resp_;
#endif
}
inline ::fgame::CSGWBuyEnergyResp* S2ClientMsg::mutable_gwbuyenergy_resp() {
  set_has_gwbuyenergy_resp();
  if (gwbuyenergy_resp_ == NULL) gwbuyenergy_resp_ = new ::fgame::CSGWBuyEnergyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GWBuyEnergy_Resp)
  return gwbuyenergy_resp_;
}
inline ::fgame::CSGWBuyEnergyResp* S2ClientMsg::release_gwbuyenergy_resp() {
  clear_has_gwbuyenergy_resp();
  ::fgame::CSGWBuyEnergyResp* temp = gwbuyenergy_resp_;
  gwbuyenergy_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_gwbuyenergy_resp(::fgame::CSGWBuyEnergyResp* gwbuyenergy_resp) {
  delete gwbuyenergy_resp_;
  gwbuyenergy_resp_ = gwbuyenergy_resp;
  if (gwbuyenergy_resp) {
    set_has_gwbuyenergy_resp();
  } else {
    clear_has_gwbuyenergy_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GWBuyEnergy_Resp)
}

// optional .fgame.CSRequestPKeyResp RequestPKey_Resp = 114;
inline bool S2ClientMsg::has_requestpkey_resp() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_requestpkey_resp() {
  _has_bits_[3] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_requestpkey_resp() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_requestpkey_resp() {
  if (requestpkey_resp_ != NULL) requestpkey_resp_->::fgame::CSRequestPKeyResp::Clear();
  clear_has_requestpkey_resp();
}
inline const ::fgame::CSRequestPKeyResp& S2ClientMsg::requestpkey_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RequestPKey_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return requestpkey_resp_ != NULL ? *requestpkey_resp_ : *default_instance().requestpkey_resp_;
#else
  return requestpkey_resp_ != NULL ? *requestpkey_resp_ : *default_instance_->requestpkey_resp_;
#endif
}
inline ::fgame::CSRequestPKeyResp* S2ClientMsg::mutable_requestpkey_resp() {
  set_has_requestpkey_resp();
  if (requestpkey_resp_ == NULL) requestpkey_resp_ = new ::fgame::CSRequestPKeyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RequestPKey_Resp)
  return requestpkey_resp_;
}
inline ::fgame::CSRequestPKeyResp* S2ClientMsg::release_requestpkey_resp() {
  clear_has_requestpkey_resp();
  ::fgame::CSRequestPKeyResp* temp = requestpkey_resp_;
  requestpkey_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_requestpkey_resp(::fgame::CSRequestPKeyResp* requestpkey_resp) {
  delete requestpkey_resp_;
  requestpkey_resp_ = requestpkey_resp;
  if (requestpkey_resp) {
    set_has_requestpkey_resp();
  } else {
    clear_has_requestpkey_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RequestPKey_Resp)
}

// optional .fgame.CSSendClientKeyResp SendClientKey_Resp = 115;
inline bool S2ClientMsg::has_sendclientkey_resp() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_sendclientkey_resp() {
  _has_bits_[3] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_sendclientkey_resp() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_sendclientkey_resp() {
  if (sendclientkey_resp_ != NULL) sendclientkey_resp_->::fgame::CSSendClientKeyResp::Clear();
  clear_has_sendclientkey_resp();
}
inline const ::fgame::CSSendClientKeyResp& S2ClientMsg::sendclientkey_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SendClientKey_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sendclientkey_resp_ != NULL ? *sendclientkey_resp_ : *default_instance().sendclientkey_resp_;
#else
  return sendclientkey_resp_ != NULL ? *sendclientkey_resp_ : *default_instance_->sendclientkey_resp_;
#endif
}
inline ::fgame::CSSendClientKeyResp* S2ClientMsg::mutable_sendclientkey_resp() {
  set_has_sendclientkey_resp();
  if (sendclientkey_resp_ == NULL) sendclientkey_resp_ = new ::fgame::CSSendClientKeyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SendClientKey_Resp)
  return sendclientkey_resp_;
}
inline ::fgame::CSSendClientKeyResp* S2ClientMsg::release_sendclientkey_resp() {
  clear_has_sendclientkey_resp();
  ::fgame::CSSendClientKeyResp* temp = sendclientkey_resp_;
  sendclientkey_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_sendclientkey_resp(::fgame::CSSendClientKeyResp* sendclientkey_resp) {
  delete sendclientkey_resp_;
  sendclientkey_resp_ = sendclientkey_resp;
  if (sendclientkey_resp) {
    set_has_sendclientkey_resp();
  } else {
    clear_has_sendclientkey_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SendClientKey_Resp)
}

// optional .fgame.CSUpdateExchangeListResp UpdateExchangeList_Resp = 116;
inline bool S2ClientMsg::has_updateexchangelist_resp() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_updateexchangelist_resp() {
  _has_bits_[3] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_updateexchangelist_resp() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_updateexchangelist_resp() {
  if (updateexchangelist_resp_ != NULL) updateexchangelist_resp_->::fgame::CSUpdateExchangeListResp::Clear();
  clear_has_updateexchangelist_resp();
}
inline const ::fgame::CSUpdateExchangeListResp& S2ClientMsg::updateexchangelist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UpdateExchangeList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updateexchangelist_resp_ != NULL ? *updateexchangelist_resp_ : *default_instance().updateexchangelist_resp_;
#else
  return updateexchangelist_resp_ != NULL ? *updateexchangelist_resp_ : *default_instance_->updateexchangelist_resp_;
#endif
}
inline ::fgame::CSUpdateExchangeListResp* S2ClientMsg::mutable_updateexchangelist_resp() {
  set_has_updateexchangelist_resp();
  if (updateexchangelist_resp_ == NULL) updateexchangelist_resp_ = new ::fgame::CSUpdateExchangeListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UpdateExchangeList_Resp)
  return updateexchangelist_resp_;
}
inline ::fgame::CSUpdateExchangeListResp* S2ClientMsg::release_updateexchangelist_resp() {
  clear_has_updateexchangelist_resp();
  ::fgame::CSUpdateExchangeListResp* temp = updateexchangelist_resp_;
  updateexchangelist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_updateexchangelist_resp(::fgame::CSUpdateExchangeListResp* updateexchangelist_resp) {
  delete updateexchangelist_resp_;
  updateexchangelist_resp_ = updateexchangelist_resp;
  if (updateexchangelist_resp) {
    set_has_updateexchangelist_resp();
  } else {
    clear_has_updateexchangelist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UpdateExchangeList_Resp)
}

// optional .fgame.CSGlyphsRequestInfoResp GlyphsRequestInfo_Resp = 120;
inline bool S2ClientMsg::has_glyphsrequestinfo_resp() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void S2ClientMsg::set_has_glyphsrequestinfo_resp() {
  _has_bits_[3] |= 0x00000200u;
}
inline void S2ClientMsg::clear_has_glyphsrequestinfo_resp() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void S2ClientMsg::clear_glyphsrequestinfo_resp() {
  if (glyphsrequestinfo_resp_ != NULL) glyphsrequestinfo_resp_->::fgame::CSGlyphsRequestInfoResp::Clear();
  clear_has_glyphsrequestinfo_resp();
}
inline const ::fgame::CSGlyphsRequestInfoResp& S2ClientMsg::glyphsrequestinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphsRequestInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsrequestinfo_resp_ != NULL ? *glyphsrequestinfo_resp_ : *default_instance().glyphsrequestinfo_resp_;
#else
  return glyphsrequestinfo_resp_ != NULL ? *glyphsrequestinfo_resp_ : *default_instance_->glyphsrequestinfo_resp_;
#endif
}
inline ::fgame::CSGlyphsRequestInfoResp* S2ClientMsg::mutable_glyphsrequestinfo_resp() {
  set_has_glyphsrequestinfo_resp();
  if (glyphsrequestinfo_resp_ == NULL) glyphsrequestinfo_resp_ = new ::fgame::CSGlyphsRequestInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphsRequestInfo_Resp)
  return glyphsrequestinfo_resp_;
}
inline ::fgame::CSGlyphsRequestInfoResp* S2ClientMsg::release_glyphsrequestinfo_resp() {
  clear_has_glyphsrequestinfo_resp();
  ::fgame::CSGlyphsRequestInfoResp* temp = glyphsrequestinfo_resp_;
  glyphsrequestinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphsrequestinfo_resp(::fgame::CSGlyphsRequestInfoResp* glyphsrequestinfo_resp) {
  delete glyphsrequestinfo_resp_;
  glyphsrequestinfo_resp_ = glyphsrequestinfo_resp;
  if (glyphsrequestinfo_resp) {
    set_has_glyphsrequestinfo_resp();
  } else {
    clear_has_glyphsrequestinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphsRequestInfo_Resp)
}

// optional .fgame.CSGlyphsRequestBasicInfoResp GlyphsRequestBasicInfo_Resp = 121;
inline bool S2ClientMsg::has_glyphsrequestbasicinfo_resp() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void S2ClientMsg::set_has_glyphsrequestbasicinfo_resp() {
  _has_bits_[3] |= 0x00000400u;
}
inline void S2ClientMsg::clear_has_glyphsrequestbasicinfo_resp() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void S2ClientMsg::clear_glyphsrequestbasicinfo_resp() {
  if (glyphsrequestbasicinfo_resp_ != NULL) glyphsrequestbasicinfo_resp_->::fgame::CSGlyphsRequestBasicInfoResp::Clear();
  clear_has_glyphsrequestbasicinfo_resp();
}
inline const ::fgame::CSGlyphsRequestBasicInfoResp& S2ClientMsg::glyphsrequestbasicinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphsRequestBasicInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsrequestbasicinfo_resp_ != NULL ? *glyphsrequestbasicinfo_resp_ : *default_instance().glyphsrequestbasicinfo_resp_;
#else
  return glyphsrequestbasicinfo_resp_ != NULL ? *glyphsrequestbasicinfo_resp_ : *default_instance_->glyphsrequestbasicinfo_resp_;
#endif
}
inline ::fgame::CSGlyphsRequestBasicInfoResp* S2ClientMsg::mutable_glyphsrequestbasicinfo_resp() {
  set_has_glyphsrequestbasicinfo_resp();
  if (glyphsrequestbasicinfo_resp_ == NULL) glyphsrequestbasicinfo_resp_ = new ::fgame::CSGlyphsRequestBasicInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphsRequestBasicInfo_Resp)
  return glyphsrequestbasicinfo_resp_;
}
inline ::fgame::CSGlyphsRequestBasicInfoResp* S2ClientMsg::release_glyphsrequestbasicinfo_resp() {
  clear_has_glyphsrequestbasicinfo_resp();
  ::fgame::CSGlyphsRequestBasicInfoResp* temp = glyphsrequestbasicinfo_resp_;
  glyphsrequestbasicinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphsrequestbasicinfo_resp(::fgame::CSGlyphsRequestBasicInfoResp* glyphsrequestbasicinfo_resp) {
  delete glyphsrequestbasicinfo_resp_;
  glyphsrequestbasicinfo_resp_ = glyphsrequestbasicinfo_resp;
  if (glyphsrequestbasicinfo_resp) {
    set_has_glyphsrequestbasicinfo_resp();
  } else {
    clear_has_glyphsrequestbasicinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphsRequestBasicInfo_Resp)
}

// optional .fgame.CSGlyphsActiveResp GlyphsActive_Resp = 122;
inline bool S2ClientMsg::has_glyphsactive_resp() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void S2ClientMsg::set_has_glyphsactive_resp() {
  _has_bits_[3] |= 0x00000800u;
}
inline void S2ClientMsg::clear_has_glyphsactive_resp() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void S2ClientMsg::clear_glyphsactive_resp() {
  if (glyphsactive_resp_ != NULL) glyphsactive_resp_->::fgame::CSGlyphsActiveResp::Clear();
  clear_has_glyphsactive_resp();
}
inline const ::fgame::CSGlyphsActiveResp& S2ClientMsg::glyphsactive_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphsActive_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsactive_resp_ != NULL ? *glyphsactive_resp_ : *default_instance().glyphsactive_resp_;
#else
  return glyphsactive_resp_ != NULL ? *glyphsactive_resp_ : *default_instance_->glyphsactive_resp_;
#endif
}
inline ::fgame::CSGlyphsActiveResp* S2ClientMsg::mutable_glyphsactive_resp() {
  set_has_glyphsactive_resp();
  if (glyphsactive_resp_ == NULL) glyphsactive_resp_ = new ::fgame::CSGlyphsActiveResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphsActive_Resp)
  return glyphsactive_resp_;
}
inline ::fgame::CSGlyphsActiveResp* S2ClientMsg::release_glyphsactive_resp() {
  clear_has_glyphsactive_resp();
  ::fgame::CSGlyphsActiveResp* temp = glyphsactive_resp_;
  glyphsactive_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphsactive_resp(::fgame::CSGlyphsActiveResp* glyphsactive_resp) {
  delete glyphsactive_resp_;
  glyphsactive_resp_ = glyphsactive_resp;
  if (glyphsactive_resp) {
    set_has_glyphsactive_resp();
  } else {
    clear_has_glyphsactive_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphsActive_Resp)
}

// optional .fgame.CSGlyphsUpgradeResp GlyphsUpgrade_Resp = 123;
inline bool S2ClientMsg::has_glyphsupgrade_resp() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void S2ClientMsg::set_has_glyphsupgrade_resp() {
  _has_bits_[3] |= 0x00001000u;
}
inline void S2ClientMsg::clear_has_glyphsupgrade_resp() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void S2ClientMsg::clear_glyphsupgrade_resp() {
  if (glyphsupgrade_resp_ != NULL) glyphsupgrade_resp_->::fgame::CSGlyphsUpgradeResp::Clear();
  clear_has_glyphsupgrade_resp();
}
inline const ::fgame::CSGlyphsUpgradeResp& S2ClientMsg::glyphsupgrade_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphsUpgrade_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphsupgrade_resp_ != NULL ? *glyphsupgrade_resp_ : *default_instance().glyphsupgrade_resp_;
#else
  return glyphsupgrade_resp_ != NULL ? *glyphsupgrade_resp_ : *default_instance_->glyphsupgrade_resp_;
#endif
}
inline ::fgame::CSGlyphsUpgradeResp* S2ClientMsg::mutable_glyphsupgrade_resp() {
  set_has_glyphsupgrade_resp();
  if (glyphsupgrade_resp_ == NULL) glyphsupgrade_resp_ = new ::fgame::CSGlyphsUpgradeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphsUpgrade_Resp)
  return glyphsupgrade_resp_;
}
inline ::fgame::CSGlyphsUpgradeResp* S2ClientMsg::release_glyphsupgrade_resp() {
  clear_has_glyphsupgrade_resp();
  ::fgame::CSGlyphsUpgradeResp* temp = glyphsupgrade_resp_;
  glyphsupgrade_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphsupgrade_resp(::fgame::CSGlyphsUpgradeResp* glyphsupgrade_resp) {
  delete glyphsupgrade_resp_;
  glyphsupgrade_resp_ = glyphsupgrade_resp;
  if (glyphsupgrade_resp) {
    set_has_glyphsupgrade_resp();
  } else {
    clear_has_glyphsupgrade_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphsUpgrade_Resp)
}

// optional .fgame.CSGlyphsPvpInfoResp GlyphsPvpInfo_Resp = 124;
inline bool S2ClientMsg::has_glyphspvpinfo_resp() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void S2ClientMsg::set_has_glyphspvpinfo_resp() {
  _has_bits_[3] |= 0x00002000u;
}
inline void S2ClientMsg::clear_has_glyphspvpinfo_resp() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void S2ClientMsg::clear_glyphspvpinfo_resp() {
  if (glyphspvpinfo_resp_ != NULL) glyphspvpinfo_resp_->::fgame::CSGlyphsPvpInfoResp::Clear();
  clear_has_glyphspvpinfo_resp();
}
inline const ::fgame::CSGlyphsPvpInfoResp& S2ClientMsg::glyphspvpinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphsPvpInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphspvpinfo_resp_ != NULL ? *glyphspvpinfo_resp_ : *default_instance().glyphspvpinfo_resp_;
#else
  return glyphspvpinfo_resp_ != NULL ? *glyphspvpinfo_resp_ : *default_instance_->glyphspvpinfo_resp_;
#endif
}
inline ::fgame::CSGlyphsPvpInfoResp* S2ClientMsg::mutable_glyphspvpinfo_resp() {
  set_has_glyphspvpinfo_resp();
  if (glyphspvpinfo_resp_ == NULL) glyphspvpinfo_resp_ = new ::fgame::CSGlyphsPvpInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphsPvpInfo_Resp)
  return glyphspvpinfo_resp_;
}
inline ::fgame::CSGlyphsPvpInfoResp* S2ClientMsg::release_glyphspvpinfo_resp() {
  clear_has_glyphspvpinfo_resp();
  ::fgame::CSGlyphsPvpInfoResp* temp = glyphspvpinfo_resp_;
  glyphspvpinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphspvpinfo_resp(::fgame::CSGlyphsPvpInfoResp* glyphspvpinfo_resp) {
  delete glyphspvpinfo_resp_;
  glyphspvpinfo_resp_ = glyphspvpinfo_resp;
  if (glyphspvpinfo_resp) {
    set_has_glyphspvpinfo_resp();
  } else {
    clear_has_glyphspvpinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphsPvpInfo_Resp)
}

// optional .fgame.CSBuyVipResp BuyVip_Resp = 125;
inline bool S2ClientMsg::has_buyvip_resp() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void S2ClientMsg::set_has_buyvip_resp() {
  _has_bits_[3] |= 0x00004000u;
}
inline void S2ClientMsg::clear_has_buyvip_resp() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void S2ClientMsg::clear_buyvip_resp() {
  if (buyvip_resp_ != NULL) buyvip_resp_->::fgame::CSBuyVipResp::Clear();
  clear_has_buyvip_resp();
}
inline const ::fgame::CSBuyVipResp& S2ClientMsg::buyvip_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.BuyVip_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return buyvip_resp_ != NULL ? *buyvip_resp_ : *default_instance().buyvip_resp_;
#else
  return buyvip_resp_ != NULL ? *buyvip_resp_ : *default_instance_->buyvip_resp_;
#endif
}
inline ::fgame::CSBuyVipResp* S2ClientMsg::mutable_buyvip_resp() {
  set_has_buyvip_resp();
  if (buyvip_resp_ == NULL) buyvip_resp_ = new ::fgame::CSBuyVipResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.BuyVip_Resp)
  return buyvip_resp_;
}
inline ::fgame::CSBuyVipResp* S2ClientMsg::release_buyvip_resp() {
  clear_has_buyvip_resp();
  ::fgame::CSBuyVipResp* temp = buyvip_resp_;
  buyvip_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_buyvip_resp(::fgame::CSBuyVipResp* buyvip_resp) {
  delete buyvip_resp_;
  buyvip_resp_ = buyvip_resp;
  if (buyvip_resp) {
    set_has_buyvip_resp();
  } else {
    clear_has_buyvip_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.BuyVip_Resp)
}

// optional .fgame.CSGlyphGuideResp GlyphGuide_Resp = 126;
inline bool S2ClientMsg::has_glyphguide_resp() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void S2ClientMsg::set_has_glyphguide_resp() {
  _has_bits_[3] |= 0x00008000u;
}
inline void S2ClientMsg::clear_has_glyphguide_resp() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void S2ClientMsg::clear_glyphguide_resp() {
  if (glyphguide_resp_ != NULL) glyphguide_resp_->::fgame::CSGlyphGuideResp::Clear();
  clear_has_glyphguide_resp();
}
inline const ::fgame::CSGlyphGuideResp& S2ClientMsg::glyphguide_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GlyphGuide_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return glyphguide_resp_ != NULL ? *glyphguide_resp_ : *default_instance().glyphguide_resp_;
#else
  return glyphguide_resp_ != NULL ? *glyphguide_resp_ : *default_instance_->glyphguide_resp_;
#endif
}
inline ::fgame::CSGlyphGuideResp* S2ClientMsg::mutable_glyphguide_resp() {
  set_has_glyphguide_resp();
  if (glyphguide_resp_ == NULL) glyphguide_resp_ = new ::fgame::CSGlyphGuideResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GlyphGuide_Resp)
  return glyphguide_resp_;
}
inline ::fgame::CSGlyphGuideResp* S2ClientMsg::release_glyphguide_resp() {
  clear_has_glyphguide_resp();
  ::fgame::CSGlyphGuideResp* temp = glyphguide_resp_;
  glyphguide_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_glyphguide_resp(::fgame::CSGlyphGuideResp* glyphguide_resp) {
  delete glyphguide_resp_;
  glyphguide_resp_ = glyphguide_resp;
  if (glyphguide_resp) {
    set_has_glyphguide_resp();
  } else {
    clear_has_glyphguide_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GlyphGuide_Resp)
}

// optional .fgame.CSNewYearGetInfoResp NewYearGetInfo_Resp = 127;
inline bool S2ClientMsg::has_newyeargetinfo_resp() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void S2ClientMsg::set_has_newyeargetinfo_resp() {
  _has_bits_[3] |= 0x00010000u;
}
inline void S2ClientMsg::clear_has_newyeargetinfo_resp() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void S2ClientMsg::clear_newyeargetinfo_resp() {
  if (newyeargetinfo_resp_ != NULL) newyeargetinfo_resp_->::fgame::CSNewYearGetInfoResp::Clear();
  clear_has_newyeargetinfo_resp();
}
inline const ::fgame::CSNewYearGetInfoResp& S2ClientMsg::newyeargetinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NewYearGetInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyeargetinfo_resp_ != NULL ? *newyeargetinfo_resp_ : *default_instance().newyeargetinfo_resp_;
#else
  return newyeargetinfo_resp_ != NULL ? *newyeargetinfo_resp_ : *default_instance_->newyeargetinfo_resp_;
#endif
}
inline ::fgame::CSNewYearGetInfoResp* S2ClientMsg::mutable_newyeargetinfo_resp() {
  set_has_newyeargetinfo_resp();
  if (newyeargetinfo_resp_ == NULL) newyeargetinfo_resp_ = new ::fgame::CSNewYearGetInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NewYearGetInfo_Resp)
  return newyeargetinfo_resp_;
}
inline ::fgame::CSNewYearGetInfoResp* S2ClientMsg::release_newyeargetinfo_resp() {
  clear_has_newyeargetinfo_resp();
  ::fgame::CSNewYearGetInfoResp* temp = newyeargetinfo_resp_;
  newyeargetinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_newyeargetinfo_resp(::fgame::CSNewYearGetInfoResp* newyeargetinfo_resp) {
  delete newyeargetinfo_resp_;
  newyeargetinfo_resp_ = newyeargetinfo_resp;
  if (newyeargetinfo_resp) {
    set_has_newyeargetinfo_resp();
  } else {
    clear_has_newyeargetinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NewYearGetInfo_Resp)
}

// optional .fgame.CSNewYearRewardResp NewYearReward_Resp = 128;
inline bool S2ClientMsg::has_newyearreward_resp() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void S2ClientMsg::set_has_newyearreward_resp() {
  _has_bits_[3] |= 0x00020000u;
}
inline void S2ClientMsg::clear_has_newyearreward_resp() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void S2ClientMsg::clear_newyearreward_resp() {
  if (newyearreward_resp_ != NULL) newyearreward_resp_->::fgame::CSNewYearRewardResp::Clear();
  clear_has_newyearreward_resp();
}
inline const ::fgame::CSNewYearRewardResp& S2ClientMsg::newyearreward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NewYearReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyearreward_resp_ != NULL ? *newyearreward_resp_ : *default_instance().newyearreward_resp_;
#else
  return newyearreward_resp_ != NULL ? *newyearreward_resp_ : *default_instance_->newyearreward_resp_;
#endif
}
inline ::fgame::CSNewYearRewardResp* S2ClientMsg::mutable_newyearreward_resp() {
  set_has_newyearreward_resp();
  if (newyearreward_resp_ == NULL) newyearreward_resp_ = new ::fgame::CSNewYearRewardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NewYearReward_Resp)
  return newyearreward_resp_;
}
inline ::fgame::CSNewYearRewardResp* S2ClientMsg::release_newyearreward_resp() {
  clear_has_newyearreward_resp();
  ::fgame::CSNewYearRewardResp* temp = newyearreward_resp_;
  newyearreward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_newyearreward_resp(::fgame::CSNewYearRewardResp* newyearreward_resp) {
  delete newyearreward_resp_;
  newyearreward_resp_ = newyearreward_resp;
  if (newyearreward_resp) {
    set_has_newyearreward_resp();
  } else {
    clear_has_newyearreward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NewYearReward_Resp)
}

// optional .fgame.CSOpenChestResp OpenChest_Resp = 129;
inline bool S2ClientMsg::has_openchest_resp() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void S2ClientMsg::set_has_openchest_resp() {
  _has_bits_[3] |= 0x00040000u;
}
inline void S2ClientMsg::clear_has_openchest_resp() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void S2ClientMsg::clear_openchest_resp() {
  if (openchest_resp_ != NULL) openchest_resp_->::fgame::CSOpenChestResp::Clear();
  clear_has_openchest_resp();
}
inline const ::fgame::CSOpenChestResp& S2ClientMsg::openchest_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpenChest_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return openchest_resp_ != NULL ? *openchest_resp_ : *default_instance().openchest_resp_;
#else
  return openchest_resp_ != NULL ? *openchest_resp_ : *default_instance_->openchest_resp_;
#endif
}
inline ::fgame::CSOpenChestResp* S2ClientMsg::mutable_openchest_resp() {
  set_has_openchest_resp();
  if (openchest_resp_ == NULL) openchest_resp_ = new ::fgame::CSOpenChestResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpenChest_Resp)
  return openchest_resp_;
}
inline ::fgame::CSOpenChestResp* S2ClientMsg::release_openchest_resp() {
  clear_has_openchest_resp();
  ::fgame::CSOpenChestResp* temp = openchest_resp_;
  openchest_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_openchest_resp(::fgame::CSOpenChestResp* openchest_resp) {
  delete openchest_resp_;
  openchest_resp_ = openchest_resp;
  if (openchest_resp) {
    set_has_openchest_resp();
  } else {
    clear_has_openchest_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpenChest_Resp)
}

// optional .fgame.CSChristmasDecorateResp ChristmasDecorate_Resp = 130;
inline bool S2ClientMsg::has_christmasdecorate_resp() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void S2ClientMsg::set_has_christmasdecorate_resp() {
  _has_bits_[3] |= 0x00080000u;
}
inline void S2ClientMsg::clear_has_christmasdecorate_resp() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void S2ClientMsg::clear_christmasdecorate_resp() {
  if (christmasdecorate_resp_ != NULL) christmasdecorate_resp_->::fgame::CSChristmasDecorateResp::Clear();
  clear_has_christmasdecorate_resp();
}
inline const ::fgame::CSChristmasDecorateResp& S2ClientMsg::christmasdecorate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChristmasDecorate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasdecorate_resp_ != NULL ? *christmasdecorate_resp_ : *default_instance().christmasdecorate_resp_;
#else
  return christmasdecorate_resp_ != NULL ? *christmasdecorate_resp_ : *default_instance_->christmasdecorate_resp_;
#endif
}
inline ::fgame::CSChristmasDecorateResp* S2ClientMsg::mutable_christmasdecorate_resp() {
  set_has_christmasdecorate_resp();
  if (christmasdecorate_resp_ == NULL) christmasdecorate_resp_ = new ::fgame::CSChristmasDecorateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChristmasDecorate_Resp)
  return christmasdecorate_resp_;
}
inline ::fgame::CSChristmasDecorateResp* S2ClientMsg::release_christmasdecorate_resp() {
  clear_has_christmasdecorate_resp();
  ::fgame::CSChristmasDecorateResp* temp = christmasdecorate_resp_;
  christmasdecorate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_christmasdecorate_resp(::fgame::CSChristmasDecorateResp* christmasdecorate_resp) {
  delete christmasdecorate_resp_;
  christmasdecorate_resp_ = christmasdecorate_resp;
  if (christmasdecorate_resp) {
    set_has_christmasdecorate_resp();
  } else {
    clear_has_christmasdecorate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChristmasDecorate_Resp)
}

// optional .fgame.CSChristmasTakeBonusResp ChristmasTakeBonus_Resp = 131;
inline bool S2ClientMsg::has_christmastakebonus_resp() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void S2ClientMsg::set_has_christmastakebonus_resp() {
  _has_bits_[3] |= 0x00100000u;
}
inline void S2ClientMsg::clear_has_christmastakebonus_resp() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void S2ClientMsg::clear_christmastakebonus_resp() {
  if (christmastakebonus_resp_ != NULL) christmastakebonus_resp_->::fgame::CSChristmasTakeBonusResp::Clear();
  clear_has_christmastakebonus_resp();
}
inline const ::fgame::CSChristmasTakeBonusResp& S2ClientMsg::christmastakebonus_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChristmasTakeBonus_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmastakebonus_resp_ != NULL ? *christmastakebonus_resp_ : *default_instance().christmastakebonus_resp_;
#else
  return christmastakebonus_resp_ != NULL ? *christmastakebonus_resp_ : *default_instance_->christmastakebonus_resp_;
#endif
}
inline ::fgame::CSChristmasTakeBonusResp* S2ClientMsg::mutable_christmastakebonus_resp() {
  set_has_christmastakebonus_resp();
  if (christmastakebonus_resp_ == NULL) christmastakebonus_resp_ = new ::fgame::CSChristmasTakeBonusResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChristmasTakeBonus_Resp)
  return christmastakebonus_resp_;
}
inline ::fgame::CSChristmasTakeBonusResp* S2ClientMsg::release_christmastakebonus_resp() {
  clear_has_christmastakebonus_resp();
  ::fgame::CSChristmasTakeBonusResp* temp = christmastakebonus_resp_;
  christmastakebonus_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_christmastakebonus_resp(::fgame::CSChristmasTakeBonusResp* christmastakebonus_resp) {
  delete christmastakebonus_resp_;
  christmastakebonus_resp_ = christmastakebonus_resp;
  if (christmastakebonus_resp) {
    set_has_christmastakebonus_resp();
  } else {
    clear_has_christmastakebonus_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChristmasTakeBonus_Resp)
}

// optional .fgame.CSChristmasGetDataResp ChristmasGetDate_Resp = 132;
inline bool S2ClientMsg::has_christmasgetdate_resp() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void S2ClientMsg::set_has_christmasgetdate_resp() {
  _has_bits_[3] |= 0x00200000u;
}
inline void S2ClientMsg::clear_has_christmasgetdate_resp() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void S2ClientMsg::clear_christmasgetdate_resp() {
  if (christmasgetdate_resp_ != NULL) christmasgetdate_resp_->::fgame::CSChristmasGetDataResp::Clear();
  clear_has_christmasgetdate_resp();
}
inline const ::fgame::CSChristmasGetDataResp& S2ClientMsg::christmasgetdate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChristmasGetDate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasgetdate_resp_ != NULL ? *christmasgetdate_resp_ : *default_instance().christmasgetdate_resp_;
#else
  return christmasgetdate_resp_ != NULL ? *christmasgetdate_resp_ : *default_instance_->christmasgetdate_resp_;
#endif
}
inline ::fgame::CSChristmasGetDataResp* S2ClientMsg::mutable_christmasgetdate_resp() {
  set_has_christmasgetdate_resp();
  if (christmasgetdate_resp_ == NULL) christmasgetdate_resp_ = new ::fgame::CSChristmasGetDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChristmasGetDate_Resp)
  return christmasgetdate_resp_;
}
inline ::fgame::CSChristmasGetDataResp* S2ClientMsg::release_christmasgetdate_resp() {
  clear_has_christmasgetdate_resp();
  ::fgame::CSChristmasGetDataResp* temp = christmasgetdate_resp_;
  christmasgetdate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_christmasgetdate_resp(::fgame::CSChristmasGetDataResp* christmasgetdate_resp) {
  delete christmasgetdate_resp_;
  christmasgetdate_resp_ = christmasgetdate_resp;
  if (christmasgetdate_resp) {
    set_has_christmasgetdate_resp();
  } else {
    clear_has_christmasgetdate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChristmasGetDate_Resp)
}

// optional .fgame.CSChristmasGetRankResp ChristmasGetRank_Resp = 133;
inline bool S2ClientMsg::has_christmasgetrank_resp() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void S2ClientMsg::set_has_christmasgetrank_resp() {
  _has_bits_[3] |= 0x00400000u;
}
inline void S2ClientMsg::clear_has_christmasgetrank_resp() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void S2ClientMsg::clear_christmasgetrank_resp() {
  if (christmasgetrank_resp_ != NULL) christmasgetrank_resp_->::fgame::CSChristmasGetRankResp::Clear();
  clear_has_christmasgetrank_resp();
}
inline const ::fgame::CSChristmasGetRankResp& S2ClientMsg::christmasgetrank_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChristmasGetRank_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return christmasgetrank_resp_ != NULL ? *christmasgetrank_resp_ : *default_instance().christmasgetrank_resp_;
#else
  return christmasgetrank_resp_ != NULL ? *christmasgetrank_resp_ : *default_instance_->christmasgetrank_resp_;
#endif
}
inline ::fgame::CSChristmasGetRankResp* S2ClientMsg::mutable_christmasgetrank_resp() {
  set_has_christmasgetrank_resp();
  if (christmasgetrank_resp_ == NULL) christmasgetrank_resp_ = new ::fgame::CSChristmasGetRankResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChristmasGetRank_Resp)
  return christmasgetrank_resp_;
}
inline ::fgame::CSChristmasGetRankResp* S2ClientMsg::release_christmasgetrank_resp() {
  clear_has_christmasgetrank_resp();
  ::fgame::CSChristmasGetRankResp* temp = christmasgetrank_resp_;
  christmasgetrank_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_christmasgetrank_resp(::fgame::CSChristmasGetRankResp* christmasgetrank_resp) {
  delete christmasgetrank_resp_;
  christmasgetrank_resp_ = christmasgetrank_resp;
  if (christmasgetrank_resp) {
    set_has_christmasgetrank_resp();
  } else {
    clear_has_christmasgetrank_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChristmasGetRank_Resp)
}

// optional .fgame.CSRetriveCheckPtRewardResp RetriveCheckPtReward_Resp = 134;
inline bool S2ClientMsg::has_retrivecheckptreward_resp() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void S2ClientMsg::set_has_retrivecheckptreward_resp() {
  _has_bits_[3] |= 0x00800000u;
}
inline void S2ClientMsg::clear_has_retrivecheckptreward_resp() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void S2ClientMsg::clear_retrivecheckptreward_resp() {
  if (retrivecheckptreward_resp_ != NULL) retrivecheckptreward_resp_->::fgame::CSRetriveCheckPtRewardResp::Clear();
  clear_has_retrivecheckptreward_resp();
}
inline const ::fgame::CSRetriveCheckPtRewardResp& S2ClientMsg::retrivecheckptreward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RetriveCheckPtReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return retrivecheckptreward_resp_ != NULL ? *retrivecheckptreward_resp_ : *default_instance().retrivecheckptreward_resp_;
#else
  return retrivecheckptreward_resp_ != NULL ? *retrivecheckptreward_resp_ : *default_instance_->retrivecheckptreward_resp_;
#endif
}
inline ::fgame::CSRetriveCheckPtRewardResp* S2ClientMsg::mutable_retrivecheckptreward_resp() {
  set_has_retrivecheckptreward_resp();
  if (retrivecheckptreward_resp_ == NULL) retrivecheckptreward_resp_ = new ::fgame::CSRetriveCheckPtRewardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RetriveCheckPtReward_Resp)
  return retrivecheckptreward_resp_;
}
inline ::fgame::CSRetriveCheckPtRewardResp* S2ClientMsg::release_retrivecheckptreward_resp() {
  clear_has_retrivecheckptreward_resp();
  ::fgame::CSRetriveCheckPtRewardResp* temp = retrivecheckptreward_resp_;
  retrivecheckptreward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_retrivecheckptreward_resp(::fgame::CSRetriveCheckPtRewardResp* retrivecheckptreward_resp) {
  delete retrivecheckptreward_resp_;
  retrivecheckptreward_resp_ = retrivecheckptreward_resp;
  if (retrivecheckptreward_resp) {
    set_has_retrivecheckptreward_resp();
  } else {
    clear_has_retrivecheckptreward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RetriveCheckPtReward_Resp)
}

// optional .fgame.CSNewYearCmpResp NewYearCmp_Resp = 136;
inline bool S2ClientMsg::has_newyearcmp_resp() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void S2ClientMsg::set_has_newyearcmp_resp() {
  _has_bits_[3] |= 0x01000000u;
}
inline void S2ClientMsg::clear_has_newyearcmp_resp() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void S2ClientMsg::clear_newyearcmp_resp() {
  if (newyearcmp_resp_ != NULL) newyearcmp_resp_->::fgame::CSNewYearCmpResp::Clear();
  clear_has_newyearcmp_resp();
}
inline const ::fgame::CSNewYearCmpResp& S2ClientMsg::newyearcmp_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NewYearCmp_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newyearcmp_resp_ != NULL ? *newyearcmp_resp_ : *default_instance().newyearcmp_resp_;
#else
  return newyearcmp_resp_ != NULL ? *newyearcmp_resp_ : *default_instance_->newyearcmp_resp_;
#endif
}
inline ::fgame::CSNewYearCmpResp* S2ClientMsg::mutable_newyearcmp_resp() {
  set_has_newyearcmp_resp();
  if (newyearcmp_resp_ == NULL) newyearcmp_resp_ = new ::fgame::CSNewYearCmpResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NewYearCmp_Resp)
  return newyearcmp_resp_;
}
inline ::fgame::CSNewYearCmpResp* S2ClientMsg::release_newyearcmp_resp() {
  clear_has_newyearcmp_resp();
  ::fgame::CSNewYearCmpResp* temp = newyearcmp_resp_;
  newyearcmp_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_newyearcmp_resp(::fgame::CSNewYearCmpResp* newyearcmp_resp) {
  delete newyearcmp_resp_;
  newyearcmp_resp_ = newyearcmp_resp;
  if (newyearcmp_resp) {
    set_has_newyearcmp_resp();
  } else {
    clear_has_newyearcmp_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NewYearCmp_Resp)
}

// optional .fgame.CSNotifyGlyphsUpdateResp NotifyGlyphsUpdate_Resp = 137;
inline bool S2ClientMsg::has_notifyglyphsupdate_resp() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void S2ClientMsg::set_has_notifyglyphsupdate_resp() {
  _has_bits_[3] |= 0x02000000u;
}
inline void S2ClientMsg::clear_has_notifyglyphsupdate_resp() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void S2ClientMsg::clear_notifyglyphsupdate_resp() {
  if (notifyglyphsupdate_resp_ != NULL) notifyglyphsupdate_resp_->::fgame::CSNotifyGlyphsUpdateResp::Clear();
  clear_has_notifyglyphsupdate_resp();
}
inline const ::fgame::CSNotifyGlyphsUpdateResp& S2ClientMsg::notifyglyphsupdate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NotifyGlyphsUpdate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return notifyglyphsupdate_resp_ != NULL ? *notifyglyphsupdate_resp_ : *default_instance().notifyglyphsupdate_resp_;
#else
  return notifyglyphsupdate_resp_ != NULL ? *notifyglyphsupdate_resp_ : *default_instance_->notifyglyphsupdate_resp_;
#endif
}
inline ::fgame::CSNotifyGlyphsUpdateResp* S2ClientMsg::mutable_notifyglyphsupdate_resp() {
  set_has_notifyglyphsupdate_resp();
  if (notifyglyphsupdate_resp_ == NULL) notifyglyphsupdate_resp_ = new ::fgame::CSNotifyGlyphsUpdateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NotifyGlyphsUpdate_Resp)
  return notifyglyphsupdate_resp_;
}
inline ::fgame::CSNotifyGlyphsUpdateResp* S2ClientMsg::release_notifyglyphsupdate_resp() {
  clear_has_notifyglyphsupdate_resp();
  ::fgame::CSNotifyGlyphsUpdateResp* temp = notifyglyphsupdate_resp_;
  notifyglyphsupdate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_notifyglyphsupdate_resp(::fgame::CSNotifyGlyphsUpdateResp* notifyglyphsupdate_resp) {
  delete notifyglyphsupdate_resp_;
  notifyglyphsupdate_resp_ = notifyglyphsupdate_resp;
  if (notifyglyphsupdate_resp) {
    set_has_notifyglyphsupdate_resp();
  } else {
    clear_has_notifyglyphsupdate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NotifyGlyphsUpdate_Resp)
}

// optional .fgame.CSPvpRecoverItemResp RecoverItem_Resp = 138;
inline bool S2ClientMsg::has_recoveritem_resp() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void S2ClientMsg::set_has_recoveritem_resp() {
  _has_bits_[3] |= 0x04000000u;
}
inline void S2ClientMsg::clear_has_recoveritem_resp() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void S2ClientMsg::clear_recoveritem_resp() {
  if (recoveritem_resp_ != NULL) recoveritem_resp_->::fgame::CSPvpRecoverItemResp::Clear();
  clear_has_recoveritem_resp();
}
inline const ::fgame::CSPvpRecoverItemResp& S2ClientMsg::recoveritem_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RecoverItem_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return recoveritem_resp_ != NULL ? *recoveritem_resp_ : *default_instance().recoveritem_resp_;
#else
  return recoveritem_resp_ != NULL ? *recoveritem_resp_ : *default_instance_->recoveritem_resp_;
#endif
}
inline ::fgame::CSPvpRecoverItemResp* S2ClientMsg::mutable_recoveritem_resp() {
  set_has_recoveritem_resp();
  if (recoveritem_resp_ == NULL) recoveritem_resp_ = new ::fgame::CSPvpRecoverItemResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RecoverItem_Resp)
  return recoveritem_resp_;
}
inline ::fgame::CSPvpRecoverItemResp* S2ClientMsg::release_recoveritem_resp() {
  clear_has_recoveritem_resp();
  ::fgame::CSPvpRecoverItemResp* temp = recoveritem_resp_;
  recoveritem_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_recoveritem_resp(::fgame::CSPvpRecoverItemResp* recoveritem_resp) {
  delete recoveritem_resp_;
  recoveritem_resp_ = recoveritem_resp;
  if (recoveritem_resp) {
    set_has_recoveritem_resp();
  } else {
    clear_has_recoveritem_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RecoverItem_Resp)
}

// optional .fgame.CSSetSignatureResp SetSignature_Resp = 139;
inline bool S2ClientMsg::has_setsignature_resp() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void S2ClientMsg::set_has_setsignature_resp() {
  _has_bits_[3] |= 0x08000000u;
}
inline void S2ClientMsg::clear_has_setsignature_resp() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void S2ClientMsg::clear_setsignature_resp() {
  if (setsignature_resp_ != NULL) setsignature_resp_->::fgame::CSSetSignatureResp::Clear();
  clear_has_setsignature_resp();
}
inline const ::fgame::CSSetSignatureResp& S2ClientMsg::setsignature_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SetSignature_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setsignature_resp_ != NULL ? *setsignature_resp_ : *default_instance().setsignature_resp_;
#else
  return setsignature_resp_ != NULL ? *setsignature_resp_ : *default_instance_->setsignature_resp_;
#endif
}
inline ::fgame::CSSetSignatureResp* S2ClientMsg::mutable_setsignature_resp() {
  set_has_setsignature_resp();
  if (setsignature_resp_ == NULL) setsignature_resp_ = new ::fgame::CSSetSignatureResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SetSignature_Resp)
  return setsignature_resp_;
}
inline ::fgame::CSSetSignatureResp* S2ClientMsg::release_setsignature_resp() {
  clear_has_setsignature_resp();
  ::fgame::CSSetSignatureResp* temp = setsignature_resp_;
  setsignature_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_setsignature_resp(::fgame::CSSetSignatureResp* setsignature_resp) {
  delete setsignature_resp_;
  setsignature_resp_ = setsignature_resp;
  if (setsignature_resp) {
    set_has_setsignature_resp();
  } else {
    clear_has_setsignature_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SetSignature_Resp)
}

// optional .fgame.CSSetExtraInfoVisibleResp SetExtraInfoVisible_Resp = 140;
inline bool S2ClientMsg::has_setextrainfovisible_resp() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void S2ClientMsg::set_has_setextrainfovisible_resp() {
  _has_bits_[3] |= 0x10000000u;
}
inline void S2ClientMsg::clear_has_setextrainfovisible_resp() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void S2ClientMsg::clear_setextrainfovisible_resp() {
  if (setextrainfovisible_resp_ != NULL) setextrainfovisible_resp_->::fgame::CSSetExtraInfoVisibleResp::Clear();
  clear_has_setextrainfovisible_resp();
}
inline const ::fgame::CSSetExtraInfoVisibleResp& S2ClientMsg::setextrainfovisible_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.SetExtraInfoVisible_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return setextrainfovisible_resp_ != NULL ? *setextrainfovisible_resp_ : *default_instance().setextrainfovisible_resp_;
#else
  return setextrainfovisible_resp_ != NULL ? *setextrainfovisible_resp_ : *default_instance_->setextrainfovisible_resp_;
#endif
}
inline ::fgame::CSSetExtraInfoVisibleResp* S2ClientMsg::mutable_setextrainfovisible_resp() {
  set_has_setextrainfovisible_resp();
  if (setextrainfovisible_resp_ == NULL) setextrainfovisible_resp_ = new ::fgame::CSSetExtraInfoVisibleResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.SetExtraInfoVisible_Resp)
  return setextrainfovisible_resp_;
}
inline ::fgame::CSSetExtraInfoVisibleResp* S2ClientMsg::release_setextrainfovisible_resp() {
  clear_has_setextrainfovisible_resp();
  ::fgame::CSSetExtraInfoVisibleResp* temp = setextrainfovisible_resp_;
  setextrainfovisible_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_setextrainfovisible_resp(::fgame::CSSetExtraInfoVisibleResp* setextrainfovisible_resp) {
  delete setextrainfovisible_resp_;
  setextrainfovisible_resp_ = setextrainfovisible_resp;
  if (setextrainfovisible_resp) {
    set_has_setextrainfovisible_resp();
  } else {
    clear_has_setextrainfovisible_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.SetExtraInfoVisible_Resp)
}

// optional .fgame.CSGetExtraInfoResp GetExtraInfo_Resp = 141;
inline bool S2ClientMsg::has_getextrainfo_resp() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void S2ClientMsg::set_has_getextrainfo_resp() {
  _has_bits_[3] |= 0x20000000u;
}
inline void S2ClientMsg::clear_has_getextrainfo_resp() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void S2ClientMsg::clear_getextrainfo_resp() {
  if (getextrainfo_resp_ != NULL) getextrainfo_resp_->::fgame::CSGetExtraInfoResp::Clear();
  clear_has_getextrainfo_resp();
}
inline const ::fgame::CSGetExtraInfoResp& S2ClientMsg::getextrainfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetExtraInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getextrainfo_resp_ != NULL ? *getextrainfo_resp_ : *default_instance().getextrainfo_resp_;
#else
  return getextrainfo_resp_ != NULL ? *getextrainfo_resp_ : *default_instance_->getextrainfo_resp_;
#endif
}
inline ::fgame::CSGetExtraInfoResp* S2ClientMsg::mutable_getextrainfo_resp() {
  set_has_getextrainfo_resp();
  if (getextrainfo_resp_ == NULL) getextrainfo_resp_ = new ::fgame::CSGetExtraInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetExtraInfo_Resp)
  return getextrainfo_resp_;
}
inline ::fgame::CSGetExtraInfoResp* S2ClientMsg::release_getextrainfo_resp() {
  clear_has_getextrainfo_resp();
  ::fgame::CSGetExtraInfoResp* temp = getextrainfo_resp_;
  getextrainfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getextrainfo_resp(::fgame::CSGetExtraInfoResp* getextrainfo_resp) {
  delete getextrainfo_resp_;
  getextrainfo_resp_ = getextrainfo_resp;
  if (getextrainfo_resp) {
    set_has_getextrainfo_resp();
  } else {
    clear_has_getextrainfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetExtraInfo_Resp)
}

// optional .fgame.CSStopKickPlayerReq StopKickPlayer_Req = 142;
inline bool S2ClientMsg::has_stopkickplayer_req() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void S2ClientMsg::set_has_stopkickplayer_req() {
  _has_bits_[3] |= 0x40000000u;
}
inline void S2ClientMsg::clear_has_stopkickplayer_req() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void S2ClientMsg::clear_stopkickplayer_req() {
  if (stopkickplayer_req_ != NULL) stopkickplayer_req_->::fgame::CSStopKickPlayerReq::Clear();
  clear_has_stopkickplayer_req();
}
inline const ::fgame::CSStopKickPlayerReq& S2ClientMsg::stopkickplayer_req() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.StopKickPlayer_Req)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stopkickplayer_req_ != NULL ? *stopkickplayer_req_ : *default_instance().stopkickplayer_req_;
#else
  return stopkickplayer_req_ != NULL ? *stopkickplayer_req_ : *default_instance_->stopkickplayer_req_;
#endif
}
inline ::fgame::CSStopKickPlayerReq* S2ClientMsg::mutable_stopkickplayer_req() {
  set_has_stopkickplayer_req();
  if (stopkickplayer_req_ == NULL) stopkickplayer_req_ = new ::fgame::CSStopKickPlayerReq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.StopKickPlayer_Req)
  return stopkickplayer_req_;
}
inline ::fgame::CSStopKickPlayerReq* S2ClientMsg::release_stopkickplayer_req() {
  clear_has_stopkickplayer_req();
  ::fgame::CSStopKickPlayerReq* temp = stopkickplayer_req_;
  stopkickplayer_req_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_stopkickplayer_req(::fgame::CSStopKickPlayerReq* stopkickplayer_req) {
  delete stopkickplayer_req_;
  stopkickplayer_req_ = stopkickplayer_req;
  if (stopkickplayer_req) {
    set_has_stopkickplayer_req();
  } else {
    clear_has_stopkickplayer_req();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.StopKickPlayer_Req)
}

// optional .fgame.CSValentineDataResp ValentineData_Resp = 143;
inline bool S2ClientMsg::has_valentinedata_resp() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void S2ClientMsg::set_has_valentinedata_resp() {
  _has_bits_[3] |= 0x80000000u;
}
inline void S2ClientMsg::clear_has_valentinedata_resp() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void S2ClientMsg::clear_valentinedata_resp() {
  if (valentinedata_resp_ != NULL) valentinedata_resp_->::fgame::CSValentineDataResp::Clear();
  clear_has_valentinedata_resp();
}
inline const ::fgame::CSValentineDataResp& S2ClientMsg::valentinedata_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ValentineData_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return valentinedata_resp_ != NULL ? *valentinedata_resp_ : *default_instance().valentinedata_resp_;
#else
  return valentinedata_resp_ != NULL ? *valentinedata_resp_ : *default_instance_->valentinedata_resp_;
#endif
}
inline ::fgame::CSValentineDataResp* S2ClientMsg::mutable_valentinedata_resp() {
  set_has_valentinedata_resp();
  if (valentinedata_resp_ == NULL) valentinedata_resp_ = new ::fgame::CSValentineDataResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ValentineData_Resp)
  return valentinedata_resp_;
}
inline ::fgame::CSValentineDataResp* S2ClientMsg::release_valentinedata_resp() {
  clear_has_valentinedata_resp();
  ::fgame::CSValentineDataResp* temp = valentinedata_resp_;
  valentinedata_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_valentinedata_resp(::fgame::CSValentineDataResp* valentinedata_resp) {
  delete valentinedata_resp_;
  valentinedata_resp_ = valentinedata_resp;
  if (valentinedata_resp) {
    set_has_valentinedata_resp();
  } else {
    clear_has_valentinedata_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ValentineData_Resp)
}

// optional .fgame.CSValentineExchangeResp ValentineExchange_Resp = 144;
inline bool S2ClientMsg::has_valentineexchange_resp() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_valentineexchange_resp() {
  _has_bits_[4] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_valentineexchange_resp() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_valentineexchange_resp() {
  if (valentineexchange_resp_ != NULL) valentineexchange_resp_->::fgame::CSValentineExchangeResp::Clear();
  clear_has_valentineexchange_resp();
}
inline const ::fgame::CSValentineExchangeResp& S2ClientMsg::valentineexchange_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ValentineExchange_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return valentineexchange_resp_ != NULL ? *valentineexchange_resp_ : *default_instance().valentineexchange_resp_;
#else
  return valentineexchange_resp_ != NULL ? *valentineexchange_resp_ : *default_instance_->valentineexchange_resp_;
#endif
}
inline ::fgame::CSValentineExchangeResp* S2ClientMsg::mutable_valentineexchange_resp() {
  set_has_valentineexchange_resp();
  if (valentineexchange_resp_ == NULL) valentineexchange_resp_ = new ::fgame::CSValentineExchangeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ValentineExchange_Resp)
  return valentineexchange_resp_;
}
inline ::fgame::CSValentineExchangeResp* S2ClientMsg::release_valentineexchange_resp() {
  clear_has_valentineexchange_resp();
  ::fgame::CSValentineExchangeResp* temp = valentineexchange_resp_;
  valentineexchange_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_valentineexchange_resp(::fgame::CSValentineExchangeResp* valentineexchange_resp) {
  delete valentineexchange_resp_;
  valentineexchange_resp_ = valentineexchange_resp;
  if (valentineexchange_resp) {
    set_has_valentineexchange_resp();
  } else {
    clear_has_valentineexchange_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ValentineExchange_Resp)
}

// optional .fgame.CSRedPacketsGetInfoResp RedPacketsGetInfo_Resp = 145;
inline bool S2ClientMsg::has_redpacketsgetinfo_resp() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_redpacketsgetinfo_resp() {
  _has_bits_[4] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_redpacketsgetinfo_resp() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_redpacketsgetinfo_resp() {
  if (redpacketsgetinfo_resp_ != NULL) redpacketsgetinfo_resp_->::fgame::CSRedPacketsGetInfoResp::Clear();
  clear_has_redpacketsgetinfo_resp();
}
inline const ::fgame::CSRedPacketsGetInfoResp& S2ClientMsg::redpacketsgetinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RedPacketsGetInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsgetinfo_resp_ != NULL ? *redpacketsgetinfo_resp_ : *default_instance().redpacketsgetinfo_resp_;
#else
  return redpacketsgetinfo_resp_ != NULL ? *redpacketsgetinfo_resp_ : *default_instance_->redpacketsgetinfo_resp_;
#endif
}
inline ::fgame::CSRedPacketsGetInfoResp* S2ClientMsg::mutable_redpacketsgetinfo_resp() {
  set_has_redpacketsgetinfo_resp();
  if (redpacketsgetinfo_resp_ == NULL) redpacketsgetinfo_resp_ = new ::fgame::CSRedPacketsGetInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RedPacketsGetInfo_Resp)
  return redpacketsgetinfo_resp_;
}
inline ::fgame::CSRedPacketsGetInfoResp* S2ClientMsg::release_redpacketsgetinfo_resp() {
  clear_has_redpacketsgetinfo_resp();
  ::fgame::CSRedPacketsGetInfoResp* temp = redpacketsgetinfo_resp_;
  redpacketsgetinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_redpacketsgetinfo_resp(::fgame::CSRedPacketsGetInfoResp* redpacketsgetinfo_resp) {
  delete redpacketsgetinfo_resp_;
  redpacketsgetinfo_resp_ = redpacketsgetinfo_resp;
  if (redpacketsgetinfo_resp) {
    set_has_redpacketsgetinfo_resp();
  } else {
    clear_has_redpacketsgetinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RedPacketsGetInfo_Resp)
}

// optional .fgame.CSRedPacketsGrebResp RedPacketsGreb_Resp = 146;
inline bool S2ClientMsg::has_redpacketsgreb_resp() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_redpacketsgreb_resp() {
  _has_bits_[4] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_redpacketsgreb_resp() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_redpacketsgreb_resp() {
  if (redpacketsgreb_resp_ != NULL) redpacketsgreb_resp_->::fgame::CSRedPacketsGrebResp::Clear();
  clear_has_redpacketsgreb_resp();
}
inline const ::fgame::CSRedPacketsGrebResp& S2ClientMsg::redpacketsgreb_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RedPacketsGreb_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsgreb_resp_ != NULL ? *redpacketsgreb_resp_ : *default_instance().redpacketsgreb_resp_;
#else
  return redpacketsgreb_resp_ != NULL ? *redpacketsgreb_resp_ : *default_instance_->redpacketsgreb_resp_;
#endif
}
inline ::fgame::CSRedPacketsGrebResp* S2ClientMsg::mutable_redpacketsgreb_resp() {
  set_has_redpacketsgreb_resp();
  if (redpacketsgreb_resp_ == NULL) redpacketsgreb_resp_ = new ::fgame::CSRedPacketsGrebResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RedPacketsGreb_Resp)
  return redpacketsgreb_resp_;
}
inline ::fgame::CSRedPacketsGrebResp* S2ClientMsg::release_redpacketsgreb_resp() {
  clear_has_redpacketsgreb_resp();
  ::fgame::CSRedPacketsGrebResp* temp = redpacketsgreb_resp_;
  redpacketsgreb_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_redpacketsgreb_resp(::fgame::CSRedPacketsGrebResp* redpacketsgreb_resp) {
  delete redpacketsgreb_resp_;
  redpacketsgreb_resp_ = redpacketsgreb_resp;
  if (redpacketsgreb_resp) {
    set_has_redpacketsgreb_resp();
  } else {
    clear_has_redpacketsgreb_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RedPacketsGreb_Resp)
}

// optional .fgame.CSRedPacketsOpenedResp RedPacketsOpened_Resp = 147;
inline bool S2ClientMsg::has_redpacketsopened_resp() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_redpacketsopened_resp() {
  _has_bits_[4] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_redpacketsopened_resp() {
  _has_bits_[4] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_redpacketsopened_resp() {
  if (redpacketsopened_resp_ != NULL) redpacketsopened_resp_->::fgame::CSRedPacketsOpenedResp::Clear();
  clear_has_redpacketsopened_resp();
}
inline const ::fgame::CSRedPacketsOpenedResp& S2ClientMsg::redpacketsopened_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RedPacketsOpened_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return redpacketsopened_resp_ != NULL ? *redpacketsopened_resp_ : *default_instance().redpacketsopened_resp_;
#else
  return redpacketsopened_resp_ != NULL ? *redpacketsopened_resp_ : *default_instance_->redpacketsopened_resp_;
#endif
}
inline ::fgame::CSRedPacketsOpenedResp* S2ClientMsg::mutable_redpacketsopened_resp() {
  set_has_redpacketsopened_resp();
  if (redpacketsopened_resp_ == NULL) redpacketsopened_resp_ = new ::fgame::CSRedPacketsOpenedResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RedPacketsOpened_Resp)
  return redpacketsopened_resp_;
}
inline ::fgame::CSRedPacketsOpenedResp* S2ClientMsg::release_redpacketsopened_resp() {
  clear_has_redpacketsopened_resp();
  ::fgame::CSRedPacketsOpenedResp* temp = redpacketsopened_resp_;
  redpacketsopened_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_redpacketsopened_resp(::fgame::CSRedPacketsOpenedResp* redpacketsopened_resp) {
  delete redpacketsopened_resp_;
  redpacketsopened_resp_ = redpacketsopened_resp;
  if (redpacketsopened_resp) {
    set_has_redpacketsopened_resp();
  } else {
    clear_has_redpacketsopened_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RedPacketsOpened_Resp)
}

// optional .fgame.CSChapterUnlockResp ChapterUnlock_Resp = 148;
inline bool S2ClientMsg::has_chapterunlock_resp() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_chapterunlock_resp() {
  _has_bits_[4] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_chapterunlock_resp() {
  _has_bits_[4] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_chapterunlock_resp() {
  if (chapterunlock_resp_ != NULL) chapterunlock_resp_->::fgame::CSChapterUnlockResp::Clear();
  clear_has_chapterunlock_resp();
}
inline const ::fgame::CSChapterUnlockResp& S2ClientMsg::chapterunlock_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChapterUnlock_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return chapterunlock_resp_ != NULL ? *chapterunlock_resp_ : *default_instance().chapterunlock_resp_;
#else
  return chapterunlock_resp_ != NULL ? *chapterunlock_resp_ : *default_instance_->chapterunlock_resp_;
#endif
}
inline ::fgame::CSChapterUnlockResp* S2ClientMsg::mutable_chapterunlock_resp() {
  set_has_chapterunlock_resp();
  if (chapterunlock_resp_ == NULL) chapterunlock_resp_ = new ::fgame::CSChapterUnlockResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChapterUnlock_Resp)
  return chapterunlock_resp_;
}
inline ::fgame::CSChapterUnlockResp* S2ClientMsg::release_chapterunlock_resp() {
  clear_has_chapterunlock_resp();
  ::fgame::CSChapterUnlockResp* temp = chapterunlock_resp_;
  chapterunlock_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_chapterunlock_resp(::fgame::CSChapterUnlockResp* chapterunlock_resp) {
  delete chapterunlock_resp_;
  chapterunlock_resp_ = chapterunlock_resp;
  if (chapterunlock_resp) {
    set_has_chapterunlock_resp();
  } else {
    clear_has_chapterunlock_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChapterUnlock_Resp)
}

// optional .fgame.CSGetChestResp GetChest_Resp = 149;
inline bool S2ClientMsg::has_getchest_resp() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_getchest_resp() {
  _has_bits_[4] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_getchest_resp() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_getchest_resp() {
  if (getchest_resp_ != NULL) getchest_resp_->::fgame::CSGetChestResp::Clear();
  clear_has_getchest_resp();
}
inline const ::fgame::CSGetChestResp& S2ClientMsg::getchest_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetChest_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getchest_resp_ != NULL ? *getchest_resp_ : *default_instance().getchest_resp_;
#else
  return getchest_resp_ != NULL ? *getchest_resp_ : *default_instance_->getchest_resp_;
#endif
}
inline ::fgame::CSGetChestResp* S2ClientMsg::mutable_getchest_resp() {
  set_has_getchest_resp();
  if (getchest_resp_ == NULL) getchest_resp_ = new ::fgame::CSGetChestResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetChest_Resp)
  return getchest_resp_;
}
inline ::fgame::CSGetChestResp* S2ClientMsg::release_getchest_resp() {
  clear_has_getchest_resp();
  ::fgame::CSGetChestResp* temp = getchest_resp_;
  getchest_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getchest_resp(::fgame::CSGetChestResp* getchest_resp) {
  delete getchest_resp_;
  getchest_resp_ = getchest_resp;
  if (getchest_resp) {
    set_has_getchest_resp();
  } else {
    clear_has_getchest_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetChest_Resp)
}

// optional .fgame.CSPveNotifyResp PveNotify_Resp = 150;
inline bool S2ClientMsg::has_pvenotify_resp() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_pvenotify_resp() {
  _has_bits_[4] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_pvenotify_resp() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_pvenotify_resp() {
  if (pvenotify_resp_ != NULL) pvenotify_resp_->::fgame::CSPveNotifyResp::Clear();
  clear_has_pvenotify_resp();
}
inline const ::fgame::CSPveNotifyResp& S2ClientMsg::pvenotify_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PveNotify_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvenotify_resp_ != NULL ? *pvenotify_resp_ : *default_instance().pvenotify_resp_;
#else
  return pvenotify_resp_ != NULL ? *pvenotify_resp_ : *default_instance_->pvenotify_resp_;
#endif
}
inline ::fgame::CSPveNotifyResp* S2ClientMsg::mutable_pvenotify_resp() {
  set_has_pvenotify_resp();
  if (pvenotify_resp_ == NULL) pvenotify_resp_ = new ::fgame::CSPveNotifyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PveNotify_Resp)
  return pvenotify_resp_;
}
inline ::fgame::CSPveNotifyResp* S2ClientMsg::release_pvenotify_resp() {
  clear_has_pvenotify_resp();
  ::fgame::CSPveNotifyResp* temp = pvenotify_resp_;
  pvenotify_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvenotify_resp(::fgame::CSPveNotifyResp* pvenotify_resp) {
  delete pvenotify_resp_;
  pvenotify_resp_ = pvenotify_resp;
  if (pvenotify_resp) {
    set_has_pvenotify_resp();
  } else {
    clear_has_pvenotify_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PveNotify_Resp)
}

// optional .fgame.CSPvpGetAwardResp PvpGetAward_Resp = 151;
inline bool S2ClientMsg::has_pvpgetaward_resp() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_pvpgetaward_resp() {
  _has_bits_[4] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_pvpgetaward_resp() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_pvpgetaward_resp() {
  if (pvpgetaward_resp_ != NULL) pvpgetaward_resp_->::fgame::CSPvpGetAwardResp::Clear();
  clear_has_pvpgetaward_resp();
}
inline const ::fgame::CSPvpGetAwardResp& S2ClientMsg::pvpgetaward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpGetAward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpgetaward_resp_ != NULL ? *pvpgetaward_resp_ : *default_instance().pvpgetaward_resp_;
#else
  return pvpgetaward_resp_ != NULL ? *pvpgetaward_resp_ : *default_instance_->pvpgetaward_resp_;
#endif
}
inline ::fgame::CSPvpGetAwardResp* S2ClientMsg::mutable_pvpgetaward_resp() {
  set_has_pvpgetaward_resp();
  if (pvpgetaward_resp_ == NULL) pvpgetaward_resp_ = new ::fgame::CSPvpGetAwardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpGetAward_Resp)
  return pvpgetaward_resp_;
}
inline ::fgame::CSPvpGetAwardResp* S2ClientMsg::release_pvpgetaward_resp() {
  clear_has_pvpgetaward_resp();
  ::fgame::CSPvpGetAwardResp* temp = pvpgetaward_resp_;
  pvpgetaward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpgetaward_resp(::fgame::CSPvpGetAwardResp* pvpgetaward_resp) {
  delete pvpgetaward_resp_;
  pvpgetaward_resp_ = pvpgetaward_resp;
  if (pvpgetaward_resp) {
    set_has_pvpgetaward_resp();
  } else {
    clear_has_pvpgetaward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpGetAward_Resp)
}

// optional .fgame.CSDailyTaskStatusResp DailyTaskStatus_Resp = 152;
inline bool S2ClientMsg::has_dailytaskstatus_resp() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_dailytaskstatus_resp() {
  _has_bits_[4] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_dailytaskstatus_resp() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_dailytaskstatus_resp() {
  if (dailytaskstatus_resp_ != NULL) dailytaskstatus_resp_->::fgame::CSDailyTaskStatusResp::Clear();
  clear_has_dailytaskstatus_resp();
}
inline const ::fgame::CSDailyTaskStatusResp& S2ClientMsg::dailytaskstatus_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.DailyTaskStatus_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dailytaskstatus_resp_ != NULL ? *dailytaskstatus_resp_ : *default_instance().dailytaskstatus_resp_;
#else
  return dailytaskstatus_resp_ != NULL ? *dailytaskstatus_resp_ : *default_instance_->dailytaskstatus_resp_;
#endif
}
inline ::fgame::CSDailyTaskStatusResp* S2ClientMsg::mutable_dailytaskstatus_resp() {
  set_has_dailytaskstatus_resp();
  if (dailytaskstatus_resp_ == NULL) dailytaskstatus_resp_ = new ::fgame::CSDailyTaskStatusResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.DailyTaskStatus_Resp)
  return dailytaskstatus_resp_;
}
inline ::fgame::CSDailyTaskStatusResp* S2ClientMsg::release_dailytaskstatus_resp() {
  clear_has_dailytaskstatus_resp();
  ::fgame::CSDailyTaskStatusResp* temp = dailytaskstatus_resp_;
  dailytaskstatus_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_dailytaskstatus_resp(::fgame::CSDailyTaskStatusResp* dailytaskstatus_resp) {
  delete dailytaskstatus_resp_;
  dailytaskstatus_resp_ = dailytaskstatus_resp;
  if (dailytaskstatus_resp) {
    set_has_dailytaskstatus_resp();
  } else {
    clear_has_dailytaskstatus_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.DailyTaskStatus_Resp)
}

// optional .fgame.CSRequestDailyTaskResp RequestDailyTask_Resp = 153;
inline bool S2ClientMsg::has_requestdailytask_resp() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void S2ClientMsg::set_has_requestdailytask_resp() {
  _has_bits_[4] |= 0x00000200u;
}
inline void S2ClientMsg::clear_has_requestdailytask_resp() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void S2ClientMsg::clear_requestdailytask_resp() {
  if (requestdailytask_resp_ != NULL) requestdailytask_resp_->::fgame::CSRequestDailyTaskResp::Clear();
  clear_has_requestdailytask_resp();
}
inline const ::fgame::CSRequestDailyTaskResp& S2ClientMsg::requestdailytask_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RequestDailyTask_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return requestdailytask_resp_ != NULL ? *requestdailytask_resp_ : *default_instance().requestdailytask_resp_;
#else
  return requestdailytask_resp_ != NULL ? *requestdailytask_resp_ : *default_instance_->requestdailytask_resp_;
#endif
}
inline ::fgame::CSRequestDailyTaskResp* S2ClientMsg::mutable_requestdailytask_resp() {
  set_has_requestdailytask_resp();
  if (requestdailytask_resp_ == NULL) requestdailytask_resp_ = new ::fgame::CSRequestDailyTaskResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RequestDailyTask_Resp)
  return requestdailytask_resp_;
}
inline ::fgame::CSRequestDailyTaskResp* S2ClientMsg::release_requestdailytask_resp() {
  clear_has_requestdailytask_resp();
  ::fgame::CSRequestDailyTaskResp* temp = requestdailytask_resp_;
  requestdailytask_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_requestdailytask_resp(::fgame::CSRequestDailyTaskResp* requestdailytask_resp) {
  delete requestdailytask_resp_;
  requestdailytask_resp_ = requestdailytask_resp;
  if (requestdailytask_resp) {
    set_has_requestdailytask_resp();
  } else {
    clear_has_requestdailytask_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RequestDailyTask_Resp)
}

// optional .fgame.CSChangeDailyTaskResp ChangeDailyTask_Resp = 154;
inline bool S2ClientMsg::has_changedailytask_resp() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void S2ClientMsg::set_has_changedailytask_resp() {
  _has_bits_[4] |= 0x00000400u;
}
inline void S2ClientMsg::clear_has_changedailytask_resp() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void S2ClientMsg::clear_changedailytask_resp() {
  if (changedailytask_resp_ != NULL) changedailytask_resp_->::fgame::CSChangeDailyTaskResp::Clear();
  clear_has_changedailytask_resp();
}
inline const ::fgame::CSChangeDailyTaskResp& S2ClientMsg::changedailytask_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ChangeDailyTask_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return changedailytask_resp_ != NULL ? *changedailytask_resp_ : *default_instance().changedailytask_resp_;
#else
  return changedailytask_resp_ != NULL ? *changedailytask_resp_ : *default_instance_->changedailytask_resp_;
#endif
}
inline ::fgame::CSChangeDailyTaskResp* S2ClientMsg::mutable_changedailytask_resp() {
  set_has_changedailytask_resp();
  if (changedailytask_resp_ == NULL) changedailytask_resp_ = new ::fgame::CSChangeDailyTaskResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ChangeDailyTask_Resp)
  return changedailytask_resp_;
}
inline ::fgame::CSChangeDailyTaskResp* S2ClientMsg::release_changedailytask_resp() {
  clear_has_changedailytask_resp();
  ::fgame::CSChangeDailyTaskResp* temp = changedailytask_resp_;
  changedailytask_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_changedailytask_resp(::fgame::CSChangeDailyTaskResp* changedailytask_resp) {
  delete changedailytask_resp_;
  changedailytask_resp_ = changedailytask_resp;
  if (changedailytask_resp) {
    set_has_changedailytask_resp();
  } else {
    clear_has_changedailytask_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ChangeDailyTask_Resp)
}

// optional .fgame.CSOpenDailyTaskAwardResp OpenDailyTaskAward_Resp = 155;
inline bool S2ClientMsg::has_opendailytaskaward_resp() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void S2ClientMsg::set_has_opendailytaskaward_resp() {
  _has_bits_[4] |= 0x00000800u;
}
inline void S2ClientMsg::clear_has_opendailytaskaward_resp() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void S2ClientMsg::clear_opendailytaskaward_resp() {
  if (opendailytaskaward_resp_ != NULL) opendailytaskaward_resp_->::fgame::CSOpenDailyTaskAwardResp::Clear();
  clear_has_opendailytaskaward_resp();
}
inline const ::fgame::CSOpenDailyTaskAwardResp& S2ClientMsg::opendailytaskaward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpenDailyTaskAward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opendailytaskaward_resp_ != NULL ? *opendailytaskaward_resp_ : *default_instance().opendailytaskaward_resp_;
#else
  return opendailytaskaward_resp_ != NULL ? *opendailytaskaward_resp_ : *default_instance_->opendailytaskaward_resp_;
#endif
}
inline ::fgame::CSOpenDailyTaskAwardResp* S2ClientMsg::mutable_opendailytaskaward_resp() {
  set_has_opendailytaskaward_resp();
  if (opendailytaskaward_resp_ == NULL) opendailytaskaward_resp_ = new ::fgame::CSOpenDailyTaskAwardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpenDailyTaskAward_Resp)
  return opendailytaskaward_resp_;
}
inline ::fgame::CSOpenDailyTaskAwardResp* S2ClientMsg::release_opendailytaskaward_resp() {
  clear_has_opendailytaskaward_resp();
  ::fgame::CSOpenDailyTaskAwardResp* temp = opendailytaskaward_resp_;
  opendailytaskaward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opendailytaskaward_resp(::fgame::CSOpenDailyTaskAwardResp* opendailytaskaward_resp) {
  delete opendailytaskaward_resp_;
  opendailytaskaward_resp_ = opendailytaskaward_resp;
  if (opendailytaskaward_resp) {
    set_has_opendailytaskaward_resp();
  } else {
    clear_has_opendailytaskaward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpenDailyTaskAward_Resp)
}

// optional .fgame.CSUpdateDailyTaskProgressResp UpdateDailyTaskProgress_Resp = 156;
inline bool S2ClientMsg::has_updatedailytaskprogress_resp() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void S2ClientMsg::set_has_updatedailytaskprogress_resp() {
  _has_bits_[4] |= 0x00001000u;
}
inline void S2ClientMsg::clear_has_updatedailytaskprogress_resp() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void S2ClientMsg::clear_updatedailytaskprogress_resp() {
  if (updatedailytaskprogress_resp_ != NULL) updatedailytaskprogress_resp_->::fgame::CSUpdateDailyTaskProgressResp::Clear();
  clear_has_updatedailytaskprogress_resp();
}
inline const ::fgame::CSUpdateDailyTaskProgressResp& S2ClientMsg::updatedailytaskprogress_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UpdateDailyTaskProgress_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updatedailytaskprogress_resp_ != NULL ? *updatedailytaskprogress_resp_ : *default_instance().updatedailytaskprogress_resp_;
#else
  return updatedailytaskprogress_resp_ != NULL ? *updatedailytaskprogress_resp_ : *default_instance_->updatedailytaskprogress_resp_;
#endif
}
inline ::fgame::CSUpdateDailyTaskProgressResp* S2ClientMsg::mutable_updatedailytaskprogress_resp() {
  set_has_updatedailytaskprogress_resp();
  if (updatedailytaskprogress_resp_ == NULL) updatedailytaskprogress_resp_ = new ::fgame::CSUpdateDailyTaskProgressResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UpdateDailyTaskProgress_Resp)
  return updatedailytaskprogress_resp_;
}
inline ::fgame::CSUpdateDailyTaskProgressResp* S2ClientMsg::release_updatedailytaskprogress_resp() {
  clear_has_updatedailytaskprogress_resp();
  ::fgame::CSUpdateDailyTaskProgressResp* temp = updatedailytaskprogress_resp_;
  updatedailytaskprogress_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_updatedailytaskprogress_resp(::fgame::CSUpdateDailyTaskProgressResp* updatedailytaskprogress_resp) {
  delete updatedailytaskprogress_resp_;
  updatedailytaskprogress_resp_ = updatedailytaskprogress_resp;
  if (updatedailytaskprogress_resp) {
    set_has_updatedailytaskprogress_resp();
  } else {
    clear_has_updatedailytaskprogress_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UpdateDailyTaskProgress_Resp)
}

// optional .fgame.CSNewDailyTaskResp NewDailyTask_Resp = 157;
inline bool S2ClientMsg::has_newdailytask_resp() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void S2ClientMsg::set_has_newdailytask_resp() {
  _has_bits_[4] |= 0x00002000u;
}
inline void S2ClientMsg::clear_has_newdailytask_resp() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void S2ClientMsg::clear_newdailytask_resp() {
  if (newdailytask_resp_ != NULL) newdailytask_resp_->::fgame::CSNewDailyTaskResp::Clear();
  clear_has_newdailytask_resp();
}
inline const ::fgame::CSNewDailyTaskResp& S2ClientMsg::newdailytask_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NewDailyTask_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return newdailytask_resp_ != NULL ? *newdailytask_resp_ : *default_instance().newdailytask_resp_;
#else
  return newdailytask_resp_ != NULL ? *newdailytask_resp_ : *default_instance_->newdailytask_resp_;
#endif
}
inline ::fgame::CSNewDailyTaskResp* S2ClientMsg::mutable_newdailytask_resp() {
  set_has_newdailytask_resp();
  if (newdailytask_resp_ == NULL) newdailytask_resp_ = new ::fgame::CSNewDailyTaskResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NewDailyTask_Resp)
  return newdailytask_resp_;
}
inline ::fgame::CSNewDailyTaskResp* S2ClientMsg::release_newdailytask_resp() {
  clear_has_newdailytask_resp();
  ::fgame::CSNewDailyTaskResp* temp = newdailytask_resp_;
  newdailytask_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_newdailytask_resp(::fgame::CSNewDailyTaskResp* newdailytask_resp) {
  delete newdailytask_resp_;
  newdailytask_resp_ = newdailytask_resp;
  if (newdailytask_resp) {
    set_has_newdailytask_resp();
  } else {
    clear_has_newdailytask_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NewDailyTask_Resp)
}

// optional .fgame.CSPveCheckAwardResp PveCheckAward_Resp = 159;
inline bool S2ClientMsg::has_pvecheckaward_resp() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void S2ClientMsg::set_has_pvecheckaward_resp() {
  _has_bits_[4] |= 0x00004000u;
}
inline void S2ClientMsg::clear_has_pvecheckaward_resp() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void S2ClientMsg::clear_pvecheckaward_resp() {
  if (pvecheckaward_resp_ != NULL) pvecheckaward_resp_->::fgame::CSPveCheckAwardResp::Clear();
  clear_has_pvecheckaward_resp();
}
inline const ::fgame::CSPveCheckAwardResp& S2ClientMsg::pvecheckaward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PveCheckAward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvecheckaward_resp_ != NULL ? *pvecheckaward_resp_ : *default_instance().pvecheckaward_resp_;
#else
  return pvecheckaward_resp_ != NULL ? *pvecheckaward_resp_ : *default_instance_->pvecheckaward_resp_;
#endif
}
inline ::fgame::CSPveCheckAwardResp* S2ClientMsg::mutable_pvecheckaward_resp() {
  set_has_pvecheckaward_resp();
  if (pvecheckaward_resp_ == NULL) pvecheckaward_resp_ = new ::fgame::CSPveCheckAwardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PveCheckAward_Resp)
  return pvecheckaward_resp_;
}
inline ::fgame::CSPveCheckAwardResp* S2ClientMsg::release_pvecheckaward_resp() {
  clear_has_pvecheckaward_resp();
  ::fgame::CSPveCheckAwardResp* temp = pvecheckaward_resp_;
  pvecheckaward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvecheckaward_resp(::fgame::CSPveCheckAwardResp* pvecheckaward_resp) {
  delete pvecheckaward_resp_;
  pvecheckaward_resp_ = pvecheckaward_resp;
  if (pvecheckaward_resp) {
    set_has_pvecheckaward_resp();
  } else {
    clear_has_pvecheckaward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PveCheckAward_Resp)
}

// optional .fgame.CSRankWeekRewardInfoResp RankWeekRewardInfo_Resp = 160;
inline bool S2ClientMsg::has_rankweekrewardinfo_resp() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void S2ClientMsg::set_has_rankweekrewardinfo_resp() {
  _has_bits_[4] |= 0x00008000u;
}
inline void S2ClientMsg::clear_has_rankweekrewardinfo_resp() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void S2ClientMsg::clear_rankweekrewardinfo_resp() {
  if (rankweekrewardinfo_resp_ != NULL) rankweekrewardinfo_resp_->::fgame::CSRankWeekRewardInfoResp::Clear();
  clear_has_rankweekrewardinfo_resp();
}
inline const ::fgame::CSRankWeekRewardInfoResp& S2ClientMsg::rankweekrewardinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RankWeekRewardInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankweekrewardinfo_resp_ != NULL ? *rankweekrewardinfo_resp_ : *default_instance().rankweekrewardinfo_resp_;
#else
  return rankweekrewardinfo_resp_ != NULL ? *rankweekrewardinfo_resp_ : *default_instance_->rankweekrewardinfo_resp_;
#endif
}
inline ::fgame::CSRankWeekRewardInfoResp* S2ClientMsg::mutable_rankweekrewardinfo_resp() {
  set_has_rankweekrewardinfo_resp();
  if (rankweekrewardinfo_resp_ == NULL) rankweekrewardinfo_resp_ = new ::fgame::CSRankWeekRewardInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RankWeekRewardInfo_Resp)
  return rankweekrewardinfo_resp_;
}
inline ::fgame::CSRankWeekRewardInfoResp* S2ClientMsg::release_rankweekrewardinfo_resp() {
  clear_has_rankweekrewardinfo_resp();
  ::fgame::CSRankWeekRewardInfoResp* temp = rankweekrewardinfo_resp_;
  rankweekrewardinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_rankweekrewardinfo_resp(::fgame::CSRankWeekRewardInfoResp* rankweekrewardinfo_resp) {
  delete rankweekrewardinfo_resp_;
  rankweekrewardinfo_resp_ = rankweekrewardinfo_resp;
  if (rankweekrewardinfo_resp) {
    set_has_rankweekrewardinfo_resp();
  } else {
    clear_has_rankweekrewardinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RankWeekRewardInfo_Resp)
}

// optional .fgame.CSRankWeekRewardRewardResp RankWeekRewardReward_Resp = 161;
inline bool S2ClientMsg::has_rankweekrewardreward_resp() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void S2ClientMsg::set_has_rankweekrewardreward_resp() {
  _has_bits_[4] |= 0x00010000u;
}
inline void S2ClientMsg::clear_has_rankweekrewardreward_resp() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void S2ClientMsg::clear_rankweekrewardreward_resp() {
  if (rankweekrewardreward_resp_ != NULL) rankweekrewardreward_resp_->::fgame::CSRankWeekRewardRewardResp::Clear();
  clear_has_rankweekrewardreward_resp();
}
inline const ::fgame::CSRankWeekRewardRewardResp& S2ClientMsg::rankweekrewardreward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RankWeekRewardReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankweekrewardreward_resp_ != NULL ? *rankweekrewardreward_resp_ : *default_instance().rankweekrewardreward_resp_;
#else
  return rankweekrewardreward_resp_ != NULL ? *rankweekrewardreward_resp_ : *default_instance_->rankweekrewardreward_resp_;
#endif
}
inline ::fgame::CSRankWeekRewardRewardResp* S2ClientMsg::mutable_rankweekrewardreward_resp() {
  set_has_rankweekrewardreward_resp();
  if (rankweekrewardreward_resp_ == NULL) rankweekrewardreward_resp_ = new ::fgame::CSRankWeekRewardRewardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RankWeekRewardReward_Resp)
  return rankweekrewardreward_resp_;
}
inline ::fgame::CSRankWeekRewardRewardResp* S2ClientMsg::release_rankweekrewardreward_resp() {
  clear_has_rankweekrewardreward_resp();
  ::fgame::CSRankWeekRewardRewardResp* temp = rankweekrewardreward_resp_;
  rankweekrewardreward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_rankweekrewardreward_resp(::fgame::CSRankWeekRewardRewardResp* rankweekrewardreward_resp) {
  delete rankweekrewardreward_resp_;
  rankweekrewardreward_resp_ = rankweekrewardreward_resp;
  if (rankweekrewardreward_resp) {
    set_has_rankweekrewardreward_resp();
  } else {
    clear_has_rankweekrewardreward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RankWeekRewardReward_Resp)
}

// optional .fgame.CSShareRewardGetResq ShareReward_Resp = 162;
inline bool S2ClientMsg::has_sharereward_resp() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void S2ClientMsg::set_has_sharereward_resp() {
  _has_bits_[4] |= 0x00020000u;
}
inline void S2ClientMsg::clear_has_sharereward_resp() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void S2ClientMsg::clear_sharereward_resp() {
  if (sharereward_resp_ != NULL) sharereward_resp_->::fgame::CSShareRewardGetResq::Clear();
  clear_has_sharereward_resp();
}
inline const ::fgame::CSShareRewardGetResq& S2ClientMsg::sharereward_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.ShareReward_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sharereward_resp_ != NULL ? *sharereward_resp_ : *default_instance().sharereward_resp_;
#else
  return sharereward_resp_ != NULL ? *sharereward_resp_ : *default_instance_->sharereward_resp_;
#endif
}
inline ::fgame::CSShareRewardGetResq* S2ClientMsg::mutable_sharereward_resp() {
  set_has_sharereward_resp();
  if (sharereward_resp_ == NULL) sharereward_resp_ = new ::fgame::CSShareRewardGetResq;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.ShareReward_Resp)
  return sharereward_resp_;
}
inline ::fgame::CSShareRewardGetResq* S2ClientMsg::release_sharereward_resp() {
  clear_has_sharereward_resp();
  ::fgame::CSShareRewardGetResq* temp = sharereward_resp_;
  sharereward_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_sharereward_resp(::fgame::CSShareRewardGetResq* sharereward_resp) {
  delete sharereward_resp_;
  sharereward_resp_ = sharereward_resp;
  if (sharereward_resp) {
    set_has_sharereward_resp();
  } else {
    clear_has_sharereward_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.ShareReward_Resp)
}

// optional .fgame.CSGetSevenGoalListResp GetSevenGoalList_Resp = 163;
inline bool S2ClientMsg::has_getsevengoallist_resp() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void S2ClientMsg::set_has_getsevengoallist_resp() {
  _has_bits_[4] |= 0x00040000u;
}
inline void S2ClientMsg::clear_has_getsevengoallist_resp() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void S2ClientMsg::clear_getsevengoallist_resp() {
  if (getsevengoallist_resp_ != NULL) getsevengoallist_resp_->::fgame::CSGetSevenGoalListResp::Clear();
  clear_has_getsevengoallist_resp();
}
inline const ::fgame::CSGetSevenGoalListResp& S2ClientMsg::getsevengoallist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.GetSevenGoalList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return getsevengoallist_resp_ != NULL ? *getsevengoallist_resp_ : *default_instance().getsevengoallist_resp_;
#else
  return getsevengoallist_resp_ != NULL ? *getsevengoallist_resp_ : *default_instance_->getsevengoallist_resp_;
#endif
}
inline ::fgame::CSGetSevenGoalListResp* S2ClientMsg::mutable_getsevengoallist_resp() {
  set_has_getsevengoallist_resp();
  if (getsevengoallist_resp_ == NULL) getsevengoallist_resp_ = new ::fgame::CSGetSevenGoalListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.GetSevenGoalList_Resp)
  return getsevengoallist_resp_;
}
inline ::fgame::CSGetSevenGoalListResp* S2ClientMsg::release_getsevengoallist_resp() {
  clear_has_getsevengoallist_resp();
  ::fgame::CSGetSevenGoalListResp* temp = getsevengoallist_resp_;
  getsevengoallist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_getsevengoallist_resp(::fgame::CSGetSevenGoalListResp* getsevengoallist_resp) {
  delete getsevengoallist_resp_;
  getsevengoallist_resp_ = getsevengoallist_resp;
  if (getsevengoallist_resp) {
    set_has_getsevengoallist_resp();
  } else {
    clear_has_getsevengoallist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.GetSevenGoalList_Resp)
}

// optional .fgame.CSRetriveSevenGoalResp RetriveSevenGoal_Resp = 164;
inline bool S2ClientMsg::has_retrivesevengoal_resp() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void S2ClientMsg::set_has_retrivesevengoal_resp() {
  _has_bits_[4] |= 0x00080000u;
}
inline void S2ClientMsg::clear_has_retrivesevengoal_resp() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void S2ClientMsg::clear_retrivesevengoal_resp() {
  if (retrivesevengoal_resp_ != NULL) retrivesevengoal_resp_->::fgame::CSRetriveSevenGoalResp::Clear();
  clear_has_retrivesevengoal_resp();
}
inline const ::fgame::CSRetriveSevenGoalResp& S2ClientMsg::retrivesevengoal_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.RetriveSevenGoal_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return retrivesevengoal_resp_ != NULL ? *retrivesevengoal_resp_ : *default_instance().retrivesevengoal_resp_;
#else
  return retrivesevengoal_resp_ != NULL ? *retrivesevengoal_resp_ : *default_instance_->retrivesevengoal_resp_;
#endif
}
inline ::fgame::CSRetriveSevenGoalResp* S2ClientMsg::mutable_retrivesevengoal_resp() {
  set_has_retrivesevengoal_resp();
  if (retrivesevengoal_resp_ == NULL) retrivesevengoal_resp_ = new ::fgame::CSRetriveSevenGoalResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.RetriveSevenGoal_Resp)
  return retrivesevengoal_resp_;
}
inline ::fgame::CSRetriveSevenGoalResp* S2ClientMsg::release_retrivesevengoal_resp() {
  clear_has_retrivesevengoal_resp();
  ::fgame::CSRetriveSevenGoalResp* temp = retrivesevengoal_resp_;
  retrivesevengoal_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_retrivesevengoal_resp(::fgame::CSRetriveSevenGoalResp* retrivesevengoal_resp) {
  delete retrivesevengoal_resp_;
  retrivesevengoal_resp_ = retrivesevengoal_resp;
  if (retrivesevengoal_resp) {
    set_has_retrivesevengoal_resp();
  } else {
    clear_has_retrivesevengoal_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.RetriveSevenGoal_Resp)
}

// optional .fgame.CSNoticeSevenGoalResp NoticeSevenGoal_Resp = 165;
inline bool S2ClientMsg::has_noticesevengoal_resp() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void S2ClientMsg::set_has_noticesevengoal_resp() {
  _has_bits_[4] |= 0x00100000u;
}
inline void S2ClientMsg::clear_has_noticesevengoal_resp() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void S2ClientMsg::clear_noticesevengoal_resp() {
  if (noticesevengoal_resp_ != NULL) noticesevengoal_resp_->::fgame::CSNoticeSevenGoalResp::Clear();
  clear_has_noticesevengoal_resp();
}
inline const ::fgame::CSNoticeSevenGoalResp& S2ClientMsg::noticesevengoal_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.NoticeSevenGoal_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return noticesevengoal_resp_ != NULL ? *noticesevengoal_resp_ : *default_instance().noticesevengoal_resp_;
#else
  return noticesevengoal_resp_ != NULL ? *noticesevengoal_resp_ : *default_instance_->noticesevengoal_resp_;
#endif
}
inline ::fgame::CSNoticeSevenGoalResp* S2ClientMsg::mutable_noticesevengoal_resp() {
  set_has_noticesevengoal_resp();
  if (noticesevengoal_resp_ == NULL) noticesevengoal_resp_ = new ::fgame::CSNoticeSevenGoalResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.NoticeSevenGoal_Resp)
  return noticesevengoal_resp_;
}
inline ::fgame::CSNoticeSevenGoalResp* S2ClientMsg::release_noticesevengoal_resp() {
  clear_has_noticesevengoal_resp();
  ::fgame::CSNoticeSevenGoalResp* temp = noticesevengoal_resp_;
  noticesevengoal_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_noticesevengoal_resp(::fgame::CSNoticeSevenGoalResp* noticesevengoal_resp) {
  delete noticesevengoal_resp_;
  noticesevengoal_resp_ = noticesevengoal_resp;
  if (noticesevengoal_resp) {
    set_has_noticesevengoal_resp();
  } else {
    clear_has_noticesevengoal_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.NoticeSevenGoal_Resp)
}

// optional .fgame.CSPveRankResp PveRank_Resp = 166;
inline bool S2ClientMsg::has_pverank_resp() const {
  return (_has_bits_[4] & 0x00200000u) != 0;
}
inline void S2ClientMsg::set_has_pverank_resp() {
  _has_bits_[4] |= 0x00200000u;
}
inline void S2ClientMsg::clear_has_pverank_resp() {
  _has_bits_[4] &= ~0x00200000u;
}
inline void S2ClientMsg::clear_pverank_resp() {
  if (pverank_resp_ != NULL) pverank_resp_->::fgame::CSPveRankResp::Clear();
  clear_has_pverank_resp();
}
inline const ::fgame::CSPveRankResp& S2ClientMsg::pverank_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PveRank_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pverank_resp_ != NULL ? *pverank_resp_ : *default_instance().pverank_resp_;
#else
  return pverank_resp_ != NULL ? *pverank_resp_ : *default_instance_->pverank_resp_;
#endif
}
inline ::fgame::CSPveRankResp* S2ClientMsg::mutable_pverank_resp() {
  set_has_pverank_resp();
  if (pverank_resp_ == NULL) pverank_resp_ = new ::fgame::CSPveRankResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PveRank_Resp)
  return pverank_resp_;
}
inline ::fgame::CSPveRankResp* S2ClientMsg::release_pverank_resp() {
  clear_has_pverank_resp();
  ::fgame::CSPveRankResp* temp = pverank_resp_;
  pverank_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pverank_resp(::fgame::CSPveRankResp* pverank_resp) {
  delete pverank_resp_;
  pverank_resp_ = pverank_resp;
  if (pverank_resp) {
    set_has_pverank_resp();
  } else {
    clear_has_pverank_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PveRank_Resp)
}

// optional .fgame.CSTopRankResp TopRank_Resp = 167;
inline bool S2ClientMsg::has_toprank_resp() const {
  return (_has_bits_[4] & 0x00400000u) != 0;
}
inline void S2ClientMsg::set_has_toprank_resp() {
  _has_bits_[4] |= 0x00400000u;
}
inline void S2ClientMsg::clear_has_toprank_resp() {
  _has_bits_[4] &= ~0x00400000u;
}
inline void S2ClientMsg::clear_toprank_resp() {
  if (toprank_resp_ != NULL) toprank_resp_->::fgame::CSTopRankResp::Clear();
  clear_has_toprank_resp();
}
inline const ::fgame::CSTopRankResp& S2ClientMsg::toprank_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.TopRank_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return toprank_resp_ != NULL ? *toprank_resp_ : *default_instance().toprank_resp_;
#else
  return toprank_resp_ != NULL ? *toprank_resp_ : *default_instance_->toprank_resp_;
#endif
}
inline ::fgame::CSTopRankResp* S2ClientMsg::mutable_toprank_resp() {
  set_has_toprank_resp();
  if (toprank_resp_ == NULL) toprank_resp_ = new ::fgame::CSTopRankResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.TopRank_Resp)
  return toprank_resp_;
}
inline ::fgame::CSTopRankResp* S2ClientMsg::release_toprank_resp() {
  clear_has_toprank_resp();
  ::fgame::CSTopRankResp* temp = toprank_resp_;
  toprank_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_toprank_resp(::fgame::CSTopRankResp* toprank_resp) {
  delete toprank_resp_;
  toprank_resp_ = toprank_resp;
  if (toprank_resp) {
    set_has_toprank_resp();
  } else {
    clear_has_toprank_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.TopRank_Resp)
}

// optional .fgame.CSTopRankTimeResp TopRankTime_Resp = 168;
inline bool S2ClientMsg::has_topranktime_resp() const {
  return (_has_bits_[4] & 0x00800000u) != 0;
}
inline void S2ClientMsg::set_has_topranktime_resp() {
  _has_bits_[4] |= 0x00800000u;
}
inline void S2ClientMsg::clear_has_topranktime_resp() {
  _has_bits_[4] &= ~0x00800000u;
}
inline void S2ClientMsg::clear_topranktime_resp() {
  if (topranktime_resp_ != NULL) topranktime_resp_->::fgame::CSTopRankTimeResp::Clear();
  clear_has_topranktime_resp();
}
inline const ::fgame::CSTopRankTimeResp& S2ClientMsg::topranktime_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.TopRankTime_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return topranktime_resp_ != NULL ? *topranktime_resp_ : *default_instance().topranktime_resp_;
#else
  return topranktime_resp_ != NULL ? *topranktime_resp_ : *default_instance_->topranktime_resp_;
#endif
}
inline ::fgame::CSTopRankTimeResp* S2ClientMsg::mutable_topranktime_resp() {
  set_has_topranktime_resp();
  if (topranktime_resp_ == NULL) topranktime_resp_ = new ::fgame::CSTopRankTimeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.TopRankTime_Resp)
  return topranktime_resp_;
}
inline ::fgame::CSTopRankTimeResp* S2ClientMsg::release_topranktime_resp() {
  clear_has_topranktime_resp();
  ::fgame::CSTopRankTimeResp* temp = topranktime_resp_;
  topranktime_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_topranktime_resp(::fgame::CSTopRankTimeResp* topranktime_resp) {
  delete topranktime_resp_;
  topranktime_resp_ = topranktime_resp;
  if (topranktime_resp) {
    set_has_topranktime_resp();
  } else {
    clear_has_topranktime_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.TopRankTime_Resp)
}

// optional .fgame.CSUpdateTaskStatusResp UpdateTaskStatus_Resp = 201;
inline bool S2ClientMsg::has_updatetaskstatus_resp() const {
  return (_has_bits_[4] & 0x01000000u) != 0;
}
inline void S2ClientMsg::set_has_updatetaskstatus_resp() {
  _has_bits_[4] |= 0x01000000u;
}
inline void S2ClientMsg::clear_has_updatetaskstatus_resp() {
  _has_bits_[4] &= ~0x01000000u;
}
inline void S2ClientMsg::clear_updatetaskstatus_resp() {
  if (updatetaskstatus_resp_ != NULL) updatetaskstatus_resp_->::fgame::CSUpdateTaskStatusResp::Clear();
  clear_has_updatetaskstatus_resp();
}
inline const ::fgame::CSUpdateTaskStatusResp& S2ClientMsg::updatetaskstatus_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.UpdateTaskStatus_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return updatetaskstatus_resp_ != NULL ? *updatetaskstatus_resp_ : *default_instance().updatetaskstatus_resp_;
#else
  return updatetaskstatus_resp_ != NULL ? *updatetaskstatus_resp_ : *default_instance_->updatetaskstatus_resp_;
#endif
}
inline ::fgame::CSUpdateTaskStatusResp* S2ClientMsg::mutable_updatetaskstatus_resp() {
  set_has_updatetaskstatus_resp();
  if (updatetaskstatus_resp_ == NULL) updatetaskstatus_resp_ = new ::fgame::CSUpdateTaskStatusResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.UpdateTaskStatus_Resp)
  return updatetaskstatus_resp_;
}
inline ::fgame::CSUpdateTaskStatusResp* S2ClientMsg::release_updatetaskstatus_resp() {
  clear_has_updatetaskstatus_resp();
  ::fgame::CSUpdateTaskStatusResp* temp = updatetaskstatus_resp_;
  updatetaskstatus_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_updatetaskstatus_resp(::fgame::CSUpdateTaskStatusResp* updatetaskstatus_resp) {
  delete updatetaskstatus_resp_;
  updatetaskstatus_resp_ = updatetaskstatus_resp;
  if (updatetaskstatus_resp) {
    set_has_updatetaskstatus_resp();
  } else {
    clear_has_updatetaskstatus_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.UpdateTaskStatus_Resp)
}

// optional .fgame.CSAsSyncInfoResp AsSyncInfo_Resp = 202;
inline bool S2ClientMsg::has_assyncinfo_resp() const {
  return (_has_bits_[4] & 0x02000000u) != 0;
}
inline void S2ClientMsg::set_has_assyncinfo_resp() {
  _has_bits_[4] |= 0x02000000u;
}
inline void S2ClientMsg::clear_has_assyncinfo_resp() {
  _has_bits_[4] &= ~0x02000000u;
}
inline void S2ClientMsg::clear_assyncinfo_resp() {
  if (assyncinfo_resp_ != NULL) assyncinfo_resp_->::fgame::CSAsSyncInfoResp::Clear();
  clear_has_assyncinfo_resp();
}
inline const ::fgame::CSAsSyncInfoResp& S2ClientMsg::assyncinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.AsSyncInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return assyncinfo_resp_ != NULL ? *assyncinfo_resp_ : *default_instance().assyncinfo_resp_;
#else
  return assyncinfo_resp_ != NULL ? *assyncinfo_resp_ : *default_instance_->assyncinfo_resp_;
#endif
}
inline ::fgame::CSAsSyncInfoResp* S2ClientMsg::mutable_assyncinfo_resp() {
  set_has_assyncinfo_resp();
  if (assyncinfo_resp_ == NULL) assyncinfo_resp_ = new ::fgame::CSAsSyncInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.AsSyncInfo_Resp)
  return assyncinfo_resp_;
}
inline ::fgame::CSAsSyncInfoResp* S2ClientMsg::release_assyncinfo_resp() {
  clear_has_assyncinfo_resp();
  ::fgame::CSAsSyncInfoResp* temp = assyncinfo_resp_;
  assyncinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_assyncinfo_resp(::fgame::CSAsSyncInfoResp* assyncinfo_resp) {
  delete assyncinfo_resp_;
  assyncinfo_resp_ = assyncinfo_resp;
  if (assyncinfo_resp) {
    set_has_assyncinfo_resp();
  } else {
    clear_has_assyncinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.AsSyncInfo_Resp)
}

// optional .fgame.CSAsNewAddResp AsNewAdd_Resp = 203;
inline bool S2ClientMsg::has_asnewadd_resp() const {
  return (_has_bits_[4] & 0x04000000u) != 0;
}
inline void S2ClientMsg::set_has_asnewadd_resp() {
  _has_bits_[4] |= 0x04000000u;
}
inline void S2ClientMsg::clear_has_asnewadd_resp() {
  _has_bits_[4] &= ~0x04000000u;
}
inline void S2ClientMsg::clear_asnewadd_resp() {
  if (asnewadd_resp_ != NULL) asnewadd_resp_->::fgame::CSAsNewAddResp::Clear();
  clear_has_asnewadd_resp();
}
inline const ::fgame::CSAsNewAddResp& S2ClientMsg::asnewadd_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.AsNewAdd_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asnewadd_resp_ != NULL ? *asnewadd_resp_ : *default_instance().asnewadd_resp_;
#else
  return asnewadd_resp_ != NULL ? *asnewadd_resp_ : *default_instance_->asnewadd_resp_;
#endif
}
inline ::fgame::CSAsNewAddResp* S2ClientMsg::mutable_asnewadd_resp() {
  set_has_asnewadd_resp();
  if (asnewadd_resp_ == NULL) asnewadd_resp_ = new ::fgame::CSAsNewAddResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.AsNewAdd_Resp)
  return asnewadd_resp_;
}
inline ::fgame::CSAsNewAddResp* S2ClientMsg::release_asnewadd_resp() {
  clear_has_asnewadd_resp();
  ::fgame::CSAsNewAddResp* temp = asnewadd_resp_;
  asnewadd_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_asnewadd_resp(::fgame::CSAsNewAddResp* asnewadd_resp) {
  delete asnewadd_resp_;
  asnewadd_resp_ = asnewadd_resp;
  if (asnewadd_resp) {
    set_has_asnewadd_resp();
  } else {
    clear_has_asnewadd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.AsNewAdd_Resp)
}

// optional .fgame.CSAsOperateResp AsOperate_Resp = 204;
inline bool S2ClientMsg::has_asoperate_resp() const {
  return (_has_bits_[4] & 0x08000000u) != 0;
}
inline void S2ClientMsg::set_has_asoperate_resp() {
  _has_bits_[4] |= 0x08000000u;
}
inline void S2ClientMsg::clear_has_asoperate_resp() {
  _has_bits_[4] &= ~0x08000000u;
}
inline void S2ClientMsg::clear_asoperate_resp() {
  if (asoperate_resp_ != NULL) asoperate_resp_->::fgame::CSAsOperateResp::Clear();
  clear_has_asoperate_resp();
}
inline const ::fgame::CSAsOperateResp& S2ClientMsg::asoperate_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.AsOperate_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asoperate_resp_ != NULL ? *asoperate_resp_ : *default_instance().asoperate_resp_;
#else
  return asoperate_resp_ != NULL ? *asoperate_resp_ : *default_instance_->asoperate_resp_;
#endif
}
inline ::fgame::CSAsOperateResp* S2ClientMsg::mutable_asoperate_resp() {
  set_has_asoperate_resp();
  if (asoperate_resp_ == NULL) asoperate_resp_ = new ::fgame::CSAsOperateResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.AsOperate_Resp)
  return asoperate_resp_;
}
inline ::fgame::CSAsOperateResp* S2ClientMsg::release_asoperate_resp() {
  clear_has_asoperate_resp();
  ::fgame::CSAsOperateResp* temp = asoperate_resp_;
  asoperate_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_asoperate_resp(::fgame::CSAsOperateResp* asoperate_resp) {
  delete asoperate_resp_;
  asoperate_resp_ = asoperate_resp;
  if (asoperate_resp) {
    set_has_asoperate_resp();
  } else {
    clear_has_asoperate_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.AsOperate_Resp)
}

// optional .fgame.CSAsUseCardResp AsUseCard_Resp = 205;
inline bool S2ClientMsg::has_asusecard_resp() const {
  return (_has_bits_[4] & 0x10000000u) != 0;
}
inline void S2ClientMsg::set_has_asusecard_resp() {
  _has_bits_[4] |= 0x10000000u;
}
inline void S2ClientMsg::clear_has_asusecard_resp() {
  _has_bits_[4] &= ~0x10000000u;
}
inline void S2ClientMsg::clear_asusecard_resp() {
  if (asusecard_resp_ != NULL) asusecard_resp_->::fgame::CSAsUseCardResp::Clear();
  clear_has_asusecard_resp();
}
inline const ::fgame::CSAsUseCardResp& S2ClientMsg::asusecard_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.AsUseCard_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asusecard_resp_ != NULL ? *asusecard_resp_ : *default_instance().asusecard_resp_;
#else
  return asusecard_resp_ != NULL ? *asusecard_resp_ : *default_instance_->asusecard_resp_;
#endif
}
inline ::fgame::CSAsUseCardResp* S2ClientMsg::mutable_asusecard_resp() {
  set_has_asusecard_resp();
  if (asusecard_resp_ == NULL) asusecard_resp_ = new ::fgame::CSAsUseCardResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.AsUseCard_Resp)
  return asusecard_resp_;
}
inline ::fgame::CSAsUseCardResp* S2ClientMsg::release_asusecard_resp() {
  clear_has_asusecard_resp();
  ::fgame::CSAsUseCardResp* temp = asusecard_resp_;
  asusecard_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_asusecard_resp(::fgame::CSAsUseCardResp* asusecard_resp) {
  delete asusecard_resp_;
  asusecard_resp_ = asusecard_resp;
  if (asusecard_resp) {
    set_has_asusecard_resp();
  } else {
    clear_has_asusecard_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.AsUseCard_Resp)
}

// optional .fgame.CSPvpUseSkillResp PvpUseSkill_Resp = 206;
inline bool S2ClientMsg::has_pvpuseskill_resp() const {
  return (_has_bits_[4] & 0x20000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpuseskill_resp() {
  _has_bits_[4] |= 0x20000000u;
}
inline void S2ClientMsg::clear_has_pvpuseskill_resp() {
  _has_bits_[4] &= ~0x20000000u;
}
inline void S2ClientMsg::clear_pvpuseskill_resp() {
  if (pvpuseskill_resp_ != NULL) pvpuseskill_resp_->::fgame::CSPvpUseSkillResp::Clear();
  clear_has_pvpuseskill_resp();
}
inline const ::fgame::CSPvpUseSkillResp& S2ClientMsg::pvpuseskill_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpUseSkill_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpuseskill_resp_ != NULL ? *pvpuseskill_resp_ : *default_instance().pvpuseskill_resp_;
#else
  return pvpuseskill_resp_ != NULL ? *pvpuseskill_resp_ : *default_instance_->pvpuseskill_resp_;
#endif
}
inline ::fgame::CSPvpUseSkillResp* S2ClientMsg::mutable_pvpuseskill_resp() {
  set_has_pvpuseskill_resp();
  if (pvpuseskill_resp_ == NULL) pvpuseskill_resp_ = new ::fgame::CSPvpUseSkillResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpUseSkill_Resp)
  return pvpuseskill_resp_;
}
inline ::fgame::CSPvpUseSkillResp* S2ClientMsg::release_pvpuseskill_resp() {
  clear_has_pvpuseskill_resp();
  ::fgame::CSPvpUseSkillResp* temp = pvpuseskill_resp_;
  pvpuseskill_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpuseskill_resp(::fgame::CSPvpUseSkillResp* pvpuseskill_resp) {
  delete pvpuseskill_resp_;
  pvpuseskill_resp_ = pvpuseskill_resp;
  if (pvpuseskill_resp) {
    set_has_pvpuseskill_resp();
  } else {
    clear_has_pvpuseskill_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpUseSkill_Resp)
}

// optional .fgame.CSPvpAssistantInfoResp PvpAssistantInfo_Resp = 207;
inline bool S2ClientMsg::has_pvpassistantinfo_resp() const {
  return (_has_bits_[4] & 0x40000000u) != 0;
}
inline void S2ClientMsg::set_has_pvpassistantinfo_resp() {
  _has_bits_[4] |= 0x40000000u;
}
inline void S2ClientMsg::clear_has_pvpassistantinfo_resp() {
  _has_bits_[4] &= ~0x40000000u;
}
inline void S2ClientMsg::clear_pvpassistantinfo_resp() {
  if (pvpassistantinfo_resp_ != NULL) pvpassistantinfo_resp_->::fgame::CSPvpAssistantInfoResp::Clear();
  clear_has_pvpassistantinfo_resp();
}
inline const ::fgame::CSPvpAssistantInfoResp& S2ClientMsg::pvpassistantinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.PvpAssistantInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pvpassistantinfo_resp_ != NULL ? *pvpassistantinfo_resp_ : *default_instance().pvpassistantinfo_resp_;
#else
  return pvpassistantinfo_resp_ != NULL ? *pvpassistantinfo_resp_ : *default_instance_->pvpassistantinfo_resp_;
#endif
}
inline ::fgame::CSPvpAssistantInfoResp* S2ClientMsg::mutable_pvpassistantinfo_resp() {
  set_has_pvpassistantinfo_resp();
  if (pvpassistantinfo_resp_ == NULL) pvpassistantinfo_resp_ = new ::fgame::CSPvpAssistantInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.PvpAssistantInfo_Resp)
  return pvpassistantinfo_resp_;
}
inline ::fgame::CSPvpAssistantInfoResp* S2ClientMsg::release_pvpassistantinfo_resp() {
  clear_has_pvpassistantinfo_resp();
  ::fgame::CSPvpAssistantInfoResp* temp = pvpassistantinfo_resp_;
  pvpassistantinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_pvpassistantinfo_resp(::fgame::CSPvpAssistantInfoResp* pvpassistantinfo_resp) {
  delete pvpassistantinfo_resp_;
  pvpassistantinfo_resp_ = pvpassistantinfo_resp;
  if (pvpassistantinfo_resp) {
    set_has_pvpassistantinfo_resp();
  } else {
    clear_has_pvpassistantinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.PvpAssistantInfo_Resp)
}

// optional .fgame.CSInstituteInfoResp InstituteInfo_Resp = 208;
inline bool S2ClientMsg::has_instituteinfo_resp() const {
  return (_has_bits_[4] & 0x80000000u) != 0;
}
inline void S2ClientMsg::set_has_instituteinfo_resp() {
  _has_bits_[4] |= 0x80000000u;
}
inline void S2ClientMsg::clear_has_instituteinfo_resp() {
  _has_bits_[4] &= ~0x80000000u;
}
inline void S2ClientMsg::clear_instituteinfo_resp() {
  if (instituteinfo_resp_ != NULL) instituteinfo_resp_->::fgame::CSInstituteInfoResp::Clear();
  clear_has_instituteinfo_resp();
}
inline const ::fgame::CSInstituteInfoResp& S2ClientMsg::instituteinfo_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.InstituteInfo_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return instituteinfo_resp_ != NULL ? *instituteinfo_resp_ : *default_instance().instituteinfo_resp_;
#else
  return instituteinfo_resp_ != NULL ? *instituteinfo_resp_ : *default_instance_->instituteinfo_resp_;
#endif
}
inline ::fgame::CSInstituteInfoResp* S2ClientMsg::mutable_instituteinfo_resp() {
  set_has_instituteinfo_resp();
  if (instituteinfo_resp_ == NULL) instituteinfo_resp_ = new ::fgame::CSInstituteInfoResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.InstituteInfo_Resp)
  return instituteinfo_resp_;
}
inline ::fgame::CSInstituteInfoResp* S2ClientMsg::release_instituteinfo_resp() {
  clear_has_instituteinfo_resp();
  ::fgame::CSInstituteInfoResp* temp = instituteinfo_resp_;
  instituteinfo_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_instituteinfo_resp(::fgame::CSInstituteInfoResp* instituteinfo_resp) {
  delete instituteinfo_resp_;
  instituteinfo_resp_ = instituteinfo_resp;
  if (instituteinfo_resp) {
    set_has_instituteinfo_resp();
  } else {
    clear_has_instituteinfo_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.InstituteInfo_Resp)
}

// optional .fgame.CSInstituteBuyResp InstituteBuy_Resp = 209;
inline bool S2ClientMsg::has_institutebuy_resp() const {
  return (_has_bits_[5] & 0x00000001u) != 0;
}
inline void S2ClientMsg::set_has_institutebuy_resp() {
  _has_bits_[5] |= 0x00000001u;
}
inline void S2ClientMsg::clear_has_institutebuy_resp() {
  _has_bits_[5] &= ~0x00000001u;
}
inline void S2ClientMsg::clear_institutebuy_resp() {
  if (institutebuy_resp_ != NULL) institutebuy_resp_->::fgame::CSInstituteBuyResp::Clear();
  clear_has_institutebuy_resp();
}
inline const ::fgame::CSInstituteBuyResp& S2ClientMsg::institutebuy_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.InstituteBuy_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return institutebuy_resp_ != NULL ? *institutebuy_resp_ : *default_instance().institutebuy_resp_;
#else
  return institutebuy_resp_ != NULL ? *institutebuy_resp_ : *default_instance_->institutebuy_resp_;
#endif
}
inline ::fgame::CSInstituteBuyResp* S2ClientMsg::mutable_institutebuy_resp() {
  set_has_institutebuy_resp();
  if (institutebuy_resp_ == NULL) institutebuy_resp_ = new ::fgame::CSInstituteBuyResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.InstituteBuy_Resp)
  return institutebuy_resp_;
}
inline ::fgame::CSInstituteBuyResp* S2ClientMsg::release_institutebuy_resp() {
  clear_has_institutebuy_resp();
  ::fgame::CSInstituteBuyResp* temp = institutebuy_resp_;
  institutebuy_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_institutebuy_resp(::fgame::CSInstituteBuyResp* institutebuy_resp) {
  delete institutebuy_resp_;
  institutebuy_resp_ = institutebuy_resp;
  if (institutebuy_resp) {
    set_has_institutebuy_resp();
  } else {
    clear_has_institutebuy_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.InstituteBuy_Resp)
}

// optional .fgame.CSOpActAddResp OpActAdd_Resp = 300;
inline bool S2ClientMsg::has_opactadd_resp() const {
  return (_has_bits_[5] & 0x00000002u) != 0;
}
inline void S2ClientMsg::set_has_opactadd_resp() {
  _has_bits_[5] |= 0x00000002u;
}
inline void S2ClientMsg::clear_has_opactadd_resp() {
  _has_bits_[5] &= ~0x00000002u;
}
inline void S2ClientMsg::clear_opactadd_resp() {
  if (opactadd_resp_ != NULL) opactadd_resp_->::fgame::CSOpActAddResp::Clear();
  clear_has_opactadd_resp();
}
inline const ::fgame::CSOpActAddResp& S2ClientMsg::opactadd_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActAdd_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactadd_resp_ != NULL ? *opactadd_resp_ : *default_instance().opactadd_resp_;
#else
  return opactadd_resp_ != NULL ? *opactadd_resp_ : *default_instance_->opactadd_resp_;
#endif
}
inline ::fgame::CSOpActAddResp* S2ClientMsg::mutable_opactadd_resp() {
  set_has_opactadd_resp();
  if (opactadd_resp_ == NULL) opactadd_resp_ = new ::fgame::CSOpActAddResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActAdd_Resp)
  return opactadd_resp_;
}
inline ::fgame::CSOpActAddResp* S2ClientMsg::release_opactadd_resp() {
  clear_has_opactadd_resp();
  ::fgame::CSOpActAddResp* temp = opactadd_resp_;
  opactadd_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactadd_resp(::fgame::CSOpActAddResp* opactadd_resp) {
  delete opactadd_resp_;
  opactadd_resp_ = opactadd_resp;
  if (opactadd_resp) {
    set_has_opactadd_resp();
  } else {
    clear_has_opactadd_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActAdd_Resp)
}

// optional .fgame.CSOpActStateChangedResp OpActStateChanged_Resp = 301;
inline bool S2ClientMsg::has_opactstatechanged_resp() const {
  return (_has_bits_[5] & 0x00000004u) != 0;
}
inline void S2ClientMsg::set_has_opactstatechanged_resp() {
  _has_bits_[5] |= 0x00000004u;
}
inline void S2ClientMsg::clear_has_opactstatechanged_resp() {
  _has_bits_[5] &= ~0x00000004u;
}
inline void S2ClientMsg::clear_opactstatechanged_resp() {
  if (opactstatechanged_resp_ != NULL) opactstatechanged_resp_->::fgame::CSOpActStateChangedResp::Clear();
  clear_has_opactstatechanged_resp();
}
inline const ::fgame::CSOpActStateChangedResp& S2ClientMsg::opactstatechanged_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActStateChanged_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactstatechanged_resp_ != NULL ? *opactstatechanged_resp_ : *default_instance().opactstatechanged_resp_;
#else
  return opactstatechanged_resp_ != NULL ? *opactstatechanged_resp_ : *default_instance_->opactstatechanged_resp_;
#endif
}
inline ::fgame::CSOpActStateChangedResp* S2ClientMsg::mutable_opactstatechanged_resp() {
  set_has_opactstatechanged_resp();
  if (opactstatechanged_resp_ == NULL) opactstatechanged_resp_ = new ::fgame::CSOpActStateChangedResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActStateChanged_Resp)
  return opactstatechanged_resp_;
}
inline ::fgame::CSOpActStateChangedResp* S2ClientMsg::release_opactstatechanged_resp() {
  clear_has_opactstatechanged_resp();
  ::fgame::CSOpActStateChangedResp* temp = opactstatechanged_resp_;
  opactstatechanged_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactstatechanged_resp(::fgame::CSOpActStateChangedResp* opactstatechanged_resp) {
  delete opactstatechanged_resp_;
  opactstatechanged_resp_ = opactstatechanged_resp;
  if (opactstatechanged_resp) {
    set_has_opactstatechanged_resp();
  } else {
    clear_has_opactstatechanged_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActStateChanged_Resp)
}

// optional .fgame.CSActSelfDataChangedResp OpActSelfDataChanged_Resp = 302;
inline bool S2ClientMsg::has_opactselfdatachanged_resp() const {
  return (_has_bits_[5] & 0x00000008u) != 0;
}
inline void S2ClientMsg::set_has_opactselfdatachanged_resp() {
  _has_bits_[5] |= 0x00000008u;
}
inline void S2ClientMsg::clear_has_opactselfdatachanged_resp() {
  _has_bits_[5] &= ~0x00000008u;
}
inline void S2ClientMsg::clear_opactselfdatachanged_resp() {
  if (opactselfdatachanged_resp_ != NULL) opactselfdatachanged_resp_->::fgame::CSActSelfDataChangedResp::Clear();
  clear_has_opactselfdatachanged_resp();
}
inline const ::fgame::CSActSelfDataChangedResp& S2ClientMsg::opactselfdatachanged_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActSelfDataChanged_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactselfdatachanged_resp_ != NULL ? *opactselfdatachanged_resp_ : *default_instance().opactselfdatachanged_resp_;
#else
  return opactselfdatachanged_resp_ != NULL ? *opactselfdatachanged_resp_ : *default_instance_->opactselfdatachanged_resp_;
#endif
}
inline ::fgame::CSActSelfDataChangedResp* S2ClientMsg::mutable_opactselfdatachanged_resp() {
  set_has_opactselfdatachanged_resp();
  if (opactselfdatachanged_resp_ == NULL) opactselfdatachanged_resp_ = new ::fgame::CSActSelfDataChangedResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActSelfDataChanged_Resp)
  return opactselfdatachanged_resp_;
}
inline ::fgame::CSActSelfDataChangedResp* S2ClientMsg::release_opactselfdatachanged_resp() {
  clear_has_opactselfdatachanged_resp();
  ::fgame::CSActSelfDataChangedResp* temp = opactselfdatachanged_resp_;
  opactselfdatachanged_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactselfdatachanged_resp(::fgame::CSActSelfDataChangedResp* opactselfdatachanged_resp) {
  delete opactselfdatachanged_resp_;
  opactselfdatachanged_resp_ = opactselfdatachanged_resp;
  if (opactselfdatachanged_resp) {
    set_has_opactselfdatachanged_resp();
  } else {
    clear_has_opactselfdatachanged_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActSelfDataChanged_Resp)
}

// optional .fgame.CSActGlobalDataChangedResp OpActGlobalDataChanged_Resp = 303;
inline bool S2ClientMsg::has_opactglobaldatachanged_resp() const {
  return (_has_bits_[5] & 0x00000010u) != 0;
}
inline void S2ClientMsg::set_has_opactglobaldatachanged_resp() {
  _has_bits_[5] |= 0x00000010u;
}
inline void S2ClientMsg::clear_has_opactglobaldatachanged_resp() {
  _has_bits_[5] &= ~0x00000010u;
}
inline void S2ClientMsg::clear_opactglobaldatachanged_resp() {
  if (opactglobaldatachanged_resp_ != NULL) opactglobaldatachanged_resp_->::fgame::CSActGlobalDataChangedResp::Clear();
  clear_has_opactglobaldatachanged_resp();
}
inline const ::fgame::CSActGlobalDataChangedResp& S2ClientMsg::opactglobaldatachanged_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActGlobalDataChanged_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactglobaldatachanged_resp_ != NULL ? *opactglobaldatachanged_resp_ : *default_instance().opactglobaldatachanged_resp_;
#else
  return opactglobaldatachanged_resp_ != NULL ? *opactglobaldatachanged_resp_ : *default_instance_->opactglobaldatachanged_resp_;
#endif
}
inline ::fgame::CSActGlobalDataChangedResp* S2ClientMsg::mutable_opactglobaldatachanged_resp() {
  set_has_opactglobaldatachanged_resp();
  if (opactglobaldatachanged_resp_ == NULL) opactglobaldatachanged_resp_ = new ::fgame::CSActGlobalDataChangedResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActGlobalDataChanged_Resp)
  return opactglobaldatachanged_resp_;
}
inline ::fgame::CSActGlobalDataChangedResp* S2ClientMsg::release_opactglobaldatachanged_resp() {
  clear_has_opactglobaldatachanged_resp();
  ::fgame::CSActGlobalDataChangedResp* temp = opactglobaldatachanged_resp_;
  opactglobaldatachanged_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactglobaldatachanged_resp(::fgame::CSActGlobalDataChangedResp* opactglobaldatachanged_resp) {
  delete opactglobaldatachanged_resp_;
  opactglobaldatachanged_resp_ = opactglobaldatachanged_resp;
  if (opactglobaldatachanged_resp) {
    set_has_opactglobaldatachanged_resp();
  } else {
    clear_has_opactglobaldatachanged_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActGlobalDataChanged_Resp)
}

// optional .fgame.CSOpActConfigListResp OpActConfigList_Resp = 304;
inline bool S2ClientMsg::has_opactconfiglist_resp() const {
  return (_has_bits_[5] & 0x00000020u) != 0;
}
inline void S2ClientMsg::set_has_opactconfiglist_resp() {
  _has_bits_[5] |= 0x00000020u;
}
inline void S2ClientMsg::clear_has_opactconfiglist_resp() {
  _has_bits_[5] &= ~0x00000020u;
}
inline void S2ClientMsg::clear_opactconfiglist_resp() {
  if (opactconfiglist_resp_ != NULL) opactconfiglist_resp_->::fgame::CSOpActConfigListResp::Clear();
  clear_has_opactconfiglist_resp();
}
inline const ::fgame::CSOpActConfigListResp& S2ClientMsg::opactconfiglist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActConfigList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactconfiglist_resp_ != NULL ? *opactconfiglist_resp_ : *default_instance().opactconfiglist_resp_;
#else
  return opactconfiglist_resp_ != NULL ? *opactconfiglist_resp_ : *default_instance_->opactconfiglist_resp_;
#endif
}
inline ::fgame::CSOpActConfigListResp* S2ClientMsg::mutable_opactconfiglist_resp() {
  set_has_opactconfiglist_resp();
  if (opactconfiglist_resp_ == NULL) opactconfiglist_resp_ = new ::fgame::CSOpActConfigListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActConfigList_Resp)
  return opactconfiglist_resp_;
}
inline ::fgame::CSOpActConfigListResp* S2ClientMsg::release_opactconfiglist_resp() {
  clear_has_opactconfiglist_resp();
  ::fgame::CSOpActConfigListResp* temp = opactconfiglist_resp_;
  opactconfiglist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactconfiglist_resp(::fgame::CSOpActConfigListResp* opactconfiglist_resp) {
  delete opactconfiglist_resp_;
  opactconfiglist_resp_ = opactconfiglist_resp;
  if (opactconfiglist_resp) {
    set_has_opactconfiglist_resp();
  } else {
    clear_has_opactconfiglist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActConfigList_Resp)
}

// optional .fgame.CSOpActSelfDataListResp OpActSelfDataList_Resp = 305;
inline bool S2ClientMsg::has_opactselfdatalist_resp() const {
  return (_has_bits_[5] & 0x00000040u) != 0;
}
inline void S2ClientMsg::set_has_opactselfdatalist_resp() {
  _has_bits_[5] |= 0x00000040u;
}
inline void S2ClientMsg::clear_has_opactselfdatalist_resp() {
  _has_bits_[5] &= ~0x00000040u;
}
inline void S2ClientMsg::clear_opactselfdatalist_resp() {
  if (opactselfdatalist_resp_ != NULL) opactselfdatalist_resp_->::fgame::CSOpActSelfDataListResp::Clear();
  clear_has_opactselfdatalist_resp();
}
inline const ::fgame::CSOpActSelfDataListResp& S2ClientMsg::opactselfdatalist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActSelfDataList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactselfdatalist_resp_ != NULL ? *opactselfdatalist_resp_ : *default_instance().opactselfdatalist_resp_;
#else
  return opactselfdatalist_resp_ != NULL ? *opactselfdatalist_resp_ : *default_instance_->opactselfdatalist_resp_;
#endif
}
inline ::fgame::CSOpActSelfDataListResp* S2ClientMsg::mutable_opactselfdatalist_resp() {
  set_has_opactselfdatalist_resp();
  if (opactselfdatalist_resp_ == NULL) opactselfdatalist_resp_ = new ::fgame::CSOpActSelfDataListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActSelfDataList_Resp)
  return opactselfdatalist_resp_;
}
inline ::fgame::CSOpActSelfDataListResp* S2ClientMsg::release_opactselfdatalist_resp() {
  clear_has_opactselfdatalist_resp();
  ::fgame::CSOpActSelfDataListResp* temp = opactselfdatalist_resp_;
  opactselfdatalist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactselfdatalist_resp(::fgame::CSOpActSelfDataListResp* opactselfdatalist_resp) {
  delete opactselfdatalist_resp_;
  opactselfdatalist_resp_ = opactselfdatalist_resp;
  if (opactselfdatalist_resp) {
    set_has_opactselfdatalist_resp();
  } else {
    clear_has_opactselfdatalist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActSelfDataList_Resp)
}

// optional .fgame.CSOpActGlobalDataListResp OpActGlobalDataList_Resp = 306;
inline bool S2ClientMsg::has_opactglobaldatalist_resp() const {
  return (_has_bits_[5] & 0x00000080u) != 0;
}
inline void S2ClientMsg::set_has_opactglobaldatalist_resp() {
  _has_bits_[5] |= 0x00000080u;
}
inline void S2ClientMsg::clear_has_opactglobaldatalist_resp() {
  _has_bits_[5] &= ~0x00000080u;
}
inline void S2ClientMsg::clear_opactglobaldatalist_resp() {
  if (opactglobaldatalist_resp_ != NULL) opactglobaldatalist_resp_->::fgame::CSOpActGlobalDataListResp::Clear();
  clear_has_opactglobaldatalist_resp();
}
inline const ::fgame::CSOpActGlobalDataListResp& S2ClientMsg::opactglobaldatalist_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActGlobalDataList_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactglobaldatalist_resp_ != NULL ? *opactglobaldatalist_resp_ : *default_instance().opactglobaldatalist_resp_;
#else
  return opactglobaldatalist_resp_ != NULL ? *opactglobaldatalist_resp_ : *default_instance_->opactglobaldatalist_resp_;
#endif
}
inline ::fgame::CSOpActGlobalDataListResp* S2ClientMsg::mutable_opactglobaldatalist_resp() {
  set_has_opactglobaldatalist_resp();
  if (opactglobaldatalist_resp_ == NULL) opactglobaldatalist_resp_ = new ::fgame::CSOpActGlobalDataListResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActGlobalDataList_Resp)
  return opactglobaldatalist_resp_;
}
inline ::fgame::CSOpActGlobalDataListResp* S2ClientMsg::release_opactglobaldatalist_resp() {
  clear_has_opactglobaldatalist_resp();
  ::fgame::CSOpActGlobalDataListResp* temp = opactglobaldatalist_resp_;
  opactglobaldatalist_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactglobaldatalist_resp(::fgame::CSOpActGlobalDataListResp* opactglobaldatalist_resp) {
  delete opactglobaldatalist_resp_;
  opactglobaldatalist_resp_ = opactglobaldatalist_resp;
  if (opactglobaldatalist_resp) {
    set_has_opactglobaldatalist_resp();
  } else {
    clear_has_opactglobaldatalist_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActGlobalDataList_Resp)
}

// optional .fgame.CSOpActDemoTakeResp OpActDemoTake_Resp = 310;
inline bool S2ClientMsg::has_opactdemotake_resp() const {
  return (_has_bits_[5] & 0x00000100u) != 0;
}
inline void S2ClientMsg::set_has_opactdemotake_resp() {
  _has_bits_[5] |= 0x00000100u;
}
inline void S2ClientMsg::clear_has_opactdemotake_resp() {
  _has_bits_[5] &= ~0x00000100u;
}
inline void S2ClientMsg::clear_opactdemotake_resp() {
  if (opactdemotake_resp_ != NULL) opactdemotake_resp_->::fgame::CSOpActDemoTakeResp::Clear();
  clear_has_opactdemotake_resp();
}
inline const ::fgame::CSOpActDemoTakeResp& S2ClientMsg::opactdemotake_resp() const {
  // @@protoc_insertion_point(field_get:fgame.S2ClientMsg.OpActDemoTake_Resp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return opactdemotake_resp_ != NULL ? *opactdemotake_resp_ : *default_instance().opactdemotake_resp_;
#else
  return opactdemotake_resp_ != NULL ? *opactdemotake_resp_ : *default_instance_->opactdemotake_resp_;
#endif
}
inline ::fgame::CSOpActDemoTakeResp* S2ClientMsg::mutable_opactdemotake_resp() {
  set_has_opactdemotake_resp();
  if (opactdemotake_resp_ == NULL) opactdemotake_resp_ = new ::fgame::CSOpActDemoTakeResp;
  // @@protoc_insertion_point(field_mutable:fgame.S2ClientMsg.OpActDemoTake_Resp)
  return opactdemotake_resp_;
}
inline ::fgame::CSOpActDemoTakeResp* S2ClientMsg::release_opactdemotake_resp() {
  clear_has_opactdemotake_resp();
  ::fgame::CSOpActDemoTakeResp* temp = opactdemotake_resp_;
  opactdemotake_resp_ = NULL;
  return temp;
}
inline void S2ClientMsg::set_allocated_opactdemotake_resp(::fgame::CSOpActDemoTakeResp* opactdemotake_resp) {
  delete opactdemotake_resp_;
  opactdemotake_resp_ = opactdemotake_resp;
  if (opactdemotake_resp) {
    set_has_opactdemotake_resp();
  } else {
    clear_has_opactdemotake_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.S2ClientMsg.OpActDemoTake_Resp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientSvrMsg_2eproto__INCLUDED
