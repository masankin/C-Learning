// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_Friend_2eproto() {
  delete FriendInfo::default_instance_;
  delete FriendPkRequestInfo::default_instance_;
  delete CSFriendQueryReq::default_instance_;
  delete CSFriendQueryResp::default_instance_;
  delete CSFriendRequestAddReq::default_instance_;
  delete CSFriendRequestAddResp::default_instance_;
  delete CSFriendConfirmAddReq::default_instance_;
  delete CSFriendConfirmAddResp::default_instance_;
  delete CSFriendGetInfoReq::default_instance_;
  delete FriendRequestInfo::default_instance_;
  delete CSFriendGetInfoResp::default_instance_;
  delete CSFriendRequestRemoveReq::default_instance_;
  delete CSFriendRequestRemoveResp::default_instance_;
  delete CSFriendAddBlackListReq::default_instance_;
  delete CSFriendAddBlackListResp::default_instance_;
  delete CSFriendRemoveBlackListReq::default_instance_;
  delete CSFriendRemoveBlackListResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Friend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::fgame::protobuf_AddDesc_Base_2eproto();
  FriendInfo::default_instance_ = new FriendInfo();
  FriendPkRequestInfo::default_instance_ = new FriendPkRequestInfo();
  CSFriendQueryReq::default_instance_ = new CSFriendQueryReq();
  CSFriendQueryResp::default_instance_ = new CSFriendQueryResp();
  CSFriendRequestAddReq::default_instance_ = new CSFriendRequestAddReq();
  CSFriendRequestAddResp::default_instance_ = new CSFriendRequestAddResp();
  CSFriendConfirmAddReq::default_instance_ = new CSFriendConfirmAddReq();
  CSFriendConfirmAddResp::default_instance_ = new CSFriendConfirmAddResp();
  CSFriendGetInfoReq::default_instance_ = new CSFriendGetInfoReq();
  FriendRequestInfo::default_instance_ = new FriendRequestInfo();
  CSFriendGetInfoResp::default_instance_ = new CSFriendGetInfoResp();
  CSFriendRequestRemoveReq::default_instance_ = new CSFriendRequestRemoveReq();
  CSFriendRequestRemoveResp::default_instance_ = new CSFriendRequestRemoveResp();
  CSFriendAddBlackListReq::default_instance_ = new CSFriendAddBlackListReq();
  CSFriendAddBlackListResp::default_instance_ = new CSFriendAddBlackListResp();
  CSFriendRemoveBlackListReq::default_instance_ = new CSFriendRemoveBlackListReq();
  CSFriendRemoveBlackListResp::default_instance_ = new CSFriendRemoveBlackListResp();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  FriendPkRequestInfo::default_instance_->InitAsDefaultInstance();
  CSFriendQueryReq::default_instance_->InitAsDefaultInstance();
  CSFriendQueryResp::default_instance_->InitAsDefaultInstance();
  CSFriendRequestAddReq::default_instance_->InitAsDefaultInstance();
  CSFriendRequestAddResp::default_instance_->InitAsDefaultInstance();
  CSFriendConfirmAddReq::default_instance_->InitAsDefaultInstance();
  CSFriendConfirmAddResp::default_instance_->InitAsDefaultInstance();
  CSFriendGetInfoReq::default_instance_->InitAsDefaultInstance();
  FriendRequestInfo::default_instance_->InitAsDefaultInstance();
  CSFriendGetInfoResp::default_instance_->InitAsDefaultInstance();
  CSFriendRequestRemoveReq::default_instance_->InitAsDefaultInstance();
  CSFriendRequestRemoveResp::default_instance_->InitAsDefaultInstance();
  CSFriendAddBlackListReq::default_instance_->InitAsDefaultInstance();
  CSFriendAddBlackListResp::default_instance_->InitAsDefaultInstance();
  CSFriendRemoveBlackListReq::default_instance_->InitAsDefaultInstance();
  CSFriendRemoveBlackListResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Friend_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Friend_2eproto_once_);
void protobuf_AddDesc_Friend_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Friend_2eproto_once_,
                 &protobuf_AddDesc_Friend_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Friend_2eproto {
  StaticDescriptorInitializer_Friend_2eproto() {
    protobuf_AddDesc_Friend_2eproto();
  }
} static_descriptor_initializer_Friend_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kUinFieldNumber;
const int FriendInfo::kNickNameFieldNumber;
const int FriendInfo::kIconFieldNumber;
const int FriendInfo::kGroupFieldNumber;
const int FriendInfo::kRankFieldNumber;
const int FriendInfo::kWinRateFieldNumber;
const int FriendInfo::kLastOnlineTimeFieldNumber;
const int FriendInfo::kLastOfflineTimeFieldNumber;
const int FriendInfo::kScoreFieldNumber;
const int FriendInfo::kTitleFieldNumber;
const int FriendInfo::kLevelFieldNumber;
const int FriendInfo::kExpLevelFieldNumber;
const int FriendInfo::kExpFieldNumber;
const int FriendInfo::kOpenIdFieldNumber;
const int FriendInfo::kVipLevelFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.FriendInfo)
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.FriendInfo)
}

void FriendInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = 0u;
  rank_ = 0u;
  winrate_ = 0u;
  lastonlinetime_ = GOOGLE_ULONGLONG(0);
  lastofflinetime_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  title_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  explevel_ = 0u;
  exp_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:fgame.FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendInfo& FriendInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(group_, winrate_);
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    lastofflinetime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(title_, explevel_);
    ZR_(exp_, viplevel_);
    score_ = 0u;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.FriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // required string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Icon;
        break;
      }

      // required string Icon = 3;
      case 3: {
        if (tag == 26) {
         parse_Icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Group;
        break;
      }

      // required uint32 Group = 4;
      case 4: {
        if (tag == 32) {
         parse_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }

      // required uint32 Rank = 5;
      case 5: {
        if (tag == 40) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_WinRate;
        break;
      }

      // required uint32 WinRate = 6;
      case 6: {
        if (tag == 48) {
         parse_WinRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LastOnlineTime;
        break;
      }

      // required uint64 LastOnlineTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LastOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastonlinetime_)));
          set_has_lastonlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LastOfflineTime;
        break;
      }

      // optional uint64 LastOfflineTime = 8;
      case 8: {
        if (tag == 64) {
         parse_LastOfflineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastofflinetime_)));
          set_has_lastofflinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 9;
      case 9: {
        if (tag == 72) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Title;
        break;
      }

      // optional uint64 Title = 10;
      case 10: {
        if (tag == 80) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 11;
      case 11: {
        if (tag == 88) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ExpLevel;
        break;
      }

      // optional uint32 ExpLevel = 12;
      case 12: {
        if (tag == 96) {
         parse_ExpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &explevel_)));
          set_has_explevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 13;
      case 13: {
        if (tag == 104) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_OpenId;
        break;
      }

      // optional string OpenId = 14;
      case 14: {
        if (tag == 114) {
         parse_OpenId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_VipLevel;
        break;
      }

      // optional uint32 VipLevel = 15;
      case 15: {
        if (tag == 120) {
         parse_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.FriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.FriendInfo)
  return false;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.FriendInfo)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required string Icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon(), output);
  }

  // required uint32 Group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group(), output);
  }

  // required uint32 Rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rank(), output);
  }

  // required uint32 WinRate = 6;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->winrate(), output);
  }

  // required uint64 LastOnlineTime = 7;
  if (has_lastonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastonlinetime(), output);
  }

  // optional uint64 LastOfflineTime = 8;
  if (has_lastofflinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lastofflinetime(), output);
  }

  // optional uint32 Score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // optional uint64 Title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->title(), output);
  }

  // optional uint32 Level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  // optional uint32 ExpLevel = 12;
  if (has_explevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->explevel(), output);
  }

  // optional uint32 Exp = 13;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->exp(), output);
  }

  // optional string OpenId = 14;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->openid(), output);
  }

  // optional uint32 VipLevel = 15;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->viplevel(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.FriendInfo)
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string Icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required uint32 Group = 4;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // required uint32 Rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 WinRate = 6;
    if (has_winrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winrate());
    }

    // required uint64 LastOnlineTime = 7;
    if (has_lastonlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastonlinetime());
    }

    // optional uint64 LastOfflineTime = 8;
    if (has_lastofflinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastofflinetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint64 Title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->title());
    }

    // optional uint32 Level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 ExpLevel = 12;
    if (has_explevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->explevel());
    }

    // optional uint32 Exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional string OpenId = 14;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 VipLevel = 15;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendInfo*>(&from));
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_lastonlinetime()) {
      set_lastonlinetime(from.lastonlinetime());
    }
    if (from.has_lastofflinetime()) {
      set_lastofflinetime(from.lastofflinetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_explevel()) {
      set_explevel(from.explevel());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nickname_, other->nickname_);
    std::swap(icon_, other->icon_);
    std::swap(group_, other->group_);
    std::swap(rank_, other->rank_);
    std::swap(winrate_, other->winrate_);
    std::swap(lastonlinetime_, other->lastonlinetime_);
    std::swap(lastofflinetime_, other->lastofflinetime_);
    std::swap(score_, other->score_);
    std::swap(title_, other->title_);
    std::swap(level_, other->level_);
    std::swap(explevel_, other->explevel_);
    std::swap(exp_, other->exp_);
    std::swap(openid_, other->openid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendInfo::GetTypeName() const {
  return "fgame.FriendInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendPkRequestInfo::kInfoFieldNumber;
const int FriendPkRequestInfo::kTimeFieldNumber;
const int FriendPkRequestInfo::kRoomIDFieldNumber;
#endif  // !_MSC_VER

FriendPkRequestInfo::FriendPkRequestInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.FriendPkRequestInfo)
}

void FriendPkRequestInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::fgame::FriendInfo*>(
      ::fgame::FriendInfo::internal_default_instance());
#else
  info_ = const_cast< ::fgame::FriendInfo*>(&::fgame::FriendInfo::default_instance());
#endif
}

FriendPkRequestInfo::FriendPkRequestInfo(const FriendPkRequestInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.FriendPkRequestInfo)
}

void FriendPkRequestInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendPkRequestInfo::~FriendPkRequestInfo() {
  // @@protoc_insertion_point(destructor:fgame.FriendPkRequestInfo)
  SharedDtor();
}

void FriendPkRequestInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void FriendPkRequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendPkRequestInfo& FriendPkRequestInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

FriendPkRequestInfo* FriendPkRequestInfo::default_instance_ = NULL;

FriendPkRequestInfo* FriendPkRequestInfo::New() const {
  return new FriendPkRequestInfo;
}

void FriendPkRequestInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendPkRequestInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(time_, roomid_);
    if (has_info()) {
      if (info_ != NULL) info_->::fgame::FriendInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendPkRequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.FriendPkRequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fgame.FriendInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // required uint64 Time = 2;
      case 2: {
        if (tag == 16) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RoomID;
        break;
      }

      // required uint32 RoomID = 3;
      case 3: {
        if (tag == 24) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.FriendPkRequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.FriendPkRequestInfo)
  return false;
#undef DO_
}

void FriendPkRequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.FriendPkRequestInfo)
  // required .fgame.FriendInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // required uint64 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required uint32 RoomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.FriendPkRequestInfo)
}

int FriendPkRequestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fgame.FriendInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint64 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required uint32 RoomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendPkRequestInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendPkRequestInfo*>(&from));
}

void FriendPkRequestInfo::MergeFrom(const FriendPkRequestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::fgame::FriendInfo::MergeFrom(from.info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendPkRequestInfo::CopyFrom(const FriendPkRequestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendPkRequestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void FriendPkRequestInfo::Swap(FriendPkRequestInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(time_, other->time_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendPkRequestInfo::GetTypeName() const {
  return "fgame.FriendPkRequestInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendQueryReq::kUinFieldNumber;
const int CSFriendQueryReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

CSFriendQueryReq::CSFriendQueryReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendQueryReq)
}

void CSFriendQueryReq::InitAsDefaultInstance() {
}

CSFriendQueryReq::CSFriendQueryReq(const CSFriendQueryReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendQueryReq)
}

void CSFriendQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendQueryReq::~CSFriendQueryReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendQueryReq)
  SharedDtor();
}

void CSFriendQueryReq::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendQueryReq& CSFriendQueryReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendQueryReq* CSFriendQueryReq::default_instance_ = NULL;

CSFriendQueryReq* CSFriendQueryReq::New() const {
  return new CSFriendQueryReq;
}

void CSFriendQueryReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // required string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendQueryReq)
  return false;
#undef DO_
}

void CSFriendQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendQueryReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendQueryReq)
}

int CSFriendQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendQueryReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendQueryReq*>(&from));
}

void CSFriendQueryReq::MergeFrom(const CSFriendQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendQueryReq::CopyFrom(const CSFriendQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSFriendQueryReq::Swap(CSFriendQueryReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendQueryReq::GetTypeName() const {
  return "fgame.CSFriendQueryReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendQueryResp::kPlayersFieldNumber;
#endif  // !_MSC_VER

CSFriendQueryResp::CSFriendQueryResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendQueryResp)
}

void CSFriendQueryResp::InitAsDefaultInstance() {
}

CSFriendQueryResp::CSFriendQueryResp(const CSFriendQueryResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendQueryResp)
}

void CSFriendQueryResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendQueryResp::~CSFriendQueryResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendQueryResp)
  SharedDtor();
}

void CSFriendQueryResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendQueryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendQueryResp& CSFriendQueryResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendQueryResp* CSFriendQueryResp::default_instance_ = NULL;

CSFriendQueryResp* CSFriendQueryResp::New() const {
  return new CSFriendQueryResp;
}

void CSFriendQueryResp::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendQueryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.FriendInfo Players = 1;
      case 1: {
        if (tag == 10) {
         parse_Players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendQueryResp)
  return false;
#undef DO_
}

void CSFriendQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendQueryResp)
  // repeated .fgame.FriendInfo Players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->players(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendQueryResp)
}

int CSFriendQueryResp::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.FriendInfo Players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendQueryResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendQueryResp*>(&from));
}

void CSFriendQueryResp::MergeFrom(const CSFriendQueryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendQueryResp::CopyFrom(const CSFriendQueryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendQueryResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void CSFriendQueryResp::Swap(CSFriendQueryResp* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendQueryResp::GetTypeName() const {
  return "fgame.CSFriendQueryResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRequestAddReq::kUinFieldNumber;
#endif  // !_MSC_VER

CSFriendRequestAddReq::CSFriendRequestAddReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRequestAddReq)
}

void CSFriendRequestAddReq::InitAsDefaultInstance() {
}

CSFriendRequestAddReq::CSFriendRequestAddReq(const CSFriendRequestAddReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRequestAddReq)
}

void CSFriendRequestAddReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRequestAddReq::~CSFriendRequestAddReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRequestAddReq)
  SharedDtor();
}

void CSFriendRequestAddReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendRequestAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRequestAddReq& CSFriendRequestAddReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRequestAddReq* CSFriendRequestAddReq::default_instance_ = NULL;

CSFriendRequestAddReq* CSFriendRequestAddReq::New() const {
  return new CSFriendRequestAddReq;
}

void CSFriendRequestAddReq::Clear() {
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRequestAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRequestAddReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRequestAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRequestAddReq)
  return false;
#undef DO_
}

void CSFriendRequestAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRequestAddReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRequestAddReq)
}

int CSFriendRequestAddReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRequestAddReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRequestAddReq*>(&from));
}

void CSFriendRequestAddReq::MergeFrom(const CSFriendRequestAddReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRequestAddReq::CopyFrom(const CSFriendRequestAddReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRequestAddReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendRequestAddReq::Swap(CSFriendRequestAddReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRequestAddReq::GetTypeName() const {
  return "fgame.CSFriendRequestAddReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRequestAddResp::kUinFieldNumber;
const int CSFriendRequestAddResp::kOtherUinFieldNumber;
const int CSFriendRequestAddResp::kInfoFieldNumber;
#endif  // !_MSC_VER

CSFriendRequestAddResp::CSFriendRequestAddResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRequestAddResp)
}

void CSFriendRequestAddResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::fgame::FriendRequestInfo*>(
      ::fgame::FriendRequestInfo::internal_default_instance());
#else
  info_ = const_cast< ::fgame::FriendRequestInfo*>(&::fgame::FriendRequestInfo::default_instance());
#endif
}

CSFriendRequestAddResp::CSFriendRequestAddResp(const CSFriendRequestAddResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRequestAddResp)
}

void CSFriendRequestAddResp::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  otheruin_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRequestAddResp::~CSFriendRequestAddResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRequestAddResp)
  SharedDtor();
}

void CSFriendRequestAddResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void CSFriendRequestAddResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRequestAddResp& CSFriendRequestAddResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRequestAddResp* CSFriendRequestAddResp::default_instance_ = NULL;

CSFriendRequestAddResp* CSFriendRequestAddResp::New() const {
  return new CSFriendRequestAddResp;
}

void CSFriendRequestAddResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSFriendRequestAddResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uin_, otheruin_);
    if (has_info()) {
      if (info_ != NULL) info_->::fgame::FriendRequestInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRequestAddResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRequestAddResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OtherUin;
        break;
      }

      // optional uint64 OtherUin = 2;
      case 2: {
        if (tag == 16) {
         parse_OtherUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otheruin_)));
          set_has_otheruin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Info;
        break;
      }

      // optional .fgame.FriendRequestInfo Info = 3;
      case 3: {
        if (tag == 26) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRequestAddResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRequestAddResp)
  return false;
#undef DO_
}

void CSFriendRequestAddResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRequestAddResp)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // optional uint64 OtherUin = 2;
  if (has_otheruin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->otheruin(), output);
  }

  // optional .fgame.FriendRequestInfo Info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRequestAddResp)
}

int CSFriendRequestAddResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // optional uint64 OtherUin = 2;
    if (has_otheruin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otheruin());
    }

    // optional .fgame.FriendRequestInfo Info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRequestAddResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRequestAddResp*>(&from));
}

void CSFriendRequestAddResp::MergeFrom(const CSFriendRequestAddResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_otheruin()) {
      set_otheruin(from.otheruin());
    }
    if (from.has_info()) {
      mutable_info()->::fgame::FriendRequestInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRequestAddResp::CopyFrom(const CSFriendRequestAddResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRequestAddResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void CSFriendRequestAddResp::Swap(CSFriendRequestAddResp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(otheruin_, other->otheruin_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRequestAddResp::GetTypeName() const {
  return "fgame.CSFriendRequestAddResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendConfirmAddReq::kAgreeFieldNumber;
const int CSFriendConfirmAddReq::kUinsFieldNumber;
#endif  // !_MSC_VER

CSFriendConfirmAddReq::CSFriendConfirmAddReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendConfirmAddReq)
}

void CSFriendConfirmAddReq::InitAsDefaultInstance() {
}

CSFriendConfirmAddReq::CSFriendConfirmAddReq(const CSFriendConfirmAddReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendConfirmAddReq)
}

void CSFriendConfirmAddReq::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendConfirmAddReq::~CSFriendConfirmAddReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendConfirmAddReq)
  SharedDtor();
}

void CSFriendConfirmAddReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendConfirmAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendConfirmAddReq& CSFriendConfirmAddReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendConfirmAddReq* CSFriendConfirmAddReq::default_instance_ = NULL;

CSFriendConfirmAddReq* CSFriendConfirmAddReq::New() const {
  return new CSFriendConfirmAddReq;
}

void CSFriendConfirmAddReq::Clear() {
  agree_ = false;
  uins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendConfirmAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendConfirmAddReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Agree = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uins;
        break;
      }

      // repeated uint64 Uins = 2;
      case 2: {
        if (tag == 16) {
         parse_Uins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uins())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uins())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uins;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendConfirmAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendConfirmAddReq)
  return false;
#undef DO_
}

void CSFriendConfirmAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendConfirmAddReq)
  // required bool Agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // repeated uint64 Uins = 2;
  for (int i = 0; i < this->uins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uins(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendConfirmAddReq)
}

int CSFriendConfirmAddReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 Uins = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uins_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uins(i));
    }
    total_size += 1 * this->uins_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendConfirmAddReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendConfirmAddReq*>(&from));
}

void CSFriendConfirmAddReq::MergeFrom(const CSFriendConfirmAddReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uins_.MergeFrom(from.uins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendConfirmAddReq::CopyFrom(const CSFriendConfirmAddReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendConfirmAddReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendConfirmAddReq::Swap(CSFriendConfirmAddReq* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    uins_.Swap(&other->uins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendConfirmAddReq::GetTypeName() const {
  return "fgame.CSFriendConfirmAddReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendConfirmAddResp::kAgreeFieldNumber;
const int CSFriendConfirmAddResp::kNewFriendFieldNumber;
#endif  // !_MSC_VER

CSFriendConfirmAddResp::CSFriendConfirmAddResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendConfirmAddResp)
}

void CSFriendConfirmAddResp::InitAsDefaultInstance() {
}

CSFriendConfirmAddResp::CSFriendConfirmAddResp(const CSFriendConfirmAddResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendConfirmAddResp)
}

void CSFriendConfirmAddResp::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendConfirmAddResp::~CSFriendConfirmAddResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendConfirmAddResp)
  SharedDtor();
}

void CSFriendConfirmAddResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendConfirmAddResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendConfirmAddResp& CSFriendConfirmAddResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendConfirmAddResp* CSFriendConfirmAddResp::default_instance_ = NULL;

CSFriendConfirmAddResp* CSFriendConfirmAddResp::New() const {
  return new CSFriendConfirmAddResp;
}

void CSFriendConfirmAddResp::Clear() {
  agree_ = false;
  newfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendConfirmAddResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendConfirmAddResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Agree = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NewFriend;
        break;
      }

      // repeated .fgame.FriendInfo NewFriend = 2;
      case 2: {
        if (tag == 18) {
         parse_NewFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newfriend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NewFriend;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendConfirmAddResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendConfirmAddResp)
  return false;
#undef DO_
}

void CSFriendConfirmAddResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendConfirmAddResp)
  // required bool Agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // repeated .fgame.FriendInfo NewFriend = 2;
  for (int i = 0; i < this->newfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->newfriend(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendConfirmAddResp)
}

int CSFriendConfirmAddResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  // repeated .fgame.FriendInfo NewFriend = 2;
  total_size += 1 * this->newfriend_size();
  for (int i = 0; i < this->newfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newfriend(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendConfirmAddResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendConfirmAddResp*>(&from));
}

void CSFriendConfirmAddResp::MergeFrom(const CSFriendConfirmAddResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  newfriend_.MergeFrom(from.newfriend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendConfirmAddResp::CopyFrom(const CSFriendConfirmAddResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendConfirmAddResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->newfriend())) return false;
  return true;
}

void CSFriendConfirmAddResp::Swap(CSFriendConfirmAddResp* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    newfriend_.Swap(&other->newfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendConfirmAddResp::GetTypeName() const {
  return "fgame.CSFriendConfirmAddResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendGetInfoReq::kUinFieldNumber;
const int CSFriendGetInfoReq::kFriendsFieldNumber;
const int CSFriendGetInfoReq::kRequestsFieldNumber;
const int CSFriendGetInfoReq::kBlackListFieldNumber;
const int CSFriendGetInfoReq::kPkFieldNumber;
#endif  // !_MSC_VER

CSFriendGetInfoReq::CSFriendGetInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendGetInfoReq)
}

void CSFriendGetInfoReq::InitAsDefaultInstance() {
}

CSFriendGetInfoReq::CSFriendGetInfoReq(const CSFriendGetInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendGetInfoReq)
}

void CSFriendGetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  friends_ = false;
  requests_ = false;
  blacklist_ = false;
  pk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendGetInfoReq::~CSFriendGetInfoReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendGetInfoReq)
  SharedDtor();
}

void CSFriendGetInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendGetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendGetInfoReq& CSFriendGetInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendGetInfoReq* CSFriendGetInfoReq::default_instance_ = NULL;

CSFriendGetInfoReq* CSFriendGetInfoReq::New() const {
  return new CSFriendGetInfoReq;
}

void CSFriendGetInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSFriendGetInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uin_, pk_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendGetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendGetInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Friends;
        break;
      }

      // optional bool Friends = 2;
      case 2: {
        if (tag == 16) {
         parse_Friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_)));
          set_has_friends();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Requests;
        break;
      }

      // optional bool Requests = 3;
      case 3: {
        if (tag == 24) {
         parse_Requests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requests_)));
          set_has_requests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BlackList;
        break;
      }

      // optional bool BlackList = 4;
      case 4: {
        if (tag == 32) {
         parse_BlackList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklist_)));
          set_has_blacklist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Pk;
        break;
      }

      // optional bool Pk = 5;
      case 5: {
        if (tag == 40) {
         parse_Pk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pk_)));
          set_has_pk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendGetInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendGetInfoReq)
  return false;
#undef DO_
}

void CSFriendGetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendGetInfoReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // optional bool Friends = 2;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->friends(), output);
  }

  // optional bool Requests = 3;
  if (has_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requests(), output);
  }

  // optional bool BlackList = 4;
  if (has_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blacklist(), output);
  }

  // optional bool Pk = 5;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pk(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendGetInfoReq)
}

int CSFriendGetInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // optional bool Friends = 2;
    if (has_friends()) {
      total_size += 1 + 1;
    }

    // optional bool Requests = 3;
    if (has_requests()) {
      total_size += 1 + 1;
    }

    // optional bool BlackList = 4;
    if (has_blacklist()) {
      total_size += 1 + 1;
    }

    // optional bool Pk = 5;
    if (has_pk()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendGetInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendGetInfoReq*>(&from));
}

void CSFriendGetInfoReq::MergeFrom(const CSFriendGetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_friends()) {
      set_friends(from.friends());
    }
    if (from.has_requests()) {
      set_requests(from.requests());
    }
    if (from.has_blacklist()) {
      set_blacklist(from.blacklist());
    }
    if (from.has_pk()) {
      set_pk(from.pk());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendGetInfoReq::CopyFrom(const CSFriendGetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendGetInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendGetInfoReq::Swap(CSFriendGetInfoReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(friends_, other->friends_);
    std::swap(requests_, other->requests_);
    std::swap(blacklist_, other->blacklist_);
    std::swap(pk_, other->pk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendGetInfoReq::GetTypeName() const {
  return "fgame.CSFriendGetInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRequestInfo::kInfoFieldNumber;
const int FriendRequestInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

FriendRequestInfo::FriendRequestInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.FriendRequestInfo)
}

void FriendRequestInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::fgame::FriendInfo*>(
      ::fgame::FriendInfo::internal_default_instance());
#else
  info_ = const_cast< ::fgame::FriendInfo*>(&::fgame::FriendInfo::default_instance());
#endif
}

FriendRequestInfo::FriendRequestInfo(const FriendRequestInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.FriendRequestInfo)
}

void FriendRequestInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRequestInfo::~FriendRequestInfo() {
  // @@protoc_insertion_point(destructor:fgame.FriendRequestInfo)
  SharedDtor();
}

void FriendRequestInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void FriendRequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendRequestInfo& FriendRequestInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

FriendRequestInfo* FriendRequestInfo::default_instance_ = NULL;

FriendRequestInfo* FriendRequestInfo::New() const {
  return new FriendRequestInfo;
}

void FriendRequestInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::fgame::FriendInfo::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendRequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.FriendRequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fgame.FriendInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // required uint64 Time = 2;
      case 2: {
        if (tag == 16) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.FriendRequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.FriendRequestInfo)
  return false;
#undef DO_
}

void FriendRequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.FriendRequestInfo)
  // required .fgame.FriendInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // required uint64 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.FriendRequestInfo)
}

int FriendRequestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fgame.FriendInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint64 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRequestInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendRequestInfo*>(&from));
}

void FriendRequestInfo::MergeFrom(const FriendRequestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::fgame::FriendInfo::MergeFrom(from.info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendRequestInfo::CopyFrom(const FriendRequestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRequestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void FriendRequestInfo::Swap(FriendRequestInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendRequestInfo::GetTypeName() const {
  return "fgame.FriendRequestInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendGetInfoResp::kFriendsFieldNumber;
const int CSFriendGetInfoResp::kRequestsFieldNumber;
const int CSFriendGetInfoResp::kBlackListFieldNumber;
const int CSFriendGetInfoResp::kPkFieldNumber;
#endif  // !_MSC_VER

CSFriendGetInfoResp::CSFriendGetInfoResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendGetInfoResp)
}

void CSFriendGetInfoResp::InitAsDefaultInstance() {
}

CSFriendGetInfoResp::CSFriendGetInfoResp(const CSFriendGetInfoResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendGetInfoResp)
}

void CSFriendGetInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendGetInfoResp::~CSFriendGetInfoResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendGetInfoResp)
  SharedDtor();
}

void CSFriendGetInfoResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendGetInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendGetInfoResp& CSFriendGetInfoResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendGetInfoResp* CSFriendGetInfoResp::default_instance_ = NULL;

CSFriendGetInfoResp* CSFriendGetInfoResp::New() const {
  return new CSFriendGetInfoResp;
}

void CSFriendGetInfoResp::Clear() {
  friends_.Clear();
  requests_.Clear();
  blacklist_.Clear();
  pk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendGetInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendGetInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.FriendInfo Friends = 1;
      case 1: {
        if (tag == 10) {
         parse_Friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Friends;
        if (input->ExpectTag(18)) goto parse_Requests;
        break;
      }

      // repeated .fgame.FriendRequestInfo Requests = 2;
      case 2: {
        if (tag == 18) {
         parse_Requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Requests;
        if (input->ExpectTag(26)) goto parse_BlackList;
        break;
      }

      // repeated .fgame.FriendInfo BlackList = 3;
      case 3: {
        if (tag == 26) {
         parse_BlackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BlackList;
        if (input->ExpectTag(34)) goto parse_Pk;
        break;
      }

      // repeated .fgame.FriendPkRequestInfo Pk = 4;
      case 4: {
        if (tag == 34) {
         parse_Pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Pk;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendGetInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendGetInfoResp)
  return false;
#undef DO_
}

void CSFriendGetInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendGetInfoResp)
  // repeated .fgame.FriendInfo Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friends(i), output);
  }

  // repeated .fgame.FriendRequestInfo Requests = 2;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->requests(i), output);
  }

  // repeated .fgame.FriendInfo BlackList = 3;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->blacklist(i), output);
  }

  // repeated .fgame.FriendPkRequestInfo Pk = 4;
  for (int i = 0; i < this->pk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->pk(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendGetInfoResp)
}

int CSFriendGetInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.FriendInfo Friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .fgame.FriendRequestInfo Requests = 2;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  // repeated .fgame.FriendInfo BlackList = 3;
  total_size += 1 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklist(i));
  }

  // repeated .fgame.FriendPkRequestInfo Pk = 4;
  total_size += 1 * this->pk_size();
  for (int i = 0; i < this->pk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pk(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendGetInfoResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendGetInfoResp*>(&from));
}

void CSFriendGetInfoResp::MergeFrom(const CSFriendGetInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  requests_.MergeFrom(from.requests_);
  blacklist_.MergeFrom(from.blacklist_);
  pk_.MergeFrom(from.pk_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendGetInfoResp::CopyFrom(const CSFriendGetInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendGetInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friends())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->requests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blacklist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pk())) return false;
  return true;
}

void CSFriendGetInfoResp::Swap(CSFriendGetInfoResp* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    requests_.Swap(&other->requests_);
    blacklist_.Swap(&other->blacklist_);
    pk_.Swap(&other->pk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendGetInfoResp::GetTypeName() const {
  return "fgame.CSFriendGetInfoResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRequestRemoveReq::kUinFieldNumber;
#endif  // !_MSC_VER

CSFriendRequestRemoveReq::CSFriendRequestRemoveReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRequestRemoveReq)
}

void CSFriendRequestRemoveReq::InitAsDefaultInstance() {
}

CSFriendRequestRemoveReq::CSFriendRequestRemoveReq(const CSFriendRequestRemoveReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRequestRemoveReq)
}

void CSFriendRequestRemoveReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRequestRemoveReq::~CSFriendRequestRemoveReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRequestRemoveReq)
  SharedDtor();
}

void CSFriendRequestRemoveReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendRequestRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRequestRemoveReq& CSFriendRequestRemoveReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRequestRemoveReq* CSFriendRequestRemoveReq::default_instance_ = NULL;

CSFriendRequestRemoveReq* CSFriendRequestRemoveReq::New() const {
  return new CSFriendRequestRemoveReq;
}

void CSFriendRequestRemoveReq::Clear() {
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRequestRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRequestRemoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRequestRemoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRequestRemoveReq)
  return false;
#undef DO_
}

void CSFriendRequestRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRequestRemoveReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRequestRemoveReq)
}

int CSFriendRequestRemoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRequestRemoveReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRequestRemoveReq*>(&from));
}

void CSFriendRequestRemoveReq::MergeFrom(const CSFriendRequestRemoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRequestRemoveReq::CopyFrom(const CSFriendRequestRemoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRequestRemoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendRequestRemoveReq::Swap(CSFriendRequestRemoveReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRequestRemoveReq::GetTypeName() const {
  return "fgame.CSFriendRequestRemoveReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRequestRemoveResp::kUinFieldNumber;
const int CSFriendRequestRemoveResp::kNickNameFieldNumber;
#endif  // !_MSC_VER

CSFriendRequestRemoveResp::CSFriendRequestRemoveResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRequestRemoveResp)
}

void CSFriendRequestRemoveResp::InitAsDefaultInstance() {
}

CSFriendRequestRemoveResp::CSFriendRequestRemoveResp(const CSFriendRequestRemoveResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRequestRemoveResp)
}

void CSFriendRequestRemoveResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRequestRemoveResp::~CSFriendRequestRemoveResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRequestRemoveResp)
  SharedDtor();
}

void CSFriendRequestRemoveResp::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendRequestRemoveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRequestRemoveResp& CSFriendRequestRemoveResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRequestRemoveResp* CSFriendRequestRemoveResp::default_instance_ = NULL;

CSFriendRequestRemoveResp* CSFriendRequestRemoveResp::New() const {
  return new CSFriendRequestRemoveResp;
}

void CSFriendRequestRemoveResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRequestRemoveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRequestRemoveResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // required string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRequestRemoveResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRequestRemoveResp)
  return false;
#undef DO_
}

void CSFriendRequestRemoveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRequestRemoveResp)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRequestRemoveResp)
}

int CSFriendRequestRemoveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRequestRemoveResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRequestRemoveResp*>(&from));
}

void CSFriendRequestRemoveResp::MergeFrom(const CSFriendRequestRemoveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRequestRemoveResp::CopyFrom(const CSFriendRequestRemoveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRequestRemoveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSFriendRequestRemoveResp::Swap(CSFriendRequestRemoveResp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRequestRemoveResp::GetTypeName() const {
  return "fgame.CSFriendRequestRemoveResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendAddBlackListReq::kUinFieldNumber;
#endif  // !_MSC_VER

CSFriendAddBlackListReq::CSFriendAddBlackListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendAddBlackListReq)
}

void CSFriendAddBlackListReq::InitAsDefaultInstance() {
}

CSFriendAddBlackListReq::CSFriendAddBlackListReq(const CSFriendAddBlackListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendAddBlackListReq)
}

void CSFriendAddBlackListReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendAddBlackListReq::~CSFriendAddBlackListReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendAddBlackListReq)
  SharedDtor();
}

void CSFriendAddBlackListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendAddBlackListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendAddBlackListReq& CSFriendAddBlackListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendAddBlackListReq* CSFriendAddBlackListReq::default_instance_ = NULL;

CSFriendAddBlackListReq* CSFriendAddBlackListReq::New() const {
  return new CSFriendAddBlackListReq;
}

void CSFriendAddBlackListReq::Clear() {
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendAddBlackListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendAddBlackListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendAddBlackListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendAddBlackListReq)
  return false;
#undef DO_
}

void CSFriendAddBlackListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendAddBlackListReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendAddBlackListReq)
}

int CSFriendAddBlackListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendAddBlackListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendAddBlackListReq*>(&from));
}

void CSFriendAddBlackListReq::MergeFrom(const CSFriendAddBlackListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendAddBlackListReq::CopyFrom(const CSFriendAddBlackListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendAddBlackListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendAddBlackListReq::Swap(CSFriendAddBlackListReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendAddBlackListReq::GetTypeName() const {
  return "fgame.CSFriendAddBlackListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendAddBlackListResp::kUinFieldNumber;
const int CSFriendAddBlackListResp::kNickNameFieldNumber;
#endif  // !_MSC_VER

CSFriendAddBlackListResp::CSFriendAddBlackListResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendAddBlackListResp)
}

void CSFriendAddBlackListResp::InitAsDefaultInstance() {
}

CSFriendAddBlackListResp::CSFriendAddBlackListResp(const CSFriendAddBlackListResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendAddBlackListResp)
}

void CSFriendAddBlackListResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendAddBlackListResp::~CSFriendAddBlackListResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendAddBlackListResp)
  SharedDtor();
}

void CSFriendAddBlackListResp::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendAddBlackListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendAddBlackListResp& CSFriendAddBlackListResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendAddBlackListResp* CSFriendAddBlackListResp::default_instance_ = NULL;

CSFriendAddBlackListResp* CSFriendAddBlackListResp::New() const {
  return new CSFriendAddBlackListResp;
}

void CSFriendAddBlackListResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendAddBlackListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendAddBlackListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // required string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendAddBlackListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendAddBlackListResp)
  return false;
#undef DO_
}

void CSFriendAddBlackListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendAddBlackListResp)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendAddBlackListResp)
}

int CSFriendAddBlackListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendAddBlackListResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendAddBlackListResp*>(&from));
}

void CSFriendAddBlackListResp::MergeFrom(const CSFriendAddBlackListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendAddBlackListResp::CopyFrom(const CSFriendAddBlackListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendAddBlackListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSFriendAddBlackListResp::Swap(CSFriendAddBlackListResp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendAddBlackListResp::GetTypeName() const {
  return "fgame.CSFriendAddBlackListResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRemoveBlackListReq::kUinFieldNumber;
#endif  // !_MSC_VER

CSFriendRemoveBlackListReq::CSFriendRemoveBlackListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRemoveBlackListReq)
}

void CSFriendRemoveBlackListReq::InitAsDefaultInstance() {
}

CSFriendRemoveBlackListReq::CSFriendRemoveBlackListReq(const CSFriendRemoveBlackListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRemoveBlackListReq)
}

void CSFriendRemoveBlackListReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRemoveBlackListReq::~CSFriendRemoveBlackListReq() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRemoveBlackListReq)
  SharedDtor();
}

void CSFriendRemoveBlackListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendRemoveBlackListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRemoveBlackListReq& CSFriendRemoveBlackListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRemoveBlackListReq* CSFriendRemoveBlackListReq::default_instance_ = NULL;

CSFriendRemoveBlackListReq* CSFriendRemoveBlackListReq::New() const {
  return new CSFriendRemoveBlackListReq;
}

void CSFriendRemoveBlackListReq::Clear() {
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRemoveBlackListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRemoveBlackListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRemoveBlackListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRemoveBlackListReq)
  return false;
#undef DO_
}

void CSFriendRemoveBlackListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRemoveBlackListReq)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRemoveBlackListReq)
}

int CSFriendRemoveBlackListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRemoveBlackListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRemoveBlackListReq*>(&from));
}

void CSFriendRemoveBlackListReq::MergeFrom(const CSFriendRemoveBlackListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRemoveBlackListReq::CopyFrom(const CSFriendRemoveBlackListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRemoveBlackListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFriendRemoveBlackListReq::Swap(CSFriendRemoveBlackListReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRemoveBlackListReq::GetTypeName() const {
  return "fgame.CSFriendRemoveBlackListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRemoveBlackListResp::kUinFieldNumber;
const int CSFriendRemoveBlackListResp::kNickNameFieldNumber;
#endif  // !_MSC_VER

CSFriendRemoveBlackListResp::CSFriendRemoveBlackListResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSFriendRemoveBlackListResp)
}

void CSFriendRemoveBlackListResp::InitAsDefaultInstance() {
}

CSFriendRemoveBlackListResp::CSFriendRemoveBlackListResp(const CSFriendRemoveBlackListResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSFriendRemoveBlackListResp)
}

void CSFriendRemoveBlackListResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRemoveBlackListResp::~CSFriendRemoveBlackListResp() {
  // @@protoc_insertion_point(destructor:fgame.CSFriendRemoveBlackListResp)
  SharedDtor();
}

void CSFriendRemoveBlackListResp::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendRemoveBlackListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRemoveBlackListResp& CSFriendRemoveBlackListResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Friend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
#endif
  return *default_instance_;
}

CSFriendRemoveBlackListResp* CSFriendRemoveBlackListResp::default_instance_ = NULL;

CSFriendRemoveBlackListResp* CSFriendRemoveBlackListResp::New() const {
  return new CSFriendRemoveBlackListResp;
}

void CSFriendRemoveBlackListResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSFriendRemoveBlackListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSFriendRemoveBlackListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // required string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSFriendRemoveBlackListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSFriendRemoveBlackListResp)
  return false;
#undef DO_
}

void CSFriendRemoveBlackListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSFriendRemoveBlackListResp)
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSFriendRemoveBlackListResp)
}

int CSFriendRemoveBlackListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRemoveBlackListResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRemoveBlackListResp*>(&from));
}

void CSFriendRemoveBlackListResp::MergeFrom(const CSFriendRemoveBlackListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSFriendRemoveBlackListResp::CopyFrom(const CSFriendRemoveBlackListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRemoveBlackListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSFriendRemoveBlackListResp::Swap(CSFriendRemoveBlackListResp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRemoveBlackListResp::GetTypeName() const {
  return "fgame.CSFriendRemoveBlackListResp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
