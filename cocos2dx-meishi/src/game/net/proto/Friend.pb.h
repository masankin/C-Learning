// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#ifndef PROTOBUF_Friend_2eproto__INCLUDED
#define PROTOBUF_Friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Base.pb.h"
// @@protoc_insertion_point(includes)

namespace fgame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Friend_2eproto();
void protobuf_AssignDesc_Friend_2eproto();
void protobuf_ShutdownFile_Friend_2eproto();

class FriendInfo;
class FriendPkRequestInfo;
class CSFriendQueryReq;
class CSFriendQueryResp;
class CSFriendRequestAddReq;
class CSFriendRequestAddResp;
class CSFriendConfirmAddReq;
class CSFriendConfirmAddResp;
class CSFriendGetInfoReq;
class FriendRequestInfo;
class CSFriendGetInfoResp;
class CSFriendRequestRemoveReq;
class CSFriendRequestRemoveResp;
class CSFriendAddBlackListReq;
class CSFriendAddBlackListResp;
class CSFriendRemoveBlackListReq;
class CSFriendRemoveBlackListResp;

// ===================================================================

class FriendInfo : public ::google::protobuf::MessageLite {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendInfo* other);

  // implements Message ----------------------------------------------

  FriendInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string Icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required uint32 Group = 4;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 4;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // required uint32 Rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 WinRate = 6;
  inline bool has_winrate() const;
  inline void clear_winrate();
  static const int kWinRateFieldNumber = 6;
  inline ::google::protobuf::uint32 winrate() const;
  inline void set_winrate(::google::protobuf::uint32 value);

  // required uint64 LastOnlineTime = 7;
  inline bool has_lastonlinetime() const;
  inline void clear_lastonlinetime();
  static const int kLastOnlineTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 lastonlinetime() const;
  inline void set_lastonlinetime(::google::protobuf::uint64 value);

  // optional uint64 LastOfflineTime = 8;
  inline bool has_lastofflinetime() const;
  inline void clear_lastofflinetime();
  static const int kLastOfflineTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 lastofflinetime() const;
  inline void set_lastofflinetime(::google::protobuf::uint64 value);

  // optional uint32 Score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint64 Title = 10;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 10;
  inline ::google::protobuf::uint64 title() const;
  inline void set_title(::google::protobuf::uint64 value);

  // optional uint32 Level = 11;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 ExpLevel = 12;
  inline bool has_explevel() const;
  inline void clear_explevel();
  static const int kExpLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 explevel() const;
  inline void set_explevel(::google::protobuf::uint32 value);

  // optional uint32 Exp = 13;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 13;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional string OpenId = 14;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 14;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional uint32 VipLevel = 15;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 15;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.FriendInfo)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_winrate();
  inline void clear_has_winrate();
  inline void set_has_lastonlinetime();
  inline void clear_has_lastonlinetime();
  inline void set_has_lastofflinetime();
  inline void clear_has_lastofflinetime();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_explevel();
  inline void clear_has_explevel();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::std::string* nickname_;
  ::std::string* icon_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 lastonlinetime_;
  ::google::protobuf::uint32 winrate_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint64 lastofflinetime_;
  ::google::protobuf::uint64 title_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 explevel_;
  ::std::string* openid_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 viplevel_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendPkRequestInfo : public ::google::protobuf::MessageLite {
 public:
  FriendPkRequestInfo();
  virtual ~FriendPkRequestInfo();

  FriendPkRequestInfo(const FriendPkRequestInfo& from);

  inline FriendPkRequestInfo& operator=(const FriendPkRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendPkRequestInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendPkRequestInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendPkRequestInfo* other);

  // implements Message ----------------------------------------------

  FriendPkRequestInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendPkRequestInfo& from);
  void MergeFrom(const FriendPkRequestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fgame.FriendInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::fgame::FriendInfo& info() const;
  inline ::fgame::FriendInfo* mutable_info();
  inline ::fgame::FriendInfo* release_info();
  inline void set_allocated_info(::fgame::FriendInfo* info);

  // required uint64 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required uint32 RoomID = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 3;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.FriendPkRequestInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fgame::FriendInfo* info_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 roomid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static FriendPkRequestInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendQueryReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendQueryReq();
  virtual ~CSFriendQueryReq();

  CSFriendQueryReq(const CSFriendQueryReq& from);

  inline CSFriendQueryReq& operator=(const CSFriendQueryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendQueryReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendQueryReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendQueryReq* other);

  // implements Message ----------------------------------------------

  CSFriendQueryReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendQueryReq& from);
  void MergeFrom(const CSFriendQueryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendQueryReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::std::string* nickname_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendQueryReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendQueryResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendQueryResp();
  virtual ~CSFriendQueryResp();

  CSFriendQueryResp(const CSFriendQueryResp& from);

  inline CSFriendQueryResp& operator=(const CSFriendQueryResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendQueryResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendQueryResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendQueryResp* other);

  // implements Message ----------------------------------------------

  CSFriendQueryResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendQueryResp& from);
  void MergeFrom(const CSFriendQueryResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fgame.FriendInfo Players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::fgame::FriendInfo& players(int index) const;
  inline ::fgame::FriendInfo* mutable_players(int index);
  inline ::fgame::FriendInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:fgame.CSFriendQueryResp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo > players_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendQueryResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRequestAddReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendRequestAddReq();
  virtual ~CSFriendRequestAddReq();

  CSFriendRequestAddReq(const CSFriendRequestAddReq& from);

  inline CSFriendRequestAddReq& operator=(const CSFriendRequestAddReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRequestAddReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRequestAddReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRequestAddReq* other);

  // implements Message ----------------------------------------------

  CSFriendRequestAddReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRequestAddReq& from);
  void MergeFrom(const CSFriendRequestAddReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRequestAddReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRequestAddReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRequestAddResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendRequestAddResp();
  virtual ~CSFriendRequestAddResp();

  CSFriendRequestAddResp(const CSFriendRequestAddResp& from);

  inline CSFriendRequestAddResp& operator=(const CSFriendRequestAddResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRequestAddResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRequestAddResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRequestAddResp* other);

  // implements Message ----------------------------------------------

  CSFriendRequestAddResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRequestAddResp& from);
  void MergeFrom(const CSFriendRequestAddResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // optional uint64 OtherUin = 2;
  inline bool has_otheruin() const;
  inline void clear_otheruin();
  static const int kOtherUinFieldNumber = 2;
  inline ::google::protobuf::uint64 otheruin() const;
  inline void set_otheruin(::google::protobuf::uint64 value);

  // optional .fgame.FriendRequestInfo Info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::fgame::FriendRequestInfo& info() const;
  inline ::fgame::FriendRequestInfo* mutable_info();
  inline ::fgame::FriendRequestInfo* release_info();
  inline void set_allocated_info(::fgame::FriendRequestInfo* info);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRequestAddResp)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_otheruin();
  inline void clear_has_otheruin();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::google::protobuf::uint64 otheruin_;
  ::fgame::FriendRequestInfo* info_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRequestAddResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendConfirmAddReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendConfirmAddReq();
  virtual ~CSFriendConfirmAddReq();

  CSFriendConfirmAddReq(const CSFriendConfirmAddReq& from);

  inline CSFriendConfirmAddReq& operator=(const CSFriendConfirmAddReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendConfirmAddReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendConfirmAddReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendConfirmAddReq* other);

  // implements Message ----------------------------------------------

  CSFriendConfirmAddReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendConfirmAddReq& from);
  void MergeFrom(const CSFriendConfirmAddReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // repeated uint64 Uins = 2;
  inline int uins_size() const;
  inline void clear_uins();
  static const int kUinsFieldNumber = 2;
  inline ::google::protobuf::uint64 uins(int index) const;
  inline void set_uins(int index, ::google::protobuf::uint64 value);
  inline void add_uins(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uins() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uins();

  // @@protoc_insertion_point(class_scope:fgame.CSFriendConfirmAddReq)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uins_;
  bool agree_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendConfirmAddReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendConfirmAddResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendConfirmAddResp();
  virtual ~CSFriendConfirmAddResp();

  CSFriendConfirmAddResp(const CSFriendConfirmAddResp& from);

  inline CSFriendConfirmAddResp& operator=(const CSFriendConfirmAddResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendConfirmAddResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendConfirmAddResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendConfirmAddResp* other);

  // implements Message ----------------------------------------------

  CSFriendConfirmAddResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendConfirmAddResp& from);
  void MergeFrom(const CSFriendConfirmAddResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // repeated .fgame.FriendInfo NewFriend = 2;
  inline int newfriend_size() const;
  inline void clear_newfriend();
  static const int kNewFriendFieldNumber = 2;
  inline const ::fgame::FriendInfo& newfriend(int index) const;
  inline ::fgame::FriendInfo* mutable_newfriend(int index);
  inline ::fgame::FriendInfo* add_newfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
      newfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
      mutable_newfriend();

  // @@protoc_insertion_point(class_scope:fgame.CSFriendConfirmAddResp)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo > newfriend_;
  bool agree_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendConfirmAddResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendGetInfoReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendGetInfoReq();
  virtual ~CSFriendGetInfoReq();

  CSFriendGetInfoReq(const CSFriendGetInfoReq& from);

  inline CSFriendGetInfoReq& operator=(const CSFriendGetInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendGetInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendGetInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendGetInfoReq* other);

  // implements Message ----------------------------------------------

  CSFriendGetInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendGetInfoReq& from);
  void MergeFrom(const CSFriendGetInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // optional bool Friends = 2;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline bool friends() const;
  inline void set_friends(bool value);

  // optional bool Requests = 3;
  inline bool has_requests() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 3;
  inline bool requests() const;
  inline void set_requests(bool value);

  // optional bool BlackList = 4;
  inline bool has_blacklist() const;
  inline void clear_blacklist();
  static const int kBlackListFieldNumber = 4;
  inline bool blacklist() const;
  inline void set_blacklist(bool value);

  // optional bool Pk = 5;
  inline bool has_pk() const;
  inline void clear_pk();
  static const int kPkFieldNumber = 5;
  inline bool pk() const;
  inline void set_pk(bool value);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendGetInfoReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_requests();
  inline void clear_has_requests();
  inline void set_has_blacklist();
  inline void clear_has_blacklist();
  inline void set_has_pk();
  inline void clear_has_pk();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  bool friends_;
  bool requests_;
  bool blacklist_;
  bool pk_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendGetInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class FriendRequestInfo : public ::google::protobuf::MessageLite {
 public:
  FriendRequestInfo();
  virtual ~FriendRequestInfo();

  FriendRequestInfo(const FriendRequestInfo& from);

  inline FriendRequestInfo& operator=(const FriendRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FriendRequestInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendRequestInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendRequestInfo* other);

  // implements Message ----------------------------------------------

  FriendRequestInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendRequestInfo& from);
  void MergeFrom(const FriendRequestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fgame.FriendInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::fgame::FriendInfo& info() const;
  inline ::fgame::FriendInfo* mutable_info();
  inline ::fgame::FriendInfo* release_info();
  inline void set_allocated_info(::fgame::FriendInfo* info);

  // required uint64 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fgame.FriendRequestInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_time();
  inline void clear_has_time();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fgame::FriendInfo* info_;
  ::google::protobuf::uint64 time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static FriendRequestInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendGetInfoResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendGetInfoResp();
  virtual ~CSFriendGetInfoResp();

  CSFriendGetInfoResp(const CSFriendGetInfoResp& from);

  inline CSFriendGetInfoResp& operator=(const CSFriendGetInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendGetInfoResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendGetInfoResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendGetInfoResp* other);

  // implements Message ----------------------------------------------

  CSFriendGetInfoResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendGetInfoResp& from);
  void MergeFrom(const CSFriendGetInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fgame.FriendInfo Friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::fgame::FriendInfo& friends(int index) const;
  inline ::fgame::FriendInfo* mutable_friends(int index);
  inline ::fgame::FriendInfo* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
      mutable_friends();

  // repeated .fgame.FriendRequestInfo Requests = 2;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 2;
  inline const ::fgame::FriendRequestInfo& requests(int index) const;
  inline ::fgame::FriendRequestInfo* mutable_requests(int index);
  inline ::fgame::FriendRequestInfo* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendRequestInfo >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendRequestInfo >*
      mutable_requests();

  // repeated .fgame.FriendInfo BlackList = 3;
  inline int blacklist_size() const;
  inline void clear_blacklist();
  static const int kBlackListFieldNumber = 3;
  inline const ::fgame::FriendInfo& blacklist(int index) const;
  inline ::fgame::FriendInfo* mutable_blacklist(int index);
  inline ::fgame::FriendInfo* add_blacklist();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
      blacklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
      mutable_blacklist();

  // repeated .fgame.FriendPkRequestInfo Pk = 4;
  inline int pk_size() const;
  inline void clear_pk();
  static const int kPkFieldNumber = 4;
  inline const ::fgame::FriendPkRequestInfo& pk(int index) const;
  inline ::fgame::FriendPkRequestInfo* mutable_pk(int index);
  inline ::fgame::FriendPkRequestInfo* add_pk();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendPkRequestInfo >&
      pk() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendPkRequestInfo >*
      mutable_pk();

  // @@protoc_insertion_point(class_scope:fgame.CSFriendGetInfoResp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo > friends_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendRequestInfo > requests_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo > blacklist_;
  ::google::protobuf::RepeatedPtrField< ::fgame::FriendPkRequestInfo > pk_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendGetInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRequestRemoveReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendRequestRemoveReq();
  virtual ~CSFriendRequestRemoveReq();

  CSFriendRequestRemoveReq(const CSFriendRequestRemoveReq& from);

  inline CSFriendRequestRemoveReq& operator=(const CSFriendRequestRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRequestRemoveReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRequestRemoveReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRequestRemoveReq* other);

  // implements Message ----------------------------------------------

  CSFriendRequestRemoveReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRequestRemoveReq& from);
  void MergeFrom(const CSFriendRequestRemoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRequestRemoveReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRequestRemoveReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRequestRemoveResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendRequestRemoveResp();
  virtual ~CSFriendRequestRemoveResp();

  CSFriendRequestRemoveResp(const CSFriendRequestRemoveResp& from);

  inline CSFriendRequestRemoveResp& operator=(const CSFriendRequestRemoveResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRequestRemoveResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRequestRemoveResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRequestRemoveResp* other);

  // implements Message ----------------------------------------------

  CSFriendRequestRemoveResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRequestRemoveResp& from);
  void MergeFrom(const CSFriendRequestRemoveResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRequestRemoveResp)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::std::string* nickname_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRequestRemoveResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendAddBlackListReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendAddBlackListReq();
  virtual ~CSFriendAddBlackListReq();

  CSFriendAddBlackListReq(const CSFriendAddBlackListReq& from);

  inline CSFriendAddBlackListReq& operator=(const CSFriendAddBlackListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendAddBlackListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendAddBlackListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendAddBlackListReq* other);

  // implements Message ----------------------------------------------

  CSFriendAddBlackListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendAddBlackListReq& from);
  void MergeFrom(const CSFriendAddBlackListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendAddBlackListReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendAddBlackListReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendAddBlackListResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendAddBlackListResp();
  virtual ~CSFriendAddBlackListResp();

  CSFriendAddBlackListResp(const CSFriendAddBlackListResp& from);

  inline CSFriendAddBlackListResp& operator=(const CSFriendAddBlackListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendAddBlackListResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendAddBlackListResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendAddBlackListResp* other);

  // implements Message ----------------------------------------------

  CSFriendAddBlackListResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendAddBlackListResp& from);
  void MergeFrom(const CSFriendAddBlackListResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendAddBlackListResp)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::std::string* nickname_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendAddBlackListResp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRemoveBlackListReq : public ::google::protobuf::MessageLite {
 public:
  CSFriendRemoveBlackListReq();
  virtual ~CSFriendRemoveBlackListReq();

  CSFriendRemoveBlackListReq(const CSFriendRemoveBlackListReq& from);

  inline CSFriendRemoveBlackListReq& operator=(const CSFriendRemoveBlackListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRemoveBlackListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRemoveBlackListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRemoveBlackListReq* other);

  // implements Message ----------------------------------------------

  CSFriendRemoveBlackListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRemoveBlackListReq& from);
  void MergeFrom(const CSFriendRemoveBlackListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRemoveBlackListReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRemoveBlackListReq* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRemoveBlackListResp : public ::google::protobuf::MessageLite {
 public:
  CSFriendRemoveBlackListResp();
  virtual ~CSFriendRemoveBlackListResp();

  CSFriendRemoveBlackListResp(const CSFriendRemoveBlackListResp& from);

  inline CSFriendRemoveBlackListResp& operator=(const CSFriendRemoveBlackListResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CSFriendRemoveBlackListResp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRemoveBlackListResp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRemoveBlackListResp* other);

  // implements Message ----------------------------------------------

  CSFriendRemoveBlackListResp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRemoveBlackListResp& from);
  void MergeFrom(const CSFriendRemoveBlackListResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:fgame.CSFriendRemoveBlackListResp)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uin_;
  ::std::string* nickname_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Friend_2eproto();
  #endif
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRemoveBlackListResp* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendInfo

// required uint64 Uin = 1;
inline bool FriendInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfo::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 FriendInfo::uin() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Uin)
  return uin_;
}
inline void FriendInfo::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Uin)
}

// required string NickName = 2;
inline bool FriendInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& FriendInfo::nickname() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.NickName)
  return *nickname_;
}
inline void FriendInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.NickName)
}
inline void FriendInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.FriendInfo.NickName)
}
inline void FriendInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.FriendInfo.NickName)
}
inline ::std::string* FriendInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.FriendInfo.NickName)
  return nickname_;
}
inline ::std::string* FriendInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.FriendInfo.NickName)
}

// required string Icon = 3;
inline bool FriendInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& FriendInfo::icon() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Icon)
  return *icon_;
}
inline void FriendInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Icon)
}
inline void FriendInfo::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.FriendInfo.Icon)
}
inline void FriendInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.FriendInfo.Icon)
}
inline ::std::string* FriendInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.FriendInfo.Icon)
  return icon_;
}
inline ::std::string* FriendInfo::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.FriendInfo.Icon)
}

// required uint32 Group = 4;
inline bool FriendInfo::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfo::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 FriendInfo::group() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Group)
  return group_;
}
inline void FriendInfo::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Group)
}

// required uint32 Rank = 5;
inline bool FriendInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 FriendInfo::rank() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Rank)
  return rank_;
}
inline void FriendInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Rank)
}

// required uint32 WinRate = 6;
inline bool FriendInfo::has_winrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfo::set_has_winrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfo::clear_has_winrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfo::clear_winrate() {
  winrate_ = 0u;
  clear_has_winrate();
}
inline ::google::protobuf::uint32 FriendInfo::winrate() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.WinRate)
  return winrate_;
}
inline void FriendInfo::set_winrate(::google::protobuf::uint32 value) {
  set_has_winrate();
  winrate_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.WinRate)
}

// required uint64 LastOnlineTime = 7;
inline bool FriendInfo::has_lastonlinetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfo::set_has_lastonlinetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfo::clear_has_lastonlinetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfo::clear_lastonlinetime() {
  lastonlinetime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastonlinetime();
}
inline ::google::protobuf::uint64 FriendInfo::lastonlinetime() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.LastOnlineTime)
  return lastonlinetime_;
}
inline void FriendInfo::set_lastonlinetime(::google::protobuf::uint64 value) {
  set_has_lastonlinetime();
  lastonlinetime_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.LastOnlineTime)
}

// optional uint64 LastOfflineTime = 8;
inline bool FriendInfo::has_lastofflinetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendInfo::set_has_lastofflinetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendInfo::clear_has_lastofflinetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendInfo::clear_lastofflinetime() {
  lastofflinetime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastofflinetime();
}
inline ::google::protobuf::uint64 FriendInfo::lastofflinetime() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.LastOfflineTime)
  return lastofflinetime_;
}
inline void FriendInfo::set_lastofflinetime(::google::protobuf::uint64 value) {
  set_has_lastofflinetime();
  lastofflinetime_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.LastOfflineTime)
}

// optional uint32 Score = 9;
inline bool FriendInfo::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendInfo::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 FriendInfo::score() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Score)
  return score_;
}
inline void FriendInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Score)
}

// optional uint64 Title = 10;
inline bool FriendInfo::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfo::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfo::clear_title() {
  title_ = GOOGLE_ULONGLONG(0);
  clear_has_title();
}
inline ::google::protobuf::uint64 FriendInfo::title() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Title)
  return title_;
}
inline void FriendInfo::set_title(::google::protobuf::uint64 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Title)
}

// optional uint32 Level = 11;
inline bool FriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FriendInfo::level() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Level)
  return level_;
}
inline void FriendInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Level)
}

// optional uint32 ExpLevel = 12;
inline bool FriendInfo::has_explevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendInfo::set_has_explevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendInfo::clear_has_explevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendInfo::clear_explevel() {
  explevel_ = 0u;
  clear_has_explevel();
}
inline ::google::protobuf::uint32 FriendInfo::explevel() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.ExpLevel)
  return explevel_;
}
inline void FriendInfo::set_explevel(::google::protobuf::uint32 value) {
  set_has_explevel();
  explevel_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.ExpLevel)
}

// optional uint32 Exp = 13;
inline bool FriendInfo::has_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FriendInfo::set_has_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FriendInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FriendInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FriendInfo::exp() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.Exp)
  return exp_;
}
inline void FriendInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.Exp)
}

// optional string OpenId = 14;
inline bool FriendInfo::has_openid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FriendInfo::set_has_openid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FriendInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FriendInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& FriendInfo::openid() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.OpenId)
  return *openid_;
}
inline void FriendInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.OpenId)
}
inline void FriendInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.FriendInfo.OpenId)
}
inline void FriendInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.FriendInfo.OpenId)
}
inline ::std::string* FriendInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.FriendInfo.OpenId)
  return openid_;
}
inline ::std::string* FriendInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.FriendInfo.OpenId)
}

// optional uint32 VipLevel = 15;
inline bool FriendInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FriendInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FriendInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FriendInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 FriendInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:fgame.FriendInfo.VipLevel)
  return viplevel_;
}
inline void FriendInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendInfo.VipLevel)
}

// -------------------------------------------------------------------

// FriendPkRequestInfo

// required .fgame.FriendInfo Info = 1;
inline bool FriendPkRequestInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendPkRequestInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendPkRequestInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendPkRequestInfo::clear_info() {
  if (info_ != NULL) info_->::fgame::FriendInfo::Clear();
  clear_has_info();
}
inline const ::fgame::FriendInfo& FriendPkRequestInfo::info() const {
  // @@protoc_insertion_point(field_get:fgame.FriendPkRequestInfo.Info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::fgame::FriendInfo* FriendPkRequestInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::fgame::FriendInfo;
  // @@protoc_insertion_point(field_mutable:fgame.FriendPkRequestInfo.Info)
  return info_;
}
inline ::fgame::FriendInfo* FriendPkRequestInfo::release_info() {
  clear_has_info();
  ::fgame::FriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FriendPkRequestInfo::set_allocated_info(::fgame::FriendInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.FriendPkRequestInfo.Info)
}

// required uint64 Time = 2;
inline bool FriendPkRequestInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendPkRequestInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendPkRequestInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendPkRequestInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FriendPkRequestInfo::time() const {
  // @@protoc_insertion_point(field_get:fgame.FriendPkRequestInfo.Time)
  return time_;
}
inline void FriendPkRequestInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendPkRequestInfo.Time)
}

// required uint32 RoomID = 3;
inline bool FriendPkRequestInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendPkRequestInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendPkRequestInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendPkRequestInfo::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 FriendPkRequestInfo::roomid() const {
  // @@protoc_insertion_point(field_get:fgame.FriendPkRequestInfo.RoomID)
  return roomid_;
}
inline void FriendPkRequestInfo::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendPkRequestInfo.RoomID)
}

// -------------------------------------------------------------------

// CSFriendQueryReq

// required uint64 Uin = 1;
inline bool CSFriendQueryReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendQueryReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendQueryReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendQueryReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendQueryReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendQueryReq.Uin)
  return uin_;
}
inline void CSFriendQueryReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendQueryReq.Uin)
}

// required string NickName = 2;
inline bool CSFriendQueryReq::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendQueryReq::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendQueryReq::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendQueryReq::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CSFriendQueryReq::nickname() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendQueryReq.NickName)
  return *nickname_;
}
inline void CSFriendQueryReq::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.CSFriendQueryReq.NickName)
}
inline void CSFriendQueryReq::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.CSFriendQueryReq.NickName)
}
inline void CSFriendQueryReq::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.CSFriendQueryReq.NickName)
}
inline ::std::string* CSFriendQueryReq::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendQueryReq.NickName)
  return nickname_;
}
inline ::std::string* CSFriendQueryReq::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSFriendQueryReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.CSFriendQueryReq.NickName)
}

// -------------------------------------------------------------------

// CSFriendQueryResp

// repeated .fgame.FriendInfo Players = 1;
inline int CSFriendQueryResp::players_size() const {
  return players_.size();
}
inline void CSFriendQueryResp::clear_players() {
  players_.Clear();
}
inline const ::fgame::FriendInfo& CSFriendQueryResp::players(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendQueryResp.Players)
  return players_.Get(index);
}
inline ::fgame::FriendInfo* CSFriendQueryResp::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendQueryResp.Players)
  return players_.Mutable(index);
}
inline ::fgame::FriendInfo* CSFriendQueryResp::add_players() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendQueryResp.Players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
CSFriendQueryResp::players() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendQueryResp.Players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
CSFriendQueryResp::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendQueryResp.Players)
  return &players_;
}

// -------------------------------------------------------------------

// CSFriendRequestAddReq

// required uint64 Uin = 1;
inline bool CSFriendRequestAddReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRequestAddReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRequestAddReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRequestAddReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRequestAddReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestAddReq.Uin)
  return uin_;
}
inline void CSFriendRequestAddReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestAddReq.Uin)
}

// -------------------------------------------------------------------

// CSFriendRequestAddResp

// required uint64 Uin = 1;
inline bool CSFriendRequestAddResp::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRequestAddResp::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRequestAddResp::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRequestAddResp::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRequestAddResp::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestAddResp.Uin)
  return uin_;
}
inline void CSFriendRequestAddResp::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestAddResp.Uin)
}

// optional uint64 OtherUin = 2;
inline bool CSFriendRequestAddResp::has_otheruin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendRequestAddResp::set_has_otheruin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendRequestAddResp::clear_has_otheruin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendRequestAddResp::clear_otheruin() {
  otheruin_ = GOOGLE_ULONGLONG(0);
  clear_has_otheruin();
}
inline ::google::protobuf::uint64 CSFriendRequestAddResp::otheruin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestAddResp.OtherUin)
  return otheruin_;
}
inline void CSFriendRequestAddResp::set_otheruin(::google::protobuf::uint64 value) {
  set_has_otheruin();
  otheruin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestAddResp.OtherUin)
}

// optional .fgame.FriendRequestInfo Info = 3;
inline bool CSFriendRequestAddResp::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSFriendRequestAddResp::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSFriendRequestAddResp::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSFriendRequestAddResp::clear_info() {
  if (info_ != NULL) info_->::fgame::FriendRequestInfo::Clear();
  clear_has_info();
}
inline const ::fgame::FriendRequestInfo& CSFriendRequestAddResp::info() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestAddResp.Info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::fgame::FriendRequestInfo* CSFriendRequestAddResp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::fgame::FriendRequestInfo;
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendRequestAddResp.Info)
  return info_;
}
inline ::fgame::FriendRequestInfo* CSFriendRequestAddResp::release_info() {
  clear_has_info();
  ::fgame::FriendRequestInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CSFriendRequestAddResp::set_allocated_info(::fgame::FriendRequestInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.CSFriendRequestAddResp.Info)
}

// -------------------------------------------------------------------

// CSFriendConfirmAddReq

// required bool Agree = 1;
inline bool CSFriendConfirmAddReq::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendConfirmAddReq::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendConfirmAddReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendConfirmAddReq::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool CSFriendConfirmAddReq::agree() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendConfirmAddReq.Agree)
  return agree_;
}
inline void CSFriendConfirmAddReq::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendConfirmAddReq.Agree)
}

// repeated uint64 Uins = 2;
inline int CSFriendConfirmAddReq::uins_size() const {
  return uins_.size();
}
inline void CSFriendConfirmAddReq::clear_uins() {
  uins_.Clear();
}
inline ::google::protobuf::uint64 CSFriendConfirmAddReq::uins(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendConfirmAddReq.Uins)
  return uins_.Get(index);
}
inline void CSFriendConfirmAddReq::set_uins(int index, ::google::protobuf::uint64 value) {
  uins_.Set(index, value);
  // @@protoc_insertion_point(field_set:fgame.CSFriendConfirmAddReq.Uins)
}
inline void CSFriendConfirmAddReq::add_uins(::google::protobuf::uint64 value) {
  uins_.Add(value);
  // @@protoc_insertion_point(field_add:fgame.CSFriendConfirmAddReq.Uins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSFriendConfirmAddReq::uins() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendConfirmAddReq.Uins)
  return uins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSFriendConfirmAddReq::mutable_uins() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendConfirmAddReq.Uins)
  return &uins_;
}

// -------------------------------------------------------------------

// CSFriendConfirmAddResp

// required bool Agree = 1;
inline bool CSFriendConfirmAddResp::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendConfirmAddResp::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendConfirmAddResp::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendConfirmAddResp::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool CSFriendConfirmAddResp::agree() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendConfirmAddResp.Agree)
  return agree_;
}
inline void CSFriendConfirmAddResp::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendConfirmAddResp.Agree)
}

// repeated .fgame.FriendInfo NewFriend = 2;
inline int CSFriendConfirmAddResp::newfriend_size() const {
  return newfriend_.size();
}
inline void CSFriendConfirmAddResp::clear_newfriend() {
  newfriend_.Clear();
}
inline const ::fgame::FriendInfo& CSFriendConfirmAddResp::newfriend(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendConfirmAddResp.NewFriend)
  return newfriend_.Get(index);
}
inline ::fgame::FriendInfo* CSFriendConfirmAddResp::mutable_newfriend(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendConfirmAddResp.NewFriend)
  return newfriend_.Mutable(index);
}
inline ::fgame::FriendInfo* CSFriendConfirmAddResp::add_newfriend() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendConfirmAddResp.NewFriend)
  return newfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
CSFriendConfirmAddResp::newfriend() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendConfirmAddResp.NewFriend)
  return newfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
CSFriendConfirmAddResp::mutable_newfriend() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendConfirmAddResp.NewFriend)
  return &newfriend_;
}

// -------------------------------------------------------------------

// CSFriendGetInfoReq

// required uint64 Uin = 1;
inline bool CSFriendGetInfoReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendGetInfoReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendGetInfoReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendGetInfoReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendGetInfoReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoReq.Uin)
  return uin_;
}
inline void CSFriendGetInfoReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendGetInfoReq.Uin)
}

// optional bool Friends = 2;
inline bool CSFriendGetInfoReq::has_friends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendGetInfoReq::set_has_friends() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendGetInfoReq::clear_has_friends() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendGetInfoReq::clear_friends() {
  friends_ = false;
  clear_has_friends();
}
inline bool CSFriendGetInfoReq::friends() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoReq.Friends)
  return friends_;
}
inline void CSFriendGetInfoReq::set_friends(bool value) {
  set_has_friends();
  friends_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendGetInfoReq.Friends)
}

// optional bool Requests = 3;
inline bool CSFriendGetInfoReq::has_requests() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSFriendGetInfoReq::set_has_requests() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSFriendGetInfoReq::clear_has_requests() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSFriendGetInfoReq::clear_requests() {
  requests_ = false;
  clear_has_requests();
}
inline bool CSFriendGetInfoReq::requests() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoReq.Requests)
  return requests_;
}
inline void CSFriendGetInfoReq::set_requests(bool value) {
  set_has_requests();
  requests_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendGetInfoReq.Requests)
}

// optional bool BlackList = 4;
inline bool CSFriendGetInfoReq::has_blacklist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSFriendGetInfoReq::set_has_blacklist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSFriendGetInfoReq::clear_has_blacklist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSFriendGetInfoReq::clear_blacklist() {
  blacklist_ = false;
  clear_has_blacklist();
}
inline bool CSFriendGetInfoReq::blacklist() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoReq.BlackList)
  return blacklist_;
}
inline void CSFriendGetInfoReq::set_blacklist(bool value) {
  set_has_blacklist();
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendGetInfoReq.BlackList)
}

// optional bool Pk = 5;
inline bool CSFriendGetInfoReq::has_pk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSFriendGetInfoReq::set_has_pk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSFriendGetInfoReq::clear_has_pk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSFriendGetInfoReq::clear_pk() {
  pk_ = false;
  clear_has_pk();
}
inline bool CSFriendGetInfoReq::pk() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoReq.Pk)
  return pk_;
}
inline void CSFriendGetInfoReq::set_pk(bool value) {
  set_has_pk();
  pk_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendGetInfoReq.Pk)
}

// -------------------------------------------------------------------

// FriendRequestInfo

// required .fgame.FriendInfo Info = 1;
inline bool FriendRequestInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRequestInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRequestInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRequestInfo::clear_info() {
  if (info_ != NULL) info_->::fgame::FriendInfo::Clear();
  clear_has_info();
}
inline const ::fgame::FriendInfo& FriendRequestInfo::info() const {
  // @@protoc_insertion_point(field_get:fgame.FriendRequestInfo.Info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::fgame::FriendInfo* FriendRequestInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::fgame::FriendInfo;
  // @@protoc_insertion_point(field_mutable:fgame.FriendRequestInfo.Info)
  return info_;
}
inline ::fgame::FriendInfo* FriendRequestInfo::release_info() {
  clear_has_info();
  ::fgame::FriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FriendRequestInfo::set_allocated_info(::fgame::FriendInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.FriendRequestInfo.Info)
}

// required uint64 Time = 2;
inline bool FriendRequestInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRequestInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRequestInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRequestInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FriendRequestInfo::time() const {
  // @@protoc_insertion_point(field_get:fgame.FriendRequestInfo.Time)
  return time_;
}
inline void FriendRequestInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:fgame.FriendRequestInfo.Time)
}

// -------------------------------------------------------------------

// CSFriendGetInfoResp

// repeated .fgame.FriendInfo Friends = 1;
inline int CSFriendGetInfoResp::friends_size() const {
  return friends_.size();
}
inline void CSFriendGetInfoResp::clear_friends() {
  friends_.Clear();
}
inline const ::fgame::FriendInfo& CSFriendGetInfoResp::friends(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoResp.Friends)
  return friends_.Get(index);
}
inline ::fgame::FriendInfo* CSFriendGetInfoResp::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendGetInfoResp.Friends)
  return friends_.Mutable(index);
}
inline ::fgame::FriendInfo* CSFriendGetInfoResp::add_friends() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendGetInfoResp.Friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
CSFriendGetInfoResp::friends() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendGetInfoResp.Friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
CSFriendGetInfoResp::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendGetInfoResp.Friends)
  return &friends_;
}

// repeated .fgame.FriendRequestInfo Requests = 2;
inline int CSFriendGetInfoResp::requests_size() const {
  return requests_.size();
}
inline void CSFriendGetInfoResp::clear_requests() {
  requests_.Clear();
}
inline const ::fgame::FriendRequestInfo& CSFriendGetInfoResp::requests(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoResp.Requests)
  return requests_.Get(index);
}
inline ::fgame::FriendRequestInfo* CSFriendGetInfoResp::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendGetInfoResp.Requests)
  return requests_.Mutable(index);
}
inline ::fgame::FriendRequestInfo* CSFriendGetInfoResp::add_requests() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendGetInfoResp.Requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendRequestInfo >&
CSFriendGetInfoResp::requests() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendGetInfoResp.Requests)
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendRequestInfo >*
CSFriendGetInfoResp::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendGetInfoResp.Requests)
  return &requests_;
}

// repeated .fgame.FriendInfo BlackList = 3;
inline int CSFriendGetInfoResp::blacklist_size() const {
  return blacklist_.size();
}
inline void CSFriendGetInfoResp::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::fgame::FriendInfo& CSFriendGetInfoResp::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoResp.BlackList)
  return blacklist_.Get(index);
}
inline ::fgame::FriendInfo* CSFriendGetInfoResp::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendGetInfoResp.BlackList)
  return blacklist_.Mutable(index);
}
inline ::fgame::FriendInfo* CSFriendGetInfoResp::add_blacklist() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendGetInfoResp.BlackList)
  return blacklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >&
CSFriendGetInfoResp::blacklist() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendGetInfoResp.BlackList)
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendInfo >*
CSFriendGetInfoResp::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendGetInfoResp.BlackList)
  return &blacklist_;
}

// repeated .fgame.FriendPkRequestInfo Pk = 4;
inline int CSFriendGetInfoResp::pk_size() const {
  return pk_.size();
}
inline void CSFriendGetInfoResp::clear_pk() {
  pk_.Clear();
}
inline const ::fgame::FriendPkRequestInfo& CSFriendGetInfoResp::pk(int index) const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendGetInfoResp.Pk)
  return pk_.Get(index);
}
inline ::fgame::FriendPkRequestInfo* CSFriendGetInfoResp::mutable_pk(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendGetInfoResp.Pk)
  return pk_.Mutable(index);
}
inline ::fgame::FriendPkRequestInfo* CSFriendGetInfoResp::add_pk() {
  // @@protoc_insertion_point(field_add:fgame.CSFriendGetInfoResp.Pk)
  return pk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::FriendPkRequestInfo >&
CSFriendGetInfoResp::pk() const {
  // @@protoc_insertion_point(field_list:fgame.CSFriendGetInfoResp.Pk)
  return pk_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::FriendPkRequestInfo >*
CSFriendGetInfoResp::mutable_pk() {
  // @@protoc_insertion_point(field_mutable_list:fgame.CSFriendGetInfoResp.Pk)
  return &pk_;
}

// -------------------------------------------------------------------

// CSFriendRequestRemoveReq

// required uint64 Uin = 1;
inline bool CSFriendRequestRemoveReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRequestRemoveReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRequestRemoveReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRequestRemoveReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRequestRemoveReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestRemoveReq.Uin)
  return uin_;
}
inline void CSFriendRequestRemoveReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestRemoveReq.Uin)
}

// -------------------------------------------------------------------

// CSFriendRequestRemoveResp

// required uint64 Uin = 1;
inline bool CSFriendRequestRemoveResp::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRequestRemoveResp::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRequestRemoveResp::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRequestRemoveResp::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRequestRemoveResp::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestRemoveResp.Uin)
  return uin_;
}
inline void CSFriendRequestRemoveResp::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestRemoveResp.Uin)
}

// required string NickName = 2;
inline bool CSFriendRequestRemoveResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendRequestRemoveResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendRequestRemoveResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendRequestRemoveResp::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CSFriendRequestRemoveResp::nickname() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRequestRemoveResp.NickName)
  return *nickname_;
}
inline void CSFriendRequestRemoveResp::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.CSFriendRequestRemoveResp.NickName)
}
inline void CSFriendRequestRemoveResp::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.CSFriendRequestRemoveResp.NickName)
}
inline void CSFriendRequestRemoveResp::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.CSFriendRequestRemoveResp.NickName)
}
inline ::std::string* CSFriendRequestRemoveResp::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendRequestRemoveResp.NickName)
  return nickname_;
}
inline ::std::string* CSFriendRequestRemoveResp::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSFriendRequestRemoveResp::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.CSFriendRequestRemoveResp.NickName)
}

// -------------------------------------------------------------------

// CSFriendAddBlackListReq

// required uint64 Uin = 1;
inline bool CSFriendAddBlackListReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendAddBlackListReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendAddBlackListReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendAddBlackListReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendAddBlackListReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendAddBlackListReq.Uin)
  return uin_;
}
inline void CSFriendAddBlackListReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendAddBlackListReq.Uin)
}

// -------------------------------------------------------------------

// CSFriendAddBlackListResp

// required uint64 Uin = 1;
inline bool CSFriendAddBlackListResp::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendAddBlackListResp::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendAddBlackListResp::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendAddBlackListResp::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendAddBlackListResp::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendAddBlackListResp.Uin)
  return uin_;
}
inline void CSFriendAddBlackListResp::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendAddBlackListResp.Uin)
}

// required string NickName = 2;
inline bool CSFriendAddBlackListResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendAddBlackListResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendAddBlackListResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendAddBlackListResp::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CSFriendAddBlackListResp::nickname() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendAddBlackListResp.NickName)
  return *nickname_;
}
inline void CSFriendAddBlackListResp::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.CSFriendAddBlackListResp.NickName)
}
inline void CSFriendAddBlackListResp::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.CSFriendAddBlackListResp.NickName)
}
inline void CSFriendAddBlackListResp::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.CSFriendAddBlackListResp.NickName)
}
inline ::std::string* CSFriendAddBlackListResp::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendAddBlackListResp.NickName)
  return nickname_;
}
inline ::std::string* CSFriendAddBlackListResp::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSFriendAddBlackListResp::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.CSFriendAddBlackListResp.NickName)
}

// -------------------------------------------------------------------

// CSFriendRemoveBlackListReq

// required uint64 Uin = 1;
inline bool CSFriendRemoveBlackListReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRemoveBlackListReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRemoveBlackListReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRemoveBlackListReq::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRemoveBlackListReq::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRemoveBlackListReq.Uin)
  return uin_;
}
inline void CSFriendRemoveBlackListReq::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRemoveBlackListReq.Uin)
}

// -------------------------------------------------------------------

// CSFriendRemoveBlackListResp

// required uint64 Uin = 1;
inline bool CSFriendRemoveBlackListResp::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRemoveBlackListResp::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRemoveBlackListResp::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRemoveBlackListResp::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSFriendRemoveBlackListResp::uin() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRemoveBlackListResp.Uin)
  return uin_;
}
inline void CSFriendRemoveBlackListResp::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:fgame.CSFriendRemoveBlackListResp.Uin)
}

// required string NickName = 2;
inline bool CSFriendRemoveBlackListResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendRemoveBlackListResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendRemoveBlackListResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendRemoveBlackListResp::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CSFriendRemoveBlackListResp::nickname() const {
  // @@protoc_insertion_point(field_get:fgame.CSFriendRemoveBlackListResp.NickName)
  return *nickname_;
}
inline void CSFriendRemoveBlackListResp::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.CSFriendRemoveBlackListResp.NickName)
}
inline void CSFriendRemoveBlackListResp::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.CSFriendRemoveBlackListResp.NickName)
}
inline void CSFriendRemoveBlackListResp::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.CSFriendRemoveBlackListResp.NickName)
}
inline ::std::string* CSFriendRemoveBlackListResp::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.CSFriendRemoveBlackListResp.NickName)
  return nickname_;
}
inline ::std::string* CSFriendRemoveBlackListResp::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSFriendRemoveBlackListResp::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.CSFriendRemoveBlackListResp.NickName)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Friend_2eproto__INCLUDED
