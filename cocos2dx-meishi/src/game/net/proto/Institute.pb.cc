// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Institute.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Institute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_Institute_2eproto() {
  delete CSProp::default_instance_;
  delete CSInstituteData::default_instance_;
  delete CSInstituteInfoReq::default_instance_;
  delete CSInstituteInfoResp::default_instance_;
  delete CSInstituteBuyReq::default_instance_;
  delete CSInstituteBuyResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Institute_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Institute_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CSProp::default_instance_ = new CSProp();
  CSInstituteData::default_instance_ = new CSInstituteData();
  CSInstituteInfoReq::default_instance_ = new CSInstituteInfoReq();
  CSInstituteInfoResp::default_instance_ = new CSInstituteInfoResp();
  CSInstituteBuyReq::default_instance_ = new CSInstituteBuyReq();
  CSInstituteBuyResp::default_instance_ = new CSInstituteBuyResp();
  CSProp::default_instance_->InitAsDefaultInstance();
  CSInstituteData::default_instance_->InitAsDefaultInstance();
  CSInstituteInfoReq::default_instance_->InitAsDefaultInstance();
  CSInstituteInfoResp::default_instance_->InitAsDefaultInstance();
  CSInstituteBuyReq::default_instance_->InitAsDefaultInstance();
  CSInstituteBuyResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Institute_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Institute_2eproto_once_);
void protobuf_AddDesc_Institute_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Institute_2eproto_once_,
                 &protobuf_AddDesc_Institute_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Institute_2eproto {
  StaticDescriptorInitializer_Institute_2eproto() {
    protobuf_AddDesc_Institute_2eproto();
  }
} static_descriptor_initializer_Institute_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSProp::kIdFieldNumber;
const int CSProp::kTypeFieldNumber;
const int CSProp::kCountFieldNumber;
#endif  // !_MSC_VER

CSProp::CSProp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSProp)
}

void CSProp::InitAsDefaultInstance() {
}

CSProp::CSProp(const CSProp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSProp)
}

void CSProp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSProp::~CSProp() {
  // @@protoc_insertion_point(destructor:fgame.CSProp)
  SharedDtor();
}

void CSProp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSProp& CSProp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSProp* CSProp::default_instance_ = NULL;

CSProp* CSProp::New() const {
  return new CSProp;
}

void CSProp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSProp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // required uint32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSProp)
  return false;
#undef DO_
}

void CSProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSProp)
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSProp)
}

int CSProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSProp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSProp*>(&from));
}

void CSProp::MergeFrom(const CSProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSProp::CopyFrom(const CSProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSProp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSProp::Swap(CSProp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSProp::GetTypeName() const {
  return "fgame.CSProp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstituteData::kMTypeFieldNumber;
const int CSInstituteData::kCountdownFieldNumber;
const int CSInstituteData::kSurpCountFieldNumber;
const int CSInstituteData::kCostFieldNumber;
#endif  // !_MSC_VER

CSInstituteData::CSInstituteData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSInstituteData)
}

void CSInstituteData::InitAsDefaultInstance() {
}

CSInstituteData::CSInstituteData(const CSInstituteData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSInstituteData)
}

void CSInstituteData::SharedCtor() {
  _cached_size_ = 0;
  mtype_ = 0u;
  countdown_ = 0u;
  surpcount_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstituteData::~CSInstituteData() {
  // @@protoc_insertion_point(destructor:fgame.CSInstituteData)
  SharedDtor();
}

void CSInstituteData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInstituteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInstituteData& CSInstituteData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSInstituteData* CSInstituteData::default_instance_ = NULL;

CSInstituteData* CSInstituteData::New() const {
  return new CSInstituteData;
}

void CSInstituteData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSInstituteData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mtype_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSInstituteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSInstituteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Countdown;
        break;
      }

      // required uint32 Countdown = 2;
      case 2: {
        if (tag == 16) {
         parse_Countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SurpCount;
        break;
      }

      // required uint32 SurpCount = 3;
      case 3: {
        if (tag == 24) {
         parse_SurpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surpcount_)));
          set_has_surpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Cost;
        break;
      }

      // required uint32 Cost = 4;
      case 4: {
        if (tag == 32) {
         parse_Cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSInstituteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSInstituteData)
  return false;
#undef DO_
}

void CSInstituteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSInstituteData)
  // required uint32 mType = 1;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mtype(), output);
  }

  // required uint32 Countdown = 2;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countdown(), output);
  }

  // required uint32 SurpCount = 3;
  if (has_surpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->surpcount(), output);
  }

  // required uint32 Cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSInstituteData)
}

int CSInstituteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mType = 1;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtype());
    }

    // required uint32 Countdown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // required uint32 SurpCount = 3;
    if (has_surpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surpcount());
    }

    // required uint32 Cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstituteData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInstituteData*>(&from));
}

void CSInstituteData::MergeFrom(const CSInstituteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_surpcount()) {
      set_surpcount(from.surpcount());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSInstituteData::CopyFrom(const CSInstituteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstituteData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSInstituteData::Swap(CSInstituteData* other) {
  if (other != this) {
    std::swap(mtype_, other->mtype_);
    std::swap(countdown_, other->countdown_);
    std::swap(surpcount_, other->surpcount_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInstituteData::GetTypeName() const {
  return "fgame.CSInstituteData";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSInstituteInfoReq::CSInstituteInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSInstituteInfoReq)
}

void CSInstituteInfoReq::InitAsDefaultInstance() {
}

CSInstituteInfoReq::CSInstituteInfoReq(const CSInstituteInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSInstituteInfoReq)
}

void CSInstituteInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstituteInfoReq::~CSInstituteInfoReq() {
  // @@protoc_insertion_point(destructor:fgame.CSInstituteInfoReq)
  SharedDtor();
}

void CSInstituteInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInstituteInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInstituteInfoReq& CSInstituteInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSInstituteInfoReq* CSInstituteInfoReq::default_instance_ = NULL;

CSInstituteInfoReq* CSInstituteInfoReq::New() const {
  return new CSInstituteInfoReq;
}

void CSInstituteInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSInstituteInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSInstituteInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSInstituteInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSInstituteInfoReq)
  return false;
#undef DO_
}

void CSInstituteInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSInstituteInfoReq)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSInstituteInfoReq)
}

int CSInstituteInfoReq::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstituteInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInstituteInfoReq*>(&from));
}

void CSInstituteInfoReq::MergeFrom(const CSInstituteInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSInstituteInfoReq::CopyFrom(const CSInstituteInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstituteInfoReq::IsInitialized() const {

  return true;
}

void CSInstituteInfoReq::Swap(CSInstituteInfoReq* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInstituteInfoReq::GetTypeName() const {
  return "fgame.CSInstituteInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstituteInfoResp::kInfoFieldNumber;
#endif  // !_MSC_VER

CSInstituteInfoResp::CSInstituteInfoResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSInstituteInfoResp)
}

void CSInstituteInfoResp::InitAsDefaultInstance() {
}

CSInstituteInfoResp::CSInstituteInfoResp(const CSInstituteInfoResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSInstituteInfoResp)
}

void CSInstituteInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstituteInfoResp::~CSInstituteInfoResp() {
  // @@protoc_insertion_point(destructor:fgame.CSInstituteInfoResp)
  SharedDtor();
}

void CSInstituteInfoResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInstituteInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInstituteInfoResp& CSInstituteInfoResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSInstituteInfoResp* CSInstituteInfoResp::default_instance_ = NULL;

CSInstituteInfoResp* CSInstituteInfoResp::New() const {
  return new CSInstituteInfoResp;
}

void CSInstituteInfoResp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSInstituteInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSInstituteInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.CSInstituteData info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSInstituteInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSInstituteInfoResp)
  return false;
#undef DO_
}

void CSInstituteInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSInstituteInfoResp)
  // repeated .fgame.CSInstituteData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSInstituteInfoResp)
}

int CSInstituteInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.CSInstituteData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstituteInfoResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInstituteInfoResp*>(&from));
}

void CSInstituteInfoResp::MergeFrom(const CSInstituteInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSInstituteInfoResp::CopyFrom(const CSInstituteInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstituteInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void CSInstituteInfoResp::Swap(CSInstituteInfoResp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInstituteInfoResp::GetTypeName() const {
  return "fgame.CSInstituteInfoResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstituteBuyReq::kMTypeFieldNumber;
#endif  // !_MSC_VER

CSInstituteBuyReq::CSInstituteBuyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSInstituteBuyReq)
}

void CSInstituteBuyReq::InitAsDefaultInstance() {
}

CSInstituteBuyReq::CSInstituteBuyReq(const CSInstituteBuyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSInstituteBuyReq)
}

void CSInstituteBuyReq::SharedCtor() {
  _cached_size_ = 0;
  mtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstituteBuyReq::~CSInstituteBuyReq() {
  // @@protoc_insertion_point(destructor:fgame.CSInstituteBuyReq)
  SharedDtor();
}

void CSInstituteBuyReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInstituteBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInstituteBuyReq& CSInstituteBuyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSInstituteBuyReq* CSInstituteBuyReq::default_instance_ = NULL;

CSInstituteBuyReq* CSInstituteBuyReq::New() const {
  return new CSInstituteBuyReq;
}

void CSInstituteBuyReq::Clear() {
  mtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSInstituteBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSInstituteBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSInstituteBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSInstituteBuyReq)
  return false;
#undef DO_
}

void CSInstituteBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSInstituteBuyReq)
  // required uint32 mType = 1;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSInstituteBuyReq)
}

int CSInstituteBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mType = 1;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstituteBuyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInstituteBuyReq*>(&from));
}

void CSInstituteBuyReq::MergeFrom(const CSInstituteBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSInstituteBuyReq::CopyFrom(const CSInstituteBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstituteBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSInstituteBuyReq::Swap(CSInstituteBuyReq* other) {
  if (other != this) {
    std::swap(mtype_, other->mtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInstituteBuyReq::GetTypeName() const {
  return "fgame.CSInstituteBuyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInstituteBuyResp::kCountdownFieldNumber;
const int CSInstituteBuyResp::kSurpCountFieldNumber;
const int CSInstituteBuyResp::kItemListFieldNumber;
#endif  // !_MSC_VER

CSInstituteBuyResp::CSInstituteBuyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.CSInstituteBuyResp)
}

void CSInstituteBuyResp::InitAsDefaultInstance() {
}

CSInstituteBuyResp::CSInstituteBuyResp(const CSInstituteBuyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.CSInstituteBuyResp)
}

void CSInstituteBuyResp::SharedCtor() {
  _cached_size_ = 0;
  countdown_ = 0u;
  surpcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInstituteBuyResp::~CSInstituteBuyResp() {
  // @@protoc_insertion_point(destructor:fgame.CSInstituteBuyResp)
  SharedDtor();
}

void CSInstituteBuyResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInstituteBuyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInstituteBuyResp& CSInstituteBuyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Institute_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Institute_2eproto();
#endif
  return *default_instance_;
}

CSInstituteBuyResp* CSInstituteBuyResp::default_instance_ = NULL;

CSInstituteBuyResp* CSInstituteBuyResp::New() const {
  return new CSInstituteBuyResp;
}

void CSInstituteBuyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSInstituteBuyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(countdown_, surpcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CSInstituteBuyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.CSInstituteBuyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.CSProp ItemList = 1;
      case 1: {
        if (tag == 10) {
         parse_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ItemList;
        if (input->ExpectTag(16)) goto parse_Countdown;
        break;
      }

      // required uint32 Countdown = 2;
      case 2: {
        if (tag == 16) {
         parse_Countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SurpCount;
        break;
      }

      // required uint32 SurpCount = 3;
      case 3: {
        if (tag == 24) {
         parse_SurpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surpcount_)));
          set_has_surpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.CSInstituteBuyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.CSInstituteBuyResp)
  return false;
#undef DO_
}

void CSInstituteBuyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.CSInstituteBuyResp)
  // repeated .fgame.CSProp ItemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->itemlist(i), output);
  }

  // required uint32 Countdown = 2;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countdown(), output);
  }

  // required uint32 SurpCount = 3;
  if (has_surpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->surpcount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.CSInstituteBuyResp)
}

int CSInstituteBuyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Countdown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countdown());
    }

    // required uint32 SurpCount = 3;
    if (has_surpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surpcount());
    }

  }
  // repeated .fgame.CSProp ItemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInstituteBuyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInstituteBuyResp*>(&from));
}

void CSInstituteBuyResp::MergeFrom(const CSInstituteBuyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_surpcount()) {
      set_surpcount(from.surpcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CSInstituteBuyResp::CopyFrom(const CSInstituteBuyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInstituteBuyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->itemlist())) return false;
  return true;
}

void CSInstituteBuyResp::Swap(CSInstituteBuyResp* other) {
  if (other != this) {
    std::swap(countdown_, other->countdown_);
    std::swap(surpcount_, other->surpcount_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInstituteBuyResp::GetTypeName() const {
  return "fgame.CSInstituteBuyResp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
