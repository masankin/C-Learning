// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MailData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MailData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace fgame {

void protobuf_ShutdownFile_MailData_2eproto() {
  delete DataMailInfo::default_instance_;
  delete DataMailInfoVec::default_instance_;
  delete DataMailUin::default_instance_;
  delete DataMail::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MailData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MailData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DataMailInfo::default_instance_ = new DataMailInfo();
  DataMailInfoVec::default_instance_ = new DataMailInfoVec();
  DataMailUin::default_instance_ = new DataMailUin();
  DataMail::default_instance_ = new DataMail();
  DataMailInfo::default_instance_->InitAsDefaultInstance();
  DataMailInfoVec::default_instance_->InitAsDefaultInstance();
  DataMailUin::default_instance_->InitAsDefaultInstance();
  DataMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MailData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MailData_2eproto_once_);
void protobuf_AddDesc_MailData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MailData_2eproto_once_,
                 &protobuf_AddDesc_MailData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MailData_2eproto {
  StaticDescriptorInitializer_MailData_2eproto() {
    protobuf_AddDesc_MailData_2eproto();
  }
} static_descriptor_initializer_MailData_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DataMailInfo::kIdFieldNumber;
const int DataMailInfo::kTitleFieldNumber;
const int DataMailInfo::kContentFieldNumber;
const int DataMailInfo::kPlugInFieldNumber;
const int DataMailInfo::kSendTimeFieldNumber;
const int DataMailInfo::kOutDateFieldNumber;
#endif  // !_MSC_VER

DataMailInfo::DataMailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.DataMailInfo)
}

void DataMailInfo::InitAsDefaultInstance() {
}

DataMailInfo::DataMailInfo(const DataMailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.DataMailInfo)
}

void DataMailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = 0u;
  outdate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMailInfo::~DataMailInfo() {
  // @@protoc_insertion_point(destructor:fgame.DataMailInfo)
  SharedDtor();
}

void DataMailInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (plugin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plugin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataMailInfo& DataMailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailData_2eproto();
#endif
  return *default_instance_;
}

DataMailInfo* DataMailInfo::default_instance_ = NULL;

DataMailInfo* DataMailInfo::New() const {
  return new DataMailInfo;
}

void DataMailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataMailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, sendtime_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_plugin()) {
      if (plugin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plugin_->clear();
      }
    }
    outdate_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.DataMailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }

      // required string Title = 2;
      case 2: {
        if (tag == 18) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // required string Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PlugIn;
        break;
      }

      // required string PlugIn = 4;
      case 4: {
        if (tag == 34) {
         parse_PlugIn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SendTime;
        break;
      }

      // required uint32 SendTime = 5;
      case 5: {
        if (tag == 40) {
         parse_SendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_OutDate;
        break;
      }

      // required uint32 OutDate = 6;
      case 6: {
        if (tag == 48) {
         parse_OutDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outdate_)));
          set_has_outdate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.DataMailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.DataMailInfo)
  return false;
#undef DO_
}

void DataMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.DataMailInfo)
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // required string PlugIn = 4;
  if (has_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plugin(), output);
  }

  // required uint32 SendTime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sendtime(), output);
  }

  // required uint32 OutDate = 6;
  if (has_outdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->outdate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.DataMailInfo)
}

int DataMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string PlugIn = 4;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin());
    }

    // required uint32 SendTime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendtime());
    }

    // required uint32 OutDate = 6;
    if (has_outdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outdate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMailInfo*>(&from));
}

void DataMailInfo::MergeFrom(const DataMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_plugin()) {
      set_plugin(from.plugin());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_outdate()) {
      set_outdate(from.outdate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataMailInfo::CopyFrom(const DataMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DataMailInfo::Swap(DataMailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(plugin_, other->plugin_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(outdate_, other->outdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataMailInfo::GetTypeName() const {
  return "fgame.DataMailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int DataMailInfoVec::kMailInfoFieldNumber;
#endif  // !_MSC_VER

DataMailInfoVec::DataMailInfoVec()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.DataMailInfoVec)
}

void DataMailInfoVec::InitAsDefaultInstance() {
}

DataMailInfoVec::DataMailInfoVec(const DataMailInfoVec& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.DataMailInfoVec)
}

void DataMailInfoVec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMailInfoVec::~DataMailInfoVec() {
  // @@protoc_insertion_point(destructor:fgame.DataMailInfoVec)
  SharedDtor();
}

void DataMailInfoVec::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataMailInfoVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataMailInfoVec& DataMailInfoVec::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailData_2eproto();
#endif
  return *default_instance_;
}

DataMailInfoVec* DataMailInfoVec::default_instance_ = NULL;

DataMailInfoVec* DataMailInfoVec::New() const {
  return new DataMailInfoVec;
}

void DataMailInfoVec::Clear() {
  mailinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataMailInfoVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.DataMailInfoVec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.DataMailInfo MailInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_MailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MailInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.DataMailInfoVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.DataMailInfoVec)
  return false;
#undef DO_
}

void DataMailInfoVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.DataMailInfoVec)
  // repeated .fgame.DataMailInfo MailInfo = 1;
  for (int i = 0; i < this->mailinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mailinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.DataMailInfoVec)
}

int DataMailInfoVec::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.DataMailInfo MailInfo = 1;
  total_size += 1 * this->mailinfo_size();
  for (int i = 0; i < this->mailinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMailInfoVec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMailInfoVec*>(&from));
}

void DataMailInfoVec::MergeFrom(const DataMailInfoVec& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailinfo_.MergeFrom(from.mailinfo_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataMailInfoVec::CopyFrom(const DataMailInfoVec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMailInfoVec::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mailinfo())) return false;
  return true;
}

void DataMailInfoVec::Swap(DataMailInfoVec* other) {
  if (other != this) {
    mailinfo_.Swap(&other->mailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataMailInfoVec::GetTypeName() const {
  return "fgame.DataMailInfoVec";
}


// ===================================================================

#ifndef _MSC_VER
const int DataMailUin::kNewMailFieldNumber;
const int DataMailUin::kMailNOFieldNumber;
const int DataMailUin::kMailInfoVecFieldNumber;
const int DataMailUin::kUInFieldNumber;
#endif  // !_MSC_VER

DataMailUin::DataMailUin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.DataMailUin)
}

void DataMailUin::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mailinfovec_ = const_cast< ::fgame::DataMailInfoVec*>(
      ::fgame::DataMailInfoVec::internal_default_instance());
#else
  mailinfovec_ = const_cast< ::fgame::DataMailInfoVec*>(&::fgame::DataMailInfoVec::default_instance());
#endif
}

DataMailUin::DataMailUin(const DataMailUin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.DataMailUin)
}

void DataMailUin::SharedCtor() {
  _cached_size_ = 0;
  newmail_ = false;
  mailno_ = 0u;
  mailinfovec_ = NULL;
  uin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMailUin::~DataMailUin() {
  // @@protoc_insertion_point(destructor:fgame.DataMailUin)
  SharedDtor();
}

void DataMailUin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mailinfovec_;
  }
}

void DataMailUin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataMailUin& DataMailUin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailData_2eproto();
#endif
  return *default_instance_;
}

DataMailUin* DataMailUin::default_instance_ = NULL;

DataMailUin* DataMailUin::New() const {
  return new DataMailUin;
}

void DataMailUin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataMailUin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(newmail_, mailno_);
    if (has_mailinfovec()) {
      if (mailinfovec_ != NULL) mailinfovec_->::fgame::DataMailInfoVec::Clear();
    }
    uin_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataMailUin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.DataMailUin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool NewMail = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newmail_)));
          set_has_newmail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MailNO;
        break;
      }

      // required uint32 MailNO = 2;
      case 2: {
        if (tag == 16) {
         parse_MailNO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailno_)));
          set_has_mailno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MailInfoVec;
        break;
      }

      // optional .fgame.DataMailInfoVec MailInfoVec = 3;
      case 3: {
        if (tag == 26) {
         parse_MailInfoVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailinfovec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uIn;
        break;
      }

      // optional int32 uIn = 4;
      case 4: {
        if (tag == 32) {
         parse_uIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.DataMailUin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.DataMailUin)
  return false;
#undef DO_
}

void DataMailUin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.DataMailUin)
  // required bool NewMail = 1;
  if (has_newmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->newmail(), output);
  }

  // required uint32 MailNO = 2;
  if (has_mailno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailno(), output);
  }

  // optional .fgame.DataMailInfoVec MailInfoVec = 3;
  if (has_mailinfovec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->mailinfovec(), output);
  }

  // optional int32 uIn = 4;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.DataMailUin)
}

int DataMailUin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool NewMail = 1;
    if (has_newmail()) {
      total_size += 1 + 1;
    }

    // required uint32 MailNO = 2;
    if (has_mailno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailno());
    }

    // optional .fgame.DataMailInfoVec MailInfoVec = 3;
    if (has_mailinfovec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailinfovec());
    }

    // optional int32 uIn = 4;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMailUin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMailUin*>(&from));
}

void DataMailUin::MergeFrom(const DataMailUin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newmail()) {
      set_newmail(from.newmail());
    }
    if (from.has_mailno()) {
      set_mailno(from.mailno());
    }
    if (from.has_mailinfovec()) {
      mutable_mailinfovec()->::fgame::DataMailInfoVec::MergeFrom(from.mailinfovec());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataMailUin::CopyFrom(const DataMailUin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMailUin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mailinfovec()) {
    if (!this->mailinfovec().IsInitialized()) return false;
  }
  return true;
}

void DataMailUin::Swap(DataMailUin* other) {
  if (other != this) {
    std::swap(newmail_, other->newmail_);
    std::swap(mailno_, other->mailno_);
    std::swap(mailinfovec_, other->mailinfovec_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataMailUin::GetTypeName() const {
  return "fgame.DataMailUin";
}


// ===================================================================

#ifndef _MSC_VER
const int DataMail::kMailUinVecFieldNumber;
#endif  // !_MSC_VER

DataMail::DataMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fgame.DataMail)
}

void DataMail::InitAsDefaultInstance() {
}

DataMail::DataMail(const DataMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fgame.DataMail)
}

void DataMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMail::~DataMail() {
  // @@protoc_insertion_point(destructor:fgame.DataMail)
  SharedDtor();
}

void DataMail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataMail& DataMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailData_2eproto();
#endif
  return *default_instance_;
}

DataMail* DataMail::default_instance_ = NULL;

DataMail* DataMail::New() const {
  return new DataMail;
}

void DataMail::Clear() {
  mailuinvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:fgame.DataMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fgame.DataMailUin MailUinVec = 1;
      case 1: {
        if (tag == 10) {
         parse_MailUinVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailuinvec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MailUinVec;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fgame.DataMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fgame.DataMail)
  return false;
#undef DO_
}

void DataMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fgame.DataMail)
  // repeated .fgame.DataMailUin MailUinVec = 1;
  for (int i = 0; i < this->mailuinvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mailuinvec(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:fgame.DataMail)
}

int DataMail::ByteSize() const {
  int total_size = 0;

  // repeated .fgame.DataMailUin MailUinVec = 1;
  total_size += 1 * this->mailuinvec_size();
  for (int i = 0; i < this->mailuinvec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailuinvec(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMail*>(&from));
}

void DataMail::MergeFrom(const DataMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailuinvec_.MergeFrom(from.mailuinvec_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataMail::CopyFrom(const DataMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMail::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mailuinvec())) return false;
  return true;
}

void DataMail::Swap(DataMail* other) {
  if (other != this) {
    mailuinvec_.Swap(&other->mailuinvec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataMail::GetTypeName() const {
  return "fgame.DataMail";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)
