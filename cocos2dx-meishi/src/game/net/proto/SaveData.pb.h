// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaveData.proto

#ifndef PROTOBUF_SaveData_2eproto__INCLUDED
#define PROTOBUF_SaveData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace fgame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SaveData_2eproto();
void protobuf_AssignDesc_SaveData_2eproto();
void protobuf_ShutdownFile_SaveData_2eproto();

class PropItmeSaveData;
class LostPointData;
class AchieveData;
class LoginSrvInfo;
class LoginData;
class CostData;
class ActNoticeDataList;
class NewsBibleData;
class UserData;

// ===================================================================

class PropItmeSaveData : public ::google::protobuf::MessageLite {
 public:
  PropItmeSaveData();
  virtual ~PropItmeSaveData();

  PropItmeSaveData(const PropItmeSaveData& from);

  inline PropItmeSaveData& operator=(const PropItmeSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PropItmeSaveData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PropItmeSaveData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PropItmeSaveData* other);

  // implements Message ----------------------------------------------

  PropItmeSaveData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PropItmeSaveData& from);
  void MergeFrom(const PropItmeSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.PropItmeSaveData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pos_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static PropItmeSaveData* default_instance_;
};
// -------------------------------------------------------------------

class LostPointData : public ::google::protobuf::MessageLite {
 public:
  LostPointData();
  virtual ~LostPointData();

  LostPointData(const LostPointData& from);

  inline LostPointData& operator=(const LostPointData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LostPointData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LostPointData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LostPointData* other);

  // implements Message ----------------------------------------------

  LostPointData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LostPointData& from);
  void MergeFrom(const LostPointData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional int32 pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fgame.LostPointData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 pass_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static LostPointData* default_instance_;
};
// -------------------------------------------------------------------

class AchieveData : public ::google::protobuf::MessageLite {
 public:
  AchieveData();
  virtual ~AchieveData();

  AchieveData(const AchieveData& from);

  inline AchieveData& operator=(const AchieveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AchieveData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AchieveData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AchieveData* other);

  // implements Message ----------------------------------------------

  AchieveData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AchieveData& from);
  void MergeFrom(const AchieveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 TipId = 1;
  inline int tipid_size() const;
  inline void clear_tipid();
  static const int kTipIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tipid(int index) const;
  inline void set_tipid(int index, ::google::protobuf::uint32 value);
  inline void add_tipid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tipid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tipid();

  // @@protoc_insertion_point(class_scope:fgame.AchieveData)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tipid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static AchieveData* default_instance_;
};
// -------------------------------------------------------------------

class LoginSrvInfo : public ::google::protobuf::MessageLite {
 public:
  LoginSrvInfo();
  virtual ~LoginSrvInfo();

  LoginSrvInfo(const LoginSrvInfo& from);

  inline LoginSrvInfo& operator=(const LoginSrvInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LoginSrvInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginSrvInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginSrvInfo* other);

  // implements Message ----------------------------------------------

  LoginSrvInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginSrvInfo& from);
  void MergeFrom(const LoginSrvInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChannelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);

  // required string Address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:fgame.LoginSrvInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_address();
  inline void clear_has_address();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* address_;
  ::google::protobuf::int32 channelid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static LoginSrvInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoginData : public ::google::protobuf::MessageLite {
 public:
  LoginData();
  virtual ~LoginData();

  LoginData(const LoginData& from);

  inline LoginData& operator=(const LoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LoginData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginData* other);

  // implements Message ----------------------------------------------

  LoginData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginData& from);
  void MergeFrom(const LoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 LastServerTime = 1;
  inline bool has_lastservertime() const;
  inline void clear_lastservertime();
  static const int kLastServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 lastservertime() const;
  inline void set_lastservertime(::google::protobuf::uint64 value);

  // required string GameServerName = 2;
  inline bool has_gameservername() const;
  inline void clear_gameservername();
  static const int kGameServerNameFieldNumber = 2;
  inline const ::std::string& gameservername() const;
  inline void set_gameservername(const ::std::string& value);
  inline void set_gameservername(const char* value);
  inline void set_gameservername(const char* value, size_t size);
  inline ::std::string* mutable_gameservername();
  inline ::std::string* release_gameservername();
  inline void set_allocated_gameservername(::std::string* gameservername);

  // required string LoginServerDir = 3;
  inline bool has_loginserverdir() const;
  inline void clear_loginserverdir();
  static const int kLoginServerDirFieldNumber = 3;
  inline const ::std::string& loginserverdir() const;
  inline void set_loginserverdir(const ::std::string& value);
  inline void set_loginserverdir(const char* value);
  inline void set_loginserverdir(const char* value, size_t size);
  inline ::std::string* mutable_loginserverdir();
  inline ::std::string* release_loginserverdir();
  inline void set_allocated_loginserverdir(::std::string* loginserverdir);

  // optional string GameServerDir = 4;
  inline bool has_gameserverdir() const;
  inline void clear_gameserverdir();
  static const int kGameServerDirFieldNumber = 4;
  inline const ::std::string& gameserverdir() const;
  inline void set_gameserverdir(const ::std::string& value);
  inline void set_gameserverdir(const char* value);
  inline void set_gameserverdir(const char* value, size_t size);
  inline ::std::string* mutable_gameserverdir();
  inline ::std::string* release_gameserverdir();
  inline void set_allocated_gameserverdir(::std::string* gameserverdir);

  // repeated string LoginList = 5;
  inline int loginlist_size() const;
  inline void clear_loginlist();
  static const int kLoginListFieldNumber = 5;
  inline const ::std::string& loginlist(int index) const;
  inline ::std::string* mutable_loginlist(int index);
  inline void set_loginlist(int index, const ::std::string& value);
  inline void set_loginlist(int index, const char* value);
  inline void set_loginlist(int index, const char* value, size_t size);
  inline ::std::string* add_loginlist();
  inline void add_loginlist(const ::std::string& value);
  inline void add_loginlist(const char* value);
  inline void add_loginlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& loginlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loginlist();

  // repeated .fgame.LoginSrvInfo LoginSrvList = 6;
  inline int loginsrvlist_size() const;
  inline void clear_loginsrvlist();
  static const int kLoginSrvListFieldNumber = 6;
  inline const ::fgame::LoginSrvInfo& loginsrvlist(int index) const;
  inline ::fgame::LoginSrvInfo* mutable_loginsrvlist(int index);
  inline ::fgame::LoginSrvInfo* add_loginsrvlist();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::LoginSrvInfo >&
      loginsrvlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::LoginSrvInfo >*
      mutable_loginsrvlist();

  // @@protoc_insertion_point(class_scope:fgame.LoginData)
 private:
  inline void set_has_lastservertime();
  inline void clear_has_lastservertime();
  inline void set_has_gameservername();
  inline void clear_has_gameservername();
  inline void set_has_loginserverdir();
  inline void clear_has_loginserverdir();
  inline void set_has_gameserverdir();
  inline void clear_has_gameserverdir();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lastservertime_;
  ::std::string* gameservername_;
  ::std::string* loginserverdir_;
  ::std::string* gameserverdir_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loginlist_;
  ::google::protobuf::RepeatedPtrField< ::fgame::LoginSrvInfo > loginsrvlist_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static LoginData* default_instance_;
};
// -------------------------------------------------------------------

class CostData : public ::google::protobuf::MessageLite {
 public:
  CostData();
  virtual ~CostData();

  CostData(const CostData& from);

  inline CostData& operator=(const CostData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CostData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CostData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CostData* other);

  // implements Message ----------------------------------------------

  CostData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CostData& from);
  void MergeFrom(const CostData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 costDay = 1;
  inline bool has_costday() const;
  inline void clear_costday();
  static const int kCostDayFieldNumber = 1;
  inline ::google::protobuf::uint64 costday() const;
  inline void set_costday(::google::protobuf::uint64 value);

  // optional uint32 costMoney = 2;
  inline bool has_costmoney() const;
  inline void clear_costmoney();
  static const int kCostMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 costmoney() const;
  inline void set_costmoney(::google::protobuf::uint32 value);

  // optional uint64 costMonth = 3;
  inline bool has_costmonth() const;
  inline void clear_costmonth();
  static const int kCostMonthFieldNumber = 3;
  inline ::google::protobuf::uint64 costmonth() const;
  inline void set_costmonth(::google::protobuf::uint64 value);

  // optional uint32 costMonthMoney = 4;
  inline bool has_costmonthmoney() const;
  inline void clear_costmonthmoney();
  static const int kCostMonthMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 costmonthmoney() const;
  inline void set_costmonthmoney(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.CostData)
 private:
  inline void set_has_costday();
  inline void clear_has_costday();
  inline void set_has_costmoney();
  inline void clear_has_costmoney();
  inline void set_has_costmonth();
  inline void clear_has_costmonth();
  inline void set_has_costmonthmoney();
  inline void clear_has_costmonthmoney();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 costday_;
  ::google::protobuf::uint64 costmonth_;
  ::google::protobuf::uint32 costmoney_;
  ::google::protobuf::uint32 costmonthmoney_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static CostData* default_instance_;
};
// -------------------------------------------------------------------

class ActNoticeDataList : public ::google::protobuf::MessageLite {
 public:
  ActNoticeDataList();
  virtual ~ActNoticeDataList();

  ActNoticeDataList(const ActNoticeDataList& from);

  inline ActNoticeDataList& operator=(const ActNoticeDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActNoticeDataList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActNoticeDataList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActNoticeDataList* other);

  // implements Message ----------------------------------------------

  ActNoticeDataList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActNoticeDataList& from);
  void MergeFrom(const ActNoticeDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ActId = 1;
  inline int actid_size() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  inline ::google::protobuf::int32 actid(int index) const;
  inline void set_actid(int index, ::google::protobuf::int32 value);
  inline void add_actid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actid();

  // @@protoc_insertion_point(class_scope:fgame.ActNoticeDataList)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static ActNoticeDataList* default_instance_;
};
// -------------------------------------------------------------------

class NewsBibleData : public ::google::protobuf::MessageLite {
 public:
  NewsBibleData();
  virtual ~NewsBibleData();

  NewsBibleData(const NewsBibleData& from);

  inline NewsBibleData& operator=(const NewsBibleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const NewsBibleData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NewsBibleData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NewsBibleData* other);

  // implements Message ----------------------------------------------

  NewsBibleData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NewsBibleData& from);
  void MergeFrom(const NewsBibleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BibleId = 1;
  inline bool has_bibleid() const;
  inline void clear_bibleid();
  static const int kBibleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 bibleid() const;
  inline void set_bibleid(::google::protobuf::uint32 value);

  // optional uint32 Pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline ::google::protobuf::uint32 pass() const;
  inline void set_pass(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fgame.NewsBibleData)
 private:
  inline void set_has_bibleid();
  inline void clear_has_bibleid();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bibleid_;
  ::google::protobuf::uint32 pass_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static NewsBibleData* default_instance_;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::MessageLite {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const UserData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserData* other);

  // implements Message ----------------------------------------------

  UserData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OpenId = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional uint64 lastSave = 3;
  inline bool has_lastsave() const;
  inline void clear_lastsave();
  static const int kLastSaveFieldNumber = 3;
  inline ::google::protobuf::uint64 lastsave() const;
  inline void set_lastsave(::google::protobuf::uint64 value);

  // optional uint32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // repeated .fgame.LostPointData lostPointData = 13;
  inline int lostpointdata_size() const;
  inline void clear_lostpointdata();
  static const int kLostPointDataFieldNumber = 13;
  inline const ::fgame::LostPointData& lostpointdata(int index) const;
  inline ::fgame::LostPointData* mutable_lostpointdata(int index);
  inline ::fgame::LostPointData* add_lostpointdata();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::LostPointData >&
      lostpointdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::LostPointData >*
      mutable_lostpointdata();

  // optional string inputID = 19;
  inline bool has_inputid() const;
  inline void clear_inputid();
  static const int kInputIDFieldNumber = 19;
  inline const ::std::string& inputid() const;
  inline void set_inputid(const ::std::string& value);
  inline void set_inputid(const char* value);
  inline void set_inputid(const char* value, size_t size);
  inline ::std::string* mutable_inputid();
  inline ::std::string* release_inputid();
  inline void set_allocated_inputid(::std::string* inputid);

  // optional .fgame.AchieveData achieveData = 20;
  inline bool has_achievedata() const;
  inline void clear_achievedata();
  static const int kAchieveDataFieldNumber = 20;
  inline const ::fgame::AchieveData& achievedata() const;
  inline ::fgame::AchieveData* mutable_achievedata();
  inline ::fgame::AchieveData* release_achievedata();
  inline void set_allocated_achievedata(::fgame::AchieveData* achievedata);

  // repeated .fgame.PropItmeSaveData propItmeData = 21;
  inline int propitmedata_size() const;
  inline void clear_propitmedata();
  static const int kPropItmeDataFieldNumber = 21;
  inline const ::fgame::PropItmeSaveData& propitmedata(int index) const;
  inline ::fgame::PropItmeSaveData* mutable_propitmedata(int index);
  inline ::fgame::PropItmeSaveData* add_propitmedata();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::PropItmeSaveData >&
      propitmedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::PropItmeSaveData >*
      mutable_propitmedata();

  // optional .fgame.LoginData loginData = 24;
  inline bool has_logindata() const;
  inline void clear_logindata();
  static const int kLoginDataFieldNumber = 24;
  inline const ::fgame::LoginData& logindata() const;
  inline ::fgame::LoginData* mutable_logindata();
  inline ::fgame::LoginData* release_logindata();
  inline void set_allocated_logindata(::fgame::LoginData* logindata);

  // optional .fgame.CostData mCostData = 25;
  inline bool has_mcostdata() const;
  inline void clear_mcostdata();
  static const int kMCostDataFieldNumber = 25;
  inline const ::fgame::CostData& mcostdata() const;
  inline ::fgame::CostData* mutable_mcostdata();
  inline ::fgame::CostData* release_mcostdata();
  inline void set_allocated_mcostdata(::fgame::CostData* mcostdata);

  // optional uint32 version = 27;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 27;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 bibleTabItemId = 28;
  inline bool has_bibletabitemid() const;
  inline void clear_bibletabitemid();
  static const int kBibleTabItemIdFieldNumber = 28;
  inline ::google::protobuf::uint32 bibletabitemid() const;
  inline void set_bibletabitemid(::google::protobuf::uint32 value);

  // optional uint32 firstFail = 29;
  inline bool has_firstfail() const;
  inline void clear_firstfail();
  static const int kFirstFailFieldNumber = 29;
  inline ::google::protobuf::uint32 firstfail() const;
  inline void set_firstfail(::google::protobuf::uint32 value);

  // optional .fgame.ActNoticeDataList actNoticeDataList = 30;
  inline bool has_actnoticedatalist() const;
  inline void clear_actnoticedatalist();
  static const int kActNoticeDataListFieldNumber = 30;
  inline const ::fgame::ActNoticeDataList& actnoticedatalist() const;
  inline ::fgame::ActNoticeDataList* mutable_actnoticedatalist();
  inline ::fgame::ActNoticeDataList* release_actnoticedatalist();
  inline void set_allocated_actnoticedatalist(::fgame::ActNoticeDataList* actnoticedatalist);

  // optional uint64 ActInformTime = 31;
  inline bool has_actinformtime() const;
  inline void clear_actinformtime();
  static const int kActInformTimeFieldNumber = 31;
  inline ::google::protobuf::uint64 actinformtime() const;
  inline void set_actinformtime(::google::protobuf::uint64 value);

  // optional uint32 OpenGamePassTip = 32;
  inline bool has_opengamepasstip() const;
  inline void clear_opengamepasstip();
  static const int kOpenGamePassTipFieldNumber = 32;
  inline ::google::protobuf::uint32 opengamepasstip() const;
  inline void set_opengamepasstip(::google::protobuf::uint32 value);

  // optional uint32 ChatBuyTip = 33;
  inline bool has_chatbuytip() const;
  inline void clear_chatbuytip();
  static const int kChatBuyTipFieldNumber = 33;
  inline ::google::protobuf::uint32 chatbuytip() const;
  inline void set_chatbuytip(::google::protobuf::uint32 value);

  // optional uint32 ChatFreeCount = 34;
  inline bool has_chatfreecount() const;
  inline void clear_chatfreecount();
  static const int kChatFreeCountFieldNumber = 34;
  inline ::google::protobuf::uint32 chatfreecount() const;
  inline void set_chatfreecount(::google::protobuf::uint32 value);

  // optional uint64 ChatTimeLeft = 35;
  inline bool has_chattimeleft() const;
  inline void clear_chattimeleft();
  static const int kChatTimeLeftFieldNumber = 35;
  inline ::google::protobuf::uint64 chattimeleft() const;
  inline void set_chattimeleft(::google::protobuf::uint64 value);

  // optional uint32 SaveLevelTip = 36;
  inline bool has_saveleveltip() const;
  inline void clear_saveleveltip();
  static const int kSaveLevelTipFieldNumber = 36;
  inline ::google::protobuf::uint32 saveleveltip() const;
  inline void set_saveleveltip(::google::protobuf::uint32 value);

  // repeated .fgame.NewsBibleData BibleData = 37;
  inline int bibledata_size() const;
  inline void clear_bibledata();
  static const int kBibleDataFieldNumber = 37;
  inline const ::fgame::NewsBibleData& bibledata(int index) const;
  inline ::fgame::NewsBibleData* mutable_bibledata(int index);
  inline ::fgame::NewsBibleData* add_bibledata();
  inline const ::google::protobuf::RepeatedPtrField< ::fgame::NewsBibleData >&
      bibledata() const;
  inline ::google::protobuf::RepeatedPtrField< ::fgame::NewsBibleData >*
      mutable_bibledata();

  // @@protoc_insertion_point(class_scope:fgame.UserData)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_lastsave();
  inline void clear_has_lastsave();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_inputid();
  inline void clear_has_inputid();
  inline void set_has_achievedata();
  inline void clear_has_achievedata();
  inline void set_has_logindata();
  inline void clear_has_logindata();
  inline void set_has_mcostdata();
  inline void clear_has_mcostdata();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_bibletabitemid();
  inline void clear_has_bibletabitemid();
  inline void set_has_firstfail();
  inline void clear_has_firstfail();
  inline void set_has_actnoticedatalist();
  inline void clear_has_actnoticedatalist();
  inline void set_has_actinformtime();
  inline void clear_has_actinformtime();
  inline void set_has_opengamepasstip();
  inline void clear_has_opengamepasstip();
  inline void set_has_chatbuytip();
  inline void clear_has_chatbuytip();
  inline void set_has_chatfreecount();
  inline void clear_has_chatfreecount();
  inline void set_has_chattimeleft();
  inline void clear_has_chattimeleft();
  inline void set_has_saveleveltip();
  inline void clear_has_saveleveltip();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* openid_;
  ::google::protobuf::uint64 lastsave_;
  ::google::protobuf::RepeatedPtrField< ::fgame::LostPointData > lostpointdata_;
  ::std::string* inputid_;
  ::fgame::AchieveData* achievedata_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::RepeatedPtrField< ::fgame::PropItmeSaveData > propitmedata_;
  ::fgame::LoginData* logindata_;
  ::fgame::CostData* mcostdata_;
  ::google::protobuf::uint32 bibletabitemid_;
  ::google::protobuf::uint32 firstfail_;
  ::fgame::ActNoticeDataList* actnoticedatalist_;
  ::google::protobuf::uint64 actinformtime_;
  ::google::protobuf::uint32 opengamepasstip_;
  ::google::protobuf::uint32 chatbuytip_;
  ::google::protobuf::uint64 chattimeleft_;
  ::google::protobuf::uint32 chatfreecount_;
  ::google::protobuf::uint32 saveleveltip_;
  ::google::protobuf::RepeatedPtrField< ::fgame::NewsBibleData > bibledata_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SaveData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SaveData_2eproto();
  #endif
  friend void protobuf_AssignDesc_SaveData_2eproto();
  friend void protobuf_ShutdownFile_SaveData_2eproto();

  void InitAsDefaultInstance();
  static UserData* default_instance_;
};
// ===================================================================


// ===================================================================

// PropItmeSaveData

// optional uint32 id = 1;
inline bool PropItmeSaveData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropItmeSaveData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropItmeSaveData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropItmeSaveData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PropItmeSaveData::id() const {
  // @@protoc_insertion_point(field_get:fgame.PropItmeSaveData.id)
  return id_;
}
inline void PropItmeSaveData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fgame.PropItmeSaveData.id)
}

// optional uint32 pos = 2;
inline bool PropItmeSaveData::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropItmeSaveData::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropItmeSaveData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropItmeSaveData::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 PropItmeSaveData::pos() const {
  // @@protoc_insertion_point(field_get:fgame.PropItmeSaveData.pos)
  return pos_;
}
inline void PropItmeSaveData::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:fgame.PropItmeSaveData.pos)
}

// -------------------------------------------------------------------

// LostPointData

// optional uint32 id = 1;
inline bool LostPointData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LostPointData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LostPointData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LostPointData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LostPointData::id() const {
  // @@protoc_insertion_point(field_get:fgame.LostPointData.id)
  return id_;
}
inline void LostPointData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fgame.LostPointData.id)
}

// optional int32 pass = 2;
inline bool LostPointData::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LostPointData::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LostPointData::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LostPointData::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 LostPointData::pass() const {
  // @@protoc_insertion_point(field_get:fgame.LostPointData.pass)
  return pass_;
}
inline void LostPointData::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
  // @@protoc_insertion_point(field_set:fgame.LostPointData.pass)
}

// -------------------------------------------------------------------

// AchieveData

// repeated uint32 TipId = 1;
inline int AchieveData::tipid_size() const {
  return tipid_.size();
}
inline void AchieveData::clear_tipid() {
  tipid_.Clear();
}
inline ::google::protobuf::uint32 AchieveData::tipid(int index) const {
  // @@protoc_insertion_point(field_get:fgame.AchieveData.TipId)
  return tipid_.Get(index);
}
inline void AchieveData::set_tipid(int index, ::google::protobuf::uint32 value) {
  tipid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fgame.AchieveData.TipId)
}
inline void AchieveData::add_tipid(::google::protobuf::uint32 value) {
  tipid_.Add(value);
  // @@protoc_insertion_point(field_add:fgame.AchieveData.TipId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AchieveData::tipid() const {
  // @@protoc_insertion_point(field_list:fgame.AchieveData.TipId)
  return tipid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AchieveData::mutable_tipid() {
  // @@protoc_insertion_point(field_mutable_list:fgame.AchieveData.TipId)
  return &tipid_;
}

// -------------------------------------------------------------------

// LoginSrvInfo

// required int32 ChannelId = 1;
inline bool LoginSrvInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSrvInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSrvInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSrvInfo::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 LoginSrvInfo::channelid() const {
  // @@protoc_insertion_point(field_get:fgame.LoginSrvInfo.ChannelId)
  return channelid_;
}
inline void LoginSrvInfo::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:fgame.LoginSrvInfo.ChannelId)
}

// required string Address = 2;
inline bool LoginSrvInfo::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSrvInfo::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSrvInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSrvInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& LoginSrvInfo::address() const {
  // @@protoc_insertion_point(field_get:fgame.LoginSrvInfo.Address)
  return *address_;
}
inline void LoginSrvInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.LoginSrvInfo.Address)
}
inline void LoginSrvInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.LoginSrvInfo.Address)
}
inline void LoginSrvInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.LoginSrvInfo.Address)
}
inline ::std::string* LoginSrvInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.LoginSrvInfo.Address)
  return address_;
}
inline ::std::string* LoginSrvInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginSrvInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.LoginSrvInfo.Address)
}

// -------------------------------------------------------------------

// LoginData

// required uint64 LastServerTime = 1;
inline bool LoginData::has_lastservertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginData::set_has_lastservertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginData::clear_has_lastservertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginData::clear_lastservertime() {
  lastservertime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastservertime();
}
inline ::google::protobuf::uint64 LoginData::lastservertime() const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.LastServerTime)
  return lastservertime_;
}
inline void LoginData::set_lastservertime(::google::protobuf::uint64 value) {
  set_has_lastservertime();
  lastservertime_ = value;
  // @@protoc_insertion_point(field_set:fgame.LoginData.LastServerTime)
}

// required string GameServerName = 2;
inline bool LoginData::has_gameservername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginData::set_has_gameservername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginData::clear_has_gameservername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginData::clear_gameservername() {
  if (gameservername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameservername_->clear();
  }
  clear_has_gameservername();
}
inline const ::std::string& LoginData::gameservername() const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.GameServerName)
  return *gameservername_;
}
inline void LoginData::set_gameservername(const ::std::string& value) {
  set_has_gameservername();
  if (gameservername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameservername_ = new ::std::string;
  }
  gameservername_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.LoginData.GameServerName)
}
inline void LoginData::set_gameservername(const char* value) {
  set_has_gameservername();
  if (gameservername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameservername_ = new ::std::string;
  }
  gameservername_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.LoginData.GameServerName)
}
inline void LoginData::set_gameservername(const char* value, size_t size) {
  set_has_gameservername();
  if (gameservername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameservername_ = new ::std::string;
  }
  gameservername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.LoginData.GameServerName)
}
inline ::std::string* LoginData::mutable_gameservername() {
  set_has_gameservername();
  if (gameservername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameservername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.LoginData.GameServerName)
  return gameservername_;
}
inline ::std::string* LoginData::release_gameservername() {
  clear_has_gameservername();
  if (gameservername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameservername_;
    gameservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginData::set_allocated_gameservername(::std::string* gameservername) {
  if (gameservername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameservername_;
  }
  if (gameservername) {
    set_has_gameservername();
    gameservername_ = gameservername;
  } else {
    clear_has_gameservername();
    gameservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.LoginData.GameServerName)
}

// required string LoginServerDir = 3;
inline bool LoginData::has_loginserverdir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginData::set_has_loginserverdir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginData::clear_has_loginserverdir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginData::clear_loginserverdir() {
  if (loginserverdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginserverdir_->clear();
  }
  clear_has_loginserverdir();
}
inline const ::std::string& LoginData::loginserverdir() const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.LoginServerDir)
  return *loginserverdir_;
}
inline void LoginData::set_loginserverdir(const ::std::string& value) {
  set_has_loginserverdir();
  if (loginserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginserverdir_ = new ::std::string;
  }
  loginserverdir_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.LoginData.LoginServerDir)
}
inline void LoginData::set_loginserverdir(const char* value) {
  set_has_loginserverdir();
  if (loginserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginserverdir_ = new ::std::string;
  }
  loginserverdir_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.LoginData.LoginServerDir)
}
inline void LoginData::set_loginserverdir(const char* value, size_t size) {
  set_has_loginserverdir();
  if (loginserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginserverdir_ = new ::std::string;
  }
  loginserverdir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.LoginData.LoginServerDir)
}
inline ::std::string* LoginData::mutable_loginserverdir() {
  set_has_loginserverdir();
  if (loginserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginserverdir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.LoginData.LoginServerDir)
  return loginserverdir_;
}
inline ::std::string* LoginData::release_loginserverdir() {
  clear_has_loginserverdir();
  if (loginserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginserverdir_;
    loginserverdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginData::set_allocated_loginserverdir(::std::string* loginserverdir) {
  if (loginserverdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginserverdir_;
  }
  if (loginserverdir) {
    set_has_loginserverdir();
    loginserverdir_ = loginserverdir;
  } else {
    clear_has_loginserverdir();
    loginserverdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.LoginData.LoginServerDir)
}

// optional string GameServerDir = 4;
inline bool LoginData::has_gameserverdir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginData::set_has_gameserverdir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginData::clear_has_gameserverdir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginData::clear_gameserverdir() {
  if (gameserverdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameserverdir_->clear();
  }
  clear_has_gameserverdir();
}
inline const ::std::string& LoginData::gameserverdir() const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.GameServerDir)
  return *gameserverdir_;
}
inline void LoginData::set_gameserverdir(const ::std::string& value) {
  set_has_gameserverdir();
  if (gameserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameserverdir_ = new ::std::string;
  }
  gameserverdir_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.LoginData.GameServerDir)
}
inline void LoginData::set_gameserverdir(const char* value) {
  set_has_gameserverdir();
  if (gameserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameserverdir_ = new ::std::string;
  }
  gameserverdir_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.LoginData.GameServerDir)
}
inline void LoginData::set_gameserverdir(const char* value, size_t size) {
  set_has_gameserverdir();
  if (gameserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameserverdir_ = new ::std::string;
  }
  gameserverdir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.LoginData.GameServerDir)
}
inline ::std::string* LoginData::mutable_gameserverdir() {
  set_has_gameserverdir();
  if (gameserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gameserverdir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.LoginData.GameServerDir)
  return gameserverdir_;
}
inline ::std::string* LoginData::release_gameserverdir() {
  clear_has_gameserverdir();
  if (gameserverdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gameserverdir_;
    gameserverdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginData::set_allocated_gameserverdir(::std::string* gameserverdir) {
  if (gameserverdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameserverdir_;
  }
  if (gameserverdir) {
    set_has_gameserverdir();
    gameserverdir_ = gameserverdir;
  } else {
    clear_has_gameserverdir();
    gameserverdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.LoginData.GameServerDir)
}

// repeated string LoginList = 5;
inline int LoginData::loginlist_size() const {
  return loginlist_.size();
}
inline void LoginData::clear_loginlist() {
  loginlist_.Clear();
}
inline const ::std::string& LoginData::loginlist(int index) const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.LoginList)
  return loginlist_.Get(index);
}
inline ::std::string* LoginData::mutable_loginlist(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.LoginData.LoginList)
  return loginlist_.Mutable(index);
}
inline void LoginData::set_loginlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fgame.LoginData.LoginList)
  loginlist_.Mutable(index)->assign(value);
}
inline void LoginData::set_loginlist(int index, const char* value) {
  loginlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.LoginData.LoginList)
}
inline void LoginData::set_loginlist(int index, const char* value, size_t size) {
  loginlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.LoginData.LoginList)
}
inline ::std::string* LoginData::add_loginlist() {
  return loginlist_.Add();
}
inline void LoginData::add_loginlist(const ::std::string& value) {
  loginlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fgame.LoginData.LoginList)
}
inline void LoginData::add_loginlist(const char* value) {
  loginlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fgame.LoginData.LoginList)
}
inline void LoginData::add_loginlist(const char* value, size_t size) {
  loginlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fgame.LoginData.LoginList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoginData::loginlist() const {
  // @@protoc_insertion_point(field_list:fgame.LoginData.LoginList)
  return loginlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoginData::mutable_loginlist() {
  // @@protoc_insertion_point(field_mutable_list:fgame.LoginData.LoginList)
  return &loginlist_;
}

// repeated .fgame.LoginSrvInfo LoginSrvList = 6;
inline int LoginData::loginsrvlist_size() const {
  return loginsrvlist_.size();
}
inline void LoginData::clear_loginsrvlist() {
  loginsrvlist_.Clear();
}
inline const ::fgame::LoginSrvInfo& LoginData::loginsrvlist(int index) const {
  // @@protoc_insertion_point(field_get:fgame.LoginData.LoginSrvList)
  return loginsrvlist_.Get(index);
}
inline ::fgame::LoginSrvInfo* LoginData::mutable_loginsrvlist(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.LoginData.LoginSrvList)
  return loginsrvlist_.Mutable(index);
}
inline ::fgame::LoginSrvInfo* LoginData::add_loginsrvlist() {
  // @@protoc_insertion_point(field_add:fgame.LoginData.LoginSrvList)
  return loginsrvlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::LoginSrvInfo >&
LoginData::loginsrvlist() const {
  // @@protoc_insertion_point(field_list:fgame.LoginData.LoginSrvList)
  return loginsrvlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::LoginSrvInfo >*
LoginData::mutable_loginsrvlist() {
  // @@protoc_insertion_point(field_mutable_list:fgame.LoginData.LoginSrvList)
  return &loginsrvlist_;
}

// -------------------------------------------------------------------

// CostData

// optional uint64 costDay = 1;
inline bool CostData::has_costday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CostData::set_has_costday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CostData::clear_has_costday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CostData::clear_costday() {
  costday_ = GOOGLE_ULONGLONG(0);
  clear_has_costday();
}
inline ::google::protobuf::uint64 CostData::costday() const {
  // @@protoc_insertion_point(field_get:fgame.CostData.costDay)
  return costday_;
}
inline void CostData::set_costday(::google::protobuf::uint64 value) {
  set_has_costday();
  costday_ = value;
  // @@protoc_insertion_point(field_set:fgame.CostData.costDay)
}

// optional uint32 costMoney = 2;
inline bool CostData::has_costmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CostData::set_has_costmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CostData::clear_has_costmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CostData::clear_costmoney() {
  costmoney_ = 0u;
  clear_has_costmoney();
}
inline ::google::protobuf::uint32 CostData::costmoney() const {
  // @@protoc_insertion_point(field_get:fgame.CostData.costMoney)
  return costmoney_;
}
inline void CostData::set_costmoney(::google::protobuf::uint32 value) {
  set_has_costmoney();
  costmoney_ = value;
  // @@protoc_insertion_point(field_set:fgame.CostData.costMoney)
}

// optional uint64 costMonth = 3;
inline bool CostData::has_costmonth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CostData::set_has_costmonth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CostData::clear_has_costmonth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CostData::clear_costmonth() {
  costmonth_ = GOOGLE_ULONGLONG(0);
  clear_has_costmonth();
}
inline ::google::protobuf::uint64 CostData::costmonth() const {
  // @@protoc_insertion_point(field_get:fgame.CostData.costMonth)
  return costmonth_;
}
inline void CostData::set_costmonth(::google::protobuf::uint64 value) {
  set_has_costmonth();
  costmonth_ = value;
  // @@protoc_insertion_point(field_set:fgame.CostData.costMonth)
}

// optional uint32 costMonthMoney = 4;
inline bool CostData::has_costmonthmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CostData::set_has_costmonthmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CostData::clear_has_costmonthmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CostData::clear_costmonthmoney() {
  costmonthmoney_ = 0u;
  clear_has_costmonthmoney();
}
inline ::google::protobuf::uint32 CostData::costmonthmoney() const {
  // @@protoc_insertion_point(field_get:fgame.CostData.costMonthMoney)
  return costmonthmoney_;
}
inline void CostData::set_costmonthmoney(::google::protobuf::uint32 value) {
  set_has_costmonthmoney();
  costmonthmoney_ = value;
  // @@protoc_insertion_point(field_set:fgame.CostData.costMonthMoney)
}

// -------------------------------------------------------------------

// ActNoticeDataList

// repeated int32 ActId = 1;
inline int ActNoticeDataList::actid_size() const {
  return actid_.size();
}
inline void ActNoticeDataList::clear_actid() {
  actid_.Clear();
}
inline ::google::protobuf::int32 ActNoticeDataList::actid(int index) const {
  // @@protoc_insertion_point(field_get:fgame.ActNoticeDataList.ActId)
  return actid_.Get(index);
}
inline void ActNoticeDataList::set_actid(int index, ::google::protobuf::int32 value) {
  actid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fgame.ActNoticeDataList.ActId)
}
inline void ActNoticeDataList::add_actid(::google::protobuf::int32 value) {
  actid_.Add(value);
  // @@protoc_insertion_point(field_add:fgame.ActNoticeDataList.ActId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ActNoticeDataList::actid() const {
  // @@protoc_insertion_point(field_list:fgame.ActNoticeDataList.ActId)
  return actid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ActNoticeDataList::mutable_actid() {
  // @@protoc_insertion_point(field_mutable_list:fgame.ActNoticeDataList.ActId)
  return &actid_;
}

// -------------------------------------------------------------------

// NewsBibleData

// optional uint32 BibleId = 1;
inline bool NewsBibleData::has_bibleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewsBibleData::set_has_bibleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewsBibleData::clear_has_bibleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewsBibleData::clear_bibleid() {
  bibleid_ = 0u;
  clear_has_bibleid();
}
inline ::google::protobuf::uint32 NewsBibleData::bibleid() const {
  // @@protoc_insertion_point(field_get:fgame.NewsBibleData.BibleId)
  return bibleid_;
}
inline void NewsBibleData::set_bibleid(::google::protobuf::uint32 value) {
  set_has_bibleid();
  bibleid_ = value;
  // @@protoc_insertion_point(field_set:fgame.NewsBibleData.BibleId)
}

// optional uint32 Pass = 2;
inline bool NewsBibleData::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewsBibleData::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewsBibleData::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewsBibleData::clear_pass() {
  pass_ = 0u;
  clear_has_pass();
}
inline ::google::protobuf::uint32 NewsBibleData::pass() const {
  // @@protoc_insertion_point(field_get:fgame.NewsBibleData.Pass)
  return pass_;
}
inline void NewsBibleData::set_pass(::google::protobuf::uint32 value) {
  set_has_pass();
  pass_ = value;
  // @@protoc_insertion_point(field_set:fgame.NewsBibleData.Pass)
}

// -------------------------------------------------------------------

// UserData

// optional string OpenId = 1;
inline bool UserData::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& UserData::openid() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.OpenId)
  return *openid_;
}
inline void UserData::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.UserData.OpenId)
}
inline void UserData::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.UserData.OpenId)
}
inline void UserData::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.UserData.OpenId)
}
inline ::std::string* UserData::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.UserData.OpenId)
  return openid_;
}
inline ::std::string* UserData::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserData::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.OpenId)
}

// optional uint64 lastSave = 3;
inline bool UserData::has_lastsave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_lastsave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_lastsave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_lastsave() {
  lastsave_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsave();
}
inline ::google::protobuf::uint64 UserData::lastsave() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.lastSave)
  return lastsave_;
}
inline void UserData::set_lastsave(::google::protobuf::uint64 value) {
  set_has_lastsave();
  lastsave_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.lastSave)
}

// optional uint32 gold = 4;
inline bool UserData::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 UserData::gold() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.gold)
  return gold_;
}
inline void UserData::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.gold)
}

// repeated .fgame.LostPointData lostPointData = 13;
inline int UserData::lostpointdata_size() const {
  return lostpointdata_.size();
}
inline void UserData::clear_lostpointdata() {
  lostpointdata_.Clear();
}
inline const ::fgame::LostPointData& UserData::lostpointdata(int index) const {
  // @@protoc_insertion_point(field_get:fgame.UserData.lostPointData)
  return lostpointdata_.Get(index);
}
inline ::fgame::LostPointData* UserData::mutable_lostpointdata(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.UserData.lostPointData)
  return lostpointdata_.Mutable(index);
}
inline ::fgame::LostPointData* UserData::add_lostpointdata() {
  // @@protoc_insertion_point(field_add:fgame.UserData.lostPointData)
  return lostpointdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::LostPointData >&
UserData::lostpointdata() const {
  // @@protoc_insertion_point(field_list:fgame.UserData.lostPointData)
  return lostpointdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::LostPointData >*
UserData::mutable_lostpointdata() {
  // @@protoc_insertion_point(field_mutable_list:fgame.UserData.lostPointData)
  return &lostpointdata_;
}

// optional string inputID = 19;
inline bool UserData::has_inputid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData::set_has_inputid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData::clear_has_inputid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData::clear_inputid() {
  if (inputid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inputid_->clear();
  }
  clear_has_inputid();
}
inline const ::std::string& UserData::inputid() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.inputID)
  return *inputid_;
}
inline void UserData::set_inputid(const ::std::string& value) {
  set_has_inputid();
  if (inputid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inputid_ = new ::std::string;
  }
  inputid_->assign(value);
  // @@protoc_insertion_point(field_set:fgame.UserData.inputID)
}
inline void UserData::set_inputid(const char* value) {
  set_has_inputid();
  if (inputid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inputid_ = new ::std::string;
  }
  inputid_->assign(value);
  // @@protoc_insertion_point(field_set_char:fgame.UserData.inputID)
}
inline void UserData::set_inputid(const char* value, size_t size) {
  set_has_inputid();
  if (inputid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inputid_ = new ::std::string;
  }
  inputid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fgame.UserData.inputID)
}
inline ::std::string* UserData::mutable_inputid() {
  set_has_inputid();
  if (inputid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inputid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fgame.UserData.inputID)
  return inputid_;
}
inline ::std::string* UserData::release_inputid() {
  clear_has_inputid();
  if (inputid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inputid_;
    inputid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserData::set_allocated_inputid(::std::string* inputid) {
  if (inputid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inputid_;
  }
  if (inputid) {
    set_has_inputid();
    inputid_ = inputid;
  } else {
    clear_has_inputid();
    inputid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.inputID)
}

// optional .fgame.AchieveData achieveData = 20;
inline bool UserData::has_achievedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData::set_has_achievedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData::clear_has_achievedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData::clear_achievedata() {
  if (achievedata_ != NULL) achievedata_->::fgame::AchieveData::Clear();
  clear_has_achievedata();
}
inline const ::fgame::AchieveData& UserData::achievedata() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.achieveData)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return achievedata_ != NULL ? *achievedata_ : *default_instance().achievedata_;
#else
  return achievedata_ != NULL ? *achievedata_ : *default_instance_->achievedata_;
#endif
}
inline ::fgame::AchieveData* UserData::mutable_achievedata() {
  set_has_achievedata();
  if (achievedata_ == NULL) achievedata_ = new ::fgame::AchieveData;
  // @@protoc_insertion_point(field_mutable:fgame.UserData.achieveData)
  return achievedata_;
}
inline ::fgame::AchieveData* UserData::release_achievedata() {
  clear_has_achievedata();
  ::fgame::AchieveData* temp = achievedata_;
  achievedata_ = NULL;
  return temp;
}
inline void UserData::set_allocated_achievedata(::fgame::AchieveData* achievedata) {
  delete achievedata_;
  achievedata_ = achievedata;
  if (achievedata) {
    set_has_achievedata();
  } else {
    clear_has_achievedata();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.achieveData)
}

// repeated .fgame.PropItmeSaveData propItmeData = 21;
inline int UserData::propitmedata_size() const {
  return propitmedata_.size();
}
inline void UserData::clear_propitmedata() {
  propitmedata_.Clear();
}
inline const ::fgame::PropItmeSaveData& UserData::propitmedata(int index) const {
  // @@protoc_insertion_point(field_get:fgame.UserData.propItmeData)
  return propitmedata_.Get(index);
}
inline ::fgame::PropItmeSaveData* UserData::mutable_propitmedata(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.UserData.propItmeData)
  return propitmedata_.Mutable(index);
}
inline ::fgame::PropItmeSaveData* UserData::add_propitmedata() {
  // @@protoc_insertion_point(field_add:fgame.UserData.propItmeData)
  return propitmedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::PropItmeSaveData >&
UserData::propitmedata() const {
  // @@protoc_insertion_point(field_list:fgame.UserData.propItmeData)
  return propitmedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::PropItmeSaveData >*
UserData::mutable_propitmedata() {
  // @@protoc_insertion_point(field_mutable_list:fgame.UserData.propItmeData)
  return &propitmedata_;
}

// optional .fgame.LoginData loginData = 24;
inline bool UserData::has_logindata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserData::set_has_logindata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserData::clear_has_logindata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserData::clear_logindata() {
  if (logindata_ != NULL) logindata_->::fgame::LoginData::Clear();
  clear_has_logindata();
}
inline const ::fgame::LoginData& UserData::logindata() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.loginData)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return logindata_ != NULL ? *logindata_ : *default_instance().logindata_;
#else
  return logindata_ != NULL ? *logindata_ : *default_instance_->logindata_;
#endif
}
inline ::fgame::LoginData* UserData::mutable_logindata() {
  set_has_logindata();
  if (logindata_ == NULL) logindata_ = new ::fgame::LoginData;
  // @@protoc_insertion_point(field_mutable:fgame.UserData.loginData)
  return logindata_;
}
inline ::fgame::LoginData* UserData::release_logindata() {
  clear_has_logindata();
  ::fgame::LoginData* temp = logindata_;
  logindata_ = NULL;
  return temp;
}
inline void UserData::set_allocated_logindata(::fgame::LoginData* logindata) {
  delete logindata_;
  logindata_ = logindata;
  if (logindata) {
    set_has_logindata();
  } else {
    clear_has_logindata();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.loginData)
}

// optional .fgame.CostData mCostData = 25;
inline bool UserData::has_mcostdata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserData::set_has_mcostdata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserData::clear_has_mcostdata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserData::clear_mcostdata() {
  if (mcostdata_ != NULL) mcostdata_->::fgame::CostData::Clear();
  clear_has_mcostdata();
}
inline const ::fgame::CostData& UserData::mcostdata() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.mCostData)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return mcostdata_ != NULL ? *mcostdata_ : *default_instance().mcostdata_;
#else
  return mcostdata_ != NULL ? *mcostdata_ : *default_instance_->mcostdata_;
#endif
}
inline ::fgame::CostData* UserData::mutable_mcostdata() {
  set_has_mcostdata();
  if (mcostdata_ == NULL) mcostdata_ = new ::fgame::CostData;
  // @@protoc_insertion_point(field_mutable:fgame.UserData.mCostData)
  return mcostdata_;
}
inline ::fgame::CostData* UserData::release_mcostdata() {
  clear_has_mcostdata();
  ::fgame::CostData* temp = mcostdata_;
  mcostdata_ = NULL;
  return temp;
}
inline void UserData::set_allocated_mcostdata(::fgame::CostData* mcostdata) {
  delete mcostdata_;
  mcostdata_ = mcostdata;
  if (mcostdata) {
    set_has_mcostdata();
  } else {
    clear_has_mcostdata();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.mCostData)
}

// optional uint32 version = 27;
inline bool UserData::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserData::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserData::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData::version() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.version)
  return version_;
}
inline void UserData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.version)
}

// optional uint32 bibleTabItemId = 28;
inline bool UserData::has_bibletabitemid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserData::set_has_bibletabitemid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserData::clear_has_bibletabitemid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserData::clear_bibletabitemid() {
  bibletabitemid_ = 0u;
  clear_has_bibletabitemid();
}
inline ::google::protobuf::uint32 UserData::bibletabitemid() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.bibleTabItemId)
  return bibletabitemid_;
}
inline void UserData::set_bibletabitemid(::google::protobuf::uint32 value) {
  set_has_bibletabitemid();
  bibletabitemid_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.bibleTabItemId)
}

// optional uint32 firstFail = 29;
inline bool UserData::has_firstfail() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserData::set_has_firstfail() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserData::clear_has_firstfail() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserData::clear_firstfail() {
  firstfail_ = 0u;
  clear_has_firstfail();
}
inline ::google::protobuf::uint32 UserData::firstfail() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.firstFail)
  return firstfail_;
}
inline void UserData::set_firstfail(::google::protobuf::uint32 value) {
  set_has_firstfail();
  firstfail_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.firstFail)
}

// optional .fgame.ActNoticeDataList actNoticeDataList = 30;
inline bool UserData::has_actnoticedatalist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserData::set_has_actnoticedatalist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserData::clear_has_actnoticedatalist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserData::clear_actnoticedatalist() {
  if (actnoticedatalist_ != NULL) actnoticedatalist_->::fgame::ActNoticeDataList::Clear();
  clear_has_actnoticedatalist();
}
inline const ::fgame::ActNoticeDataList& UserData::actnoticedatalist() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.actNoticeDataList)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return actnoticedatalist_ != NULL ? *actnoticedatalist_ : *default_instance().actnoticedatalist_;
#else
  return actnoticedatalist_ != NULL ? *actnoticedatalist_ : *default_instance_->actnoticedatalist_;
#endif
}
inline ::fgame::ActNoticeDataList* UserData::mutable_actnoticedatalist() {
  set_has_actnoticedatalist();
  if (actnoticedatalist_ == NULL) actnoticedatalist_ = new ::fgame::ActNoticeDataList;
  // @@protoc_insertion_point(field_mutable:fgame.UserData.actNoticeDataList)
  return actnoticedatalist_;
}
inline ::fgame::ActNoticeDataList* UserData::release_actnoticedatalist() {
  clear_has_actnoticedatalist();
  ::fgame::ActNoticeDataList* temp = actnoticedatalist_;
  actnoticedatalist_ = NULL;
  return temp;
}
inline void UserData::set_allocated_actnoticedatalist(::fgame::ActNoticeDataList* actnoticedatalist) {
  delete actnoticedatalist_;
  actnoticedatalist_ = actnoticedatalist;
  if (actnoticedatalist) {
    set_has_actnoticedatalist();
  } else {
    clear_has_actnoticedatalist();
  }
  // @@protoc_insertion_point(field_set_allocated:fgame.UserData.actNoticeDataList)
}

// optional uint64 ActInformTime = 31;
inline bool UserData::has_actinformtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserData::set_has_actinformtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserData::clear_has_actinformtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserData::clear_actinformtime() {
  actinformtime_ = GOOGLE_ULONGLONG(0);
  clear_has_actinformtime();
}
inline ::google::protobuf::uint64 UserData::actinformtime() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.ActInformTime)
  return actinformtime_;
}
inline void UserData::set_actinformtime(::google::protobuf::uint64 value) {
  set_has_actinformtime();
  actinformtime_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.ActInformTime)
}

// optional uint32 OpenGamePassTip = 32;
inline bool UserData::has_opengamepasstip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserData::set_has_opengamepasstip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserData::clear_has_opengamepasstip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserData::clear_opengamepasstip() {
  opengamepasstip_ = 0u;
  clear_has_opengamepasstip();
}
inline ::google::protobuf::uint32 UserData::opengamepasstip() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.OpenGamePassTip)
  return opengamepasstip_;
}
inline void UserData::set_opengamepasstip(::google::protobuf::uint32 value) {
  set_has_opengamepasstip();
  opengamepasstip_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.OpenGamePassTip)
}

// optional uint32 ChatBuyTip = 33;
inline bool UserData::has_chatbuytip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserData::set_has_chatbuytip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserData::clear_has_chatbuytip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserData::clear_chatbuytip() {
  chatbuytip_ = 0u;
  clear_has_chatbuytip();
}
inline ::google::protobuf::uint32 UserData::chatbuytip() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.ChatBuyTip)
  return chatbuytip_;
}
inline void UserData::set_chatbuytip(::google::protobuf::uint32 value) {
  set_has_chatbuytip();
  chatbuytip_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.ChatBuyTip)
}

// optional uint32 ChatFreeCount = 34;
inline bool UserData::has_chatfreecount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserData::set_has_chatfreecount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserData::clear_has_chatfreecount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserData::clear_chatfreecount() {
  chatfreecount_ = 0u;
  clear_has_chatfreecount();
}
inline ::google::protobuf::uint32 UserData::chatfreecount() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.ChatFreeCount)
  return chatfreecount_;
}
inline void UserData::set_chatfreecount(::google::protobuf::uint32 value) {
  set_has_chatfreecount();
  chatfreecount_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.ChatFreeCount)
}

// optional uint64 ChatTimeLeft = 35;
inline bool UserData::has_chattimeleft() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserData::set_has_chattimeleft() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserData::clear_has_chattimeleft() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserData::clear_chattimeleft() {
  chattimeleft_ = GOOGLE_ULONGLONG(0);
  clear_has_chattimeleft();
}
inline ::google::protobuf::uint64 UserData::chattimeleft() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.ChatTimeLeft)
  return chattimeleft_;
}
inline void UserData::set_chattimeleft(::google::protobuf::uint64 value) {
  set_has_chattimeleft();
  chattimeleft_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.ChatTimeLeft)
}

// optional uint32 SaveLevelTip = 36;
inline bool UserData::has_saveleveltip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserData::set_has_saveleveltip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserData::clear_has_saveleveltip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserData::clear_saveleveltip() {
  saveleveltip_ = 0u;
  clear_has_saveleveltip();
}
inline ::google::protobuf::uint32 UserData::saveleveltip() const {
  // @@protoc_insertion_point(field_get:fgame.UserData.SaveLevelTip)
  return saveleveltip_;
}
inline void UserData::set_saveleveltip(::google::protobuf::uint32 value) {
  set_has_saveleveltip();
  saveleveltip_ = value;
  // @@protoc_insertion_point(field_set:fgame.UserData.SaveLevelTip)
}

// repeated .fgame.NewsBibleData BibleData = 37;
inline int UserData::bibledata_size() const {
  return bibledata_.size();
}
inline void UserData::clear_bibledata() {
  bibledata_.Clear();
}
inline const ::fgame::NewsBibleData& UserData::bibledata(int index) const {
  // @@protoc_insertion_point(field_get:fgame.UserData.BibleData)
  return bibledata_.Get(index);
}
inline ::fgame::NewsBibleData* UserData::mutable_bibledata(int index) {
  // @@protoc_insertion_point(field_mutable:fgame.UserData.BibleData)
  return bibledata_.Mutable(index);
}
inline ::fgame::NewsBibleData* UserData::add_bibledata() {
  // @@protoc_insertion_point(field_add:fgame.UserData.BibleData)
  return bibledata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fgame::NewsBibleData >&
UserData::bibledata() const {
  // @@protoc_insertion_point(field_list:fgame.UserData.BibleData)
  return bibledata_;
}
inline ::google::protobuf::RepeatedPtrField< ::fgame::NewsBibleData >*
UserData::mutable_bibledata() {
  // @@protoc_insertion_point(field_mutable_list:fgame.UserData.BibleData)
  return &bibledata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fgame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SaveData_2eproto__INCLUDED
