#=============================================
#Makefile模板设置, Author: 戴俊华
#=============================================

#---------------------------------------------
#常用函数介绍:
#addprefix: 添加前缀
#addsuffix: 添加后缀
#basename:  去后缀
#wildcard:	遍历
#patsubst:	模式匹配替换
#subst:		指定替换
#@echo：	打印

# make -n 显示make命令项
# make -k 遇到错误不退出继续进行
# make 2>&1|tee xxx.log 把错误信息输出到文件
# 在Linux Shell的设备定义中，“0”表示标准输入，“1”表示标准输出，“2”表示标准出错信息输出.
# 2>&1表示把2设备的信息重定向到1设 备；“|”是管道符号，把标准输出的信息直接传递给后面的命令.
# tee是创建文件并保存信息的工具；xxx.log是文件名

#---------------------------------------------
#~~~~~~编译器选项@
#调试模式
DEBUG = y
#动态库模式
SOLIB = n
#c++编译器
CPP = g++
#c++编译选项,在Release模式可添加 -o(1,2,3)优化选项
CPPFLAGS = -Wall -ansi
#.o中间文件生成选项
OBJFLAGS = -c
#静态库(.a)编译标签,目标格式: {.o}
AR = ar rcs
#动态库(.so)编译标签,目标格式: {.o}
PIC = -fPIC
#动态库(.so)连接标签,目标格式: .so {.o}
SO = -shared -o
#删除命令
RM = -rm -rf
#编译模式(Debug/Release)对标记的修改
ifeq ($(DEBUG), y)
	CPPFLAGS += -g -ggdb
else
	CPPFLAGS += -O3
endif
#.o生成(.a/.so)标记的修改
ifeq ($(SOLIB), y)
	OBJFLAGS += $(PIC)
endif
#设置导出子目录Make
export DEBUG SOLIB CPP CPPFLAGS OBJFLAGS AR PIC SO RM

#---------------------------------------------
#~~~~~~宏定义设置@
#编译宏定义
MACROS = -DLINUX
#编译模式(Debug/Release)对标记的修改
ifeq ($(DEBUG), y)
	MACROS += -D_DEBUG
else
	MACROS += -DNDEBUG
endif
#设置导出子目录Make
export MACROS

#---------------------------------------------
#~~~~~~输出目录设置@
#编译文件输出目录
ifeq ($(DEBUG), y)
	OUT_DIR = debug
else
	OUT_DIR = release
endif
#中间文件(.o)生成路径
OBJ_DIR = $(OUT_DIR)/objs
#目标生成路径
BIN_DIR = $(OUT_DIR)/bin
#创建输出目录结构
$(shell mkdir -p $(OUT_DIR))
$(shell mkdir -p $(OBJ_DIR))
$(shell mkdir -p $(BIN_DIR))
#设置导出子目录Make
export OUT_DIR OBJ_DIR BIN_DIR

#---------------------------------------------
#~~~~~~头文件路径, 链接库路径,链接库设置@
#包含头文件路径定义, 空格分隔
INC_DIRS = -I. -Ihawk/include
#连接库文件(.a & .so, .so再发布的时候需要拷贝到/usr/lib下)路径定义
LIB_DIRS = -L. -Lhawk/lib
#编译链接库列表
LNK_LIBS = -lhawkutil

#---------------------------------------------
#~~~~~~遍历目录设置@
#编译子目录设置,每个目录有对应目录的makefile
SUB_DIRS = src/dir1 src/dir1

#---------------------------------------------
#~~~~~~编译目标设置@
#头文件
INCS = $(wildcard *.h)
#目录源文件
SRCS = $(wildcard $*.cpp)
#编译目标文件
OBJS = $(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(SRCS)))
#编译目标文件,可以是多目标
TARGETS = $(BIN_DIR)/hawk

#---------------------------------------------
#命令必须以TAB键开头
.PHONY: all
all: $(SUB_DIRS) $(TARGETS)

$(TARGETS):$(OBJS)
	$(CPP) $(CPPFLAGS) $(MACROS) $(OBJS) $(LIB_DIRS) $(LINK_LIBS) -o $@
	
$(OBJS):$(SRCS)
	$(CPP) -c $(CPPFLAGS) $(MACROS) $(INC_DIRS) $< -o $(OBJ_DIR)/$@

.depend:$(SRCS)
	$(CPP) -MM $^ > $@

sinclude .depend

#---------------------------------------------
#子目录执行Make
$(SUB_DIRS):ECHO
	$(MAKE) -C $@
ECHO:
	@echo subdirs: $(SUB_DIRS)

#---------------------------------------------
#伪目标,清理生成文件
.PHONY: clean
clean:
	$(RM) $(OUT_DIR)

#=============================================
#实际例子(只列举核心部分,定义部分参照上面模板)
#<1>编译生成静态库(.a)
SRCS = $(wildcard *.cpp)
OBJS = $(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(SRCS)))
LIBS = $(BIN_DIR)/hawk.a

.PHONY: all
all: $(LIBS)

$(LIBS):$(OBJS)
	$(AR) $@ $^

$(OBJS):$(SRCS)
	$(CPP) -c $(CPPFLAGS) $(MACROS) $(INC_DIRS) $< -o $@
	
#<2>编译生成动态库(.so)
SRCS = $(wildcard *.cpp)
OBJS = $(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(SRCS)))
LIBS = $(BIN_DIR)/hawk.so

.PHONY: all
all: $(LIBS)

$(LIBS):$(OBJS)
	$(CPP) $(SO) $(LIB_DIRS) $(LINK_LIBS) $@ $^

$(OBJS):$(SRCS)
	$(CPP) $(CPPFLAGS) $(PIC) $(MACROS) $(INC_DIRS) $< -o $@
	
#<3>子目录编译(.o)
SRCS = $(wildcard *.cpp)
OBJS = $(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(SRCS)))

.PHONY: all
all: $(OBJS)

$(OBJS):$(SRCS)
	$(CPP) -c $(CPPFLAGS) $(MACROS) $(INC_DIRS) $< -o ../$(OBJ_DIR)/$@
	
#<4>可执行文件编译
SRCS = $(wildcard *.cpp)
OBJS = $(patsubst %.cpp,%.o,$(SRCS))
TARGET = $(BIN_DIR)/hawk
#子目录
SUBDIRS = src/dir1 src/dir2
SUBOBJS = $(wildcard $(OBJ_DIR)/*.o)

.PHONY: all
all: $(SUBOBJS) $(OBJS) $(TARGET)
#或者
all: $(SUB_DIRS) $(OBJS) $(TARGET)

FORCE:

$(TARGET):
	$(CPP) $(CPPFLAGS) $(OBJECTS) $(LIB_DIRS) $(LINK_LIBS) -o $@

$(OBJS):$(SRCS)
	$(CPP) -c $(CPPFLAGS) $(MACROS) $(INC_DIRS) $< -o $@
	
$(SUB_DIRS):FORCE
	$(MAKE) -C $@	
	
SUBOBJS:FORCE
	-($(foreach dir,$(SUB_DIRS),$(MAKE) -C $(dir);))
	
	